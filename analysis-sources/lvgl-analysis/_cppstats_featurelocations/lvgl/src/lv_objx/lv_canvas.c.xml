<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_canvas.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_canvas.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_CANVAS</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_canvas"</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_canvas_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design</name></decl>;</decl_stmt>















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_canvas_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"canvas create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_canvas</name> <init>= <expr><call><name>lv_img_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_canvas</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_canvas</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_canvas_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>always_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>=</operator> <name>LV_IMG_CF_TRUE_COLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_img_set_src</name><argument_list>(<argument><expr><name>new_canvas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_canvas</name></expr></argument>, <argument><expr><name>lv_canvas_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"canvas created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_canvas</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>void</name></type> <name>lv_canvas_set_buffer</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>lv_img_cf_t</name></type> <name>cf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>data_size</name></name> <operator>=</operator> <operator>(</operator><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>w</name> <operator>*</operator> <name>h</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_img_set_src</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_canvas_set_px</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_img_buf_set_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>lv_canvas_set_palette</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_img_buf_set_palette</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_canvas_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_canvas_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CANVAS_STYLE_MAIN</name></expr>:</case> <expr_stmt><expr><call><name>lv_img_set_style</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_IMG_STYLE_MAIN</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>












<function><type><name>lv_color_t</name></type> <name>lv_canvas_get_px</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_canvas_get_style</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_CANVAS_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lv_img_buf_get_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>lv_canvas_get_img</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_canvas_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_canvas_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_CANVAS_STYLE_MAIN</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_img_get_style</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_IMG_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>void</name></type> <name>lv_canvas_copy_buf</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>to_copy</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>w</name> <operator>&gt;=</operator> <operator>(</operator><name>lv_coord_t</name><operator>)</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>||</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>&gt;=</operator> <operator>(</operator><name>lv_coord_t</name><operator>)</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_copy_buf: x or y out of the canvas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>px_size</name> <init>= <expr><call><name>lv_img_color_format_get_px_size</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>px</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>px_size</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>px_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>to_copy8</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>to_copy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>data</name><index>[<expr><name>px</name></expr>]</index></name></expr></argument>, <argument><expr><name>to_copy8</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>px_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>px</name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name>px_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_copy8</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <name>px_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><name>void</name></type> <name>lv_canvas_rotate</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>offset_x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>offset_y</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>pivot_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pivot_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_canvas_ext_t</name> <modifier>*</modifier></type> <name>ext_dst</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_canvas_get_style</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_CANVAS_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sinma</name> <init>= <expr><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><operator>-</operator><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cosma</name> <init>= <expr><call><name>lv_trigo_sin</name><argument_list>(<argument><expr><operator>-</operator><name>angle</name> <operator>+</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>img_width</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>img_height</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dest_width</name> <init>= <expr><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dest_height</name> <init>= <expr><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>y</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>offset_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>dest_width</name> <operator>-</operator> <name>offset_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>offset_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>dest_height</name> <operator>-</operator> <name>offset_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>xt</name> <init>= <expr><name>x</name> <operator>-</operator> <name>pivot_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>yt</name> <init>= <expr><name>y</name> <operator>-</operator> <name>pivot_y</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>xs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>cosma</name> <operator>*</operator> <name>xt</name> <operator>-</operator> <name>sinma</name> <operator>*</operator> <name>yt</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_TRIGO_SHIFT</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>pivot_x</name> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ys</name> <init>= <expr><operator>(</operator><operator>(</operator><name>sinma</name> <operator>*</operator> <name>xt</name> <operator>+</operator> <name>cosma</name> <operator>*</operator> <name>yt</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LV_TRIGO_SHIFT</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>pivot_y</name> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>xs_int</name> <init>= <expr><name>xs</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ys_int</name> <init>= <expr><name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>xs_int</name> <operator>&gt;=</operator> <name>img_width</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>xs_int</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ys_int</name> <operator>&gt;=</operator> <name>img_height</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>ys_int</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>xs_fract</name> <init>= <expr><name>xs</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ys_fract</name> <init>= <expr><name>ys</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>xn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>xr</name></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><name>xs_fract</name> <operator>&lt;</operator> <literal type="number">0x70</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xn</name> <operator>=</operator> <name>xs_int</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xr</name> <operator>=</operator> <name>xs_fract</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>xs_fract</name> <operator>&gt;</operator> <literal type="number">0x90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xn</name> <operator>=</operator> <name>xs_int</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xr</name> <operator>=</operator> <operator>(</operator><literal type="number">0xFF</literal> <operator>-</operator> <name>xs_fract</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>xn</name> <operator>=</operator> <name>xs_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xr</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name>xn</name> <operator>&gt;=</operator> <name>img_width</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>xn</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>yr</name></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><name>ys_fract</name> <operator>&lt;</operator> <literal type="number">0x70</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yn</name> <operator>=</operator> <name>ys_int</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yr</name> <operator>=</operator> <name>ys_fract</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>ys_fract</name> <operator>&gt;</operator> <literal type="number">0x90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yn</name> <operator>=</operator> <name>ys_int</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yr</name> <operator>=</operator> <operator>(</operator><literal type="number">0xFF</literal> <operator>-</operator> <name>ys_fract</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>yn</name> <operator>=</operator> <name>ys_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yr</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name>yn</name> <operator>&gt;=</operator> <name>img_height</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>yn</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_color_t</name></type> <name>c_dest_int</name> <init>= <expr><call><name>lv_img_buf_get_px_color</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>xs_int</name></expr></argument>, <argument><expr><name>ys_int</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_img_color_format_is_chroma_keyed</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>ct</name> <init>= <expr><name>LV_COLOR_TRANSP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c_dest_int</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ct</name><operator>.</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>c_dest_xn</name> <init>= <expr><call><name>lv_img_buf_get_px_color</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>xn</name></expr></argument>, <argument><expr><name>ys_int</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>c_dest_yn</name> <init>= <expr><call><name>lv_img_buf_get_px_color</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>xs_int</name></expr></argument>, <argument><expr><name>yn</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>x_dest</name> <init>= <expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>c_dest_int</name></expr></argument>, <argument><expr><name>c_dest_xn</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>y_dest</name> <init>= <expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>c_dest_int</name></expr></argument>, <argument><expr><name>c_dest_yn</name></expr></argument>, <argument><expr><name>yr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>color_res</name> <init>= <expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>x_dest</name></expr></argument>, <argument><expr><name>y_dest</name></expr></argument>, <argument><expr><name>LV_OPA_50</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>offset_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>+</operator> <name>offset_x</name> <operator>&lt;</operator> <name>dest_width</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <name>offset_y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <name>offset_y</name> <operator>&lt;</operator> <name>dest_height</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_img_color_format_has_alpha</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_img_buf_set_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>, <argument><expr><name>color_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_int</name> <init>= <expr><call><name>lv_img_buf_get_px_alpha</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>xs_int</name></expr></argument>, <argument><expr><name>ys_int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_xn</name> <init>= <expr><call><name>lv_img_buf_get_px_alpha</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>xn</name></expr></argument>, <argument><expr><name>ys_int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_yn</name> <init>= <expr><call><name>lv_img_buf_get_px_alpha</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>xs_int</name></expr></argument>, <argument><expr><name>yn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_x</name> <init>= <expr><operator>(</operator><name>opa_int</name> <operator>*</operator> <name>xr</name> <operator>+</operator> <operator>(</operator><name>opa_xn</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>xr</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_y</name> <init>= <expr><operator>(</operator><name>opa_int</name> <operator>*</operator> <name>yr</name> <operator>+</operator> <operator>(</operator><name>opa_yn</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>yr</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_res</name> <init>= <expr><operator>(</operator><name>opa_x</name> <operator>+</operator> <name>opa_y</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>opa_res</name> <operator>&lt;=</operator> <name>LV_OPA_MIN</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>bg_color</name> <init>= <expr><call><name>lv_img_buf_get_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><call><name>lv_img_color_format_has_alpha</name><argument_list>(<argument><expr><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name><operator>.</operator><name>header</name><operator>.</operator><name>cf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>opa_res</name> <operator>&lt;</operator> <name>LV_OPA_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>color_res</name> <operator>=</operator> <call><name>lv_color_mix</name><argument_list>(<argument><expr><name>color_res</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>, <argument><expr><name>opa_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lv_img_buf_set_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>, <argument><expr><name>color_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>bg_opa</name> <init>= <expr><call><name>lv_img_buf_get_px_alpha</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>opa_res</name> <operator>&gt;=</operator> <name>LV_OPA_MAX</name> <operator>||</operator> <name>bg_opa</name> <operator>&lt;=</operator> <name>LV_OPA_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_img_buf_set_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>, <argument><expr><name>color_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_img_buf_set_px_alpha</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>, <argument><expr><name>opa_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>bg_opa</name> <operator>&gt;=</operator> <name>LV_OPA_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_img_buf_set_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>,
<argument><expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>color_res</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>, <argument><expr><name>opa_res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>



<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_res_2</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>opa_res</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>bg_opa</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>opa_res_2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opa_res_2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>ratio</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>opa_res</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <name>opa_res_2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_img_buf_set_px_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>,
<argument><expr><call><name>lv_color_mix</name><argument_list>(<argument><expr><name>color_res</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>, <argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_img_buf_set_px_alpha</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext_dst</name><operator>-&gt;</operator><name>dsc</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offset_y</name></expr></argument>, <argument><expr><name>opa_res_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_canvas_fill_bg</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><call><name>lv_canvas_get_img</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>lv_img_buf_set_px_color</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_canvas_draw_rect</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><call><name>lv_canvas_get_img</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coords</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name></type> <name>disp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name></type> <name>disp_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_disp_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_buf</name><operator>.</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_disp_drv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>.</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>disp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>hor_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>ver_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>ctransp</name> <init>= <expr><name>LV_COLOR_TRANSP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>antialiasing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>refr_ori</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><name>refr_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>lv_canvas_draw_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>max_w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>lv_label_align_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><call><name>lv_canvas_get_img</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coords</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>max_w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name></type> <name>disp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name></type> <name>disp_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_disp_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_buf</name><operator>.</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_disp_drv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>.</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>disp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>hor_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>ver_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>refr_ori</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>flag</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>align</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_LABEL_ALIGN_LEFT</name></expr>:</case> <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>LV_TXT_FLAG_NONE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LABEL_ALIGN_RIGHT</name></expr>:</case> <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LABEL_ALIGN_CENTER</name></expr>:</case> <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>LV_TXT_FLAG_NONE</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><name>refr_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_canvas_draw_img</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><call><name>lv_canvas_get_img</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_header_t</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><call><name>lv_img_decoder_get_info</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_canvas_draw_img: Couldn't get the image data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>coords</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coords</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name></type> <name>disp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name></type> <name>disp_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_disp_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_buf</name><operator>.</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_disp_drv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>.</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>disp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>hor_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>ver_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>refr_ori</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_img</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coords</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><name>refr_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_canvas_draw_line</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>point_cnt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><call><name>lv_canvas_get_img</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name></type> <name>disp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name></type> <name>disp_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_disp_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_buf</name><operator>.</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_disp_drv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>.</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>disp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>hor_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>ver_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>ctransp</name> <init>= <expr><name>LV_COLOR_TRANSP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>antialiasing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>refr_ori</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>circle_style_tmp</name></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>rounded</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circle_style_tmp</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>LV_RADIUS_CIRCLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>circle_area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>point_cnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>lv_draw_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>rounded</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circle_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>circle_style_tmp</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>rounded</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>circle_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>circle_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>circle_style_tmp</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><name>refr_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_canvas_draw_polygon</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>points</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>point_cnt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><call><name>lv_canvas_get_img</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name></type> <name>disp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name></type> <name>disp_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_disp_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_buf</name><operator>.</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_disp_drv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>.</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>disp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>hor_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>ver_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>ctransp</name> <init>= <expr><name>LV_COLOR_TRANSP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>antialiasing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>refr_ori</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_polygon</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>point_cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><name>refr_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>lv_canvas_draw_arc</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start_angle</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>end_angle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_img_dsc_t</name> <modifier>*</modifier></type> <name>dsc</name> <init>= <expr><call><name>lv_canvas_get_img</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mask</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name></type> <name>disp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_disp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_disp_buf_t</name></type> <name>disp_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_disp_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dsc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp_buf</name><operator>.</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_disp_drv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>.</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>disp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>hor_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>ver_res</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_ANTIALIAS</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>ctransp</name> <init>= <expr><name>LV_COLOR_TRANSP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cf</name></name> <operator>==</operator> <name>LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED</name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name> <operator>&amp;&amp;</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name><operator>.</operator><name>full</name></name> <operator>==</operator> <name><name>ctransp</name><operator>.</operator><name>full</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>disp</name><operator>.</operator><name>driver</name><operator>.</operator><name>antialiasing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>refr_ori</name> <init>= <expr><call><name>lv_refr_get_disp_refreshing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_arc</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>start_angle</name></expr></argument>, <argument><expr><name>end_angle</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>LV_OPA_COVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_refr_set_disp_refreshing</name><argument_list>(<argument><expr><name>refr_ori</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_canvas_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
