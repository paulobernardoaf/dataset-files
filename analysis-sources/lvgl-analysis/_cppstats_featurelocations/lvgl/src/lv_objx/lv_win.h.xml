<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_win.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_WIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_WIN_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_WIN</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BTN</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lv_win: lv_btn is required. Enable it in lv_conf.h (LV_USE_BTN 1) "</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LABEL</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lv_win: lv_label is required. Enable it in lv_conf.h (LV_USE_LABEL 1) "</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_IMG</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lv_win: lv_img is required. Enable it in lv_conf.h (LV_USE_IMG 1) "</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_PAGE</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lv_win: lv_page is required. Enable it in lv_conf.h (LV_USE_PAGE 1) "</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_cont.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_btn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_img.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_page.h"</cpp:file></cpp:include>










<typedef>typedef <type><struct>struct
<block>{


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>page</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>header</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>title</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_btn_rel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_btn_pr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>btn_size</name></decl>;</decl_stmt> 
}</block></struct></type> <name>lv_win_ext_t</name>;</typedef>


<enum>enum <block>{
<decl><name>LV_WIN_STYLE_BG</name></decl>, 
<decl><name>LV_WIN_STYLE_CONTENT</name></decl>, 
<decl><name>LV_WIN_STYLE_SB</name></decl>, 
<decl><name>LV_WIN_STYLE_HEADER</name></decl>, 
<decl><name>LV_WIN_STYLE_BTN_REL</name></decl>, 
<decl><name>LV_WIN_STYLE_BTN_PR</name></decl>,
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_win_style_t</name>;</typedef>











<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_win_clean</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_add_btn</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>img_src</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>lv_win_close_event_cb</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>btn</name></decl></parameter>, <parameter><decl><type><name>lv_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_win_set_title</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_win_set_btn_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>lv_win_set_content_size</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_win_set_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_layout_t</name></type> <name>layout</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_win_set_sb_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_sb_mode_t</name></type> <name>sb_mode</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_win_set_anim_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>anim_time</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>lv_win_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_win_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_win_set_drag</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_win_get_title</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_get_content</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_coord_t</name></type> <name>lv_win_get_btn_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_win_get_from_btn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ctrl_btn</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_layout_t</name></type> <name>lv_win_get_layout</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_sb_mode_t</name></type> <name>lv_win_get_sb_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint16_t</name></type> <name>lv_win_get_anim_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_coord_t</name></type> <name>lv_win_get_width</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_win_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_win_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lv_win_get_drag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lv_obj_get_drag</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>lv_win_focus</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>anim_en</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_win_scroll_hor</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>dist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><operator>(</operator><name>lv_win_ext_t</name> <operator>*</operator><operator>)</operator><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_page_scroll_hor</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lv_win_scroll_ver</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>dist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_win_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><operator>(</operator><name>lv_win_ext_t</name> <operator>*</operator><operator>)</operator><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_page_scroll_ver</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
