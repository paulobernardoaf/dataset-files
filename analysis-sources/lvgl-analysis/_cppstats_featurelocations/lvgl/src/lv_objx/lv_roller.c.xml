<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_roller.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_roller.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ROLLER</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_roller"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LV_ROLLER_DEF_ANIM_TIME</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_ROLLER_DEF_ANIM_TIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_roller_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_roller_scrl_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller_scrl</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_roller_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refr_position</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>animen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refr_height</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>inf_normalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>roller_scrl</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>scroll_anim_ready_cb</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>draw_bg</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_scrl_signal</name></decl>;</decl_stmt>















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_roller_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"roller create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_roller</name> <init>= <expr><call><name>lv_ddlist_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_roller</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_scrl_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_scrl_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_roller_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>draw_arrow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>LV_ROLLER_MODE_NORMAL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>lv_roller_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>lv_roller_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_drag</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lv_ddlist_open</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ddlist_set_anim_time</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>LV_ROLLER_DEF_ANIM_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ddlist_set_stay_open</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_roller_set_visible_row_count</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>, <argument><expr><name>LV_LABEL_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>lv_roller_scrl_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_roller_set_style</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>LV_ROLLER_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>roller</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_roller_set_style</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>LV_ROLLER_STYLE_SEL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>roller</name><operator>.</operator><name>sel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_ddlist_open</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>lv_roller_scrl_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"roller created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_roller</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>lv_roller_set_options</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>lv_roller_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_STR</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_ROLLER_MODE_NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>LV_ROLLER_MODE_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ddlist_set_options</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>refr_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_position</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_ANIM_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>LV_ROLLER_MODE_INIFINITE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>opt_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>opt_extra</name> <init>= <expr><call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>opt_len</name> <operator>*</operator> <name>LV_ROLLER_INF_PAGES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LV_ROLLER_INF_PAGES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt_extra</name><index>[<expr><name>opt_len</name> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_extra</name><index>[<expr><name>opt_len</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>opt_extra</name><index>[<expr><name>opt_len</name> <operator>*</operator> <name>LV_ROLLER_INF_PAGES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ddlist_set_options</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>opt_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>opt_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>refr_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>real_id_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>option_cnt</name></name> <operator>/</operator> <name>LV_ROLLER_INF_PAGES</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_roller_set_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>LV_ROLLER_INF_PAGES</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>real_id_cnt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_roller_set_align</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>lv_label_align_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_LABEL_ALIGN_LEFT</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_LEFT_MID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LABEL_ALIGN_CENTER</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_CENTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_LABEL_ALIGN_RIGHT</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LV_ALIGN_IN_RIGHT_MID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_roller_set_selected</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>sel_opt</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>anim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><name>anim</name> <operator>=</operator> <name>LV_ANIM_OFF</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>lv_roller_get_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sel_opt</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_ddlist_set_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>sel_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_position</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_roller_set_visible_row_count</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>row_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_label</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_line_space</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>row_cnt</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>row_cnt</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_ddlist_set_fix_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>row_cnt</name> <operator>+</operator>
<name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>*</operator> <name>n_line_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_roller_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>lv_roller_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_ROLLER_STYLE_BG</name></expr>:</case> <expr_stmt><expr><call><name>lv_obj_set_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_ROLLER_STYLE_SEL</name></expr>:</case> <expr_stmt><expr><call><name>lv_ddlist_set_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_DDLIST_STYLE_SEL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>










<function><type><name>uint16_t</name></type> <name>lv_roller_get_selected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LV_ROLLER_MODE_INIFINITE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>real_id_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>option_cnt</name></name> <operator>/</operator> <name>LV_ROLLER_INF_PAGES</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>lv_ddlist_get_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>real_id_cnt</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>lv_ddlist_get_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>lv_label_align_t</name></type> <name>lv_roller_get_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_roller_get_hor_fit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lv_page_get_scrl_fit_left</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_roller_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>lv_roller_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_ROLLER_STYLE_BG</name></expr>:</case> <return>return <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>LV_ROLLER_STYLE_SEL</name></expr>:</case> <return>return <expr><call><name>lv_ddlist_get_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_DDLIST_STYLE_SEL</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_roller_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_bg</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_roller_get_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_ROLLER_STYLE_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>rect_area</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>font_h</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>font_h</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y1</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>rect_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>font_h</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>roller_coords</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roller_coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_get_inner_coords</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roller_coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>roller_coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>roller_coords</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_style</name></name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_roller_get_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_ROLLER_STYLE_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_area_t</name></type> <name>rect_area</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>font_h</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>font_h</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y1</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>rect_area</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>font_h</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>mask_sel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>area_ok</name></decl>;</decl_stmt>
<expr_stmt><expr><name>area_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask_sel</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>area_ok</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>sel_style</name> <init>= <expr><call><name>lv_roller_get_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_ROLLER_STYLE_SEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_style_t</name></type> <name>new_style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_txt_flag_t</name></type> <name>txt_align</name> <init>= <expr><name>LV_TXT_FLAG_NONE</name></expr></init></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>label_align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>LV_LABEL_ALIGN_CENTER</name> <operator>==</operator> <name>label_align</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>txt_align</name> <operator>|=</operator> <name>LV_TXT_FLAG_CENTER</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>LV_LABEL_ALIGN_RIGHT</name> <operator>==</operator> <name>label_align</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>txt_align</name> <operator>|=</operator> <name>LV_TXT_FLAG_RIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_style</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_style</name><operator>.</operator><name>text</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>sel_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_style</name><operator>.</operator><name>text</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name><name>sel_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>opa</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_sel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>,
<argument><expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt_align</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_roller_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name> <init>= <expr><name>LV_RES_OK</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>!=</operator> <name>LV_SIGNAL_CONTROL</name> <operator>&amp;&amp;</operator> <name>sign</name> <operator>!=</operator> <name>LV_SIGNAL_FOCUS</name> <operator>&amp;&amp;</operator> <name>sign</name> <operator>!=</operator> <name>LV_SIGNAL_DEFOCUS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>refr_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refr_position</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>refr_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>lv_ddlist_set_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_position</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_FOCUS</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>editing</name> <init>= <expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>editing</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_position</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_DEFOCUS</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refr_position</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>option_cnt</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ori_id</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>lv_roller_set_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name> <operator>=</operator> <name>ori_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ori_id</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>lv_roller_set_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name> <operator>=</operator> <name>ori_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_roller_scrl_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller_scrl</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_scrl_signal</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>indev</name> <init>= <expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LV_RES_INV</name></expr>;</return></block_content></block></if></if_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_label</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_DRAG_END</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>label_y1</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>label_unit</name> <init>= <expr><name>font_h</name> <operator>+</operator> <name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>mid</name> <operator>-</operator> <name>label_y1</name> <operator>+</operator> <name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>label_unit</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>id</name> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>option_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>option_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id_ori</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lv_event_send</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>lv_indev_is_dragging</name><argument_list>(<argument><expr><name>indev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>editing</name> <init>= <expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>editing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_group_set_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>refr_position</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_bg</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_roller_get_style</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name>LV_ROLLER_STYLE_BG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>half_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>half_roller</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>union_ok</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>half_roller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>roller</name><operator>-&gt;</operator><name>coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>half_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>half_roller</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x2</name></name> <operator>-=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>half_roller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>half_mask</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x1</name></name> <operator>-=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y2</name></name> <operator>+</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>roller</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y1</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <call><name>lv_area_intersect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>half_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>half_roller</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>x2</name></name> <operator>-=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y2</name></name> <operator>-=</operator> <name><name>roller</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>half_roller</name><operator>.</operator><name>y1</name></name> <operator>-=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>union_ok</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_style_t</name></type> <name>style_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_style_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_tmp</name><operator>.</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>half_roller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>half_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style_tmp</name></expr></argument>, <argument><expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>refr_position</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>, <parameter><decl><type><name>lv_anim_enable_t</name></type> <name>anim_en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><name>anim_en</name> <operator>=</operator> <name>LV_ANIM_OFF</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller_scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_label</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>anim_time</name> <init>= <expr><call><name>lv_roller_get_anim_time</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name>anim_en</name> <operator>==</operator> <name>LV_ANIM_OFF</name> <operator>||</operator> <name>anim_time</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inf_normalize</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_y1</name> <init>=
<expr><name>id</name> <operator>*</operator> <operator>(</operator><name>font_h</name> <operator>+</operator> <name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name><operator>)</operator> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>roller_scrl</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_y</name> <init>= <expr><operator>-</operator><name>line_y1</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>font_h</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>anim_en</name> <operator>==</operator> <name>LV_ANIM_OFF</name> <operator>||</operator> <name>anim_time</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>, <argument><expr><name>new_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>roller_scrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>new_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>scroll_anim_ready_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>anim_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>refr_height</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_align_t</name></type> <name>obj_align</name> <init>= <expr><name>LV_ALIGN_IN_LEFT_MID</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>label_align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>LV_LABEL_ALIGN_CENTER</name> <operator>==</operator> <name>label_align</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>obj_align</name> <operator>=</operator> <name>LV_ALIGN_CENTER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>LV_LABEL_ALIGN_RIGHT</name> <operator>==</operator> <name>label_align</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>obj_align</name> <operator>=</operator> <name>LV_ALIGN_IN_RIGHT_MID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj_align</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>lv_obj_set_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>lv_ddlist_set_selected</name><argument_list>(<argument><expr><name>roller</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>inf_normalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>scrl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller_scrl</name> <init>= <expr><operator>(</operator><name>lv_obj_t</name> <operator>*</operator><operator>)</operator><name>scrl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>roller</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_roller_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LV_ROLLER_MODE_INIFINITE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>real_id_cnt</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>option_cnt</name></name> <operator>/</operator> <name>LV_ROLLER_INF_PAGES</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>%</operator> <name>real_id_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>+=</operator> <operator>(</operator><name>LV_ROLLER_INF_PAGES</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>real_id_cnt</name></expr>;</expr_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_label</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>roller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>line_y1</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>sel_opt_id</name></name> <operator>*</operator> <operator>(</operator><name>font_h</name> <operator>+</operator> <name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name><operator>)</operator> <operator>+</operator>
<name><name>ext</name><operator>-&gt;</operator><name>ddlist</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name><name>roller_scrl</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>new_y</name> <init>= <expr><operator>-</operator><name>line_y1</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>font_h</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>roller_scrl</name></expr></argument>, <argument><expr><name>new_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scroll_anim_ready_cb</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>inf_normalize</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
