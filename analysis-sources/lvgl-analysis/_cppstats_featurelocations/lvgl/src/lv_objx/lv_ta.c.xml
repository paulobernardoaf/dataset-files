<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_objx\lv_ta.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_ta.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_TA</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_refr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_themes/lv_theme.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_anim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_txt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_OBJX_NAME</name></cpp:macro> <cpp:value>"lv_ta"</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_TA_DEF_CURSOR_BLINK_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TA_DEF_CURSOR_BLINK_TIME</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_TA_DEF_PWD_SHOW_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TA_DEF_PWD_SHOW_TIME</name></cpp:macro> <cpp:value>1500</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TA_DEF_WIDTH</name></cpp:macro> <cpp:value>(2 * LV_DPI)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TA_DEF_HEIGHT</name></cpp:macro> <cpp:value>(1 * LV_DPI)</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_ta_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lv_ta_scrollable_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_ta_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_ta_scrollable_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cursor_blink_anim</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>show</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pwd_char_hider_anim</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pwd_char_hider_anim_ready</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pwd_char_hider</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>char_is_accepted</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_cursor_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style_res</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refr_cursor_area</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>placeholder_update</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_cursor_position_on_click</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>click_source</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>ancestor_design</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_design_cb_t</name></type> <name>scrl_design</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>ancestor_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lv_signal_cb_t</name></type> <name>scrl_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ta_insert_replace</name></decl>;</decl_stmt>















<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_ta_create</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>par</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_TRACE</name><argument_list>(<argument><expr><literal type="string">"text area create started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>new_ta</name> <init>= <expr><call><name>lv_page_create</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_ta</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ancestor_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ancestor_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ancestor_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>scrl_signal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scrl_signal</name> <operator>=</operator> <call><name>lv_obj_get_signal_cb</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>scrl_design</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scrl_design</name> <operator>=</operator> <call><name>lv_obj_get_design_cb</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_allocate_ext_attr</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_ta_ext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_show_time</name></name> <operator>=</operator> <name>LV_TA_DEF_PWD_SHOW_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>max_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name> <operator>=</operator> <name>LV_TA_DEF_CURSOR_BLINK_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>click_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>LV_CURSOR_LINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_en</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_show_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>lv_ta_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_signal_cb</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lv_ta_scrollable_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>lv_ta_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name><operator>.</operator><name>scrl</name></name></expr></argument>, <argument><expr><name>lv_ta_scrollable_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><literal type="string">"Text area"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_click</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_size</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_TA_DEF_WIDTH</name></expr></argument>, <argument><expr><name>LV_TA_DEF_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_set_sb_mode</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_SB_MODE_DRAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SCRL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_transp_tight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_theme_t</name> <modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>lv_theme_get_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_set_style</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_TA_STYLE_BG</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>ta</name><operator>.</operator><name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_set_style</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_TA_STYLE_SB</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>ta</name><operator>.</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_set_style</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_TA_STYLE_BG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv_style_pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_design_cb</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>page</name><operator>.</operator><name>scrl</name></name></expr></argument>, <argument><expr><name>lv_ta_scrollable_design</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>copy_ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>pwd_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>accapted_chars</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>max_length</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>max_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>style</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>copy_ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>pwd_char_hider</name><argument_list>( <argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>copy_ext</name><operator>-&gt;</operator><name>placeholder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>copy_ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name> <init>= <expr><call><name>lv_mem_get_size</name><argument_list>(<argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name><name>copy_ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>copy_ext</name><operator>-&gt;</operator><name>one_line</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_ta_set_one_line</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_ta_set_style</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>, <argument><expr><name>LV_TA_STYLE_CURSOR</name></expr></argument>, <argument><expr><call><name>lv_ta_get_style</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>LV_TA_STYLE_CURSOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_obj_refresh_style</name><argument_list>(<argument><expr><name>new_ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>new_ta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>cursor_blink_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_step</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"text area created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_ta</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>lv_ta_add_char</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>letter_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>letter_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>letter_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ta_insert_replace</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_EVENT_INSERT</name></expr></argument>, <argument><expr><name>letter_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ta_insert_replace</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ta_insert_replace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ta_insert_replace</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>letter_buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_add_text</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>ta_insert_replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"Text area: line break ignored in one-line mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c_uni</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>char_is_accepted</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>c_uni</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"Character is no accepted by the text area (too long text or not in the "</literal>
<literal type="string">"accepted list)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>edge_flash_en</name> <init>= <expr><call><name>lv_ta_get_edge_flash</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_ta_set_edge_flash</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>pwd_char_hider</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>lv_label_ins_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>letter_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lv_ta_clear_selection</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_txt_ins</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>letter_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>ta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>pwd_char_hider_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>pwd_show_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>pwd_char_hider_anim_ready</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_step</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pwd_char_hider</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_ta_set_edge_flash</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>edge_flash_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>placeholder_update</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_add_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ta_insert_replace</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_EVENT_INSERT</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ta_insert_replace</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ta_insert_replace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ta_insert_replace</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_add_text</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>ta_insert_replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>pwd_char_hider</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>(<expr><call><name>lv_ta_get_accepted_chars</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lv_ta_get_max_length</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><call><name>lv_txt_unicode_to_encoded</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>edge_flash_en</name> <init>= <expr><call><name>lv_ta_get_edge_flash</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_ta_set_edge_flash</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_label_ins_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_clear_selection</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_txt_ins</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>ta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>pwd_char_hider_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>pwd_show_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>pwd_char_hider_anim_ready</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_step</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pwd_char_hider</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lv_txt_get_encoded_length</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_ta_set_edge_flash</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>edge_flash_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>placeholder_update</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_ta_del_char</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur_pos</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cur_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ta_insert_replace</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>del_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>LV_KEY_DEL</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_EVENT_INSERT</name></expr></argument>, <argument><expr><name>del_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ta_insert_replace</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ta_insert_replace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ta_insert_replace</name></expr></argument>, <argument><expr><name>del_buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_add_text</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>ta_insert_replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>label_txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_cut</name><argument_list>(<argument><expr><name>label_txt</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>label_txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_clear_selection</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_pos</name> <init>= <expr><call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_txt_cut</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>label_txt</name><index>[<expr><name>byte_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>placeholder_update</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_ta_del_char_forward</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cp</name> <init>= <expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cp</name> <operator>!=</operator> <call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_ta_del_char</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_ta_set_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>lv_ta_clear_selection</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>lv_ta_get_accepted_chars</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lv_ta_get_max_length</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_TA_CURSOR_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><call><name>lv_txt_unicode_to_encoded</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_TA_CURSOR_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <call><name>lv_mem_realloc</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>ta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>pwd_char_hider_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>pwd_show_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>pwd_char_hider_anim_ready</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_step</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pwd_char_hider</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>placeholder_update</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_event_send</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_EVENT_VALUE_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_placeholder_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_NULL</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name> <operator>=</operator> <call><name>lv_label_create</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lv_ta_set_text_align</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>placeholder_update</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_ta_set_cursor_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name> <init>= <expr><call><name>lv_txt_get_encoded_length</name><argument_list>(<argument><expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>len</name> <operator>||</operator> <name>pos</name> <operator>==</operator> <name>LV_TA_CURSOR_LAST</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label_par</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>cur_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font_p</name> <init>= <expr><name><name>style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>label_cords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>ta_cords</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_label_get_letter_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ta_cords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>label_cords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_y</name><argument_list>(<argument><expr><name>label_par</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cur_pos</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>label_par</name></expr></argument>, <argument><expr><operator>-</operator><name><name>cur_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>label_cords</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <name><name>cur_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>font_h</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>&gt;</operator> <name><name>ta_cords</name><operator>.</operator><name>y2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_y</name><argument_list>(<argument><expr><name>label_par</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>cur_pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>font_h</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_x</name><argument_list>(<argument><expr><name>label_par</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cur_pos</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name>font_h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name>label_par</name></expr></argument>, <argument><expr><operator>-</operator><name><name>cur_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>font_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>label_cords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name><name>cur_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>font_h</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>&gt;</operator> <name><name>ta_cords</name><operator>.</operator><name>x2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_x</name><argument_list>(<argument><expr><name>label_par</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>cur_pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>font_h</name> <operator>+</operator> <name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>+</operator>
<name><name>style</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name> <operator>=</operator> <name><name>cur_pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>ta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>cursor_blink_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_step</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_cursor_type</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_cursor_type_t</name></type> <name>cur_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>cur_type</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>cur_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_cursor_click_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>click_pos</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_pwd_mode</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>==</operator> <name>en</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>en</name> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>encoded_len</name> <init>= <expr><call><name>lv_txt_get_encoded_length</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>encoded_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_clear_selection</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>en</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_clear_selection</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>=</operator> <ternary><condition><expr><name>en</name> <operator>==</operator> <name>false</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_one_line</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name> <operator>==</operator> <name>en</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>lv_label_align_t</name></type> <name>old_align</name> <init>= <expr><call><name>lv_label_get_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>en</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_ta</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_scrl</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_label</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>font_h</name> <operator>+</operator> <name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>+</operator>
<name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_ta</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_TA_DEF_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>placeholder_update</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_ta_set_text_align</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>old_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_ta_set_text_align</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_label_align_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>label</name> <init>= <expr><call><name>lv_ta_get_label</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>align</name> <operator>==</operator> <name>LV_LABEL_ALIGN_LEFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_FIT_TIGHT</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_long_mode</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>LV_LABEL_LONG_CROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_page_set_scrl_fit2</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>, <argument><expr><name>LV_FIT_FLOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>lv_page_get_fit_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_accepted_chars</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_max_length</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>max_length</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>lv_ta_set_insert_replace</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ta</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>ta_insert_replace</name> <operator>=</operator> <name>txt</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_ta_set_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_ta_style_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_TA_STYLE_BG</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TA_STYLE_SB</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TA_STYLE_EDGE_FLASH</name></expr>:</case> <expr_stmt><expr><call><name>lv_page_set_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_EDGE_FLASH</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TA_STYLE_CURSOR</name></expr>:</case>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_refresh_ext_draw_pad</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LV_TA_STYLE_PLACEHOLDER</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>LV_LABEL_STYLE_MAIN</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_text_sel</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_en</name></name> <operator>=</operator> <name>en</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>en</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_ta_clear_selection</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ta</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>en</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_pwd_show_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_show_time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_ta_set_cursor_blink_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>var</name></name> <operator>=</operator> <name>ta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exec_cb</name></name> <operator>=</operator> <operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>cursor_blink_anim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>act_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>ready_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>repeat_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>playback_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_step</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_anim_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_anim_exec_xcb_t</name><operator>)</operator><name>cursor_blink_anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>










<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_ta_get_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>txt</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_ta_get_placeholder_text</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>txt</name> <operator>=</operator> <call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>txt</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_ta_get_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_ta_get_cursor_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_cursor_type_t</name></type> <name>lv_ta_get_cursor_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_ta_get_cursor_click_pos</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>click_pos</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_ta_get_pwd_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_ta_get_one_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_ta_get_accepted_chars</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_ta_get_max_length</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>max_length</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>lv_ta_get_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_ta_style_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LV_TA_STYLE_BG</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_BG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TA_STYLE_SB</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_SB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TA_STYLE_EDGE_FLASH</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_page_get_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_PAGE_STYLE_EDGE_FLASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TA_STYLE_CURSOR</name></expr>:</case> <expr_stmt><expr><name>style</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>style</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LV_TA_STYLE_PLACEHOLDER</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>lv_label_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>LV_LABEL_STYLE_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default> <expr_stmt><expr><name>style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_ta_text_is_selected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>lv_label_get_text_sel_start</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name> <operator>||</operator>
<call><name>lv_label_get_text_sel_end</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ta</name></expr>;</expr_stmt> 
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>lv_ta_get_text_sel_en</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_en</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ta</name></expr>;</expr_stmt> 
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_ta_get_pwd_show_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_show_time</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint16_t</name></type> <name>lv_ta_get_cursor_blink_time</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>blink_time</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>lv_ta_clear_selection</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_label_get_text_sel_start</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name> <operator>||</operator>
<call><name>lv_label_get_text_sel_end</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_label_set_text_sel_start</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_text_sel_end</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ta</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_ta_cursor_right</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cp</name> <init>= <expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_ta_cursor_left</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cp</name> <init>= <expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>cp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_ta_cursor_down</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>pos</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>lv_label_get_letter_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>label_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font_p</name> <init>= <expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>font_h</name> <operator>+</operator> <name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>new_cur_pos</name> <init>= <expr><call><name>lv_label_get_letter_on</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cur_valid_x_tmp</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>new_cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name> <operator>=</operator> <name>cur_valid_x_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_ta_cursor_up</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LV_ASSERT_OBJ</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>pos</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>lv_label_get_letter_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>label_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_font_t</name> <modifier>*</modifier></type> <name>font</name> <init>= <expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>font_h</name> <operator>+</operator> <name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>new_cur_pos</name> <init>= <expr><call><name>lv_label_get_letter_on</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>cur_valid_x_tmp</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>new_cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>valid_x</name></name> <operator>=</operator> <name>cur_valid_x_tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_ta_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ancestor_design</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>bool</name></type> <name>lv_ta_scrollable_design</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>lv_design_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_COVER_CHK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>scrl_design</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_MAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>scrl_design</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>LV_DESIGN_DRAW_POST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scrl_design</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_NONE</name> <operator>||</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CURSOR_HIDDEN</name><operator>)</operator> <operator>||</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>cur_style</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_cursor_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_area_t</name></type> <name>cur_area</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_area</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_opa_t</name></type> <name>opa_scale</name> <init>= <expr><call><name>lv_obj_get_opa_scale</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_LINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_BLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>letter_buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>letter_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>txt_byte_pos</name></name></expr>]</index></name></expr></argument>, <argument><expr><call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>txt_byte_pos</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_draw_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>, <argument><expr><name>letter_buf</name></expr></argument>, <argument><expr><name>LV_TXT_FLAG_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>lv_obj_get_base_dir</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_OUTLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_TRANSP</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_UNDERLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_draw_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_area</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_style</name></expr></argument>, <argument><expr><name>opa_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_ta_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ancestor_signal</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>LV_OBJX_NAME</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CLEANUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_STYLE_CHG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_ta</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_scrl</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_label</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>font_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_height</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>font_h</name> <operator>+</operator> <name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>style_ta</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>+</operator>
<name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>lv_page_get_fit_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><call><name>lv_page_get_fit_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_scrl</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>lv_page_get_fit_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_scrl</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><call><name>lv_page_get_fit_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CONTROL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_cursor_right</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_cursor_left</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_cursor_up</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_cursor_down</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_BACKSPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_del_char</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_DEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_del_char_forward</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_HOME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <name>LV_KEY_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>LV_TA_CURSOR_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_add_char</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_EDITABLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type> <name>editable</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>editable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_DEFOCUS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_cursor_type_t</name></type> <name>cur_type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_type</name> <operator>=</operator> <call><name>lv_ta_get_cursor_type</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>cur_type</name> <operator>|</operator> <name>LV_CURSOR_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_FOCUS</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_GROUP</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_cursor_type_t</name></type> <name>cur_type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_type</name> <operator>=</operator> <call><name>lv_ta_get_cursor_type</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_group_t</name> <modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>lv_obj_get_group</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>editing</name> <init>= <expr><call><name>lv_group_get_editing</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_indev_type_t</name></type> <name>indev_type</name> <init>= <expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><call><name>lv_indev_get_act</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>indev_type</name> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>editing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>cur_type</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>LV_CURSOR_HIDDEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>cur_type</name> <operator>|</operator> <name>LV_CURSOR_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_ta_set_cursor_type</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>cur_type</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>LV_CURSOR_HIDDEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name> <operator>||</operator>
<name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_cursor_position_on_click</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_indev_t</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>lv_res_t</name></type> <name>lv_ta_scrollable_signal</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_res_t</name></type> <name>res</name></decl>;</decl_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>scrl_signal</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_RES_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_GET_TYPE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_obj_handle_get_type_signal</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name> <init>= <expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_REFR_EXT_DRAW_PAD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_label</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>font_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>scrl</name><operator>-&gt;</operator><name>ext_draw_pad</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>scrl</name><operator>-&gt;</operator><name>ext_draw_pad</name></name></expr></argument>, <argument><expr><name><name>style_label</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name> <operator>+</operator> <name>font_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_CORD_CHG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>lv_obj_get_height</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_scrl</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>lv_page_get_fit_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>refr_cursor_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name> <operator>||</operator>
<name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_cursor_position_on_click</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><operator>(</operator><name>lv_indev_t</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>






<function><type><specifier>static</specifier> <name>void</name></type> <name>cursor_blink_anim</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>show</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>show</name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>state</name></name> <operator>=</operator> <ternary><condition><expr><name>show</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>LV_CURSOR_NONE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>LV_CURSOR_HIDDEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>pwd_char_hider_anim</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ta</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>pwd_char_hider_anim_ready</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pwd_char_hider</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type> <name>pwd_char_hider</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>pwd_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>len</name> <init>= <expr><call><name>lv_txt_get_encoded_length</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>refr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>refr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>refr</name> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_label_set_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>char_is_accepted</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>max_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>max_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>lv_txt_get_encoded_length</name><argument_list>(<argument><expr><call><name>lv_ta_get_text</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>max_length</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>accapted_chars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_cursor_style</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_style_t</name> <modifier>*</modifier></type> <name>style_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>label_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>style</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><name>style_res</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lv_style_copy</name><argument_list>(<argument><expr><name>style_res</name></expr></argument>, <argument><expr><name>label_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_color_t</name></type> <name>clv_color_tmp</name> <init>= <expr><name><name>style_res</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>color</name></name> <operator>=</operator>
<name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>main_color</name></name> <operator>=</operator> <name>clv_color_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>grad_color</name></name> <operator>=</operator> <name>clv_color_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>clv_color_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>border</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>shadow</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>opa</name></name> <operator>=</operator> <name>LV_OPA_COVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>style_res</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refr_cursor_area</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>label_style</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_style_t</name></type> <name>cur_style</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_cursor_style</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur_pos</name> <init>= <expr><call><name>lv_ta_get_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>lv_label_get_text</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>byte_pos</name> <operator>=</operator> <call><name>lv_txt_encoded_get_byte_id</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>byte_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>letter_h</name> <init>= <expr><call><name>lv_font_get_line_height</name><argument_list>(<argument><expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>letter_w</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>letter</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>letter</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>letter_w</name> <operator>=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>letter_w</name> <operator>=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>letter_pos</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_label_get_letter_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>letter_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <name>letter_w</name> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x2</name></name> <operator>&amp;&amp;</operator> <name><name>ext</name><operator>-&gt;</operator><name>one_line</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>lv_label_get_align</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LV_LABEL_ALIGN_RIGHT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>letter_h</name> <operator>+</operator> <name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>line_space</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>byte_pos</name> <operator>+=</operator> <call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>byte_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txt</name><index>[<expr><name>byte_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>letter</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>letter</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>letter_w</name> <operator>=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>letter_w</name> <operator>=</operator> <call><name>lv_font_get_glyph_width</name><argument_list>(<argument><expr><name><name>label_style</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>txt_byte_pos</name></name> <operator>=</operator> <name>byte_pos</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>lv_area_t</name></type> <name>cur_area</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_LINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator>
<name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name> <operator>-</operator> <operator>(</operator><name><name>cur_style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>cur_style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>+</operator> <operator>(</operator><name><name>cur_style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>letter_h</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_BLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>+</operator> <name>letter_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>letter_h</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_OUTLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>+</operator> <name>letter_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>letter_h</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_UNDERLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x1</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>letter_h</name> <operator>-</operator> <operator>(</operator><name><name>cur_style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>x2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>right</name></name> <operator>+</operator> <name>letter_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_area</name><operator>.</operator><name>y2</name></name> <operator>=</operator> <name><name>letter_pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur_style</name><operator>.</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>letter_h</name> <operator>+</operator> <operator>(</operator><name><name>cur_style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>cur_style</name><operator>.</operator><name>line</name><operator>.</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>lv_area_t</name></type> <name>area_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_area_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>x2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_tmp</name><operator>.</operator><name>y2</name></name> <operator>+=</operator> <name><name>ext</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate_area</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>placeholder_update</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ta_text</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ta_text</name> <operator>=</operator> <call><name>lv_ta_get_text</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ta_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scrl</name> <init>= <expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lv_style_t</name> <modifier>*</modifier></type> <name>style_scrl</name> <init>= <expr><call><name>lv_obj_get_style</name><argument_list>(<argument><expr><name>scrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>style_scrl</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>padding</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_set_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><call><name>lv_page_get_fit_width</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lv_obj_set_hidden</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_cursor_position_on_click</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>lv_signal_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>lv_indev_t</name> <modifier>*</modifier></type> <name>click_source</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>click_source</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_ta_ext_t</name> <modifier>*</modifier></type> <name>ext</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>click_pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>LV_CURSOR_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>click_source</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_INDEV_TYPE_KEYPAD</name> <operator>||</operator>
<call><name>lv_indev_get_type</name><argument_list>(<argument><expr><name>click_source</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LV_INDEV_TYPE_ENCODER</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_area_t</name></type> <name>label_coords</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_obj_get_coords</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>label_coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_point_t</name></type> <name>point_act</name></decl>, <decl><type ref="prev"/><name>vect_act</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_indev_get_point</name><argument_list>(<argument><expr><name>click_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_indev_get_vect</name><argument_list>(<argument><expr><name>click_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vect_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>point_act</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>point_act</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 
<decl_stmt><decl><type><name>lv_point_t</name></type> <name>rel_pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rel_pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>point_act</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>label_coords</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rel_pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>point_act</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>label_coords</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>label_width</name> <init>= <expr><call><name>lv_obj_get_width</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>char_id_at_click</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LABEL_TEXT_SEL</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_label_ext_t</name> <modifier>*</modifier></type> <name>ext_label</name> <init>= <expr><call><name>lv_obj_get_ext_attr</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>click_outside_label</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rel_pos</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_id_at_click</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>click_outside_label</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>rel_pos</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name>label_width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_id_at_click</name> <operator>=</operator> <name>LV_TA_CURSOR_LAST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>click_outside_label</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>char_id_at_click</name> <operator>=</operator> <call><name>lv_label_get_letter_on</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>click_outside_label</name> <operator>=</operator> <operator>!</operator><call><name>lv_label_is_char_under_pos</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_en</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ext</name><operator>-&gt;</operator><name>text_sel_in_prog</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>click_outside_label</name> <operator>&amp;&amp;</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>char_id_at_click</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>LV_LABEL_TEXT_SEL_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_in_prog</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_set_drag</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_in_prog</name></name> <operator>&amp;&amp;</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>char_id_at_click</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_in_prog</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lv_obj_set_drag</name><argument_list>(<argument><expr><call><name>lv_page_get_scrl</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_in_prog</name></name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>char_id_at_click</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_in_prog</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name> <operator>||</operator> <name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>start</name></name> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>start</name></name> <operator>||</operator> <name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>sel</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>!=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name> <operator>||</operator> <name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>!=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_start</name></name> <operator>=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext_label</name><operator>-&gt;</operator><name>txt_sel_end</name></name> <operator>=</operator> <name>LV_DRAW_LABEL_NO_TXT_SEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESS_LOST</name> <operator>||</operator> <name>sign</name> <operator>==</operator> <name>LV_SIGNAL_RELEASED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>text_sel_in_prog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>rel_pos</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_id_at_click</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>rel_pos</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name>label_width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_id_at_click</name> <operator>=</operator> <name>LV_TA_CURSOR_LAST</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>char_id_at_click</name> <operator>=</operator> <call><name>lv_label_get_letter_on</name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <name>LV_SIGNAL_PRESSED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_ta_set_cursor_pos</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>char_id_at_click</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
