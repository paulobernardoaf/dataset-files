<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_core\lv_disp.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_disp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_misc/lv_math.h"</cpp:file></cpp:include>































<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_disp_get_scr_act</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_scr_act: no display registered to get its top layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>disp</name><operator>-&gt;</operator><name>act_scr</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_disp_load_scr</name><parameter_list>(<parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>d</name> <init>= <expr><call><name>lv_obj_get_disp</name><argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>act_scr</name></name> <operator>=</operator> <name>scr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_obj_invalidate</name><argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_disp_get_layer_top</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_layer_top: no display registered to get its top layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>disp</name><operator>-&gt;</operator><name>top_layer</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>lv_disp_get_layer_sys</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_layer_sys: no display registered to get its top layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>disp</name><operator>-&gt;</operator><name>sys_layer</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_disp_assign_screen</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>, <parameter><decl><type><name>lv_obj_t</name> <modifier>*</modifier></type> <name>scr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_obj_get_parent</name><argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_disp_assign_screen: try to assign a non-screen object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>old_disp</name> <init>= <expr><call><name>lv_obj_get_disp</name><argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>old_disp</name> <operator>==</operator> <name>disp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lv_ll_chg_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_disp</name><operator>-&gt;</operator><name>scr_ll</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>scr_ll</name></name></expr></argument>, <argument><expr><name>scr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>lv_disp_get_refr_task</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_disp_get_refr_task: no display registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>disp</name><operator>-&gt;</operator><name>refr_task</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint32_t</name></type> <name>lv_disp_get_inactive_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_disp_get_inactive_time: no display registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>last_activity_time</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lv_disp_get_next</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>last_activity_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lv_disp_get_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lv_disp_trig_activity</name><parameter_list>(<parameter><decl><type><name>lv_disp_t</name> <modifier>*</modifier></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>lv_disp_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LV_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"lv_disp_trig_activity: no display registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>last_activity_time</name></name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




</unit>
