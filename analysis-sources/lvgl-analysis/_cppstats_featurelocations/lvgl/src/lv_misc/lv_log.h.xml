<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_log.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_LOG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_LEVEL_TRACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_LEVEL_INFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_LEVEL_WARN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_LEVEL_ERROR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_LEVEL_NONE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LV_LOG_LEVEL_NUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_LOG_LEVEL_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_LOG_LEVEL_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_LOG_LEVEL_WARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_LOG_LEVEL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_EXPORT_CONST_INT</name><argument_list>(<argument><expr><name>LV_LOG_LEVEL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name>int8_t</name></type> <name>lv_log_level_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LOG</name></expr></cpp:if>







<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_log_print_g_cb_t</name>)<parameter_list>(<parameter><decl><type><name>lv_log_level_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>











<function_decl><type><name>void</name></type> <name>lv_log_register_print_cb</name><parameter_list>(<parameter><decl><type><name>lv_log_print_g_cb_t</name></type> <name>print_cb</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>lv_log_add</name><parameter_list>(<parameter><decl><type><name>lv_log_level_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LOG_LEVEL</name> <operator>&lt;=</operator> <name>LV_LOG_LEVEL_TRACE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_TRACE</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lv_log_add(LV_LOG_LEVEL_TRACE, __FILE__, __LINE__, dsc);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_TRACE</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LOG_LEVEL</name> <operator>&lt;=</operator> <name>LV_LOG_LEVEL_INFO</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_INFO</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lv_log_add(LV_LOG_LEVEL_INFO, __FILE__, __LINE__, dsc);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_INFO</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LOG_LEVEL</name> <operator>&lt;=</operator> <name>LV_LOG_LEVEL_WARN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_WARN</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lv_log_add(LV_LOG_LEVEL_WARN, __FILE__, __LINE__, dsc);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_WARN</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LOG_LEVEL</name> <operator>&lt;=</operator> <name>LV_LOG_LEVEL_ERROR</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_ERROR</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lv_log_add(LV_LOG_LEVEL_ERROR, __FILE__, __LINE__, dsc);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_ERROR</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lv_log_add</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_TRACE</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_INFO</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_WARN</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LOG_ERROR</name><parameter_list>(<parameter><type><name>dsc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
