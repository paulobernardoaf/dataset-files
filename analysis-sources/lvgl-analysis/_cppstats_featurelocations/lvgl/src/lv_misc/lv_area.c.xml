<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_area.c">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_area.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_math.h"</cpp:file></cpp:include>

































<function><type><name>void</name></type> <name>lv_area_set</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_area_set_width</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name><name>area_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_area_set_height</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name><name>area_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_area_set_pos</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lv_coord_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>w</name> <init>= <expr><call><name>lv_area_get_width</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_coord_t</name></type> <name>h</name> <init>= <expr><call><name>lv_area_get_height</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_set_width</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_area_set_height</name><argument_list>(<argument><expr><name>area_p</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>uint32_t</name></type> <name>lv_area_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>area_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>area_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name><name>area_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>area_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name><name>area_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>lv_area_intersect</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>res_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a1_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a2_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>res_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>union_ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>res_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>&gt;</operator> <name><name>res_p</name><operator>-&gt;</operator><name>x2</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>res_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>&gt;</operator> <name><name>res_p</name><operator>-&gt;</operator><name>y2</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>union_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>union_ok</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_area_join</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>a_res_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a1_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a2_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>a_res_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a_res_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <call><name>LV_MATH_MIN</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a_res_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a_res_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <call><name>LV_MATH_MAX</name><argument_list>(<argument><expr><name><name>a1_p</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>, <argument><expr><name><name>a2_p</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_area_is_point_on</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_point_t</name> <modifier>*</modifier></type> <name>p_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_on</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_p</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>a_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>&amp;&amp;</operator> <name><name>p_p</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>a_p</name><operator>-&gt;</operator><name>x2</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>p_p</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>a_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>&amp;&amp;</operator> <name><name>p_p</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>a_p</name><operator>-&gt;</operator><name>y2</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_on</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>is_on</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_area_is_on</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a1_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>a2_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>a1_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>&lt;=</operator> <name><name>a2_p</name><operator>-&gt;</operator><name>x2</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a1_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>&gt;=</operator> <name><name>a2_p</name><operator>-&gt;</operator><name>x1</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a1_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>&lt;=</operator> <name><name>a2_p</name><operator>-&gt;</operator><name>y2</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a1_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>&gt;=</operator> <name><name>a2_p</name><operator>-&gt;</operator><name>y1</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_area_is_in</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>ain_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_area_t</name> <modifier>*</modifier></type> <name>aholder_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_in</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ain_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>&gt;=</operator> <name><name>aholder_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>&amp;&amp;</operator> <name><name>ain_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>&gt;=</operator> <name><name>aholder_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>&amp;&amp;</operator> <name><name>ain_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>&lt;=</operator> <name><name>aholder_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>&amp;&amp;</operator>
<name><name>ain_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>&lt;=</operator> <name><name>aholder_p</name><operator>-&gt;</operator><name>y2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_in</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>is_in</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_area_increment</name><parameter_list>(<parameter><decl><type><name>lv_area_t</name> <modifier>*</modifier></type> <name>a_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lv_coord_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>a_p</name><operator>-&gt;</operator><name>x1</name></name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a_p</name><operator>-&gt;</operator><name>y1</name></name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a_p</name><operator>-&gt;</operator><name>x2</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a_p</name><operator>-&gt;</operator><name>y2</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
</block_content>}</block></function>




</unit>
