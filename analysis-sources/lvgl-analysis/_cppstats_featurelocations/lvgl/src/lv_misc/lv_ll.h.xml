<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_ll.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_LL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LL_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>










<typedef>typedef <type><name>uint8_t</name></type> <name>lv_ll_node_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_ll_node_t</name> <modifier>*</modifier></type> <name>tail</name></decl>;</decl_stmt>
}</block></struct></type> <name>lv_ll_t</name>;</typedef>










<function_decl><type><name>void</name></type> <name>lv_ll_init</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>node_size</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_ins_head</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_ins_prev</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_ins_tail</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>lv_ll_rem</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>node_p</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_ll_clear</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>lv_ll_chg_list</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_ori_p</name></decl></parameter>, <parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_new_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>head</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_tail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>lv_ll_get_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint32_t</name></type> <name>lv_ll_get_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>lv_ll_move_before</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>n_act</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>n_after</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>lv_ll_is_empty</name><parameter_list>(<parameter><decl><type><name>lv_ll_t</name> <modifier>*</modifier></type> <name>ll_p</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LL_READ</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i = lv_ll_get_head(&amp;list); i != NULL; i = lv_ll_get_next(&amp;list, i))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_LL_READ_BACK</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i = lv_ll_get_tail(&amp;list); i != NULL; i = lv_ll_get_prev(&amp;list, i))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
