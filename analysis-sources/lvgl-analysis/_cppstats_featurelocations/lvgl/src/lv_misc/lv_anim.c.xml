<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_anim.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_anim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_ANIMATION</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_hal/lv_hal_tick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_ANIM_RESOLUTION</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_ANIM_RES_SHIFT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>anim_task</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>anim_ready_handler</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>last_task_run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>anim_list_changed</name></decl>;</decl_stmt>












<function><type><name>void</name></type> <name>lv_anim_core_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_anim_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_task_run</name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_task_create</name><argument_list>(<argument><expr><name>anim_task</name></expr></argument>, <argument><expr><name>LV_DISP_DEF_REFR_PERIOD</name></expr></argument>, <argument><expr><name>LV_TASK_PRIO_MID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>lv_anim_init</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_anim_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>path_cb</name></name> <operator>=</operator> <name>lv_anim_path_linear</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>lv_anim_create</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>LV_LOG_TRACE</name><argument_list>(<argument><literal type="string">"animation create started"</literal></argument>)</argument_list></macro>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exec_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_anim_del</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>exec_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<decl_stmt><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>new_anim</name> <init>= <expr><call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_anim</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>playback_now</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_anim</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_anim_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>new_anim</name><operator>-&gt;</operator><name>exec_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>new_anim</name><operator>-&gt;</operator><name>exec_cb</name></name><argument_list>(<argument><expr><name><name>new_anim</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name><name>new_anim</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>anim_list_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<macro><name>LV_LOG_TRACE</name><argument_list>(<argument><literal type="string">"animation created"</literal></argument>)</argument_list></macro>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>lv_anim_del</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>lv_anim_exec_xcb_t</name></type> <name>exec_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>del</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a_next</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>var</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exec_cb</name></name> <operator>==</operator> <name>exec_cb</name> <operator>||</operator> <name>exec_cb</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>anim_list_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>del</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a_next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>del</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>uint16_t</name></type> <name>lv_anim_count_running</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl>;</decl_stmt>
<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_anim_ll)</argument>, <argument>a</argument>)</argument_list></macro> <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>cnt</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>uint16_t</name></type> <name>lv_anim_speed_to_time</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>lv_anim_value_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>d</name> <init>= <expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>start</name> <operator>-</operator> <name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>time</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <name>speed</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>time</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>time</name> <operator>=</operator> <name>UINT16_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>time</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>time</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_linear</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>step</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>act_time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name>LV_ANIM_RESOLUTION</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>*</operator> <name>LV_ANIM_RESOLUTION</name><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<decl_stmt><decl><type><name>int32_t</name></type> <name>new_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>step</name> <operator>*</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <name>new_value</name> <operator>&gt;&gt;</operator> <name>LV_ANIM_RES_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lv_anim_value_t</name><operator>)</operator><name>new_value</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_ease_in</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>act_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>lv_bezier3</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>step</name> <operator>*</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <name>new_value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lv_anim_value_t</name><operator>)</operator><name>new_value</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_ease_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>act_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>lv_bezier3</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>step</name> <operator>*</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <name>new_value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lv_anim_value_t</name><operator>)</operator><name>new_value</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_ease_in_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>act_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>lv_bezier3</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">924</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>step</name> <operator>*</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <name>new_value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lv_anim_value_t</name><operator>)</operator><name>new_value</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_overshoot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>act_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>lv_bezier3</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>, <argument><expr><literal type="number">1300</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>step</name> <operator>*</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <name>new_value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lv_anim_value_t</name><operator>)</operator><name>new_value</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_bounce</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>act_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">408</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>*</operator> <literal type="number">2500</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">408</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">614</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">408</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>diff</name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">614</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">819</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">614</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>diff</name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">819</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">921</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">819</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>diff</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">921</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">921</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>diff</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>lv_bezier3</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">800</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>step</name> <operator>*</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <name>new_value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>new_value</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>lv_anim_value_t</name><operator>)</operator><name>new_value</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_anim_value_t</name></type> <name>lv_anim_path_step</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>end</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>anim_task</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl>;</decl_stmt>
<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_anim_ll)</argument>, <argument>a</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>has_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>elaps</name> <init>= <expr><call><name>lv_tick_elaps</name><argument_list>(<argument><expr><name>last_task_run</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>anim_list_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>has_run</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>has_run</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>+=</operator> <name>elaps</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_value</name> <operator>=</operator> <call><name><name>a</name><operator>-&gt;</operator><name>path_cb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exec_cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>exec_cb</name></name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anim_ready_handler</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>anim_list_changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lv_ll_get_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lv_ll_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>last_task_run</name> <operator>=</operator> <call><name>lv_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>anim_ready_handler</name><parameter_list>(<parameter><decl><type><name>lv_anim_t</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>playback</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>playback</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>playback_now</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>lv_anim_t</name></type> <name>a_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a_tmp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_anim_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_ll_rem</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_anim_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>anim_list_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>a_tmp</name><operator>.</operator><name>ready_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>a_tmp</name><operator>.</operator><name>ready_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>=</operator> <operator>-</operator><name><name>a</name><operator>-&gt;</operator><name>repeat_pause</name></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>playback</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>playback_now</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>act_time</name></name> <operator>=</operator> <operator>-</operator><name><name>a</name><operator>-&gt;</operator><name>playback_pause</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>playback_now</name></name> <operator>=</operator> <ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>playback_now</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>anim_list_changed</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
