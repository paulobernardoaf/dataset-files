<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_printf.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_printf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_SPRINTF_CUSTOM</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_NTOA_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_NTOA_BUFFER_SIZE</name></cpp:macro> <cpp:value>32U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_FTOA_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_FTOA_BUFFER_SIZE</name></cpp:macro> <cpp:value>32U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_DISABLE_SUPPORT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_SUPPORT_FLOAT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_DISABLE_SUPPORT_EXPONENTIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_SUPPORT_EXPONENTIAL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_DEFAULT_FLOAT_PRECISION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_DEFAULT_FLOAT_PRECISION</name></cpp:macro> <cpp:value>6U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_MAX_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_MAX_FLOAT</name></cpp:macro> <cpp:value>1e9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_DISABLE_SUPPORT_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_SUPPORT_LONG_LONG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_DISABLE_SUPPORT_PTRDIFF_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTF_SUPPORT_PTRDIFF_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_ZEROPAD</name></cpp:macro> <cpp:value>(1U &lt;&lt; 0U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_LEFT</name></cpp:macro> <cpp:value>(1U &lt;&lt; 1U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_PLUS</name></cpp:macro> <cpp:value>(1U &lt;&lt; 2U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_SPACE</name></cpp:macro> <cpp:value>(1U &lt;&lt; 3U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_HASH</name></cpp:macro> <cpp:value>(1U &lt;&lt; 4U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_UPPERCASE</name></cpp:macro> <cpp:value>(1U &lt;&lt; 5U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_CHAR</name></cpp:macro> <cpp:value>(1U &lt;&lt; 6U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_SHORT</name></cpp:macro> <cpp:value>(1U &lt;&lt; 7U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_LONG</name></cpp:macro> <cpp:value>(1U &lt;&lt; 8U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_LONG_LONG</name></cpp:macro> <cpp:value>(1U &lt;&lt; 9U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_PRECISION</name></cpp:macro> <cpp:value>(1U &lt;&lt; 10U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_ADAPT_EXP</name></cpp:macro> <cpp:value>(1U &lt;&lt; 11U)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>out_fct_type</name>)<parameter_list>(<parameter><decl><type><name>char</name></type> <name>character</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



<typedef>typedef <type><struct>struct <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fct</name>)<parameter_list>(<parameter><decl><type><name>char</name></type> <name>character</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>out_fct_wrap_type</name>;</typedef>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_out_buffer</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>character</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buffer</name><operator>)</operator><index>[<expr><name>idx</name></expr>]</index> <operator>=</operator> <name>character</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_out_null</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>character</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>character</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buffer</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>idx</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>maxlen</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>_strnlen_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <name>maxsize</name><operator>--</operator></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_is_digit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>_atoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>_is_digit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">10U</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_out_rev</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>start_idx</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_ZEROPAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>idx</name> <operator>-</operator> <name>start_idx</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_ntoa_format</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>negative</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_ZEROPAD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>negative</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>FLAGS_PLUS</name> <operator>|</operator> <name>FLAGS_SPACE</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>prec</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_ZEROPAD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_HASH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>==</operator> <name>prec</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <name>width</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>base</name> <operator>==</operator> <literal type="number">16U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>base</name> <operator>==</operator> <literal type="number">16U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UPPERCASE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>base</name> <operator>==</operator> <literal type="number">16U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UPPERCASE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>base</name> <operator>==</operator> <literal type="number">2U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PLUS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_SPACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_out_rev</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_ntoa_long</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>negative</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PRINTF_NTOA_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAGS_HASH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name><operator>)</operator> <operator>||</operator> <name>value</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>digit</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>value</name> <operator>%</operator> <name>base</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>digit</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal> <operator>+</operator> <name>digit</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UPPERCASE</name></expr> ?</condition><then> <expr><literal type="char">'A'</literal></expr> </then><else>: <expr><literal type="char">'a'</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>digit</name> <operator>-</operator> <literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>/=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_ntoa_format</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>negative</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>base</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_ntoa_long_long</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>negative</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PRINTF_NTOA_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAGS_HASH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name><operator>)</operator> <operator>||</operator> <name>value</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>digit</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>value</name> <operator>%</operator> <name>base</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>digit</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal> <operator>+</operator> <name>digit</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UPPERCASE</name></expr> ?</condition><then> <expr><literal type="char">'A'</literal></expr> </then><else>: <expr><literal type="char">'a'</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>digit</name> <operator>-</operator> <literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>/=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_NTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_ntoa_format</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>negative</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>base</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_EXPONENTIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>_etoa</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_ftoa</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PRINTF_FTOA_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>diff</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>pow10</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">100000</literal></expr>, <expr><literal type="number">1000000</literal></expr>, <expr><literal type="number">10000000</literal></expr>, <expr><literal type="number">100000000</literal></expr>, <expr><literal type="number">1000000000</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_out_rev</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><literal type="string">"nan"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <operator>-</operator><name>DBL_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_out_rev</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><literal type="string">"fni-"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>DBL_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_out_rev</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PLUS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"fni+"</literal></expr> </then><else>: <expr><literal type="string">"fni"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PLUS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4U</literal></expr> </then><else>: <expr><literal type="number">3U</literal></expr></else></ternary></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&gt;</operator> <name>PRINTF_MAX_FLOAT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>value</name> <operator>&lt;</operator> <operator>-</operator><name>PRINTF_MAX_FLOAT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_EXPONENTIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_etoa</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0U</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>negative</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>PRINTF_DEFAULT_FLOAT_PRECISION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_FTOA_BUFFER_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>prec</name> <operator>&gt;</operator> <literal type="number">9U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prec</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>whole</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>value</name> <operator>-</operator> <name>whole</name><operator>)</operator> <operator>*</operator> <name><name>pow10</name><index>[<expr><name>prec</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>frac</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>tmp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <name>frac</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>frac</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frac</name> <operator>&gt;=</operator> <name><name>pow10</name><index>[<expr><name>prec</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>whole</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>frac</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>frac</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>frac</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>value</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>whole</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>diff</name> <operator>&lt;</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>diff</name> <operator>&gt;</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>whole</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>++</operator><name>whole</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><name>prec</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>PRINTF_FTOA_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="number">48U</literal> <operator>+</operator> <operator>(</operator><name>frac</name> <operator>%</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>frac</name> <operator>/=</operator> <literal type="number">10U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_FTOA_BUFFER_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>PRINTF_FTOA_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>PRINTF_FTOA_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="number">48</literal> <operator>+</operator> <operator>(</operator><name>whole</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>whole</name> <operator>/=</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_ZEROPAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>negative</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>FLAGS_PLUS</name> <operator>|</operator> <name>FLAGS_SPACE</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>PRINTF_FTOA_BUFFER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>PRINTF_FTOA_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PLUS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_SPACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_out_rev</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_EXPONENTIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_etoa</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>!=</operator> <name>value</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>value</name> <operator>&gt;</operator> <name>DBL_MAX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>value</name> <operator>&lt;</operator> <operator>-</operator><name>DBL_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_ftoa</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>negative</name> <init>= <expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>PRINTF_DEFAULT_FLOAT_PRECISION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<union>union <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>U</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>F</name></decl>;</decl_stmt>
}</block> <decl><name>conv</name></decl>;</union>

<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>F</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp2</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>conv</name><operator>.</operator><name>U</name></name> <operator>&gt;&gt;</operator> <literal type="number">52U</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07FFU</literal><operator>)</operator> <operator>-</operator> <literal type="number">1023</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>U</name></name> <operator>=</operator> <operator>(</operator><name><name>conv</name><operator>.</operator><name>U</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">52U</literal><operator>)</operator> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1023ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">52U</literal><operator>)</operator></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>expval</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.1760912590558</literal> <operator>+</operator> <name>exp2</name> <operator>*</operator> <literal type="number">0.301029995663981</literal> <operator>+</operator> <operator>(</operator><name><name>conv</name><operator>.</operator><name>F</name></name> <operator>-</operator> <literal type="number">1.5</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.289529654602168</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exp2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>expval</name> <operator>*</operator> <literal type="number">3.321928094887362</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>z</name> <init>= <expr><name>expval</name> <operator>*</operator> <literal type="number">2.302585092994046</literal> <operator>-</operator> <name>exp2</name> <operator>*</operator> <literal type="number">0.6931471805599453</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>z2</name> <init>= <expr><name>z</name> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>U</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>exp2</name> <operator>+</operator> <literal type="number">1023</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">52U</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>F</name></name> <operator>*=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>z</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>z</name> <operator>+</operator> <operator>(</operator><name>z2</name> <operator>/</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <operator>(</operator><name>z2</name> <operator>/</operator> <operator>(</operator><literal type="number">10</literal> <operator>+</operator> <name>z2</name> <operator>/</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name><name>conv</name><operator>.</operator><name>F</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expval</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>F</name></name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>minwidth</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>expval</name> <operator>&lt;</operator> <literal type="number">100</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>expval</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">100</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4U</literal></expr> </then><else>: <expr><literal type="number">5U</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_ADAPT_EXP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">1e-4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>value</name> <operator>&lt;</operator> <literal type="number">1e6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>prec</name> <operator>&gt;</operator> <name>expval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>prec</name> <operator>-</operator> <name>expval</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_PRECISION</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>expval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>prec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fwidth</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>minwidth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fwidth</name> <operator>-=</operator> <name>minwidth</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fwidth</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>minwidth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fwidth</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>expval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>/=</operator> <name><name>conv</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>start_idx</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ftoa</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><operator>-</operator><name>value</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>fwidth</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>FLAGS_ADAPT_EXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>minwidth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UPPERCASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'E'</literal></expr> </then><else>: <expr><literal type="char">'e'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>expval</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>expval</name></expr> </then><else>: <expr><name>expval</name></expr></else></ternary></expr></argument>, <argument><expr><name>expval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>minwidth</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FLAGS_ZEROPAD</name> <operator>|</operator> <name>FLAGS_PLUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>idx</name> <operator>-</operator> <name>start_idx</name> <operator>&lt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function><type><specifier>static</specifier> <name>int</name></type> <name>_vsnprintf</name><parameter_list>(<parameter><decl><type><name>out_fct_type</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>precision</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>_out_null</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>format</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_ZEROPAD</name></expr>;</expr_stmt> <expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LEFT</name></expr>;</expr_stmt> <expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_PLUS</name></expr>;</expr_stmt> <expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_SPACE</name></expr>;</expr_stmt> <expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'#'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_HASH</name></expr>;</expr_stmt> <expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt> <break>break;</break>
<default>default :</default> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><name>n</name></expr>)</condition>;</do>


<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_is_digit</name><argument_list>(<argument><expr><operator>*</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>_atoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LEFT</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>-</operator><name>w</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_PRECISION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_is_digit</name><argument_list>(<argument><expr><operator>*</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>_atoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>prec</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>prec</name></expr> </then><else>: <expr><literal type="number">0U</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr> :</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONG_LONG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr> :</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_SHORT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_PTRDIFF_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'t'</literal></expr> :</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>FLAGS_LONG</name></expr> </then><else>: <expr><name>FLAGS_LONG_LONG</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'j'</literal></expr> :</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intmax_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>FLAGS_LONG</name></expr> </then><else>: <expr><name>FLAGS_LONG_LONG</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr> :</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>FLAGS_LONG</name></expr> </then><else>: <expr><name>FLAGS_LONG_LONG</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default :</default>
<break>break;</break>
</block_content>}</block></switch>


<switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr> :</case>
<case>case <expr><literal type="char">'i'</literal></expr> :</case>
<case>case <expr><literal type="char">'u'</literal></expr> :</case>
<case>case <expr><literal type="char">'x'</literal></expr> :</case>
<case>case <expr><literal type="char">'X'</literal></expr> :</case>
<case>case <expr><literal type="char">'o'</literal></expr> :</case>
<case>case <expr><literal type="char">'b'</literal></expr> :</case> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>base</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAGS_HASH</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_UPPERCASE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>format</name> <operator>!=</operator> <literal type="char">'i'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>format</name> <operator>!=</operator> <literal type="char">'d'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>FLAGS_PLUS</name> <operator>|</operator> <name>FLAGS_SPACE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAGS_ZEROPAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'i'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONG_LONG</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>value</name> <init>= <macro><name>va_arg</name><argument_list>(<argument>va</argument>, <argument>long long</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><literal type="number">0</literal> <operator>-</operator> <name>value</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><literal type="number">0</literal> <operator>-</operator> <name>value</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_CHAR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_SHORT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>short</name> <name>int</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><literal type="number">0</literal> <operator>-</operator> <name>value</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONG_LONG</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><macro><name>va_arg</name><argument_list>(<argument>va</argument>, <argument>unsigned long long</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><macro><name>va_arg</name><argument_list>(<argument>va</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_CHAR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><macro><name>va_arg</name><argument_list>(<argument>va</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_SHORT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name> <name>short</name> <name>int</name><operator>)</operator><macro><name>va_arg</name><argument_list>(<argument>va</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr> </then><else>: <macro><name>va_arg</name><argument_list>(<argument>va</argument>, <argument>unsigned int</argument>)</argument_list></macro></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'f'</literal></expr> :</case>
<case>case <expr><literal type="char">'F'</literal></expr> :</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_UPPERCASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ftoa</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_EXPONENTIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'G'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_ADAPT_EXP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'G'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_UPPERCASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_etoa</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<case>case <expr><literal type="char">'c'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1U</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>l</name><operator>++</operator> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>l</name><operator>++</operator> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'s'</literal></expr> :</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>l</name> <init>= <expr><call><name>_strnlen_s</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>precision</name></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>l</name> <operator>&lt;</operator> <name>precision</name></expr> ?</condition><then> <expr><name>l</name></expr> </then><else>: <expr><name>precision</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>l</name><operator>++</operator> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECISION</name><operator>)</operator> <operator>||</operator> <name>precision</name><operator>--</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>l</name><operator>++</operator> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'p'</literal></expr> :</case> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_ZEROPAD</name> <operator>|</operator> <name>FLAGS_UPPERCASE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_ll</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_ll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>_ntoa_long</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRINTF_SUPPORT_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'%'</literal></expr> :</case>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default :</default>
<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>*</operator><name>format</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>


<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><name>idx</name> <operator>&lt;</operator> <name>maxlen</name></expr> ?</condition><then> <expr><name>idx</name></expr> </then><else>: <expr><name>maxlen</name> <operator>-</operator> <literal type="number">1U</literal></expr></else></ternary></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>idx</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>lv_snprintf</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>_vsnprintf</name><argument_list>(<argument><expr><name>_out_buffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>lv_vsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_vsnprintf</name><argument_list>(<argument><expr><name>_out_buffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
