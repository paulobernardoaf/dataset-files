<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_bidi.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_bidi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_txt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_draw/lv_draw.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BIDI_BRACKLET_DEPTH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_POS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0x7FFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_RTL_POS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0x8000) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_RTL_POS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>is_rtl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GET_POS(x) | ((is_rtl)? 0x8000: 0))</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bracklet_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>dir</name></decl>;</decl_stmt>
}</block></struct></type><name>bracket_stack_t</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>lv_bidi_dir_t</name></type> <name>get_next_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type> <name>pos_conv_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rtl_reverse</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pos_conv_out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos_conv_rd_base</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos_conv_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>char_change_to_pair</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lv_bidi_dir_t</name></type> <name>bracket_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>next_pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fill_pos_conv</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_txt_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>max_len</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bracket_left</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"&lt;({["</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bracket_right</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"&gt;)}]"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bracket_stack_t</name></type> <name><name>br_stack</name><index>[<expr><name>LV_BIDI_BRACKLET_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>br_stack_p</name></decl>;</decl_stmt>









<function><type><name>void</name></type> <name>lv_bidi_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str_out</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_AUTO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>base_dir</name> <operator>=</operator> <call><name>lv_bidi_detect_base_dir</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>par_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>par_len</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str_out</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>=</operator> <name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>par_start</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while<condition>(<expr><name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>par_len</name> <operator>=</operator> <call><name>lv_bidi_get_next_paragraph</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_bidi_process_paragraph</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str_out</name><index>[<expr><name>par_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>par_len</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>par_start</name> <operator>+=</operator> <name>par_len</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str_out</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>=</operator> <name><name>str_in</name><index>[<expr><name>par_start</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>par_start</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<expr_stmt><expr><name><name>str_out</name><index>[<expr><name>par_start</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>lv_bidi_dir_t</name></type> <name>lv_bidi_detect_base_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>dir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>lv_bidi_get_letter_dir</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name> <operator>||</operator> <name>dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dir</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><name>LV_BIDI_BASE_DIR_DEF</name> <operator>==</operator> <name>LV_BIDI_DIR_AUTO</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_BIDI_DIR_LTR</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>LV_BIDI_BASE_DIR_DEF</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>lv_bidi_dir_t</name></type> <name>lv_bidi_get_letter_dir</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>lv_bidi_letter_is_rtl</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_BIDI_DIR_RTL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_bidi_letter_is_neutral</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_BIDI_DIR_NEUTRAL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>lv_bidi_letter_is_weak</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_BIDI_DIR_WEAK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LV_BIDI_DIR_LTR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_bidi_letter_is_weak</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>weaks</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>weaks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name><name>weaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>;</do>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_bidi_letter_is_rtl</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>&gt;=</operator> <literal type="number">0x5d0</literal> <operator>&amp;&amp;</operator> <name>letter</name> <operator>&lt;=</operator> <literal type="number">0x5ea</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x202E</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 


<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lv_bidi_letter_is_neutral</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>neutrals</name><index>[]</index></name> <init>= <expr><literal type="string">" \t\n\r.,:;'\"`!?%/\\-=()[]{}&lt;&gt;@#&amp;$|"</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>neutrals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>neutrals</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_bidi_get_logical_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bidi_txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>visual_pos</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_rtl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_conv_len</name> <init>= <expr><call><name>get_txt_len</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>txt_buf_size</name> <init>= <expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>txt_buf_size</name> <operator>=</operator> <operator>(</operator><name>txt_buf_size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>txt_buf_size</name> <operator>+</operator> <name>pos_conv_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bidi_txt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bidi_txt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pos_conv_buf</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>txt_buf_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_bidi_process_paragraph</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bidi_txt</name></expr>?</condition><then> <expr><operator>*</operator><name>bidi_txt</name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>pos_conv_buf</name></expr></argument>, <argument><expr><name>pos_conv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_rtl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>is_rtl</name> <operator>=</operator> <call><name>IS_RTL_POS</name><argument_list>(<argument><expr><name><name>pos_conv_buf</name><index>[<expr><name>visual_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>GET_POS</name><argument_list>(<argument><expr><name><name>pos_conv_buf</name><index>[<expr><name>visual_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>lv_bidi_get_visual_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bidi_txt</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>logical_pos</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_rtl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_conv_len</name> <init>= <expr><call><name>get_txt_len</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>txt_buf_size</name> <init>= <expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>txt_buf_size</name> <operator>=</operator> <operator>(</operator><name>txt_buf_size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>lv_draw_get_buf</name><argument_list>(<argument><expr><name>txt_buf_size</name> <operator>+</operator> <name>pos_conv_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bidi_txt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bidi_txt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pos_conv_buf</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>txt_buf_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lv_bidi_process_paragraph</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bidi_txt</name></expr>?</condition><then> <expr><operator>*</operator><name>bidi_txt</name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>pos_conv_buf</name></expr></argument>, <argument><expr><name>pos_conv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pos_conv_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_POS</name><argument_list>(<argument><expr><name><name>pos_conv_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logical_pos</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_rtl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>is_rtl</name> <operator>=</operator> <call><name>IS_RTL_POS</name><argument_list>(<argument><expr><name><name>pos_conv_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lv_bidi_process_paragraph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pos_conv_out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos_conv_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>run_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>run_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_run_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_rd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_wr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_AUTO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>base_dir</name> <operator>=</operator> <call><name>lv_bidi_detect_base_dir</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name> <operator>=</operator> <name>pos_conv_len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>wr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>str_out</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>dir</name> <init>= <expr><name>base_dir</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>br_stack_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while<condition>(<expr><name>rd</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos_conv_rd</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>lv_bidi_get_letter_dir</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>==</operator> <name>LV_BIDI_DIR_NEUTRAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>bracket_process</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_NEUTRAL</name> <operator>&amp;&amp;</operator> <name>dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_WEAK</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>rd</name> <operator>&amp;&amp;</operator> <name><name>str_in</name><index>[<expr><name>rd</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_txt_encoded_prev</name><argument_list>(<argument><expr><name>str_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_rd</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str_out</name><index>[<expr><name>wr</name></expr>]</index></name></expr></argument>, <argument><expr><name>str_in</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wr</name> <operator>+=</operator> <name>rd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_conv_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fill_pos_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos_conv_rd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name> <operator>+=</operator> <name>pos_conv_rd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>wr</name> <operator>-=</operator> <name>rd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name> <operator>-=</operator> <name>pos_conv_rd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtl_reverse</name><argument_list>(<argument><expr><ternary><condition><expr><name>str_out</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>str_out</name><index>[<expr><name>wr</name></expr>]</index></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>str_in</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pos_conv_out</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos_conv_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<while>while<condition>(<expr><name>rd</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>str_in</name><index>[<expr><name>rd</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run_dir</name> <operator>=</operator> <call><name>get_next_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str_in</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_conv_run_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>base_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>run_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str_out</name><index>[<expr><name>wr</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str_in</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>, <argument><expr><name>run_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_conv_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fill_pos_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos_conv_run_len</name></expr></argument>, <argument><expr><name>pos_conv_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rtl_reverse</name><argument_list>(<argument><expr><ternary><condition><expr><name>str_out</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>str_out</name><index>[<expr><name>wr</name></expr>]</index></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str_in</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>, <argument><expr><name>run_len</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pos_conv_out</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>pos_conv_rd</name></expr></argument>, <argument><expr><name>pos_conv_run_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>wr</name> <operator>+=</operator> <name>run_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name> <operator>+=</operator> <name>pos_conv_run_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>wr</name> <operator>-=</operator> <name>run_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name> <operator>-=</operator> <name>pos_conv_run_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>run_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str_out</name><index>[<expr><name>wr</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str_in</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>, <argument><expr><name>run_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_conv_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fill_pos_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos_conv_run_len</name></expr></argument>, <argument><expr><name>pos_conv_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rtl_reverse</name><argument_list>(<argument><expr><ternary><condition><expr><name>str_out</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>str_out</name><index>[<expr><name>wr</name></expr>]</index></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str_in</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>, <argument><expr><name>run_len</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pos_conv_out</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>pos_conv_rd</name></expr></argument>, <argument><expr><name>pos_conv_run_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rd</name> <operator>+=</operator> <name>run_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_rd</name> <operator>+=</operator> <name>pos_conv_run_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>lv_bidi_get_next_paragraph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_txt_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>max_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max_len</name> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_pos_conv</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SET_RTL_POS</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>lv_bidi_dir_t</name></type> <name>get_next_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type> <name>pos_conv_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>dir</name> <init>= <expr><call><name>lv_bidi_get_letter_dir</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>==</operator> <name>LV_BIDI_DIR_NEUTRAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>bracket_process</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while<condition>(<expr><name>dir</name> <operator>==</operator> <name>LV_BIDI_DIR_NEUTRAL</name> <operator>||</operator> <name>dir</name> <operator>==</operator> <name>LV_BIDI_DIR_WEAK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>lv_bidi_get_letter_dir</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>==</operator> <name>LV_BIDI_DIR_NEUTRAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>bracket_process</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>max_len</name> <operator>||</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos_conv_len</name> <operator>=</operator> <name>pos_conv_i</name></expr>;</expr_stmt>
<return>return <expr><name>base_dir</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>run_dir</name> <init>= <expr><name>dir</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_prev</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_last_strong</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_i_prev</name> <init>= <expr><name>pos_conv_i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_i_last_strong</name> <init>= <expr><name>pos_conv_i</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>next_dir</name> <init>= <expr><name>base_dir</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>i_prev</name> <operator>&lt;</operator> <name>max_len</name> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next_dir</name> <operator>=</operator> <call><name>lv_bidi_get_letter_dir</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>next_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_NEUTRAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next_dir</name> <operator>=</operator> <call><name>bracket_process</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>next_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name> <operator>||</operator> <name>next_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>next_dir</name> <operator>!=</operator> <name>run_dir</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>run_dir</name> <operator>==</operator> <name>base_dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos_conv_len</name> <operator>=</operator> <name>pos_conv_i_prev</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i_last_strong</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos_conv_len</name> <operator>=</operator> <name>pos_conv_i_last_strong</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>run_dir</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>next_dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_NEUTRAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_last_strong</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_i_last_strong</name> <operator>=</operator> <name>pos_conv_i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_i_prev</name> <operator>=</operator> <name>pos_conv_i</name></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if<condition>(<expr><name>run_dir</name> <operator>==</operator> <name>base_dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos_conv_len</name> <operator>=</operator> <name>pos_conv_i_prev</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i_last_strong</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos_conv_len</name> <operator>=</operator> <name>pos_conv_i_last_strong</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>run_dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtl_reverse</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pos_conv_out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos_conv_rd_base</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos_conv_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_i</name> <init>= <expr><name>pos_conv_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_wr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter</name> <init>= <expr><call><name>lv_txt_encoded_prev</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_letter</name> <init>= <expr><operator>--</operator><name>pos_conv_i</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><call><name>lv_bidi_letter_is_weak</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_weak</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_weak</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_last_weak</name> <init>= <expr><name>pos_conv_i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos_conv_first_weak</name> <init>= <expr><name>pos_conv_i</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>lv_txt_encoded_prev</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_letter</name> <operator>=</operator> <operator>--</operator><name>pos_conv_i</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>lv_bidi_letter_is_weak</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>letter</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>letter</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>letter</name> <operator>!=</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name>letter</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos_conv_i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>first_weak</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_first_weak</name> <operator>=</operator> <name>pos_conv_i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_weak</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_first_weak</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>wr</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>first_weak</name></expr>]</index></name></expr></argument>, <argument><expr><name>last_weak</name> <operator>-</operator> <name>first_weak</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_conv_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fill_pos_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos_conv_last_weak</name> <operator>-</operator> <name>pos_conv_first_weak</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pos_conv_rd_base</name> <operator>+</operator> <name>pos_conv_first_weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>wr</name> <operator>+=</operator> <name>last_weak</name> <operator>-</operator> <name>first_weak</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name> <operator>+=</operator> <name>pos_conv_last_weak</name> <operator>-</operator> <name>pos_conv_first_weak</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>


<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_size</name> <init>= <expr><call><name>lv_txt_encoded_size</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>letter_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_letter</name> <init>= <expr><name>letter</name> <operator>=</operator> <call><name>char_change_to_pair</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dest</name><index>[<expr><name>wr</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>new_letter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_conv_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name> <operator>=</operator> <call><name>SET_RTL_POS</name><argument_list>(<argument><expr><name>pos_conv_rd_base</name> <operator>+</operator> <name>pos_conv_letter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>wr</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>letter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_conv_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pos_conv_out</name><index>[<expr><name>pos_conv_wr</name></expr>]</index></name> <operator>=</operator> <call><name>SET_RTL_POS</name><argument_list>(<argument><expr><name>pos_conv_rd_base</name> <operator>+</operator> <name>pos_conv_i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wr</name> <operator>+=</operator> <name>letter_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_conv_wr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>char_change_to_pair</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bracket_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <name><name>bracket_left</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>bracket_right</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bracket_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <name><name>bracket_right</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>bracket_left</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>letter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lv_bidi_dir_t</name></type> <name>bracket_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>next_pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>bracket_dir</name> <init>= <expr><name>LV_BIDI_DIR_NEUTRAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bracket_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>bracket_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>letter</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>txt_i</name> <init>= <expr><name>next_pos</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>txt_i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_next</name> <init>= <expr><call><name>lv_txt_encoded_next</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txt_i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>letter_next</name> <operator>==</operator> <name><name>bracket_right</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>letter_dir</name> <init>= <expr><call><name>lv_bidi_get_letter_dir</name><argument_list>(<argument><expr><name>letter_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>letter_dir</name> <operator>==</operator> <name>base_dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bracket_dir</name> <operator>=</operator> <name>base_dir</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><name>txt_i</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_BIDI_DIR_NEUTRAL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>bracket_dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_NEUTRAL</name> <operator>&amp;&amp;</operator> <name>bracket_dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_WEAK</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>txt_i</name> <operator>=</operator> <name>next_pos</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>txt_i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lv_txt_encoded_prev</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txt_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>txt_i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>letter_next</name> <init>= <expr><call><name>lv_txt_encoded_prev</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txt_i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_bidi_dir_t</name></type> <name>letter_dir</name> <init>= <expr><call><name>lv_bidi_get_letter_dir</name><argument_list>(<argument><expr><name>letter_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>letter_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_LTR</name> <operator>||</operator> <name>letter_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_RTL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bracket_dir</name> <operator>=</operator> <name>letter_dir</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if<condition>(<expr><name>bracket_dir</name> <operator>!=</operator> <name>LV_BIDI_DIR_NEUTRAL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>txt_i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bracket_dir</name> <operator>=</operator> <name>base_dir</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if<condition>(<expr><name><name>bracket_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bracket_dir</name> <operator>==</operator> <name>LV_BIDI_DIR_NEUTRAL</name> <operator>||</operator> <name>br_stack_p</name> <operator>==</operator> <name>LV_BIDI_BRACKLET_DEPTH</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_BIDI_DIR_NEUTRAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>br_stack</name><index>[<expr><name>br_stack_p</name></expr>]</index></name><operator>.</operator><name>bracklet_pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br_stack</name><index>[<expr><name>br_stack_p</name></expr>]</index></name><operator>.</operator><name>dir</name> <operator>=</operator> <name>bracket_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>br_stack_p</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>bracket_dir</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>br_stack_p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <name><name>bracket_right</name><index>[<expr><name><name>br_stack</name><index>[<expr><name>br_stack_p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bracklet_pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bracket_dir</name> <operator>=</operator> <name><name>br_stack</name><index>[<expr><name>br_stack_p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>br_stack_p</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>bracket_dir</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LV_BIDI_DIR_NEUTRAL</name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
