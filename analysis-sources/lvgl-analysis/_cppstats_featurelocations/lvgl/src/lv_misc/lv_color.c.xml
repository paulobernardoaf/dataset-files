<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_color.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_math.h"</cpp:file></cpp:include>




































<function><type><name>lv_color_t</name></type> <name>lv_color_hsv_to_rgb</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>h</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>s</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>v</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>region</name></decl>, <decl><type ref="prev"/><name>remainder</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<return>return <expr><call><name>lv_color_make</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>region</name> <operator>=</operator> <name>h</name> <operator>/</operator> <literal type="number">43</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remainder</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <operator>(</operator><name>region</name> <operator>*</operator> <literal type="number">43</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>*</operator> <name>remainder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>remainder</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>region</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>lv_color_t</name></type> <name>result</name> <init>= <expr><call><name>lv_color_make</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>lv_color_hsv_t</name></type> <name>lv_color_rgb_to_hsv</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>r8</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>g8</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>b8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>r8</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>g</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>g8</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>b8</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>rgbMin</name> <init>= <expr><ternary><condition><expr><name>r</name> <operator>&lt;</operator> <name>g</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>r</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>r</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>g</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>g</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rgbMax</name> <init>= <expr><ternary><condition><expr><name>r</name> <operator>&gt;</operator> <name>g</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>r</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>r</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>g</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>g</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_color_hsv_t</name></type> <name>hsv</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>rgbMax</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>delta</name> <init>= <expr><name>rgbMax</name> <operator>-</operator> <name>rgbMin</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>hsv</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name>delta</name> <operator>/</operator> <name>rgbMax</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hsv</name><operator>.</operator><name>s</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>hsv</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>h</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rgbMax</name> <operator>==</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>g</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <name>delta</name><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>g</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if<condition>(<expr><name>rgbMax</name> <operator>==</operator> <name>g</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>b</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <name>delta</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if<condition>(<expr><name>rgbMax</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>g</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <name>delta</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<return>return <expr><name>hsv</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_color_hsv_t</name></type> <name>lv_color_to_hsv</name><parameter_list>(<parameter><decl><type><name>lv_color_t</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_color32_t</name></type> <name>color32</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>color32</name><operator>.</operator><name>full</name></name> <operator>=</operator> <call><name>lv_color_to32</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lv_color_rgb_to_hsv</name><argument_list>(<argument><expr><name><name>color32</name><operator>.</operator><name>ch</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>color32</name><operator>.</operator><name>ch</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>color32</name><operator>.</operator><name>ch</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
