<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_utils.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_math.h"</cpp:file></cpp:include>































<function><type><name>char</name> <modifier>*</modifier></type> <name>lv_utils_num_to_str</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>digitCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>digitCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>LV_MATH_ABS</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>digit</name> <init>= <expr><name>num</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>digitCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>digit</name> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>digitCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>digitCount</name><operator>--</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>digitCount</name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>digitCount</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>digitCount</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>digitCount</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>void</name> <modifier>*</modifier></type> <name>lv_utils_bsearch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>,
<parameter><function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pRef</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pElement</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>middle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>middle</name> <operator>=</operator> <name>base</name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>middle</name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>middle</name> <operator>+=</operator> <name>size</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>middle</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




</unit>
