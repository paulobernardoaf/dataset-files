<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_bidi.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_BIDI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BIDI_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BIDI_LRO</name></cpp:macro> <cpp:value>"\xE2\x80\xAD"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_BIDI_RLO</name></cpp:macro> <cpp:value>"\xE2\x80\xAE"</cpp:value></cpp:define> 




<enum>enum
<block>{

<decl><name>LV_BIDI_DIR_LTR</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>LV_BIDI_DIR_RTL</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>LV_BIDI_DIR_AUTO</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>LV_BIDI_DIR_INHERIT</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>LV_BIDI_DIR_NEUTRAL</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>LV_BIDI_DIR_WEAK</name> <init>= <expr><literal type="number">0x21</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><name>uint8_t</name></type> <name>lv_bidi_dir_t</name>;</typedef>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_BIDI</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>lv_bidi_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str_out</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lv_bidi_process_paragraph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pos_conv_out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos_conv_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>lv_bidi_get_next_paragraph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_bidi_dir_t</name></type> <name>lv_bidi_detect_base_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>txt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_bidi_dir_t</name></type> <name>lv_bidi_get_letter_dir</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>lv_bidi_letter_is_weak</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>lv_bidi_letter_is_rtl</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>lv_bidi_letter_is_neutral</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint16_t</name></type> <name>lv_bidi_get_logical_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bidi_txt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>visual_pos</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_rtl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint16_t</name></type> <name>lv_bidi_get_visual_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str_in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bidi_txt</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>lv_bidi_dir_t</name></type> <name>base_dir</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>logical_pos</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_rtl</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
