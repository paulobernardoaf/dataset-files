<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_log.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_log.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_LOG</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LOG_PRINTF</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<decl_stmt><decl><type><specifier>static</specifier> <name>lv_log_print_g_cb_t</name></type> <name>custom_print_cb</name></decl>;</decl_stmt>















<function><type><name>void</name></type> <name>lv_log_register_print_cb</name><parameter_list>(<parameter><decl><type><name>lv_log_print_g_cb_t</name></type> <name>print_cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>custom_print_cb</name> <operator>=</operator> <name>print_cb</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lv_log_add</name><parameter_list>(<parameter><decl><type><name>lv_log_level_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>_LV_LOG_LEVEL_NUM</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>LV_LOG_LEVEL</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_LOG_PRINTF</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>lvl_prefix</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Trace"</literal></expr>, <expr><literal type="string">"Info"</literal></expr>, <expr><literal type="string">"Warn"</literal></expr>, <expr><literal type="string">"Error"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %s \t(%s #%d)\n"</literal></expr></argument>, <argument><expr><name><name>lvl_prefix</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>custom_print_cb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>custom_print_cb</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
