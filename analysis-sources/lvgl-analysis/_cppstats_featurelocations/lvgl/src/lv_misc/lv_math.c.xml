<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_math.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>sin0_90_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">572</literal></expr>, <expr><literal type="number">1144</literal></expr>, <expr><literal type="number">1715</literal></expr>, <expr><literal type="number">2286</literal></expr>, <expr><literal type="number">2856</literal></expr>, <expr><literal type="number">3425</literal></expr>, <expr><literal type="number">3993</literal></expr>, <expr><literal type="number">4560</literal></expr>, <expr><literal type="number">5126</literal></expr>, <expr><literal type="number">5690</literal></expr>, <expr><literal type="number">6252</literal></expr>, <expr><literal type="number">6813</literal></expr>, <expr><literal type="number">7371</literal></expr>, <expr><literal type="number">7927</literal></expr>, <expr><literal type="number">8481</literal></expr>,
<expr><literal type="number">9032</literal></expr>, <expr><literal type="number">9580</literal></expr>, <expr><literal type="number">10126</literal></expr>, <expr><literal type="number">10668</literal></expr>, <expr><literal type="number">11207</literal></expr>, <expr><literal type="number">11743</literal></expr>, <expr><literal type="number">12275</literal></expr>, <expr><literal type="number">12803</literal></expr>, <expr><literal type="number">13328</literal></expr>, <expr><literal type="number">13848</literal></expr>, <expr><literal type="number">14364</literal></expr>, <expr><literal type="number">14876</literal></expr>, <expr><literal type="number">15383</literal></expr>, <expr><literal type="number">15886</literal></expr>, <expr><literal type="number">16383</literal></expr>, <expr><literal type="number">16876</literal></expr>,
<expr><literal type="number">17364</literal></expr>, <expr><literal type="number">17846</literal></expr>, <expr><literal type="number">18323</literal></expr>, <expr><literal type="number">18794</literal></expr>, <expr><literal type="number">19260</literal></expr>, <expr><literal type="number">19720</literal></expr>, <expr><literal type="number">20173</literal></expr>, <expr><literal type="number">20621</literal></expr>, <expr><literal type="number">21062</literal></expr>, <expr><literal type="number">21497</literal></expr>, <expr><literal type="number">21925</literal></expr>, <expr><literal type="number">22347</literal></expr>, <expr><literal type="number">22762</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23571</literal></expr>, <expr><literal type="number">23964</literal></expr>,
<expr><literal type="number">24351</literal></expr>, <expr><literal type="number">24730</literal></expr>, <expr><literal type="number">25101</literal></expr>, <expr><literal type="number">25465</literal></expr>, <expr><literal type="number">25821</literal></expr>, <expr><literal type="number">26169</literal></expr>, <expr><literal type="number">26509</literal></expr>, <expr><literal type="number">26841</literal></expr>, <expr><literal type="number">27165</literal></expr>, <expr><literal type="number">27481</literal></expr>, <expr><literal type="number">27788</literal></expr>, <expr><literal type="number">28087</literal></expr>, <expr><literal type="number">28377</literal></expr>, <expr><literal type="number">28659</literal></expr>, <expr><literal type="number">28932</literal></expr>, <expr><literal type="number">29196</literal></expr>,
<expr><literal type="number">29451</literal></expr>, <expr><literal type="number">29697</literal></expr>, <expr><literal type="number">29934</literal></expr>, <expr><literal type="number">30162</literal></expr>, <expr><literal type="number">30381</literal></expr>, <expr><literal type="number">30591</literal></expr>, <expr><literal type="number">30791</literal></expr>, <expr><literal type="number">30982</literal></expr>, <expr><literal type="number">31163</literal></expr>, <expr><literal type="number">31335</literal></expr>, <expr><literal type="number">31498</literal></expr>, <expr><literal type="number">31650</literal></expr>, <expr><literal type="number">31794</literal></expr>, <expr><literal type="number">31927</literal></expr>, <expr><literal type="number">32051</literal></expr>, <expr><literal type="number">32165</literal></expr>,
<expr><literal type="number">32269</literal></expr>, <expr><literal type="number">32364</literal></expr>, <expr><literal type="number">32448</literal></expr>, <expr><literal type="number">32523</literal></expr>, <expr><literal type="number">32587</literal></expr>, <expr><literal type="number">32642</literal></expr>, <expr><literal type="number">32687</literal></expr>, <expr><literal type="number">32722</literal></expr>, <expr><literal type="number">32747</literal></expr>, <expr><literal type="number">32762</literal></expr>, <expr><literal type="number">32767</literal></expr>}</block></expr></init></decl>;</decl_stmt>














<function><type><name>int16_t</name></type> <name>lv_trigo_sin</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <name>angle</name> <operator>%</operator> <literal type="number">360</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>angle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">360</literal> <operator>+</operator> <name>angle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>angle</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>sin0_90_table</name><index>[<expr><name>angle</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>angle</name> <operator>&gt;=</operator> <literal type="number">90</literal> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <literal type="number">180</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">180</literal> <operator>-</operator> <name>angle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>sin0_90_table</name><index>[<expr><name>angle</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>angle</name> <operator>&gt;=</operator> <literal type="number">180</literal> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <literal type="number">270</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <name>angle</name> <operator>-</operator> <literal type="number">180</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name><name>sin0_90_table</name><index>[<expr><name>angle</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">360</literal> <operator>-</operator> <name>angle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name><name>sin0_90_table</name><index>[<expr><name>angle</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int32_t</name></type> <name>lv_bezier3</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>u0</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>u2</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>u3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t_rem</name> <init>= <expr><literal type="number">1024</literal> <operator>-</operator> <name>t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t_rem2</name> <init>= <expr><operator>(</operator><name>t_rem</name> <operator>*</operator> <name>t_rem</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t_rem3</name> <init>= <expr><operator>(</operator><name>t_rem2</name> <operator>*</operator> <name>t_rem</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t2</name> <init>= <expr><operator>(</operator><name>t</name> <operator>*</operator> <name>t</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t3</name> <init>= <expr><operator>(</operator><name>t2</name> <operator>*</operator> <name>t</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>t_rem3</name> <operator>*</operator> <name>u0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">3</literal> <operator>*</operator> <name>t_rem2</name> <operator>*</operator> <name>t</name> <operator>*</operator> <name>u1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v3</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">3</literal> <operator>*</operator> <name>t_rem</name> <operator>*</operator> <name>t2</name> <operator>*</operator> <name>u2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v4</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>t3</name> <operator>*</operator> <name>u3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>v1</name> <operator>+</operator> <name>v2</name> <operator>+</operator> <name>v3</name> <operator>+</operator> <name>v4</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>uint16_t</name></type> <name>lv_atan2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>










<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>negflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tempdegree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>degree</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uy</name></decl>;</decl_stmt>


<expr_stmt><expr><name>negflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negflag</name> <operator>+=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ux</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negflag</name> <operator>+=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><name>ux</name> <operator>&gt;</operator> <name>uy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>degree</name> <operator>=</operator> <operator>(</operator><name>uy</name> <operator>*</operator> <literal type="number">45</literal><operator>)</operator> <operator>/</operator> <name>ux</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>negflag</name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>degree</name> <operator>=</operator> <operator>(</operator><name>ux</name> <operator>*</operator> <literal type="number">45</literal><operator>)</operator> <operator>/</operator> <name>uy</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>comp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tempdegree</name> <operator>=</operator> <name>degree</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&lt;=</operator> <literal type="number">44</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&lt;=</operator> <literal type="number">41</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&lt;=</operator> <literal type="number">37</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tempdegree</name> <operator>&gt;=</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>degree</name> <operator>+=</operator> <name>comp</name></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><name>negflag</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>degree</name> <operator>=</operator> <operator>(</operator><literal type="number">90</literal> <operator>-</operator> <name>degree</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>negflag</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name>negflag</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>degree</name> <operator>=</operator> <operator>(</operator><literal type="number">180</literal> <operator>+</operator> <name>degree</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>degree</name> <operator>=</operator> <operator>(</operator><literal type="number">180</literal> <operator>-</operator> <name>degree</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name>negflag</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>degree</name> <operator>=</operator> <operator>(</operator><literal type="number">360</literal> <operator>-</operator> <name>degree</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>degree</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint32_t</name></type> <name>lv_sqrt</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>root</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>place</name> <init>= <expr><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>place</name> <operator>&gt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>place</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
<while>while<condition>(<expr><name>place</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;=</operator> <name>root</name> <operator>+</operator> <name>place</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>-=</operator> <name>root</name> <operator>+</operator> <name>place</name></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>+=</operator> <operator>(</operator><name>place</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>root</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>place</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>




</unit>
