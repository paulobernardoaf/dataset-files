<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_fs.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_fs.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lv_core/lv_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_ll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_gc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_GC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> LV_GC_INCLUDE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>free</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_real_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
















<function><type><name>void</name></type> <name>lv_fs_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lv_ll_init</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_drv_ll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_fs_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>lv_fs_is_ready</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name> <init>= <expr><call><name>lv_fs_get_drv</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>drv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><call><name><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name><argument_list>(<argument><expr><name>drv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_open</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>lv_fs_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>letter</name> <init>= <expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <call><name>lv_fs_get_drv</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_NOT_EX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_HW_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_OUT_OF_MEM</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>open_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>real_path</name> <init>= <expr><call><name>lv_fs_get_real_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>open_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>, <argument><expr><name>real_path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>LV_FS_RES_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_close</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>close_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>letter</name> <init>= <expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>lv_fs_get_drv</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>drv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_NOT_EX</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name><argument_list>(<argument><expr><name>drv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_HW_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>remove_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>real_path</name> <init>= <expr><call><name>lv_fs_get_real_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>drv</name><operator>-&gt;</operator><name>remove_cb</name></name><argument_list>(<argument><expr><name>drv</name></expr></argument>, <argument><expr><name>real_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_read</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>btr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>br</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>br</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>br</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>br_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>read_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>btr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>br</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>br</name> <operator>=</operator> <name>br_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_write</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>btw</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>bw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>bw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>write_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bw_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>write_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>btw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bw_tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>bw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bw</name> <operator>=</operator> <name>bw_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_seek</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>seek_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>seek_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_tell</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>tell_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>tell_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_trunc</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>tell_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>trunc_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_size</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>size_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>file_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>size_cb</name></name><argument_list>(<argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>file_p</name><operator>-&gt;</operator><name>file_d</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>newname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>oldname</name> <operator>||</operator> <operator>!</operator><name>newname</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>letter</name> <init>= <expr><name><name>oldname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name> <init>= <expr><call><name>lv_fs_get_drv</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>drv</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_EX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name><name>drv</name><operator>-&gt;</operator><name>ready_cb</name></name><argument_list>(<argument><expr><name>drv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_HW_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>rename_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>old_real</name> <init>= <expr><call><name>lv_fs_get_real_path</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>new_real</name> <init>= <expr><call><name>lv_fs_get_real_path</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>drv</name><operator>-&gt;</operator><name>rename_cb</name></name><argument_list>(<argument><expr><name>drv</name></expr></argument>, <argument><expr><name>old_real</name></expr></argument>, <argument><expr><name>new_real</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_dir_open</name><parameter_list>(<parameter><decl><type><name>lv_fs_dir_t</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>letter</name> <init>= <expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <call><name>lv_fs_get_drv</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_NOT_EX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>=</operator> <call><name>lv_mem_alloc</name><argument_list>(<argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>rddir_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_OUT_OF_MEM</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>dir_open_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>real_path</name> <init>= <expr><call><name>lv_fs_get_real_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>dir_open_cb</name></name><argument_list>(<argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name></expr></argument>, <argument><expr><name>real_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_dir_read</name><parameter_list>(<parameter><decl><type><name>lv_fs_dir_t</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>dir_read_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_NOT_IMP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name> <init>= <expr><call><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>dir_read_cb</name></name><argument_list>(<argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_dir_close</name><parameter_list>(<parameter><decl><type><name>lv_fs_dir_t</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>dir_close_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>LV_FS_RES_NOT_IMP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name><operator>-&gt;</operator><name>dir_close_cb</name></name><argument_list>(<argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name></expr></argument>, <argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rddir_p</name><operator>-&gt;</operator><name>dir_d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>lv_fs_res_t</name></type> <name>lv_fs_free_space</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>total_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>free_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name> <init>= <expr><call><name>lv_fs_get_drv</name><argument_list>(<argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>drv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LV_FS_RES_INV_PARAM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lv_fs_res_t</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>free_space_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>LV_FS_RES_NOT_IMP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>free_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>drv</name><operator>-&gt;</operator><name>free_space_cb</name></name><argument_list>(<argument><expr><name>drv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>total_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>total_p</name> <operator>=</operator> <name>total_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>free_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>free_p</name> <operator>=</operator> <name>free_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>lv_fs_drv_init</name><parameter_list>(<parameter><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>drv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_fs_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>lv_fs_drv_register</name><parameter_list>(<parameter><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>new_drv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_drv</name> <operator>=</operator> <call><name>lv_ll_ins_head</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LV_GC_ROOT</name><argument_list>(<argument><expr><name>_lv_drv_ll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LV_ASSERT_MEM</name><argument_list>(<argument><expr><name>new_drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>new_drv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_drv</name></expr></argument>, <argument><expr><name>drv_p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_fs_drv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>lv_fs_get_drv</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_drv_ll)</argument>, <argument>drv</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>letter</name></name> <operator>==</operator> <name>letter</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>drv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_letters</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>LV_LL_READ</name><argument_list>(<argument>LV_GC_ROOT(_lv_drv_ll)</argument>, <argument>drv</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>letter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>fn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>fn</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>fn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>fn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="string">""</literal></expr>;</return> 
</block_content>}</block></function>






<function><type><name>char</name> <modifier>*</modifier></type> <name>lv_fs_up</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt> 


<while>while<condition>(<expr><name><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>path</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt> 


<while>while<condition>(<expr><name><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>path</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_real_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>path</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
