<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_fs.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_FS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_FILESYSTEM</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_mem.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_FS_MAX_FN_LENGTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_FS_MAX_PATH_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>







<enum>enum <block>{
<decl><name>LV_FS_RES_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>LV_FS_RES_HW_ERR</name></decl>, 
<decl><name>LV_FS_RES_FS_ERR</name></decl>, 
<decl><name>LV_FS_RES_NOT_EX</name></decl>, 
<decl><name>LV_FS_RES_FULL</name></decl>, 
<decl><name>LV_FS_RES_LOCKED</name></decl>, 
<decl><name>LV_FS_RES_DENIED</name></decl>, 
<decl><name>LV_FS_RES_BUSY</name></decl>, 
<decl><name>LV_FS_RES_TOUT</name></decl>, 
<decl><name>LV_FS_RES_NOT_IMP</name></decl>, 
<decl><name>LV_FS_RES_OUT_OF_MEM</name></decl>, 
<decl><name>LV_FS_RES_INV_PARAM</name></decl>, 
<decl><name>LV_FS_RES_UNKNOWN</name></decl>, 
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_fs_res_t</name>;</typedef>




<enum>enum <block>{
<decl><name>LV_FS_MODE_WR</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>LV_FS_MODE_RD</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_fs_mode_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_lv_fs_drv_t</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name>letter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>file_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rddir_size</name></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ready_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>open_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>lv_fs_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>close_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>remove_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>read_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>btr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>br</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>write_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>btw</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>bw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>seek_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>tell_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pos_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>trunc_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>size_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>size_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>rename_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>newname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>free_space_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>total_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>free_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>dir_open_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>dir_read_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>fn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>lv_fs_res_t</name></type> (<modifier>*</modifier><name>dir_close_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_fs_drv_t</name></name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LV_USE_USER_DATA</name></expr></cpp:if>
<decl_stmt><decl><type><name>lv_fs_drv_user_data_t</name></type> <name>user_data</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>lv_fs_drv_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>file_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name></decl>;</decl_stmt>
}</block></struct></type> <name>lv_fs_file_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>dir_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name></decl>;</decl_stmt>
}</block></struct></type> <name>lv_fs_dir_t</name>;</typedef>








<function_decl><type><name>void</name></type> <name>lv_fs_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>lv_fs_drv_init</name><parameter_list>(<parameter><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_fs_drv_register</name><parameter_list>(<parameter><decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>drv_p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_fs_drv_t</name> <modifier>*</modifier></type> <name>lv_fs_get_drv</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>lv_fs_is_ready</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_open</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>lv_fs_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_close</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_read</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>btr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>br</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_write</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>btw</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>bw</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_seek</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_tell</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_trunc</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_size</name><parameter_list>(<parameter><decl><type><name>lv_fs_file_t</name> <modifier>*</modifier></type> <name>file_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>newname</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_dir_open</name><parameter_list>(<parameter><decl><type><name>lv_fs_dir_t</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_dir_read</name><parameter_list>(<parameter><decl><type><name>lv_fs_dir_t</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>fn</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_dir_close</name><parameter_list>(<parameter><decl><type><name>lv_fs_dir_t</name> <modifier>*</modifier></type> <name>rddir_p</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>lv_fs_res_t</name></type> <name>lv_fs_free_space</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>total_p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>free_p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_letters</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fn</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>lv_fs_up</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>lv_fs_get_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
