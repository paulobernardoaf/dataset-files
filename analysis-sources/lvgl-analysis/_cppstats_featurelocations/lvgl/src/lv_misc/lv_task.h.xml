<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_task.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_TASK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_TASK_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LV_CONF_INCLUDE_SIMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_conf.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lv_conf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_ll.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LV_ATTRIBUTE_TASK_HANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LV_ATTRIBUTE_TASK_HANDLER</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct_decl>struct <name>_lv_task_t</name>;</struct_decl>




<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lv_task_cb_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_lv_task_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




<enum>enum <block>{
<decl><name>LV_TASK_PRIO_OFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>LV_TASK_PRIO_LOWEST</name></decl>,
<decl><name>LV_TASK_PRIO_LOW</name></decl>,
<decl><name>LV_TASK_PRIO_MID</name></decl>,
<decl><name>LV_TASK_PRIO_HIGH</name></decl>,
<decl><name>LV_TASK_PRIO_HIGHEST</name></decl>,
<decl><name>_LV_TASK_PRIO_NUM</name></decl>,
}</block>;</enum>
<typedef>typedef <type><name>uint8_t</name></type> <name>lv_task_prio_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>_lv_task_t</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>period</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_run</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lv_task_cb_t</name></type> <name>task_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>prio</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>once</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
}</block></struct></type> <name>lv_task_t</name>;</typedef>








<function_decl><type><name>void</name></type> <name>lv_task_core_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>LV_ATTRIBUTE_TASK_HANDLER</name> <name>void</name></type> <name>lv_task_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>lv_task_create_basic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>lv_task_create</name><parameter_list>(<parameter><decl><type><name>lv_task_cb_t</name></type> <name>task_xcb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>lv_task_prio_t</name></type> <name>prio</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_task_del</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_task_set_cb</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>lv_task_cb_t</name></type> <name>task_cb</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_task_set_prio</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>lv_task_prio_t</name></type> <name>prio</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_task_set_period</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>period</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_task_ready</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_task_once</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>lv_task_reset</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lv_task_enable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>en</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>uint8_t</name></type> <name>lv_task_get_idle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
