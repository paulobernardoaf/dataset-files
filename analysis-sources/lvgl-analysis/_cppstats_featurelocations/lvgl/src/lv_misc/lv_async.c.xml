<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\lvgl-analysis\_cppstats_featurelocations\lvgl\src\lv_misc\lv_async.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lv_async.h"</cpp:file></cpp:include>













<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lv_async_task_cb</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>













<function><type><name>lv_res_t</name></type> <name>lv_async_call</name><parameter_list>(<parameter><decl><type><name>lv_async_cb_t</name></type> <name>async_xcb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>lv_async_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>lv_mem_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv_async_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LV_RES_INV</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>lv_task_t</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>lv_task_create</name><argument_list>(<argument><expr><name>lv_async_task_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LV_TASK_PRIO_HIGHEST</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_INV</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>async_xcb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lv_task_once</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LV_RES_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lv_async_task_cb</name><parameter_list>(<parameter><decl><type><name>lv_task_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lv_async_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>lv_async_info_t</name> <operator>*</operator><operator>)</operator><name><name>task</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lv_mem_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
