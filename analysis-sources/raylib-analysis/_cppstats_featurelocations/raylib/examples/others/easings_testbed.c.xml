<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\others\easings_testbed.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raylib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easings.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_STEP</name></cpp:macro> <cpp:value>20.0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_STEP_FINE</name></cpp:macro> <cpp:value>2.0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_MIN</name></cpp:macro> <cpp:value>1.0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_MAX</name></cpp:macro> <cpp:value>10000.0f</cpp:value></cpp:define>


<enum>enum <name>EasingTypes</name> <block>{
<decl><name>EASE_LINEAR_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>EASE_LINEAR_IN</name></decl>,
<decl><name>EASE_LINEAR_OUT</name></decl>,
<decl><name>EASE_LINEAR_IN_OUT</name></decl>,
<decl><name>EASE_SINE_IN</name></decl>,
<decl><name>EASE_SINE_OUT</name></decl>,
<decl><name>EASE_SINE_IN_OUT</name></decl>,
<decl><name>EASE_CIRC_IN</name></decl>,
<decl><name>EASE_CIRC_OUT</name></decl>,
<decl><name>EASE_CIRC_IN_OUT</name></decl>,
<decl><name>EASE_CUBIC_IN</name></decl>,
<decl><name>EASE_CUBIC_OUT</name></decl>,
<decl><name>EASE_CUBIC_IN_OUT</name></decl>,
<decl><name>EASE_QUAD_IN</name></decl>,
<decl><name>EASE_QUAD_OUT</name></decl>,
<decl><name>EASE_QUAD_IN_OUT</name></decl>,
<decl><name>EASE_EXPO_IN</name></decl>,
<decl><name>EASE_EXPO_OUT</name></decl>,
<decl><name>EASE_EXPO_IN_OUT</name></decl>,
<decl><name>EASE_BACK_IN</name></decl>,
<decl><name>EASE_BACK_OUT</name></decl>,
<decl><name>EASE_BACK_IN_OUT</name></decl>,
<decl><name>EASE_BOUNCE_OUT</name></decl>,
<decl><name>EASE_BOUNCE_IN</name></decl>,
<decl><name>EASE_BOUNCE_IN_OUT</name></decl>,
<decl><name>EASE_ELASTIC_IN</name></decl>,
<decl><name>EASE_ELASTIC_OUT</name></decl>,
<decl><name>EASE_ELASTIC_IN_OUT</name></decl>,
<decl><name>NUM_EASING_TYPES</name></decl>,
<decl><name>EASING_NONE</name> <init>= <expr><name>NUM_EASING_TYPES</name></expr></init></decl>
}</block>;</enum>


<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>NoEase</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl> 



<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>float</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>Easings</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>EASE_LINEAR_NONE</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseLinearNone"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseLinearNone</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_LINEAR_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseLinearIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseLinearIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_LINEAR_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseLinearOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseLinearOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_LINEAR_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseLinearInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseLinearInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_SINE_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseSineIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseSineIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_SINE_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseSineOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseSineOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_SINE_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseSineInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseSineInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_CIRC_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseCircIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseCircIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_CIRC_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseCircOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseCircOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_CIRC_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseCircInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseCircInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_CUBIC_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseCubicIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseCubicIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_CUBIC_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseCubicOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseCubicOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_CUBIC_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseCubicInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseCubicInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_QUAD_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseQuadIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseQuadIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_QUAD_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseQuadOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseQuadOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_QUAD_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseQuadInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseQuadInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_EXPO_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseExpoIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseExpoIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_EXPO_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseExpoOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseExpoOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_EXPO_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseExpoInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseExpoInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_BACK_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseBackIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseBackIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_BACK_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseBackOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseBackOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_BACK_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseBackInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseBackInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_BOUNCE_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseBounceOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseBounceOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_BOUNCE_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseBounceIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseBounceIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_BOUNCE_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseBounceInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseBounceInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_ELASTIC_IN</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseElasticIn"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseElasticIn</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_ELASTIC_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseElasticOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseElasticOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASE_ELASTIC_IN_OUT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"EaseElasticInOut"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>EaseElasticInOut</name></expr> }</block></expr>,
<expr><index>[<expr><name>EASING_NONE</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"None"</literal></expr>, <expr><operator>.</operator><name>func</name> <operator>=</operator> <name>NoEase</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [easings] example - easings testbed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>ballPosition</name> <init>= <expr><block>{ <expr><literal type="number">100.0f</literal></expr>, <expr><literal type="number">200.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><literal type="number">300.0f</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>paused</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>boundedT</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>easingX</name> <init>= <expr><name>EASING_NONE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>easingY</name> <init>= <expr><name>EASING_NONE</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_T</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>boundedT</name> <operator>=</operator> <operator>!</operator><name>boundedT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>easingX</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>easingX</name> <operator>&gt;</operator> <name>EASING_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>easingX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>easingX</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>easingX</name> <operator>=</operator> <name>EASING_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>easingX</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>easingY</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>easingY</name> <operator>&gt;</operator> <name>EASING_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>easingY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>easingY</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>easingY</name> <operator>=</operator> <name>EASING_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>easingY</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_W</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;</operator> <name>D_MAX</name> <operator>-</operator> <name>D_STEP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+=</operator> <name>D_STEP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_Q</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>d</name> <operator>&gt;</operator> <name>D_MIN</name> <operator>+</operator> <name>D_STEP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>-=</operator> <name>D_STEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_S</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;</operator> <name>D_MAX</name> <operator>-</operator> <name>D_STEP_FINE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+=</operator> <name>D_STEP_FINE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>d</name> <operator>&gt;</operator> <name>D_MIN</name> <operator>+</operator> <name>D_STEP_FINE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>-=</operator> <name>D_STEP_FINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_T</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_W</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_Q</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_S</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_A</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>boundedT</name> <operator>==</operator> <name>true</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>&gt;=</operator> <name>d</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ballPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">100.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ballPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">100.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>paused</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>paused</name> <operator>=</operator> <operator>!</operator><name>paused</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paused</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>boundedT</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <name>d</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>boundedT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ballPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>Easings</name><index>[<expr><name>easingX</name></expr>]</index></name><operator>.</operator><call><name>func</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">700.0f</literal> <operator>-</operator> <literal type="number">100.0f</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ballPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>Easings</name><index>[<expr><name>easingY</name></expr>]</index></name><operator>.</operator><call><name>func</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">400.0f</literal> <operator>-</operator> <literal type="number">100.0f</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"Easing x: %s"</literal></expr></argument>, <argument><expr><name><name>Easings</name><index>[<expr><name>easingX</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"Easing y: %s"</literal></expr></argument>, <argument><expr><name><name>Easings</name><index>[<expr><name>easingY</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"t (%c) = %.2f d = %.2f"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>boundedT</name> <operator>==</operator> <name>true</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'b'</literal></expr> </then><else>: <expr><literal type="char">'u'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use ENTER to play or pause movement, use SPACE to restart"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>FONT_SIZE</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use D and W or A and S keys to change duration"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>FONT_SIZE</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use LEFT or RIGHT keys to choose easing for the x axis"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>FONT_SIZE</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use UP or DOWN keys to choose easing for the y axis"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>FONT_SIZE</name><operator>*</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>ballPosition</name></expr></argument>, <argument><expr><literal type="number">16.0f</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>float</name></type> <name>NoEase</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>burn</name> <init>= <expr><name>t</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>d</name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>burn</name></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function></unit>
