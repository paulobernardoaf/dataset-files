<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\shaders\shaders_palette_switch.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PALETTES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORS_PER_PALETTE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUES_PER_COLOR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>palettes</name><index>[<expr><name>MAX_PALETTES</name></expr>]</index><index>[<expr><name>COLORS_PER_PALETTE</name><operator>*</operator><name>VALUES_PER_COLOR</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">30</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">41</literal></expr>,
<expr><literal type="number">48</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">66</literal></expr>,
<expr><literal type="number">77</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">97</literal></expr>,
<expr><literal type="number">137</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">87</literal></expr>,
<expr><literal type="number">190</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">127</literal></expr>,
<expr><literal type="number">238</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">204</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">138</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">88</literal></expr>,
<expr><literal type="number">217</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">117</literal></expr>,
<expr><literal type="number">230</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">193</literal></expr>,
<expr><literal type="number">69</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">115</literal></expr>,
<expr><literal type="number">75</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">166</literal></expr>,
<expr><literal type="number">165</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">194</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">247</literal></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>paletteText</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"3-BIT RGB"</literal></expr>,
<expr><literal type="string">"AMMO-8 (GameBoy-like)"</literal></expr>,
<expr><literal type="string">"RKBV (2-strip film)"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shaders] example - color palette switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/palette_switch.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>paletteLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"palette"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentPalette</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineHeight</name> <init>= <expr><name>screenHeight</name><operator>/</operator><name>COLORS_PER_PALETTE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentPalette</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentPalette</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentPalette</name> <operator>&gt;=</operator> <name>MAX_PALETTES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentPalette</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>currentPalette</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentPalette</name> <operator>=</operator> <name>MAX_PALETTES</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>SetShaderValueV</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>paletteLoc</name></expr></argument>, <argument><expr><name><name>palettes</name><index>[<expr><name>currentPalette</name></expr>]</index></name></expr></argument>, <argument><expr><name>UNIFORM_IVEC3</name></expr></argument>, <argument><expr><name>COLORS_PER_PALETTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLORS_PER_PALETTE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<macro><name>DrawRectangle</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>lineHeight*i</argument>, <argument>GetScreenWidth()</argument>, <argument>lineHeight</argument>, <argument>(Color){ i</argument>, <argument>i</argument>, <argument>i</argument>, <argument><literal type="number">255</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"&lt; &gt;"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"CURRENT PALETTE:"</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name><name>paletteText</name><index>[<expr><name>currentPalette</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">700</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
