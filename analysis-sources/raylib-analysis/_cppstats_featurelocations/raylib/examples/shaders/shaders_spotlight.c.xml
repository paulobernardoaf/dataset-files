<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\shaders\shaders_spotlight.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSPOT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>numStars</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <block>{ 
<decl_stmt><decl><type><name>Vector2</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>vel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>inner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>radius</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>posLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>innerLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>radiusLoc</name></decl>;</decl_stmt>
}</block></struct></type> <name>Spot</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Star</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>vel</name></decl>;</decl_stmt>
}</block></struct></type> <name>Star</name>;</typedef>

<function_decl><type><name>void</name></type> <name>UpdateStar</name><parameter_list>(<parameter><decl><type><name>Star</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ResetStar</name><parameter_list>(<parameter><decl><type><name>Star</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib - shader spotlight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HideCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Texture</name></type> <name>texRay</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/raysan.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Star</name></type> <name><name>stars</name><index>[<expr><name>numStars</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>numStars</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ResetStar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stars</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>screenWidth</name><operator>/</operator><literal type="number">2.0</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> 
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>numStars</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UpdateStar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stars</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>frameCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Shader</name></type> <name>spotShader</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/spotlight.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Spot</name></type> <name><name>spots</name><index>[<expr><name>MAXSPOT</name></expr>]</index></name></decl>;</decl_stmt>





<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXSPOT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>posName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"spots[x].pos\0"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>innerName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"spots[x].inner\0"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>radiusName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"spots[x].radius\0"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>posName</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>innerName</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>radiusName</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>posLoc</name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name>posName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>innerLoc</name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name>innerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radiusLoc</name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name>radiusName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>



<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><literal type="string">"screenWidth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sw</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name>wLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sw</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXSPOT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vel</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10.0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inner</name> <operator>=</operator> <literal type="number">28</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name> <operator>=</operator> <literal type="number">48</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>posLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>innerLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inner</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radiusLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><name>frameCounter</name><operator>++</operator></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>numStars</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UpdateStar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stars</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXSPOT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>mp</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mp</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenHeight</name> <operator>-</operator> <name><name>mp</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name>screenWidth</name> <operator>-</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>screenHeight</name> <operator>-</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>, <argument><expr><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>posLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>



<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>numStars</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>stars</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>stars</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texRay</name></expr></argument>,
<argument><expr><operator>(</operator><name>screenWidth</name><operator>/</operator><literal type="number">2.0</literal><operator>)</operator> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>frameCounter</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>/</operator><literal type="number">51.45f</literal></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>screenWidth</name><operator>/</operator><literal type="number">2.2</literal><operator>)</operator> <operator>-</operator> <literal type="number">32</literal></expr></argument>,
<argument><expr><operator>(</operator><name>screenHeight</name><operator>/</operator><literal type="number">2.0</literal><operator>)</operator> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>frameCounter</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>/</operator><literal type="number">17.87f</literal></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>screenHeight</name><operator>/</operator><literal type="number">4.2</literal><operator>)</operator></expr></argument>,
<argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>spotShader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>screenWidth</name></expr></argument>,<argument><expr><name>screenHeight</name></expr></argument>,<argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Move the mouse!"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Pitch Black"</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>*</operator> <literal type="number">.2</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Dark"</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>*</operator> <literal type="number">.66</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texRay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ResetStar</name><parameter_list>(<parameter><decl><type><name>Star</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2.0f</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2.0f</literal></expr> }</block></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vel</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vel</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100.0f</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vel</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vel</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <macro><name>Vector2Add</name><argument_list>(<argument>s-&gt;pos</argument>, <argument>Vector2MultiplyV(s-&gt;vel, (Vector2){ <literal type="number">8</literal>, <literal type="number">8</literal> })</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateStar</name><parameter_list>(<parameter><decl><type><name>Star</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>Vector2Add</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ResetStar</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


</unit>
