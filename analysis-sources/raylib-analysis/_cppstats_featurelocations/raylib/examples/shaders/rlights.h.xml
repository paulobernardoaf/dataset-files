<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\shaders\rlights.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RLIGHTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLIGHTS_H</name></cpp:macro></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LIGHTS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 






<typedef>typedef <type><struct>struct <block>{ 
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>enabledLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>typeLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>posLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>targetLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colorLoc</name></decl>;</decl_stmt>
}</block></struct></type> <name>Light</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>LIGHT_DIRECTIONAL</name></decl>,
<decl><name>LIGHT_POINT</name></decl>
}</block></enum></type> <name>LightType</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>Light</name></type> <name>CreateLight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>void</name></type> <name>UpdateLightValues</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Light</name></type> <name>light</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIGHTS_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>














<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lightsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 











<function><type><name>Light</name></type> <name>CreateLight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Light</name></type> <name>light</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lightsCount</name> <operator>&lt;</operator> <name>MAX_LIGHTS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>char</name></type> <name><name>enabledName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"lights[x].enabled\0"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>typeName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"lights[x].type\0"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>posName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"lights[x].position\0"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>targetName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"lights[x].target\0"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>colorName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"lights[x].color\0"</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>enabledName</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>lightsCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typeName</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>lightsCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>posName</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>lightsCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>targetName</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>lightsCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorName</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>lightsCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>light</name><operator>.</operator><name>enabledLoc</name></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>enabledName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>typeLoc</name></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>posLoc</name></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>posName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>targetLoc</name></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>targetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>.</operator><name>colorLoc</name></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>colorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateLightValues</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>light</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lightsCount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>light</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>UpdateLightValues</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Light</name></type> <name>light</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>light</name><operator>.</operator><name>enabledLoc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>light</name><operator>.</operator><name>enabled</name></name></expr></argument>, <argument><expr><name>UNIFORM_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>light</name><operator>.</operator><name>typeLoc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>light</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>UNIFORM_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>light</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>light</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>light</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>light</name><operator>.</operator><name>posLoc</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>UNIFORM_VEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>target</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>light</name><operator>.</operator><name>target</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>light</name><operator>.</operator><name>target</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>light</name><operator>.</operator><name>target</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>light</name><operator>.</operator><name>targetLoc</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>UNIFORM_VEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>light</name><operator>.</operator><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><literal type="number">255</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>light</name><operator>.</operator><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><literal type="number">255</literal></expr>, 
<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>light</name><operator>.</operator><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><literal type="number">255</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>light</name><operator>.</operator><name>color</name><operator>.</operator><name>a</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>light</name><operator>.</operator><name>colorLoc</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>UNIFORM_VEC4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
