<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\shaders\shaders_fog.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLIGHTS_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlights.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetConfigFlags</name><argument_list>(<argument><expr><name>FLAG_MSAA_4X_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shaders] example - fog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ 
<expr><operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">6.0f</literal></expr> }</block></expr>, 
<expr><operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, 
<expr><operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, 
<expr><literal type="number">45.0f</literal></expr>, <expr><name>CAMERA_PERSPECTIVE</name></expr> }</block></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>Model</name></type> <name>modelA</name> <init>= <expr><call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshTorus</name><argument_list>(<argument><expr><literal type="number">0.4f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Model</name></type> <name>modelB</name> <init>= <expr><call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshCube</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Model</name></type> <name>modelC</name> <init>= <expr><call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshSphere</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture</name></type> <name>texture</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/texel_checker.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>modelA</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modelB</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modelC</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/base_lighting.vs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/fog.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MODEL</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"matModel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VECTOR_VIEW</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"viewPos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>ambientLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"ambient"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>SetShaderValue</name><argument_list>(<argument>shader</argument>, <argument>ambientLoc</argument>, <argument>(float[<literal type="number">4</literal>]){ <literal type="number">0.2f</literal></argument>, <argument><literal type="number">0.2f</literal></argument>, <argument><literal type="number">0.2f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>, <argument>UNIFORM_VEC4</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fogDensity</name> <init>= <expr><literal type="number">0.15f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fogDensityLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"fogDensity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>fogDensityLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fogDensity</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>modelA</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shader</name> <operator>=</operator> <name>shader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modelB</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shader</name> <operator>=</operator> <name>shader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modelC</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shader</name> <operator>=</operator> <name>shader</name></expr>;</expr_stmt>


<macro><name>CreateLight</name><argument_list>(<argument>LIGHT_POINT</argument>, <argument>(Vector3){ <literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">6</literal> }</argument>, <argument>Vector3Zero()</argument>, <argument>WHITE</argument>, <argument>shader</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_ORBITAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>fogDensity</name> <operator>+=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fogDensity</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fogDensity</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fogDensity</name> <operator>-=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fogDensity</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fogDensity</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>fogDensityLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fogDensity</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>modelA</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name><name>modelA</name><operator>.</operator><name>transform</name></name></expr></argument>, <argument><expr><call><name>MatrixRotateX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.025</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modelA</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name><name>modelA</name><operator>.</operator><name>transform</name></name></expr></argument>, <argument><expr><call><name>MatrixRotateZ</name><argument_list>(<argument><expr><literal type="number">0.012</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VECTOR_VIEW</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>UNIFORM_VEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawModel</name><argument_list>(<argument><expr><name>modelA</name></expr></argument>, <argument><expr><call><name>Vector3Zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DrawModel</name><argument_list>(<argument>modelB</argument>, <argument>(Vector3){ -<literal type="number">2.6</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawModel</name><argument_list>(<argument>modelC</argument>, <argument>(Vector3){ <literal type="number">2.6</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">20</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content> <macro><name>DrawModel</name><argument_list>(<argument>modelA</argument>,<argument>(Vector3){ i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal> }</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"Use KEY_UP/KEY_DOWN to change fog density [%.2f]"</literal></expr></argument>, <argument><expr><name>fogDensity</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>modelA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>modelB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>modelC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
