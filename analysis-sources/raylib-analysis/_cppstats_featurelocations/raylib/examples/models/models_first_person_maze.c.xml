<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\models\models_first_person_maze.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - first person maze"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0.2f</literal></expr>, <expr><literal type="number">0.4f</literal></expr>, <expr><literal type="number">0.2f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><literal type="number">45.0f</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>imMap</name> <init>= <expr><call><name>LoadImage</name><argument_list>(<argument><expr><literal type="string">"resources/cubicmap.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Texture2D</name></type> <name>cubicmap</name> <init>= <expr><call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>imMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <macro><name>GenMeshCubicmap</name><argument_list>(<argument>imMap</argument>, <argument>(Vector3){ <literal type="number">1.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/cubicmap_atlas.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>mapPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>imMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>mapPosition</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">16.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">8.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Vector3</name></type> <name>playerPosition</name> <init>= <expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_FIRST_PERSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<decl_stmt><decl><type><name>Vector3</name></type> <name>oldCamPos</name> <init>= <expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>Vector2</name></type> <name>playerPos</name> <init>= <expr><block>{ <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>playerRadius</name> <init>= <expr><literal type="number">0.1f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>playerCellX</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>playerPos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>mapPosition</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>playerCellY</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>playerPos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>mapPosition</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>playerCellX</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerCellX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>playerCellX</name> <operator>&gt;=</operator> <name><name>cubicmap</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerCellX</name> <operator>=</operator> <name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>playerCellY</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerCellY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>playerCellY</name> <operator>&gt;=</operator> <name><name>cubicmap</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerCellY</name> <operator>=</operator> <name><name>cubicmap</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>cubicmap</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>cubicmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mapPixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">255</literal><operator>)</operator> <operator>&amp;&amp;</operator> 
<operator>(</operator><macro><name>CheckCollisionCircleRec</name><argument_list>(<argument>playerPos</argument>, <argument>playerRadius</argument>,
<argument>(Rectangle){ mapPosition.x - <literal type="number">0.5f</literal> + x*<literal type="number">1.0f</literal></argument>, <argument>mapPosition.z - <literal type="number">0.5f</literal> + y*<literal type="number">1.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>)</argument_list></macro><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>oldCamPos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>mapPosition</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextureEx</name><argument_list>(<argument>cubicmap</argument>, <argument>(Vector2){ GetScreenWidth() - cubicmap.width*<literal type="number">4</literal> - <literal type="number">20</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">4.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>cubicmap</name><operator>.</operator><name>width</name></name><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name><name>cubicmap</name><operator>.</operator><name>width</name></name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cubicmap</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>cubicmap</name><operator>.</operator><name>width</name></name><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">20</literal> <operator>+</operator> <name>playerCellX</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>+</operator> <name>playerCellY</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mapPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>cubicmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
