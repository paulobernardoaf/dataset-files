<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\models\models_yaw_pitch_roll.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include>


<function_decl><type><name>void</name></type> <name>DrawAngleGauge</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>angleGauge</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>title</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - plane rotations (yaw, pitch, roll)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texAngleGauge</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/angle_gauge.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texBackground</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/background.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texPitch</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/pitch.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texPlane</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/plane.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>framebuffer</name> <init>= <expr><call><name>LoadRenderTexture</name><argument_list>(<argument><expr><literal type="number">192</literal></expr></argument>, <argument><expr><literal type="number">192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><call><name>LoadModel</name><argument_list>(<argument><expr><literal type="string">"resources/plane.obj"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/plane_diffuse.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GenTextureMipmaps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">60.0f</literal></expr>, <expr><operator>-</operator><literal type="number">120.0f</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">12.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">30.0f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>pitch</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>roll</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>yaw</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roll</name> <operator>+=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roll</name> <operator>-=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>roll</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roll</name> <operator>-=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>roll</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roll</name> <operator>+=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yaw</name> <operator>+=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_A</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yaw</name> <operator>-=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yaw</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yaw</name> <operator>-=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>yaw</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yaw</name> <operator>+=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pitch</name> <operator>+=</operator> <literal type="number">0.6f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pitch</name> <operator>-=</operator> <literal type="number">0.6f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pitch</name> <operator>&gt;</operator> <literal type="number">0.3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pitch</name> <operator>-=</operator> <literal type="number">0.3f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pitch</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pitch</name> <operator>+=</operator> <literal type="number">0.3f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pitchOffset</name> <init>= <expr><name>pitch</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pitchOffset</name> <operator>&gt;</operator> <literal type="number">180</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pitchOffset</name> <operator>-=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>pitchOffset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">180</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pitchOffset</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>pitchOffset</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>











<expr_stmt><expr><name><name>model</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <macro><name>MatrixRotateXYZ</name><argument_list>(<argument>(Vector3){DEG2RAD*pitch</argument>,<argument>DEG2RAD*yaw</argument>,<argument>DEG2RAD*roll}</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>centerX</name> <init>= <expr><name><name>framebuffer</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>centerY</name> <init>= <expr><name><name>framebuffer</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>framebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginBlendMode</name><argument_list>(<argument><expr><name>BLEND_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>texBackground</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>texBackground.width</argument>, <argument>texBackground.height }</argument>,
<argument>(Rectangle){ centerX</argument>, <argument>centerY</argument>, <argument>texBackground.width*scaleFactor</argument>, <argument>texBackground.height*scaleFactor}</argument>,
<argument>(Vector2){ texBackground.width/<literal type="number">2</literal>*scaleFactor</argument>, <argument>texBackground.height/<literal type="number">2</literal>*scaleFactor + pitchOffset*scaleFactor }</argument>, <argument>roll</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>texPitch</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>texPitch.width</argument>, <argument>texPitch.height }</argument>,
<argument>(Rectangle){ centerX</argument>, <argument>centerY</argument>, <argument>texPitch.width*scaleFactor</argument>, <argument>texPitch.height*scaleFactor }</argument>,
<argument>(Vector2){ texPitch.width/<literal type="number">2</literal>*scaleFactor</argument>, <argument>texPitch.height/<literal type="number">2</literal>*scaleFactor + pitchOffset*scaleFactor }</argument>, <argument>roll</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>texPlane</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>texPlane.width</argument>, <argument>texPlane.height }</argument>,
<argument>(Rectangle){ centerX</argument>, <argument>centerY</argument>, <argument>texPlane.width*scaleFactor</argument>, <argument>texPlane.height*scaleFactor }</argument>,
<argument>(Vector2){ texPlane.width/<literal type="number">2</literal>*scaleFactor</argument>, <argument>texPlane.height/<literal type="number">2</literal>*scaleFactor }</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>EndBlendMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawModel</name><argument_list>(<argument>model</argument>, <argument>(Vector3){ <literal type="number">0</literal></argument>, <argument><literal type="number">6.0f</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> 
<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawAngleGauge</name><argument_list>(<argument><expr><name>texAngleGauge</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><name>roll</name></expr></argument>, <argument><expr><literal type="string">"roll"</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawAngleGauge</name><argument_list>(<argument><expr><name>texAngleGauge</name></expr></argument>, <argument><expr><literal type="number">190</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><literal type="string">"pitch"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawAngleGauge</name><argument_list>(<argument><expr><name>texAngleGauge</name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><name>yaw</name></expr></argument>, <argument><expr><literal type="string">"yaw"</literal></expr></argument>, <argument><expr><name>SKYBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>, <argument><expr><literal type="number">260</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>SKYBLUE</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>, <argument><expr><literal type="number">260</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>DARKBLUE</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Pitch controlled with: KEY_UP / KEY_DOWN"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">370</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Roll controlled with: KEY_LEFT / KEY_RIGHT"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">390</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Yaw controlled with: KEY_A / KEY_S"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">410</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>DrawTextureRec</name><argument_list>(<argument>framebuffer.texture</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>framebuffer.texture.width</argument>, <argument>-framebuffer.texture.height }</argument>,
<argument>(Vector2){ screenWidth - framebuffer.texture.width - <literal type="number">20</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument>Fade(WHITE, <literal type="number">0.8f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><name>screenWidth</name> <operator>-</operator> <name><name>framebuffer</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name><name>framebuffer</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>framebuffer</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>





<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadRenderTexture</name><argument_list>(<argument><expr><name>framebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texAngleGauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texBackground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texPitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texPlane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawAngleGauge</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>angleGauge</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>title</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>srcRec</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>angleGauge</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>angleGauge</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>dstRec</name> <init>= <expr><block>{ <expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name><name>angleGauge</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>angleGauge</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>origin</name> <init>= <expr><block>{ <expr><name><name>angleGauge</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name><name>angleGauge</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>textSize</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawTexturePro</name><argument_list>(<argument><expr><name>angleGauge</name></expr></argument>, <argument><expr><name>srcRec</name></expr></argument>, <argument><expr><name>dstRec</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%5.1f"</literal></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%5.1f"</literal></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>textSize</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>textSize</name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>textSize</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>textSize</name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
