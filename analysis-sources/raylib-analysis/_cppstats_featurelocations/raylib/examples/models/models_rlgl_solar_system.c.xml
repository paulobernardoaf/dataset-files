<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\models\models_rlgl_solar_system.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlgl.h"</cpp:file></cpp:include>




<function_decl><type><name>void</name></type> <name>DrawSphereBasic</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>sunRadius</name> <init>= <expr><literal type="number">4.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>earthRadius</name> <init>= <expr><literal type="number">0.6f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>earthOrbitRadius</name> <init>= <expr><literal type="number">8.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>moonRadius</name> <init>= <expr><literal type="number">0.16f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>moonOrbitRadius</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - rlgl module usage with push/pop matrix transformations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">16.0f</literal></expr>, <expr><literal type="number">16.0f</literal></expr>, <expr><literal type="number">16.0f</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">45.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rotationSpeed</name> <init>= <expr><literal type="number">0.2f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>earthRotation</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>earthOrbitRotation</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>moonRotation</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>moonOrbitRotation</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>earthRotation</name> <operator>+=</operator> <operator>(</operator><literal type="number">5.0f</literal><operator>*</operator><name>rotationSpeed</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>earthOrbitRotation</name> <operator>+=</operator> <operator>(</operator><literal type="number">365</literal><operator>/</operator><literal type="number">360.0f</literal><operator>*</operator><operator>(</operator><literal type="number">5.0f</literal><operator>*</operator><name>rotationSpeed</name><operator>)</operator><operator>*</operator><name>rotationSpeed</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>moonRotation</name> <operator>+=</operator> <operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name>rotationSpeed</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>moonOrbitRotation</name> <operator>+=</operator> <operator>(</operator><literal type="number">8.0f</literal><operator>*</operator><name>rotationSpeed</name><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlScalef</name><argument_list>(<argument><expr><name>sunRadius</name></expr></argument>, <argument><expr><name>sunRadius</name></expr></argument>, <argument><expr><name>sunRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DrawSphereBasic</name><argument_list>(<argument><expr><name>GOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>earthOrbitRotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name>earthOrbitRadius</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><operator>-</operator><name>earthOrbitRotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>earthRotation</name></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlScalef</name><argument_list>(<argument><expr><name>earthRadius</name></expr></argument>, <argument><expr><name>earthRadius</name></expr></argument>, <argument><expr><name>earthRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawSphereBasic</name><argument_list>(<argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>moonOrbitRotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name>moonOrbitRadius</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><operator>-</operator><name>moonOrbitRotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>moonRotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlScalef</name><argument_list>(<argument><expr><name>moonRadius</name></expr></argument>, <argument><expr><name>moonRadius</name></expr></argument>, <argument><expr><name>moonRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawSphereBasic</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<macro><name>DrawCircle3D</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>earthOrbitRadius</argument>, <argument>(Vector3){ <literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">90.0f</literal></argument>, <argument>Fade(RED, <literal type="number">0.5f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"EARTH ORBITING AROUND THE SUN!"</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>DrawSphereBasic</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rings</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slices</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
