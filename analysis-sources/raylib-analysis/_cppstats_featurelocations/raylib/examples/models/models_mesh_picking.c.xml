<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\models\models_mesh_picking.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MAX</name></cpp:macro> <cpp:value>340282346638528859811704183484516925440.0f</cpp:value></cpp:define> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - mesh picking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">20.0f</literal></expr>, <expr><literal type="number">20.0f</literal></expr>, <expr><literal type="number">20.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">8.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.6f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">45.0f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Ray</name></type> <name>ray</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Model</name></type> <name>tower</name> <init>= <expr><call><name>LoadModel</name><argument_list>(<argument><expr><literal type="string">"resources/models/turret.obj"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/models/turret_diffuse.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>tower</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>towerPos</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>BoundingBox</name></type> <name>towerBBox</name> <init>= <expr><call><name>MeshBoundingBox</name><argument_list>(<argument><expr><name><name>tower</name><operator>.</operator><name>meshes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>hitMeshBBox</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hitTriangle</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>ta</name> <init>= <expr><operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><operator>-</operator><literal type="number">25.0</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>tb</name> <init>= <expr><operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><operator>-</operator><literal type="number">4.0</literal></expr>, <expr><literal type="number">2.5</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>tc</name> <init>= <expr><operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><operator>-</operator><literal type="number">8.0</literal></expr>, <expr><literal type="number">6.5</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>bary</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>nearestHit</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hitObjectName</name> <init>= <expr><literal type="string">"None"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nearestHit</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name>FLT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nearestHit</name><operator>.</operator><name>hit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>cursorColor</name> <init>= <expr><name>WHITE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>ray</name> <operator>=</operator> <call><name>GetMouseRay</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>groundHitInfo</name> <init>= <expr><call><name>GetCollisionRayGround</name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>groundHitInfo</name><operator>.</operator><name>hit</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>groundHitInfo</name><operator>.</operator><name>distance</name></name> <operator>&lt;</operator> <name><name>nearestHit</name><operator>.</operator><name>distance</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nearestHit</name> <operator>=</operator> <name>groundHitInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursorColor</name> <operator>=</operator> <name>GREEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hitObjectName</name> <operator>=</operator> <literal type="string">"Ground"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>triHitInfo</name> <init>= <expr><call><name>GetCollisionRayTriangle</name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>triHitInfo</name><operator>.</operator><name>hit</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>triHitInfo</name><operator>.</operator><name>distance</name></name> <operator>&lt;</operator> <name><name>nearestHit</name><operator>.</operator><name>distance</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nearestHit</name> <operator>=</operator> <name>triHitInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursorColor</name> <operator>=</operator> <name>PURPLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hitObjectName</name> <operator>=</operator> <literal type="string">"Triangle"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bary</name> <operator>=</operator> <call><name>Vector3Barycenter</name><argument_list>(<argument><expr><name><name>nearestHit</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hitTriangle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>hitTriangle</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>meshHitInfo</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRayBox</name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>towerBBox</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hitMeshBBox</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<expr_stmt><expr><name>meshHitInfo</name> <operator>=</operator> <call><name>GetCollisionRayModel</name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>tower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>meshHitInfo</name><operator>.</operator><name>hit</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>meshHitInfo</name><operator>.</operator><name>distance</name></name> <operator>&lt;</operator> <name><name>nearestHit</name><operator>.</operator><name>distance</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nearestHit</name> <operator>=</operator> <name>meshHitInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursorColor</name> <operator>=</operator> <name>ORANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hitObjectName</name> <operator>=</operator> <literal type="string">"Mesh"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hitMeshBBox</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>DrawModel</name><argument_list>(<argument><expr><name>tower</name></expr></argument>, <argument><expr><name>towerPos</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawLine3D</name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>PURPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawLine3D</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>PURPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawLine3D</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name>PURPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>hitMeshBBox</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawBoundingBox</name><argument_list>(<argument><expr><name>towerBBox</name></expr></argument>, <argument><expr><name>LIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>nearestHit</name><operator>.</operator><name>hit</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name><name>nearestHit</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><name>cursorColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name><name>nearestHit</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>normalEnd</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>normalEnd</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>nearestHit</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>nearestHit</name><operator>.</operator><name>normal</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>normalEnd</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>nearestHit</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>nearestHit</name><operator>.</operator><name>normal</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>normalEnd</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>nearestHit</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>nearestHit</name><operator>.</operator><name>normal</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine3D</name><argument_list>(<argument><expr><name><name>nearestHit</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name>normalEnd</name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRay</name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Hit Object: %s"</literal></expr></argument>, <argument><expr><name>hitObjectName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nearestHit</name><operator>.</operator><name>hit</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ypos</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Distance: %3.2f"</literal></expr></argument>, <argument><expr><name><name>nearestHit</name><operator>.</operator><name>distance</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ypos</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Hit Pos: %3.2f %3.2f %3.2f"</literal></expr></argument>,
<argument><expr><name><name>nearestHit</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>,
<argument><expr><name><name>nearestHit</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>nearestHit</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ypos</name> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Hit Norm: %3.2f %3.2f %3.2f"</literal></expr></argument>,
<argument><expr><name><name>nearestHit</name><operator>.</operator><name>normal</name><operator>.</operator><name>x</name></name></expr></argument>,
<argument><expr><name><name>nearestHit</name><operator>.</operator><name>normal</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>nearestHit</name><operator>.</operator><name>normal</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ypos</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hitTriangle</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Barycenter: %3.2f %3.2f %3.2f"</literal></expr></argument>, <argument><expr><name><name>bary</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bary</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bary</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ypos</name> <operator>+</operator> <literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use Mouse to Move Camera"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"(c) Turret 3D model by Alberto Cano"</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <literal type="number">200</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>tower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
