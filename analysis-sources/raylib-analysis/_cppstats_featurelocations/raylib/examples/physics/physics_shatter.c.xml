<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\physics\physics_shatter.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHYSAC_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHYSAC_NO_THREADS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"physac.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetConfigFlags</name><argument_list>(<argument><expr><name>FLAG_MSAA_4X_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"Physac [raylib] - Body shatter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>logoX</name> <init>= <expr><name>screenWidth</name> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"Physac"</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>logoY</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>needsReset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>InitPhysics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetPhysicsGravity</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>CreatePhysicsBodyPolygon</name><argument_list>(<argument>(Vector2){ screenWidth/<literal type="number">2</literal></argument>, <argument>screenHeight/<literal type="number">2</literal> }</argument>, <argument>GetRandomValue(<literal type="number">80</literal>, <literal type="number">200</literal>)</argument>, <argument>GetRandomValue(<literal type="number">3</literal>, <literal type="number">8</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>

<expr_stmt><expr><call><name>RunPhysicsStep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>needsReset</name></expr>)</condition>
<block>{<block_content>

<macro><name>CreatePhysicsBodyPolygon</name><argument_list>(<argument>(Vector2){ screenWidth/<literal type="number">2</literal></argument>, <argument>screenHeight/<literal type="number">2</literal> }</argument>, <argument>GetRandomValue(<literal type="number">80</literal>, <literal type="number">200</literal>)</argument>, <argument>GetRandomValue(<literal type="number">3</literal>, <literal type="number">8</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>needsReset</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>ResetPhysics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>needsReset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>GetPhysicsBodiesCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>PhysicsBody</name></type> <name>currentBody</name> <init>= <expr><call><name>GetPhysicsBody</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>currentBody</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PhysicsShatter</name><argument_list>(<argument><expr><name>currentBody</name></expr></argument>, <argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal><operator>/</operator><name><name>currentBody</name><operator>-&gt;</operator><name>inverseMass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>bodiesCount</name> <init>= <expr><call><name>GetPhysicsBodiesCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bodiesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>PhysicsBody</name></type> <name>currentBody</name> <init>= <expr><call><name>GetPhysicsBody</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertexCount</name> <init>= <expr><call><name>GetPhysicsShapeVerticesCount</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vertexCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<decl_stmt><decl><type><name>Vector2</name></type> <name>vertexA</name> <init>= <expr><call><name>GetPhysicsShapeVertex</name><argument_list>(<argument><expr><name>currentBody</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>jj</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>vertexCount</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Vector2</name></type> <name>vertexB</name> <init>= <expr><call><name>GetPhysicsShapeVertex</name><argument_list>(<argument><expr><name>currentBody</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawLineV</name><argument_list>(<argument><expr><name>vertexA</name></expr></argument>, <argument><expr><name>vertexB</name></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Left mouse button in polygon area to shatter body\nPress 'R' to reset example"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Physac"</literal></expr></argument>, <argument><expr><name>logoX</name></expr></argument>, <argument><expr><name>logoY</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Powered by"</literal></expr></argument>, <argument><expr><name>logoX</name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>logoY</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>ClosePhysics</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
