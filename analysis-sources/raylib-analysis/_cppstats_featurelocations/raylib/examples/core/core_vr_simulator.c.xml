<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\core\core_vr_simulator.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>SetConfigFlags</name><argument_list>(<argument><expr><name>FLAG_MSAA_4X_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [core] example - vr simulator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitVrSimulator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VrDeviceInfo</name></type> <name>hmd</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>hResolution</name></name> <operator>=</operator> <literal type="number">2160</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>vResolution</name></name> <operator>=</operator> <literal type="number">1200</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>hScreenSize</name></name> <operator>=</operator> <literal type="number">0.133793f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>vScreenSize</name></name> <operator>=</operator> <literal type="number">0.0669f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>vScreenCenter</name></name> <operator>=</operator> <literal type="number">0.04678f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>eyeToScreenDistance</name></name> <operator>=</operator> <literal type="number">0.041f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>lensSeparationDistance</name></name> <operator>=</operator> <literal type="number">0.07f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>interpupillaryDistance</name></name> <operator>=</operator> <literal type="number">0.07f</literal></expr>;</expr_stmt> 



<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.22f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.24f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>chromaAbCorrection</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.996f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>chromaAbCorrection</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.004f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>chromaAbCorrection</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.014f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hmd</name><operator>.</operator><name>chromaAbCorrection</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>Shader</name></type> <name>distortion</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/distortion%i.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetVrConfiguration</name><argument_list>(<argument><expr><name>hmd</name></expr></argument>, <argument><expr><name>distortion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">5.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">5.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">60.0f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>cubePosition</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_FIRST_PERSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ToggleVrMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginVrDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndVrDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>distortion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseVrSimulator</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
