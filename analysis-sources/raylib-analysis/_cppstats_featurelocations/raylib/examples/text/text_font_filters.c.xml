<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\text\text_font_filters.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [text] example - font filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">50</literal></expr>]</index></name> <init>= <expr><literal type="string">"Loaded Font"</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><call><name>LoadFontEx</name><argument_list>(<argument><expr><literal type="string">"resources/KAISG.ttf"</literal></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>GenTextureMipmaps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fontSize</name> <init>= <expr><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>fontPosition</name> <init>= <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>textSize</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>currentFontFilter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><name>fontSize</name> <operator>+=</operator> <call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">4.0f</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ONE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currentFontFilter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_TWO</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currentFontFilter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_THREE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_TRILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currentFontFilter</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>textSize</name> <operator>=</operator> <call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fontPosition</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fontPosition</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsFileDropped</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>droppedFiles</name> <init>= <expr><call><name>GetDroppedFiles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name><name>droppedFiles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".ttf"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadFontEx</name><argument_list>(<argument><expr><name><name>droppedFiles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClearDroppedFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use mouse wheel to change font size"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use KEY_RIGHT and KEY_LEFT to move text"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Use 1, 2, 3 to change texture filter"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Drop a new TTF font for dynamic loading"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>fontPosition</name></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Font size: %02.02f"</literal></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Text size: [%02.02f, %02.02f]"</literal></expr></argument>, <argument><expr><name><name>textSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>textSize</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"CURRENT TEXTURE FILTER:"</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentFontFilter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"POINT"</literal></expr></argument>, <argument><expr><literal type="number">570</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>currentFontFilter</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"BILINEAR"</literal></expr></argument>, <argument><expr><literal type="number">570</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>currentFontFilter</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"TRILINEAR"</literal></expr></argument>, <argument><expr><literal type="number">570</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>ClearDroppedFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
