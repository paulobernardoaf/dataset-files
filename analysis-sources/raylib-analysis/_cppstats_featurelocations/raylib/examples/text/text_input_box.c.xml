<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\text\text_input_box.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INPUT_CHARS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [text] example - input box"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAX_INPUT_CHARS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>letterCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>textBox</name> <init>= <expr><block>{ <expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">100</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mouseOnText</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>textBox</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouseOnText</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mouseOnText</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mouseOnText</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>GetKeyPressed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>key</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">125</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>letterCount</name> <operator>&lt;</operator> <name>MAX_INPUT_CHARS</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>letterCount</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>letterCount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>GetKeyPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>letterCount</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>letterCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>letterCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>letterCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mouseOnText</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PLACE MOUSE OVER INPUT BOX!"</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>textBox</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mouseOnText</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><name><name>textBox</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><name><name>textBox</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"INPUT CHARS: %i/%i"</literal></expr></argument>, <argument><expr><name>letterCount</name></expr></argument>, <argument><expr><name>MAX_INPUT_CHARS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">315</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouseOnText</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>letterCount</name> <operator>&lt;</operator> <name>MAX_INPUT_CHARS</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">20</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>textBox</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press BACKSPACE to delete chars..."</literal></expr></argument>, <argument><expr><literal type="number">230</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>IsAnyKeyPressed</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>keyPressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>GetKeyPressed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">126</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyPressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>keyPressed</name></expr>;</return>
</block_content>}</block></function></unit>
