<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\shapes\shapes_collision_area.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shapes] example - collision area"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Rectangle</name></type> <name>boxA</name> <init>= <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">50</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boxASpeedX</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Rectangle</name></type> <name>boxB</name> <init>= <expr><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">30</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>boxCollision</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>screenUpperLimit</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>boxA</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>boxASpeedX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>boxA</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>boxA</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>boxA</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>boxASpeedX</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>boxB</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetMouseX</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>boxB</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boxB</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetMouseY</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>boxB</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>boxB</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>boxB</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>boxB</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>boxB</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>boxB</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>boxB</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>boxB</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>boxB</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>boxB</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>boxB</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>boxB</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name>screenUpperLimit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>boxB</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenUpperLimit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>collision</name> <operator>=</operator> <call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>boxA</name></expr></argument>, <argument><expr><name>boxB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>collision</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>boxCollision</name> <operator>=</operator> <call><name>GetCollisionRec</name><argument_list>(<argument><expr><name>boxA</name></expr></argument>, <argument><expr><name>boxB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenUpperLimit</name></expr></argument>, <argument><expr><ternary><condition><expr><name>collision</name></expr>?</condition><then> <expr><name>RED</name></expr> </then><else>: <expr><name>BLACK</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>boxA</name></expr></argument>, <argument><expr><name>GOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>boxB</name></expr></argument>, <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>collision</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>boxCollision</name></expr></argument>, <argument><expr><name>LIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"COLLISION!"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"COLLISION!"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenUpperLimit</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Collision Area: %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>boxCollision</name><operator>.</operator><name>width</name></name><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>boxCollision</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>screenUpperLimit</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
