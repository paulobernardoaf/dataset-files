<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\shapes\shapes_rectangle_scaling.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_SCALE_MARK_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shapes] example - rectangle scaling mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name> <init>= <expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">80</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePosition</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mouseScaleReady</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mouseScaleMode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><name>mousePosition</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePosition</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<macro><name>CheckCollisionPointRec</name><argument_list>(<argument>mousePosition</argument>, <argument>(Rectangle){ rec.x + rec.width - MOUSE_SCALE_MARK_SIZE</argument>, <argument>rec.y + rec.height - MOUSE_SCALE_MARK_SIZE</argument>, <argument>MOUSE_SCALE_MARK_SIZE</argument>, <argument>MOUSE_SCALE_MARK_SIZE }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mouseScaleReady</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouseScaleMode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mouseScaleReady</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mouseScaleMode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mouseScaleReady</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>rec</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>rec</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <name>MOUSE_SCALE_MARK_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>MOUSE_SCALE_MARK_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>&lt;</operator> <name>MOUSE_SCALE_MARK_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>MOUSE_SCALE_MARK_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouseScaleMode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Scale rectangle dragging from bottom-right corner!"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>GREEN</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouseScaleReady</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DrawTriangle</name><argument_list>(<argument>(Vector2){ rec.x + rec.width - MOUSE_SCALE_MARK_SIZE</argument>, <argument>rec.y + rec.height }</argument>,
<argument>(Vector2){ rec.x + rec.width</argument>, <argument>rec.y + rec.height }</argument>,
<argument>(Vector2){ rec.x + rec.width</argument>, <argument>rec.y + rec.height - MOUSE_SCALE_MARK_SIZE }</argument>, <argument>RED</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
