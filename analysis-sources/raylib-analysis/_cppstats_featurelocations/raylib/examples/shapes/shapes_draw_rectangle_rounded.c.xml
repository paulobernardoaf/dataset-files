<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\examples\shapes\shapes_draw_rectangle_rounded.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raylib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUI_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raygui.h"</cpp:file></cpp:include> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shapes] example - draw rectangle rounded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>roundness</name> <init>= <expr><literal type="number">0.2f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>segments</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineThick</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>drawRect</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>drawRoundedRect</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>drawRoundedLines</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name> <init>= <expr><block>{ <expr><operator>(</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name>width</name> <operator>-</operator> <literal type="number">250</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>(</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>height</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>width</name></expr>, <expr><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><literal type="number">560</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">560</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">560</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">500</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drawRect</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>GOLD</name></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>drawRoundedRect</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRounded</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>roundness</name></expr></argument>, <argument><expr><name>segments</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>MAROON</name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>drawRoundedLines</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRoundedLines</name><argument_list>(<argument><expr><name>rec</name></expr></argument>,<argument><expr><name>roundness</name></expr></argument>, <argument><expr><name>segments</name></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>MAROON</name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>width</name> <operator>=</operator> <macro><name>GuiSliderBar</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">40</literal></argument>, <argument><literal type="number">105</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument><literal type="string">"Width"</literal></argument>, <argument>width</argument>, <argument><literal type="number">0</literal></argument>, <argument>GetScreenWidth() - <literal type="number">300</literal></argument>, <argument>true</argument> )</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <macro><name>GuiSliderBar</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">70</literal></argument>, <argument><literal type="number">105</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument><literal type="string">"Height"</literal></argument>, <argument>height</argument>, <argument><literal type="number">0</literal></argument>, <argument>GetScreenHeight() - <literal type="number">50</literal></argument>, <argument>true</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>roundness</name> <operator>=</operator> <macro><name>GuiSliderBar</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">140</literal></argument>, <argument><literal type="number">105</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument><literal type="string">"Roundness"</literal></argument>, <argument>roundness</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>true</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>lineThick</name> <operator>=</operator> <macro><name>GuiSliderBar</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">170</literal></argument>, <argument><literal type="number">105</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument><literal type="string">"Thickness"</literal></argument>, <argument>lineThick</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument>true</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>segments</name> <operator>=</operator> <macro><name>GuiSliderBar</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">240</literal></argument>, <argument><literal type="number">105</literal></argument>, <argument><literal type="number">20</literal>}</argument>, <argument><literal type="string">"Segments"</literal></argument>, <argument>segments</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>true</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>drawRoundedRect</name> <operator>=</operator> <macro><name>GuiCheckBox</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">320</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument><literal type="string">"DrawRoundedRect"</literal></argument>, <argument>drawRoundedRect</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>drawRoundedLines</name> <operator>=</operator> <macro><name>GuiCheckBox</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">350</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument><literal type="string">"DrawRoundedLines"</literal></argument>, <argument>drawRoundedLines</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>drawRect</name> <operator>=</operator> <macro><name>GuiCheckBox</name><argument_list>(<argument>(Rectangle){ <literal type="number">640</literal></argument>, <argument><literal type="number">380</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument><literal type="number">20</literal>}</argument>, <argument><literal type="string">"DrawRect"</literal></argument>, <argument>drawRect</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"MODE: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>segments</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"MANUAL"</literal></expr> </then><else>: <expr><literal type="string">"AUTO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">280</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>segments</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>?</condition><then> <expr><name>MAROON</name></expr> </then><else>: <expr><name>DARKGRAY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>



<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
