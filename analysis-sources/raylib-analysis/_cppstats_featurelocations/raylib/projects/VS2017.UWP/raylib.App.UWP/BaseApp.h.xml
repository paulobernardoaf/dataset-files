<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\projects\VS2017.UWP\raylib.App.UWP\BaseApp.h">
































<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> PCH</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wrl.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/eglplatform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>ApplicationModel</name><operator>::</operator><name>Core</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>ApplicationModel</name><operator>::</operator><name>Activation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Input</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>Devices</name><operator>::</operator><name>Input</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>Foundation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>Foundation</name><operator>::</operator><name>Collections</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>Gaming</name><operator>::</operator><name>Input</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Windows</name><operator>::</operator><name>Graphics</name><operator>::</operator><name>Display</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>Microsoft</name><operator>::</operator><name>WRL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>Platform</name></decl>;</decl_stmt>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content> <decl_stmt><decl><type><name>EGLNativeWindowType</name></type> <name>handle</name></decl>;</decl_stmt> </block_content>}</block></extern><empty_stmt>;</empty_stmt>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GAMEPADS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GAMEPAD_BUTTONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GAMEPAD_AXIS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 


<decl_stmt><decl><type><name>bool</name></type> <name>cursorLocked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>mouseDelta</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CoreCursor</name> <modifier>^</modifier></type><name>regularCursor</name> <init>= <expr><name>ref</name> <name>new</name> <call><name>CoreCursor</name><argument_list>(<argument><expr><name>CoreCursorType</name><operator>::</operator><name>Arrow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>ref</name> <name>class</name></type> <name>BaseApp</name> <range>: <expr><name>public</name> <name>Windows</name><operator>::</operator><name>ApplicationModel</name><operator>::</operator><name>Core</name><operator>::</operator><name>IFrameworkView</name>
<block>{
<expr><name>public</name><operator>:</operator>


<name>virtual</name> <name>void</name> <macro><name>Initialize</name><argument_list>(<argument>Windows::ApplicationModel::Core::CoreApplicationView^ applicationView</argument>)</argument_list></macro>
<block>{


<expr><name><name>applicationView</name><operator>-&gt;</operator><name>Activated</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreApplicationView</name><modifier>^</modifier></expr></argument>, <argument><expr><name>IActivatedEventArgs</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnActivated</name></expr></argument>)</argument_list></call></expr>;





<expr><name>CoreApplication</name><operator>::</operator><name>Resuming</name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>EventHandler</name><argument_list type="generic">&lt;<argument><expr><name>Platform</name><operator>::</operator><name>Object</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnResuming</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>virtual</name> <name>void</name> <macro><name>SetWindow</name><argument_list>(<argument>Windows::UI::Core::CoreWindow^ window</argument>)</argument_list></macro>
<block>{
<expr><name><name>window</name><operator>-&gt;</operator><name>SizeChanged</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreWindow</name><modifier>^</modifier></expr></argument>, <argument><expr><name>WindowSizeChangedEventArgs</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnWindowSizeChanged</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>window</name><operator>-&gt;</operator><name>VisibilityChanged</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreWindow</name><modifier>^</modifier></expr></argument>, <argument><expr><name>VisibilityChangedEventArgs</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnVisibilityChanged</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>window</name><operator>-&gt;</operator><name>Closed</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreWindow</name><modifier>^</modifier></expr></argument>, <argument><expr><name>CoreWindowEventArgs</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnWindowClosed</name></expr></argument>)</argument_list></call></expr>;

<expr><name><name>window</name><operator>-&gt;</operator><name>PointerPressed</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreWindow</name><modifier>^</modifier></expr></argument>, <argument><expr><name>PointerEventArgs</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>PointerPressed</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>window</name><operator>-&gt;</operator><name>PointerWheelChanged</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreWindow</name><modifier>^</modifier></expr></argument>, <argument><expr><name>PointerEventArgs</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>PointerWheelChanged</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>window</name><operator>-&gt;</operator><name>KeyDown</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreWindow</name> <modifier>^</modifier></expr></argument>, <argument><expr><name>KeyEventArgs</name> <modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnKeyDown</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>window</name><operator>-&gt;</operator><name>KeyUp</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>CoreWindow</name> <modifier>^</modifier></expr></argument>, <argument><expr><name>KeyEventArgs</name> <modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnKeyUp</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Windows</name><operator>::</operator><name>Devices</name><operator>::</operator><name>Input</name><operator>::</operator><name>MouseDevice</name><operator>::</operator><call><name>GetForCurrentView</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>MouseMoved</name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>MouseDevice</name><modifier>^</modifier></expr></argument>, <argument><expr><name>MouseEventArgs</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>MouseMoved</name></expr></argument>)</argument_list></call></expr>;

<expr><name>DisplayInformation</name><operator>^</operator> <name>currentDisplayInformation</name> <operator>=</operator> <name>DisplayInformation</name><operator>::</operator><call><name>GetForCurrentView</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>currentDisplayInformation</name><operator>-&gt;</operator><name>DpiChanged</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>DisplayInformation</name><modifier>^</modifier></expr></argument>, <argument><expr><name>Object</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnDpiChanged</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>currentDisplayInformation</name><operator>-&gt;</operator><name>OrientationChanged</name></name> <operator>+=</operator> <name>ref</name> <name>new</name> <call><name><name>TypedEventHandler</name><argument_list type="generic">&lt;<argument><expr><name>DisplayInformation</name><modifier>^</modifier></expr></argument>, <argument><expr><name>Object</name><modifier>^</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseApp</name><operator>::</operator><name>OnOrientationChanged</name></expr></argument>)</argument_list></call></expr>;



<expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>EGLNativeWindowType</name><operator>)</operator><name>window</name></expr>;

<expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>virtual</name> <name>void</name> <macro><name>Load</name><argument_list>(<argument>Platform::String^ entryPoint</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>Setup</name><argument_list>(<argument>int width</argument>, <argument>int height</argument>)</argument_list></macro>
<block>{

<expr><name><name>this</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;
}</block>

<name>virtual</name> <name>void</name> <macro><name>Run</name><argument_list>()</argument_list></macro>
<block>{

<expr><name>DisplayInformation</name><operator>^</operator> <name>dInfo</name> <operator>=</operator> <name>DisplayInformation</name><operator>::</operator><call><name>GetForCurrentView</name><argument_list>()</argument_list></call></expr>;
<expr><name>Vector2</name> <name>screenSize</name> <operator>=</operator> <block>{ <expr><name><name>dInfo</name><operator>-&gt;</operator><name>ScreenWidthInRawPixels</name></name></expr>, <expr><name><name>dInfo</name><operator>-&gt;</operator><name>ScreenHeightInRawPixels</name></name></expr> }</block></expr>;


<expr><name>UWPMessage</name> <operator>*</operator><name>msg</name> <operator>=</operator> <call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SET_DISPLAY_DIMS</name></expr>;
<expr><name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name></name> <operator>=</operator> <name>screenSize</name></expr>;
<expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;


<expr><name>using</name> <name>clock</name> <operator>=</operator> <name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>high_resolution_clock</name></expr>;
<expr><name>auto</name> <name>timeStart</name> <operator>=</operator> <name>clock</name><operator>::</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;


<if_stmt><if>if <condition>(<expr><call><name>GetFPS</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>

<while>while <condition>(<expr><operator>!</operator><name>mWindowClosed</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mWindowVisible</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>delta</name> <init>= <expr><name>clock</name><operator>::</operator><call><name>now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>timeStart</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UWPMessage</name> <modifier>*</modifier></type><name>timeMsg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timeMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SET_GAME_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeMsg</name><operator>-&gt;</operator><name>paramDouble0</name></name> <operator>=</operator> <name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>timeMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PollInput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>Dispatcher</name><operator>-&gt;</operator><name>ProcessEvents</name></name><argument_list>(<argument><expr><name>CoreProcessEventsOption</name><operator>::</operator><name>ProcessAllIfPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
else
<block>{<block_content>
<expr_stmt><expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>Dispatcher</name><operator>-&gt;</operator><name>ProcessEvents</name></name><argument_list>(<argument><expr><name>CoreProcessEventsOption</name><operator>::</operator><name>ProcessOneAndAllPending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

CloseWindow(</block></block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></while>
}</block></expr></range></decl></decl_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>Update</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>Uninitialize</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<label><name>protected</name>:</label>


<function><type><name>void</name></type> <name>PollInput</name><parameter_list>()</parameter_list>
<block>{<block_content>

<block>{<block_content>

<while>while <condition>(<expr><call><name>UWPHasMessages</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>msg</name> <init>= <expr><call><name>UWPGetMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<switch>switch<condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UWP_MSG_SHOW_MOUSE</name></expr>:</case> 
<case>case <expr><name>UWP_MSG_UNLOCK_MOUSE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>PointerCursor</name> <operator>=</operator> <name>regularCursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursorLocked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MoveMouse</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>UWP_MSG_HIDE_MOUSE</name></expr>:</case> 
<case>case <expr><name>UWP_MSG_LOCK_MOUSE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>PointerCursor</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursorLocked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>UWP_MSG_SET_MOUSE_LOCATION</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>MoveMouse</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>DeleteUWPMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>


<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">0xA6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>state</name> <init>= <expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><operator>(</operator><name>Windows</name><operator>::</operator><name>System</name><operator>::</operator><name>VirtualKey</name><operator>)</operator> <name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HOLDHACK</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>KeyboardStateHack</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>None</name><operator>)</operator> <operator>==</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>None</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>KeyboardStateHack</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>None</name><operator>)</operator> <operator>==</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>None</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>KeyboardStateHack</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>None</name><operator>)</operator> <operator>==</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>None</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RegisterKey</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0xA4</literal> <operator>||</operator> <name>k</name> <operator>==</operator> <literal type="number">0xA5</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>Down</name><operator>)</operator> <operator>==</operator> <name>CoreVirtualKeyStates</name><operator>::</operator><name>Down</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterKey</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterKey</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>


<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>CurrentPointerID</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>point</name> <init>= <expr><name>PointerPoint</name><operator>::</operator><call><name>GetCurrentPoint</name><argument_list>(<argument><expr><name>CurrentPointerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>props</name> <init>= <expr><name><name>point</name><operator>-&gt;</operator><name>Properties</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>IsLeftButtonPressed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterClick</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterClick</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>IsRightButtonPressed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterClick</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterClick</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>IsMiddleButtonPressed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterClick</name><argument_list>(<argument><expr><name>MOUSE_MIDDLE_BUTTON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterClick</name><argument_list>(<argument><expr><name>MOUSE_MIDDLE_BUTTON</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CoreWindow</name> <modifier>^</modifier></type><name>window</name> <init>= <expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cursorLocked</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>curMousePos</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><name><name>curMousePos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>mouseDelta</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>y</name> <init>= <expr><name><name>curMousePos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>mouseDelta</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<macro><name>UpdateMousePosition</name><argument_list>(<argument>{ x</argument>, <argument>y }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>Vector2</name></type> <name>centerClient</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>PointerPosition</name></name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><name><name>centerClient</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>Bounds</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name><name>centerClient</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>Bounds</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>PointerPosition</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>Bounds</name><operator>.</operator><name>X</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>y</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>PointerPosition</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>Bounds</name><operator>.</operator><name>Y</name></name></expr></init></decl>;</decl_stmt>

<macro><name>UpdateMousePosition</name><argument_list>(<argument>{ x</argument>, <argument>y }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mouseDelta</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> ,<expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block>


<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>




<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SET_GAMEPAD_ACTIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramBool0</name></name> <operator>=</operator> <name>i</name> <operator>&lt;</operator> <name>Gamepad</name><operator>::</operator><name><name>Gamepads</name><operator>-&gt;</operator><name>Size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsGamepadAvailable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>gamepad</name> <init>= <expr><name>Gamepad</name><operator>::</operator><call><name><name>Gamepads</name><operator>-&gt;</operator><name>GetAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GamepadReading</name></type> <name>reading</name> <init>= <expr><call><name><name>gamepad</name><operator>-&gt;</operator><name>GetCurrentReading</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_RIGHT_FACE_DOWN</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>A</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>A</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_RIGHT_FACE_RIGHT</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>B</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>B</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_RIGHT_FACE_LEFT</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>X</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>X</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_RIGHT_FACE_UP</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>Y</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>Y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_LEFT_TRIGGER_1</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>LeftShoulder</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>LeftShoulder</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_RIGHT_TRIGGER_1</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>RightShoulder</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>RightShoulder</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_MIDDLE_LEFT</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>View</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>View</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_MIDDLE_RIGHT</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>Menu</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>Menu</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_LEFT_FACE_UP</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadUp</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadUp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_LEFT_FACE_RIGHT</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadRight</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadRight</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_LEFT_FACE_DOWN</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadDown</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadDown</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_LEFT_FACE_LEFT</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>reading</name><operator>.</operator><name>Buttons</name></name> <operator>&amp;</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadLeft</name><operator>)</operator> <operator>==</operator> <name>GamepadButtons</name><operator>::</operator><name>DPadLeft</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadButton</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_BUTTON_MIDDLE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>RegisterGamepadAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_AXIS_LEFT_X</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>reading</name><operator>.</operator><name>LeftThumbstickX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_AXIS_LEFT_Y</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>reading</name><operator>.</operator><name>LeftThumbstickY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_AXIS_RIGHT_X</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>reading</name><operator>.</operator><name>RightThumbstickX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_AXIS_RIGHT_Y</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>reading</name><operator>.</operator><name>RightThumbstickY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_AXIS_LEFT_TRIGGER</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>reading</name><operator>.</operator><name>LeftTrigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterGamepadAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GAMEPAD_AXIS_RIGHT_TRIGGER</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>reading</name><operator>.</operator><name>RightTrigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>OnActivated</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>ApplicationModel</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreApplicationView</name><operator>^</operator> <name>applicationView</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>ApplicationModel</name><operator>::</operator><name>Activation</name><operator>::</operator><name>IActivatedEventArgs</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Activate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>OnResuming</name><argument_list>(<argument><expr><name>Platform</name><operator>::</operator><name>Object</name><operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Platform</name><operator>::</operator><name>Object</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>OnWindowSizeChanged</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindow</name><operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>WindowSizeChangedEventArgs</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_HANDLE_RESIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>OnVisibilityChanged</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindow</name><operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>VisibilityChangedEventArgs</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>mWindowVisible</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>Visible</name></name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>OnWindowClosed</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindow</name><operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindowEventArgs</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>mWindowClosed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>OnDpiChanged</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>Graphics</name><operator>::</operator><name>Display</name><operator>::</operator><name>DisplayInformation</name><operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Platform</name><operator>::</operator><name>Object</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>OnOrientationChanged</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>Graphics</name><operator>::</operator><name>Display</name><operator>::</operator><name>DisplayInformation</name><operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Platform</name><operator>::</operator><name>Object</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>PointerPressed</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindow</name><operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>PointerEventArgs</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name>CurrentPointerID</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>CurrentPoint</name><operator>-&gt;</operator><name>PointerId</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>Handled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>PointerWheelChanged</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindow</name> <operator>^</operator><name>sender</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>PointerEventArgs</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SCROLL_WHEEL_UPDATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramFloat0</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>CurrentPoint</name><operator>-&gt;</operator><name>Properties</name><operator>-&gt;</operator><name>MouseWheelDelta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>MouseMoved</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>Devices</name><operator>::</operator><name>Input</name><operator>::</operator><name>MouseDevice</name><operator>^</operator> <name>mouseDevice</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>Devices</name><operator>::</operator><name>Input</name><operator>::</operator><name>MouseEventArgs</name><operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mouseDelta</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>args</name><operator>-&gt;</operator><name>MouseDelta</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mouseDelta</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>args</name><operator>-&gt;</operator><name>MouseDelta</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>OnKeyDown</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindow</name> <operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>KeyEventArgs</name> <operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HOLDHACK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RegisterKey</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>OnKeyUp</name><argument_list>(<argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>CoreWindow</name> <operator>^</operator> <name>sender</name></expr></argument>, <argument><expr><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Core</name><operator>::</operator><name>KeyEventArgs</name> <operator>^</operator> <name>args</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HOLDHACK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RegisterKey</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>KeyboardStateHack</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>RegisterKey</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>VirtualKey</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>

<function><type><name>void</name></type> <name>RegisterKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWPMessageType</name><operator>::</operator><name>UWP_MSG_REGISTER_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramChar0</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>MoveMouse</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CoreWindow</name> <modifier>^</modifier></type><name>window</name> <init>= <expr><name>CoreWindow</name><operator>::</operator><call><name>GetForCurrentThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>mousePosScreen</name> <init>= <expr><call><name>Point</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>Bounds</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>Bounds</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>PointerPosition</name></name> <operator>=</operator> <name>mousePosScreen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegisterGamepadButton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SET_GAMEPAD_BUTTON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>=</operator> <name>gamepad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt1</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramChar0</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegisterGamepadAxis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SET_GAMEPAD_AXIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>=</operator> <name>gamepad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt1</name></name> <operator>=</operator> <name>axis</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramFloat0</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateMousePosition</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_UPDATE_MOUSE_LOCATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegisterClick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWPMessageType</name><operator>::</operator><name>UWP_MSG_REGISTER_CLICK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramChar0</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UWPSendMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>mWindowClosed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mWindowVisible</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">640</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>CurrentPointerID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HOLDHACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>KeyboardStateHack</name><index>[<expr><literal type="number">0xA6</literal></expr>]</index></name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AppType</name></expr></argument>&gt;</argument_list></name>
<name>ref</name> <name>class</name> <name>ApplicationSource</name></type> <name>sealed</name> <range>: <expr><name>Windows</name><operator>::</operator><name>ApplicationModel</name><operator>::</operator><name>Core</name><operator>::</operator><name>IFrameworkViewSource</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>Windows</name><operator>::</operator><name>ApplicationModel</name><operator>::</operator><name>Core</name><operator>::</operator><name>IFrameworkView</name><lambda>^ <name>CreateView</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><name>ref</name> <name>new</name> <call><name>AppType</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
}</block></lambda></expr>;</block></expr></range></decl></decl_stmt></unit>
