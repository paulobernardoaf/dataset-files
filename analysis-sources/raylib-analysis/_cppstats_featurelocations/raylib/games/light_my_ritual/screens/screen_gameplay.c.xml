<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\light_my_ritual\screens\screen_gameplay.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LIGHTS_I</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LIGHTS_II</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LIGHTS_III</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ENEMIES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PLAYER_ENERGY</name></cpp:macro> <cpp:value>40.0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENERGY_REFILL_RATIO</name></cpp:macro> <cpp:value>0.2f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMEPAD_SENSITIVITY</name></cpp:macro> <cpp:value>4.0f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIGHT_ANIM_FRAMES</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>Player</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lightEnergy</name></decl>;</decl_stmt>
}</block></struct></type> <name>Player</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Enemy</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>targetPos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>targetNum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>speed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>awakeFramesDelay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
}</block></struct></type> <name>Enemy</name>;</typedef>

<typedef>typedef <type><struct>struct <name>LightSpot</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>requiredEnergy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>currentFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>frameRec</name></decl>;</decl_stmt>
}</block></struct></type> <name>LightSpot</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>LEVEL_I</name></decl>, <decl><name>LEVEL_II</name></decl>, <decl><name>LEVEL_III</name></decl>, <decl><name>LEVEL_FINISHED</name></decl> }</block></enum></type> <name>LightedLevel</name>;</typedef>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Player</name></type> <name>player</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>LightSpot</name></type> <name><name>lightsI</name><index>[<expr><name>MAX_LIGHTS_I</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LightSpot</name></type> <name><name>lightsII</name><index>[<expr><name>MAX_LIGHTS_II</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LightSpot</name></type> <name><name>lightsIII</name><index>[<expr><name>MAX_LIGHTS_III</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Enemy</name></type> <name><name>enemies</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ritualLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>previousLightedLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentLightedLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>lighterPosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxLightEnergy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentLightEnergy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>ritualTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>startRitual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>alphaRitual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>timeOver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nextStarsAlignment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>foregroundI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>foregroundII</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>foregroundIII</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texPlayer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texEnemy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texLight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>lightGlow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>lightRay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>book</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texRitual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texTimeOver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>circleIoff</name></decl>, <decl><type ref="prev"/><name>circleIIoff</name></decl>, <decl><type ref="prev"/><name>circleIIIoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>circleIon</name></decl>, <decl><type ref="prev"/><name>circleIIon</name></decl>, <decl><type ref="prev"/><name>circleIIIon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>lightOff</name></decl>, <decl><type ref="prev"/><name>lightOn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxLightOn</name></decl>, <decl><type ref="prev"/><name>fxLightOff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Music</name></type> <name>music</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>enemiesStopped</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ColorEqual</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col2</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>Vector2Subtract</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Vector2Normalize</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EnemyReset</name><parameter_list>(<parameter><decl><type><name>Enemy</name> <modifier>*</modifier></type><name>enemy</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>InitGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pause</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name>background</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/background.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>foregroundI</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/foreground_level_i.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>foregroundII</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/foreground_level_ii.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>foregroundIII</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/foreground_level_iii.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texPlayer</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/player.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texEnemy</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/enemy.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texLight</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/light.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lightGlow</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/light_glow.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lightRay</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/light_ray.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>book</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/book.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texRitual</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/msg_ritual.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texTimeOver</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/time_over.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>circleIoff</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/circle_level_i_off.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>circleIIoff</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/circle_level_ii_off.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>circleIIIoff</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/circle_level_iii_off.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>circleIon</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/circle_level_i_on.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>circleIIon</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/circle_level_ii_on.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>circleIIIon</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/circle_level_iii_on.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lightOff</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>lightOn</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>fxLightOn</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/light_on.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fxLightOff</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/light_off.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>kI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kII</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kIII</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>lightsMapHeight</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>lightsMapWidth</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><macro><name>ColorEqual</name><argument_list>(<argument>lightsMap[y*lightsMapWidth + x]</argument>, <argument>(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal> }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>kI</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>kI</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kI</name><operator>++</operator></expr>;</expr_stmt>


</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><macro><name>ColorEqual</name><argument_list>(<argument>lightsMap[y*lightsMapWidth + x]</argument>, <argument>(Color){ <literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal> }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>kII</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>kII</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kII</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><macro><name>ColorEqual</name><argument_list>(<argument>lightsMap[y*lightsMapWidth + x]</argument>, <argument>(Color){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">255</literal> }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>kIII</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>kIII</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kIII</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frameRec</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frameRec</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frameRec</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>ritualLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>currentLightedLevel</name> <operator>=</operator> <name>LEVEL_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lighterPosition</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EnemyReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>maxLightEnergy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>maxLightEnergy</name> <operator>+=</operator> <name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>maxLightEnergy</name> <operator>+=</operator> <name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>maxLightEnergy</name> <operator>+=</operator> <name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt></block_content></block></for>




<expr_stmt><expr><name>ritualTime</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>startRitual</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>alphaRitual</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>timeOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextStarsAlignment</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enemiesStopped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>music</name> <operator>=</operator> <call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/audio/ritual.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>currentLightedLevel</name> <operator>!=</operator> <name>LEVEL_FINISHED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>timeOver</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>enemiesStopped</name> <operator>=</operator> <operator>!</operator><name>enemiesStopped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>












<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name>lighterPosition</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>+=</operator> <name>ENERGY_REFILL_RATIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>color</name></name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>&gt;</operator> <name>MAX_PLAYER_ENERGY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>=</operator> <name>MAX_PLAYER_ENERGY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_I</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>&gt;=</operator> <name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>-=</operator> <name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxLightOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_II</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>&gt;=</operator> <name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>-=</operator> <name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxLightOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_III</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>&gt;=</operator> <name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>-=</operator> <name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxLightOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>&gt;</operator> <name>LIGHT_ANIM_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>frameRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name><operator>*</operator><name><name>texLight</name><operator>.</operator><name>width</name></name><operator>/</operator><name>LIGHT_ANIM_FRAMES</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>&gt;</operator> <name>LIGHT_ANIM_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>frameRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name><operator>*</operator><name><name>texLight</name><operator>.</operator><name>width</name></name><operator>/</operator><name>LIGHT_ANIM_FRAMES</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>&gt;</operator> <name>LIGHT_ANIM_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>frameRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentFrame</name><operator>*</operator><name><name>texLight</name><operator>.</operator><name>width</name></name><operator>/</operator><name>LIGHT_ANIM_FRAMES</name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enemiesStopped</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>&gt;</operator> <name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>awakeFramesDelay</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>dir</name> <init>= <expr><call><name>Vector2Subtract</name><argument_list>(<argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetPos</name></expr></argument>, <argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Vector2Normalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>dir</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>dir</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_I</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>, <argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetPos</name></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsI</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>frameRec</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnemyReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxLightOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_II</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>, <argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetPos</name></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>frameRec</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnemyReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxLightOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_III</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>, <argument><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetPos</name></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lightsIII</name><index>[<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>targetNum</name></expr>]</index></name><operator>.</operator><name>frameRec</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnemyReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxLightOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>currentLightEnergy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentLightEnergy</name> <operator>+=</operator> <name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentLightEnergy</name> <operator>+=</operator> <name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentLightEnergy</name> <operator>+=</operator> <name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



<expr_stmt><expr><name>previousLightedLevel</name> <operator>=</operator> <name>currentLightedLevel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>currentLightedLevel</name> <operator>=</operator> <name>LEVEL_I</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>lightedLevel</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lightedLevel</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>lightedLevel</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentLightedLevel</name> <operator>=</operator> <name>LEVEL_II</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lightedLevel</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>lightedLevel</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentLightedLevel</name> <operator>=</operator> <name>LEVEL_III</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lightedLevel</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>lightedLevel</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLightedLevel</name> <operator>=</operator> <name>LEVEL_FINISHED</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentLightedLevel</name> <operator>!=</operator> <name>previousLightedLevel</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EnemyReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ritualTime</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name><operator>/</operator><literal type="number">60</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">99.0f</literal> <operator>-</operator> <name>ritualTime</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ritualTime</name> <operator>=</operator> <literal type="number">99.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>timeOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startRitual</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>alphaRitual</name> <operator>+=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetMusicVolume</name><argument_list>(<argument><expr><name>music</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>alphaRitual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>alphaRitual</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>background</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_FINISHED</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_III</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>foregroundIII</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_II</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>foregroundII</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_I</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>foregroundI</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>currentLightedLevel</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LEVEL_FINISHED</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIIIon</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIIon</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIIon</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIIon</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIon</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIon</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIon</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIon</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIon</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>LEVEL_III</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIIIoff</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIIoff</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIIoff</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIIon</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIon</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIon</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIon</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIon</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIon</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>LEVEL_II</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIIoff</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIoff</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIIoff</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIon</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIon</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIon</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>LEVEL_I</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>circleIoff</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIoff</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>circleIoff</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<switch>switch <condition>(<expr><name>currentLightedLevel</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LEVEL_FINISHED</name></expr>:</case>
<case>case <expr><name>LEVEL_III</name></expr>:</case>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<macro><name>DrawTextureRec</name><argument_list>(<argument>texLight</argument>, <argument>lightsIII[i].frameRec</argument>, <argument>(Vector2){ lightsIII[i].position.x - <literal type="number">32</literal></argument>, <argument>lightsIII[i].position.y - <literal type="number">32</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>lightGlow</name></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>lightGlow</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>lightGlow</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_III</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%02i"</literal></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>lightsIII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr> ?</condition><then> <expr><name>GRAY</name></expr> </then><else>: <expr><name>YELLOW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<case>case <expr><name>LEVEL_II</name></expr>:</case>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<macro><name>DrawTextureRec</name><argument_list>(<argument>texLight</argument>, <argument>lightsII[i].frameRec</argument>, <argument>(Vector2){ lightsII[i].position.x - <literal type="number">32</literal></argument>, <argument>lightsII[i].position.y - <literal type="number">32</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>lightGlow</name></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>lightGlow</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>lightGlow</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_II</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%02i"</literal></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>lightsII</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr> ?</condition><then> <expr><name>GRAY</name></expr> </then><else>: <expr><name>YELLOW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<case>case <expr><name>LEVEL_I</name></expr>:</case>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<macro><name>DrawTextureRec</name><argument_list>(<argument>texLight</argument>, <argument>lightsI[i].frameRec</argument>, <argument>(Vector2){ lightsI[i].position.x - <literal type="number">32</literal></argument>, <argument>lightsI[i].position.y - <literal type="number">32</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>lightGlow</name></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>lightGlow</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>lightGlow</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LIGHTS_I</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%02i"</literal></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>requiredEnergy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>lightsI</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr> ?</condition><then> <expr><name>GRAY</name></expr> </then><else>: <expr><name>YELLOW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>book</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>book</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>lightRay</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>lightRay</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texPlayer</name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentLightedLevel</name> <operator>!=</operator> <name>LEVEL_FINISHED</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enemies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> 
<block>{<block_content>

<macro><name>DrawTextureRec</name><argument_list>(<argument>texEnemy</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">64</literal> }</argument>, <argument>(Vector2){ enemies[i].position.x - <literal type="number">32</literal></argument>, <argument>enemies[i].position.y - <literal type="number">32</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%02.2f"</literal>, (<literal type="number">99.0f</literal> - ritualTime))</argument>, <argument>(Vector2){ <literal type="number">560</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">400</literal><operator>*</operator><name><name>player</name><operator>.</operator><name>lightEnergy</name></name><operator>)</operator><operator>/</operator><name>MAX_PLAYER_ENERGY</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%03.0f"</literal></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">660</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">660</literal> <operator>-</operator> <literal type="number">660</literal><operator>*</operator><name>currentLightEnergy</name><operator>/</operator><name>maxLightEnergy</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">660</literal><operator>*</operator><name>currentLightEnergy</name><operator>/</operator><name>maxLightEnergy</name></expr></argument>, <argument><expr><name>YELLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">660</literal></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>lightEnergy</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">20</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"YOU'RE RUNNING OUT OF LIGHT!"</literal></argument>, <argument>(Vector2){ <literal type="number">20</literal></argument>, <argument><literal type="number">60</literal> }</argument>, <argument>font.baseSize/<literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>timeOver</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texRitual</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>texRitual</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"BEST LIGHTING TIME: %02.2f"</literal>, ritualTime)</argument>, <argument>(Vector2){ <literal type="number">320</literal></argument>, <argument><literal type="number">340</literal> }</argument>, <argument><literal type="number">50</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"PRESS ENTER to START the RITUAL"</literal></argument>, <argument>(Vector2){ <literal type="number">160</literal></argument>, <argument><literal type="number">480</literal> }</argument>, <argument><literal type="number">60</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startRitual</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeOver</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texTimeOver</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>texTimeOver</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"NEXT STARS ALIGNMENT IN %i YEARS"</literal>, nextStarsAlignment)</argument>, <argument>(Vector2){ <literal type="number">200</literal></argument>, <argument><literal type="number">360</literal> }</argument>, <argument><literal type="number">50</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"PRESS ENTER to GO HOME..."</literal></argument>, <argument>(Vector2){ <literal type="number">260</literal></argument>, <argument><literal type="number">480</literal> }</argument>, <argument><literal type="number">60</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startRitual</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>, <argument><expr><name>alphaRitual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"RITUAL PAUSED"</literal></argument>, <argument>(Vector2){ GetScreenWidth()/<literal type="number">2</literal> - MeasureText(<literal type="string">"RITUAL PAUSED"</literal>, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument><literal type="number">110</literal> }</argument>, <argument><literal type="number">50</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>foregroundI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>foregroundII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>foregroundIII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texPlayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texEnemy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texLight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>lightGlow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>lightRay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texRitual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texTimeOver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>circleIoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>circleIIoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>circleIIIoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>circleIon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>circleIIon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>circleIIIon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxLightOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxLightOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>ColorEqual</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>col1</name><operator>.</operator><name>r</name></name> <operator>==</operator> <name><name>col2</name><operator>.</operator><name>r</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>col1</name><operator>.</operator><name>g</name></name> <operator>==</operator> <name><name>col2</name><operator>.</operator><name>g</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>col1</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name><name>col2</name><operator>.</operator><name>b</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>col1</name><operator>.</operator><name>a</name></name> <operator>==</operator> <name><name>col2</name><operator>.</operator><name>a</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Vector2</name></type> <name>Vector2Subtract</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Vector2Normalize</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>ilength</name></decl>;</decl_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>y</name></name><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ilength</name> <operator>=</operator> <literal type="number">1.0f</literal><operator>/</operator><name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>*=</operator> <name>ilength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>*=</operator> <name>ilength</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>EnemyReset</name><parameter_list>(<parameter><decl><type><name>Enemy</name> <modifier>*</modifier></type><name>enemy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>framesCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>radius</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>side</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument><literal type="number">50</literal></argument>, <argument>GetScreenHeight() - <literal type="number">50</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">150</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument><literal type="number">50</literal></argument>, <argument>GetScreenHeight() - <literal type="number">50</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_I</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>targetNum</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_LIGHTS_I</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>targetPos</name></name> <operator>=</operator> <name><name>lightsI</name><index>[<expr><name><name>enemy</name><operator>-&gt;</operator><name>targetNum</name></name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>awakeFramesDelay</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">90</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_II</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>targetNum</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_LIGHTS_II</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>targetPos</name></name> <operator>=</operator> <name><name>lightsII</name><index>[<expr><name><name>enemy</name><operator>-&gt;</operator><name>targetNum</name></name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>awakeFramesDelay</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentLightedLevel</name> <operator>==</operator> <name>LEVEL_III</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>targetNum</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_LIGHTS_III</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>targetPos</name></name> <operator>=</operator> <name><name>lightsIII</name><index>[<expr><name><name>enemy</name><operator>-&gt;</operator><name>targetNum</name></name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemy</name><operator>-&gt;</operator><name>awakeFramesDelay</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
