<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\koala_seasons\screens\screen_title.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atlas01.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atlas02.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DURATION</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_particle</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotPhy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Particle</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>fading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>delayCounter</name></decl>;</decl_stmt>
}</block></struct></type> <name>RayParticleTitle</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Particle</name></type> <name><name>particle</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Stormparticleystem</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Particle</name></type> <name><name>particle</name><index>[<expr><name>MAX_particle</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>particleystemTitle</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RayParticleTitle</name></type> <name><name>particle</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RayparticleystemTitle</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>globalFrameCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>parallaxBackOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>parallaxFrontOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>currentValue1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>currentValue2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>initValue1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>initValue2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>finishValue1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>finishValue2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>fontSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>soundActive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>musicActive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>koalaMenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>bamboo</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>player</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>soundButton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>speakerButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>color00</name></decl>, <decl><type ref="prev"/><name>color01</name></decl>, <decl><type ref="prev"/><name>color02</name></decl>, <decl><type ref="prev"/><name>color03</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>snowParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>backSnowParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>dandelionParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>dandelionBackParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>planetreeParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>backPlanetreeParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>flowerParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>backFlowerParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>rainParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>particleystemTitle</name></type> <name>backRainParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RayparticleystemTitle</name></type> <name>rayparticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RayparticleystemTitle</name></type> <name>backRayparticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Stormparticleystem</name></type> <name>rainStormParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Stormparticleystem</name></type> <name>snowStormParticle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>pressToPlay</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">"Press to play"</literal></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxFront</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxMiddle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxBack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>BounceEaseOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter> , <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>InitTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initValue1</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishValue1</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initValue2</name> <operator>=</operator> <literal type="number">700</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishValue2</name> <operator>=</operator> <name>finishValue1</name> <operator>+</operator> <literal type="number">220</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <name>MAX_DURATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initSeason</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soundActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>musicActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parallaxBackOffset</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parallaxFrontOffset</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rainChance</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>soundButton</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.85</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.7</literal></expr>, <expr><name><name>title_music_on</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>title_music_on</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>speakerButton</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.85</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.85</literal></expr>, <expr><name><name>title_speaker_on</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>title_speaker_on</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotPhy</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotPhy</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">182</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">182</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">150</literal> <operator>+</operator> <literal type="number">200</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">350</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>koalaMenu</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_koala_menu</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>koalaMenu</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_koala_menu</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>koalaMenu</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_koala_menu</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>koalaMenu</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_koala_menu</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fontSize</name> <operator>=</operator> <call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"PRESS TO PLAY"</literal></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>globalFrameCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&lt;</operator> <name>duration</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentValue1</name> <operator>=</operator> <call><name>BounceEaseOut</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><name>initValue1</name></expr></argument>, <argument><expr><operator>(</operator><name>finishValue1</name> <operator>-</operator> <name>initValue1</name><operator>)</operator></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currentValue2</name> <operator>=</operator> <call><name>BounceEaseOut</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><name>initValue2</name></expr></argument>, <argument><expr><operator>(</operator><name>finishValue2</name> <operator>-</operator> <name>initValue2</name><operator>)</operator></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>thisFrame</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrame</name> <operator>&gt;=</operator> <literal type="number">40</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentFrame</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentFrame</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>koalaMenu</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_koala_menu</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>koalaMenu</name><operator>.</operator><name>width</name></name><operator>*</operator><name>currentFrame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">129</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">145</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">161</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">198</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rainChance</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>rainChance</name> <operator>&lt;=</operator> <literal type="number">40</literal> <operator>&amp;&amp;</operator> <name>rainChance</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>rainChance</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">242</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">190</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">144</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">214</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rainChance</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">130</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">145</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">104</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">57</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">196</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">178</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">133</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">133</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>snowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>snowParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>backSnowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backSnowParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>planetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>planetreeParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>backPlanetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backPlanetreeParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>dandelionParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>dandelionParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>dandelionBackParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>dandelionBackParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>flowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>flowerParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>backFlowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backFlowerParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>rainStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>rainStormParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">10</literal></argument>,<argument>-<literal type="number">20</literal></argument>)</argument_list></macro>}</block></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>snowStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>snowStormParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">800</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>rayparticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>rayparticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>backRayparticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backRayparticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>rainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>rainParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>backRainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backRainParticle</name><operator>.</operator><name>maxTime</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">30</literal><operator>*</operator><call><name>sin</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><literal type="number">120</literal><operator>*</operator><name>globalFrameCounter</name> <operator>+</operator> <name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotPhy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">30</literal><operator>*</operator><call><name>sin</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><literal type="number">120</literal><operator>*</operator><name>globalFrameCounter</name> <operator>+</operator> <name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotPhy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">12</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">15</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>+=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&gt;=</operator> <literal type="number">0.5f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>+=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&gt;=</operator> <literal type="number">0.5f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DOUBLETAP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>framesCounter</name> <operator>&gt;=</operator> <name>duration</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>framesCounter</name> <operator>&gt;=</operator> <name>duration</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>colorBlend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_background</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>gameplay_background.width*<literal type="number">2</literal></argument>, <argument>gameplay_background.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>DrawParallaxBack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawParallaxMiddle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_icecrystal_bw</argument>,
<argument>(Rectangle){ backSnowParticle.particle[i].position.x</argument>, <argument>backSnowParticle.particle[i].position.y</argument>, <argument>particle_icecrystal_bw.width*backSnowParticle.particle[i].size</argument>, <argument>particle_icecrystal_bw.height*backSnowParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_icecrystal_bw.width*backSnowParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_icecrystal_bw.height*backSnowParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>backSnowParticle.particle[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">144</literal>, <literal type="number">214</literal>, <literal type="number">255</literal>, <literal type="number">255</literal>}, backSnowParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_planetreeleaf_bw</argument>,
<argument>(Rectangle){ backPlanetreeParticle.particle[i].position.x</argument>, <argument>backPlanetreeParticle.particle[i].position.y</argument>, <argument>particle_planetreeleaf_bw.width*backPlanetreeParticle.particle[i].size</argument>, <argument>particle_planetreeleaf_bw.height*backPlanetreeParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_planetreeleaf_bw.width*backPlanetreeParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_planetreeleaf_bw.height*backPlanetreeParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>backPlanetreeParticle.particle[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">179</literal>, <literal type="number">86</literal>, <literal type="number">6</literal>, <literal type="number">255</literal>}, backPlanetreeParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_dandelion_bw</argument>,
<argument>(Rectangle){ dandelionBackParticle.particle[i].position.x</argument>, <argument>dandelionBackParticle.particle[i].position.y</argument>, <argument>particle_dandelion_bw.width*dandelionBackParticle.particle[i].size</argument>, <argument>particle_dandelion_bw.height*dandelionBackParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_dandelion_bw.width*dandelionBackParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_dandelion_bw.height*dandelionBackParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>dandelionBackParticle.particle[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">202</literal>, <literal type="number">167</literal>, <literal type="number">126</literal>, <literal type="number">255</literal>}, dandelionBackParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backFlowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_ecualyptusflower_bw</argument>,
<argument>(Rectangle){ backFlowerParticle.particle[i].position.x</argument>, <argument>backFlowerParticle.particle[i].position.y</argument>, <argument>particle_ecualyptusflower_bw.width*backFlowerParticle.particle[i].size</argument>, <argument>particle_ecualyptusflower_bw.height*backFlowerParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_ecualyptusflower_bw.width*backFlowerParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_ecualyptusflower_bw.height*backFlowerParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>backFlowerParticle.particle[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">218</literal>, <literal type="number">84</literal>, <literal type="number">108</literal>, <literal type="number">255</literal>}, backFlowerParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_waterdrop_bw</argument>,
<argument>(Rectangle){ backRainParticle.particle[i].position.x</argument>, <argument>backRainParticle.particle[i].position.y</argument>, <argument>particle_waterdrop_bw.width*backRainParticle.particle[i].size</argument>, <argument>particle_waterdrop_bw.height*backRainParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_waterdrop_bw.width*backRainParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_waterdrop_bw.height*backRainParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>backRainParticle.particle[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">144</literal>, <literal type="number">183</literal>, <literal type="number">187</literal>, <literal type="number">255</literal>}, backRainParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>backRayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_fx_lightraymid</argument>,
<argument>(Rectangle){ backRayparticle.particle[i].position.x</argument>, <argument>backRayparticle.particle[i].position.y</argument>, <argument>gameplay_back_fx_lightraymid.width*backRayparticle.particle[i].size</argument>, <argument>gameplay_back_fx_lightraymid.height*backRayparticle.particle[i].size }</argument>,
<argument>(Vector2){ gameplay_back_fx_lightraymid.width*backRayparticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>gameplay_back_fx_lightraymid.height*backRayparticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>backRayparticle.particle[i].rotation</argument>,
<argument>Fade(GOLD, backRayparticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>DrawParallaxFront</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_props_tree</argument>, <argument>(Rectangle){bamboo[i].x</argument>, <argument>bamboo[i].y</argument>, <argument><literal type="number">43</literal></argument>, <argument><literal type="number">720</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color03</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>koalaMenu</argument>, <argument>(Vector2){player.x - player.width</argument>, <argument>player.y - <literal type="number">40</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>colorBlend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground00</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">637</literal></argument>, <argument>gameplay_back_ground00.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_ground00.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color00</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){title_titletext.x</argument>, <argument>title_titletext.y</argument>, <argument>title_titletext.width</argument>, <argument><literal type="number">230</literal>}</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.49F</literal> - title_titletext.width/<literal type="number">2</literal></argument>, <argument>currentValue1</argument>, <argument>title_titletext.width</argument>, <argument><literal type="number">235</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){title_titletext.x</argument>, <argument>title_titletext.y + <literal type="number">232</literal></argument>, <argument>title_titletext.width</argument>, <argument><literal type="number">116</literal>}</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.49F</literal> - title_titletext.width/<literal type="number">2</literal></argument>, <argument>currentValue2</argument>, <argument>title_titletext.width</argument>, <argument><literal type="number">116</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">60</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>framesCounter</name> <operator>&gt;=</operator> <name>duration</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>pressToPlay</argument>, <argument>(Vector2){ GetScreenWidth()/<literal type="number">2</literal> - fontSize.x/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">2</literal> + fontSize.y*<literal type="number">2</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>(Color){<literal type="number">247</literal></argument>, <argument><literal type="number">239</literal></argument>, <argument><literal type="number">209</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_particle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_icecrystal</argument>,
<argument>(Rectangle){ snowParticle.particle[i].position.x</argument>, <argument>snowParticle.particle[i].position.y</argument>, <argument>particle_icecrystal.width*snowParticle.particle[i].size</argument>, <argument>particle_icecrystal.height*snowParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_icecrystal.width*snowParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_icecrystal.height*snowParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>snowParticle.particle[i].rotation</argument>,
<argument>Fade(snowParticle.particle[i].color, snowParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_planetreeleaf</argument>,
<argument>(Rectangle){ planetreeParticle.particle[i].position.x</argument>, <argument>planetreeParticle.particle[i].position.y</argument>, <argument>particle_planetreeleaf.width*planetreeParticle.particle[i].size</argument>, <argument>particle_planetreeleaf.height*planetreeParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_planetreeleaf.width*planetreeParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_planetreeleaf.height*planetreeParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>planetreeParticle.particle[i].rotation</argument>,
<argument>Fade(planetreeParticle.particle[i].color, planetreeParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_dandelion</argument>,
<argument>(Rectangle){ dandelionParticle.particle[i].position.x</argument>, <argument>dandelionParticle.particle[i].position.y</argument>, <argument>particle_dandelion.width*dandelionParticle.particle[i].size</argument>, <argument>particle_dandelion.height*dandelionParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_dandelion.width*dandelionParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_dandelion.height*dandelionParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>dandelionParticle.particle[i].rotation</argument>,
<argument>Fade(dandelionParticle.particle[i].color, dandelionParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_ecualyptusflower</argument>,
<argument>(Rectangle){ flowerParticle.particle[i].position.x</argument>, <argument>flowerParticle.particle[i].position.y</argument>, <argument>particle_ecualyptusflower.width*flowerParticle.particle[i].size</argument>, <argument>particle_ecualyptusflower.height*flowerParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_ecualyptusflower.width*flowerParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_ecualyptusflower.height*flowerParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>flowerParticle.particle[i].rotation</argument>,
<argument>Fade(flowerParticle.particle[i].color, flowerParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_waterdrop</argument>,
<argument>(Rectangle){ rainParticle.particle[i].position.x</argument>, <argument>rainParticle.particle[i].position.y</argument>, <argument>particle_waterdrop.width*rainParticle.particle[i].size</argument>, <argument>particle_waterdrop.height*rainParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_waterdrop.width*rainParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_waterdrop.height*rainParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>rainParticle.particle[i].rotation</argument>,
<argument>Fade(rainParticle.particle[i].color, rainParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_waterdrop</argument>,
<argument>(Rectangle){ rainStormParticle.particle[i].position.x</argument>, <argument>rainStormParticle.particle[i].position.y</argument>, <argument>particle_waterdrop.width*rainStormParticle.particle[i].size</argument>, <argument>particle_waterdrop.height*rainStormParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_waterdrop.width*rainStormParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_waterdrop.height*rainStormParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>rainStormParticle.particle[i].rotation</argument>,
<argument>Fade(rainStormParticle.particle[i].color, rainStormParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_icecrystal</argument>,
<argument>(Rectangle){ snowStormParticle.particle[i].position.x</argument>, <argument>snowStormParticle.particle[i].position.y</argument>, <argument>particle_icecrystal.width*snowStormParticle.particle[i].size</argument>, <argument>particle_icecrystal.height*snowStormParticle.particle[i].size }</argument>,
<argument>(Vector2){ particle_icecrystal.width*snowStormParticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>particle_icecrystal.height*snowStormParticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>snowStormParticle.particle[i].rotation</argument>,
<argument>Fade(snowStormParticle.particle[i].color, snowStormParticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rayparticle</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_fx_lightraymid</argument>,
<argument>(Rectangle){ rayparticle.particle[i].position.x</argument>, <argument>rayparticle.particle[i].position.y</argument>, <argument>gameplay_fx_lightraymid.width*rayparticle.particle[i].size</argument>, <argument>gameplay_fx_lightraymid.height*rayparticle.particle[i].size }</argument>,
<argument>(Vector2){ gameplay_fx_lightraymid.width*rayparticle.particle[i].size/<literal type="number">2</literal></argument>, <argument>gameplay_fx_lightraymid.height*rayparticle.particle[i].size/<literal type="number">2</literal> }</argument>, <argument>rayparticle.particle[i].rotation</argument>,
<argument>Fade(rayparticle.particle[i].color, rayparticle.particle[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>












</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxFront</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>ground01</name> <init>= <expr><name>gameplay_back_ground01</name></expr></init></decl>;</decl_stmt>


<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset</argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree01_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset + <literal type="number">140</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree02_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument>gameplay_back_tree02_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree04_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree05_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument>gameplay_back_tree06_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree07_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer01</argument>, <argument>(Rectangle){(int)parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree08_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground01</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">559</literal></argument>, <argument>ground01.width*<literal type="number">2</literal></argument>, <argument>ground01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground01.x</argument>, <argument>ground01.y + ground01.height</argument>, <argument>ground01.width</argument>, <argument>-ground01.height}</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument>-<literal type="number">33</literal></argument>, <argument>ground01.width*<literal type="number">2</literal></argument>, <argument>ground01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxMiddle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>ground02</name> <init>= <expr><name>gameplay_back_ground02</name></expr></init></decl>;</decl_stmt>


<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">0</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree01_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">140</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree02_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree03_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree03_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree04_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree05_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree06_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree07_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer02</argument>, <argument>(Rectangle){(int)<literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree08_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground02</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">509</literal></argument>, <argument>ground02.width*<literal type="number">2</literal></argument>, <argument>ground02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> 
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground02.x</argument>, <argument>ground02.y + ground02.height</argument>, <argument>ground02.width</argument>, <argument>-ground02.height}</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">19</literal></argument>, <argument>ground02.width*<literal type="number">2</literal></argument>, <argument>ground02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxBack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>ground03</name> <init>= <expr><name>gameplay_back_ground03</name></expr></init></decl>;</decl_stmt>


<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset</argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree01_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset + <literal type="number">140</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree02_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree03_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree03_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree04_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree05_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree06_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree07_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer03</argument>, <argument>(Rectangle){(int)parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree08_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground03</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">469</literal></argument>, <argument>ground03.width*<literal type="number">2</literal></argument>, <argument>ground03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground03.x</argument>, <argument>ground03.y + ground03.height</argument>, <argument>ground03.width</argument>, <argument>-ground03.height}</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>ground03.width*<literal type="number">2</literal></argument>, <argument>ground03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>BounceEaseOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter> , <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>-=</operator><operator>(</operator><literal type="number">1.5f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">.75f</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2.5</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>-=</operator><operator>(</operator><literal type="number">2.25f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">.9375f</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>-=</operator><operator>(</operator><literal type="number">2.625f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">.984375f</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function></unit>
