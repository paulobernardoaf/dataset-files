<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\koala_seasons\screens\screen_ending.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atlas01.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atlas02.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{ <decl><name>DELAY</name></decl>, <decl><name>SEASONS</name></decl>, <decl><name>LEAVES</name></decl>, <decl><name>KILLS</name></decl>, <decl><name>REPLAY</name></decl> }</block></enum></type> <name>EndingCounter</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Particle</name>;</typedef>






<decl_stmt><decl><type><specifier>static</specifier> <name>EndingCounter</name></type> <name>endingCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesKillsCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>playButton</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>shopButton</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>trophyButton</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>shareButton</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>buttonPlayColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>buttonShopColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>buttonTrophyColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>buttonShareColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>backgroundColor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentScore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seasonsCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentLeavesEnding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finalYears</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>replayTimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yearsElapsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initRotation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>clockRotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>finalRotation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>replaying</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>active</name><index>[<expr><name>MAX_KILLS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>initMonthText</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>finalMonthText</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Particle</name></type> <name><name>leafParticles</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>drawTimer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textOwl01</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"Turned into a pretty"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textOwl02</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"owl pellet"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textDingo01</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"A dingo took your life"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textFire01</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"Kissed by fire"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textSnake01</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"Digested alive by a"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textSnake02</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"big snake"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textNaturalDeath01</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"LIFE KILLED YOU"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textBee01</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"You turn out to be"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textBee02</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"allergic to bee sting"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textEagle</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"KOALA IS DEAD :("</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>float</name></type> <name>LinearEaseIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>c</name><operator>*</operator><name>t</name><operator>/</operator><name>d</name> <operator>+</operator> <name>b</name></expr>;</return> </block_content>}</block></function>






<function><type><name>void</name></type> <name>InitEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>drawTimer</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>replayTimer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>replaying</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalYears</name> <operator>=</operator> <name>initYears</name> <operator>+</operator> <operator>(</operator><name>seasons</name><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>yearsElapsed</name> <operator>=</operator> <name>seasons</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>playButton</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.871</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.096</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>shopButton</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.871</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.303</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>trophyButton</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.871</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.513</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>shareButton</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.871</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.719</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">123</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>buttonPlayColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttonShopColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttonTrophyColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttonShareColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasonsCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>currentLeavesEnding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>DELAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backgroundColor</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><literal type="number">176</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">20</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>initMonthText</name></expr></argument>, <argument><expr><literal type="string">"SUMMER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">225</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initRotation</name> <operator>=</operator> <literal type="number">225</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>initMonthText</name></expr></argument>, <argument><expr><literal type="string">"AUTUMN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">135</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initRotation</name> <operator>=</operator> <literal type="number">135</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>initMonthText</name></expr></argument>, <argument><expr><literal type="string">"WINTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initRotation</name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>initMonthText</name></expr></argument>, <argument><expr><literal type="string">"SPRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">315</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initRotation</name> <operator>=</operator> <literal type="number">315</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentSeason</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>finalMonthText</name></expr></argument>, <argument><expr><literal type="string">"SUMMER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finalRotation</name> <operator>=</operator> <literal type="number">225</literal> <operator>+</operator> <literal type="number">360</literal><operator>*</operator><name>yearsElapsed</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentSeason</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>finalMonthText</name></expr></argument>, <argument><expr><literal type="string">"AUTUMN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finalRotation</name> <operator>=</operator> <literal type="number">135</literal> <operator>+</operator> <literal type="number">360</literal><operator>*</operator><name>yearsElapsed</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentSeason</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>finalMonthText</name></expr></argument>, <argument><expr><literal type="string">"WINTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finalRotation</name> <operator>=</operator> <literal type="number">45</literal> <operator>+</operator> <literal type="number">360</literal><operator>*</operator><name>yearsElapsed</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentSeason</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>finalMonthText</name></expr></argument>, <argument><expr><literal type="string">"SPRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finalRotation</name> <operator>=</operator> <literal type="number">315</literal> <operator>+</operator> <literal type="number">360</literal><operator>*</operator><name>yearsElapsed</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_KILLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>endingCounter</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DELAY</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>framesCounter</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>SEASONS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>SEASONS</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seasons</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>seasonsCounter</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>seasons</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">90.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>initRotation</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>-</operator><operator>(</operator><name>finalRotation</name> <operator>-</operator> <name>initRotation</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">90.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&gt;=</operator> <literal type="number">90</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>LEAVES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>LEAVES</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>seasonsCounter</name> <operator>=</operator> <name>seasons</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <name>finalRotation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>LEAVES</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>seasonsCounter</name> <operator>=</operator> <name>seasons</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <name>finalRotation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>LEAVES</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>LEAVES</name></expr>:</case> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentLeaves</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentLeavesEnding</name> <operator>==</operator> <name>currentLeaves</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>KILLS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentLeavesEnding</name> <operator>&lt;</operator> <name>currentLeaves</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLeavesEnding</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.46</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.32</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>KILLS</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLeavesEnding</name> <operator>=</operator> <name>currentLeaves</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>KILLS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLeavesEnding</name> <operator>=</operator> <name>currentLeaves</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>KILLS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>KILLS</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&lt;=</operator> <literal type="number">90</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>replaying</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentScore</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>score</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">90.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framesKillsCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_KILLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>framesKillsCounter</name> <operator>&gt;=</operator> <name>drawTimer</name> <operator>&amp;&amp;</operator> <name><name>active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesKillsCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&gt;=</operator> <literal type="number">90</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>REPLAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>REPLAY</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentScore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_KILLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>REPLAY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentScore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_KILLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>REPLAY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>REPLAY</name></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>replaying</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>replaying</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>replaying</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>replayTimer</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>replayTimer</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initSeason</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buttonPlayColor</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>==</operator> <name>true</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.03f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>-=</operator> <literal type="number">0.004</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>playButton</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>REPLAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>replaying</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>playButton</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>buttonPlayColor</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>endingCounter</name> <operator>=</operator> <name>REPLAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>replaying</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>buttonPlayColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>shopButton</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buttonShopColor</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>buttonShopColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>trophyButton</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buttonTrophyColor</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>buttonTrophyColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>shareButton</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buttonShareColor</name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>buttonShareColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<macro><name>DrawTextureRec</name><argument_list>(<argument>atlas02</argument>, <argument>ending_background</argument>, <argument>(Vector2){ending_background.width*(x%<literal type="number">5</literal>)</argument>, <argument>ending_background.height*(x/<literal type="number">5</literal>)}</argument>, <argument>backgroundColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>


<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_plate_frame</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.042</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.606</literal></argument>, <argument>ending_plate_frame.width</argument>, <argument>ending_plate_frame.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_back</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.133</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.097</literal></argument>, <argument>ending_paint_back.width</argument>, <argument>ending_paint_back.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_koalafire</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.145</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.171</literal></argument>, <argument>ending_paint_koalafire.width</argument>, <argument>ending_paint_koalafire.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_koalasnake</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.145</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.171</literal></argument>, <argument>ending_paint_koalasnake.width</argument>, <argument>ending_paint_koalasnake.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_koaladingo</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.145</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.171</literal></argument>, <argument>ending_paint_koaladingo.width</argument>, <argument>ending_paint_koaladingo.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_koalaowl</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.2</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.3</literal></argument>, <argument>ending_paint_koalaowl.width</argument>, <argument>ending_paint_koalaowl.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_koalageneric</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.133</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.171</literal></argument>, <argument>ending_paint_koalageneric.width</argument>, <argument>ending_paint_koalageneric.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_koalabee</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.145</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.171</literal></argument>, <argument>ending_paint_koalabee.width</argument>, <argument>ending_paint_koalabee.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_koalaeagle</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.145</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.171</literal></argument>, <argument>ending_paint_koalaeagle.width</argument>, <argument>ending_paint_koalaeagle.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_paint_frame</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.102</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.035</literal></argument>, <argument>ending_paint_frame.width</argument>, <argument>ending_paint_frame.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_planksmall</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.521</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.163</literal></argument>, <argument>ending_score_planksmall.width</argument>, <argument>ending_score_planksmall.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_planklarge</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.415</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.303</literal></argument>, <argument>ending_score_planklarge.width</argument>, <argument>ending_score_planklarge.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_planksmall</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.521</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.440</literal></argument>, <argument>ending_score_planksmall.width</argument>, <argument>ending_score_planksmall.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_seasonicon</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.529</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.096</literal></argument>, <argument>ending_score_seasonicon.width</argument>, <argument>ending_score_seasonicon.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_seasonneedle</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.579</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.189</literal></argument>, <argument>ending_score_seasonneedle.width</argument>, <argument>ending_score_seasonneedle.height}</argument>, <argument>(Vector2){ending_score_seasonneedle.width/<literal type="number">2</literal></argument>, <argument>ending_score_seasonneedle.height*<literal type="number">0.9</literal>}</argument>, <argument>clockRotation</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_frame</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.535</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.11</literal></argument>, <argument>ending_score_frame.width</argument>, <argument>ending_score_frame.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_frameback</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.430</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.246</literal></argument>, <argument>ending_score_frameback.width</argument>, <argument>ending_score_frameback.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_frame</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.429</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.244</literal></argument>, <argument>ending_score_frame.width</argument>, <argument>ending_score_frame.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content> 
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_ecualyptusleaf</argument>,
<argument>(Rectangle){ leafParticles[i].position.x</argument>, <argument>leafParticles[i].position.y</argument>, <argument>particle_ecualyptusleaf.width*leafParticles[i].size</argument>, <argument>particle_ecualyptusleaf.height*leafParticles[i].size }</argument>,
<argument>(Vector2){ particle_ecualyptusleaf.width/<literal type="number">2</literal>*leafParticles[i].size</argument>, <argument>particle_ecualyptusleaf.height/<literal type="number">2</literal>*leafParticles[i].size }</argument>, <argument>leafParticles[i].rotation</argument>, <argument>Fade(WHITE,leafParticles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_leavesicon</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.421</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.228</literal></argument>, <argument>ending_score_leavesicon.width</argument>, <argument>ending_score_leavesicon.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_frameback</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.536</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.383</literal></argument>, <argument>ending_score_frameback.width</argument>, <argument>ending_score_frameback.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_frame</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.535</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.383</literal></argument>, <argument>ending_score_frame.width</argument>, <argument>ending_score_frame.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_score_enemyicon</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.538</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.414</literal></argument>, <argument>ending_score_enemyicon.width</argument>, <argument>ending_score_enemyicon.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_button_replay</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.871</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.096</literal></argument>, <argument>ending_button_replay.width</argument>, <argument>ending_button_replay.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>buttonPlayColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_button_shop</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.871</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.303</literal></argument>, <argument>ending_button_shop.width</argument>, <argument>ending_button_shop.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>buttonShopColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_button_trophy</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.871</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.513</literal></argument>, <argument>ending_button_trophy.width</argument>, <argument>ending_button_trophy.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>buttonTrophyColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>ending_button_share</argument>, <argument>(Rectangle){GetScreenWidth()*<literal type="number">0.871</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.719</literal></argument>, <argument>ending_button_share.width</argument>, <argument>ending_button_share.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>buttonShareColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%03i"</literal>, seasonsCounter)</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.73f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.14f</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%03i"</literal>, currentLeavesEnding)</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.73f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.29f</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%04i"</literal>, currentScore)</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.715f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.426f</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%s %i - %s %i"</literal>, initMonthText, initYears, finalMonthText, finalYears)</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.1f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.7f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_KILLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>killHistory</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>ending_plate_headsnake</argument>, <argument>(Vector2){GetScreenWidth()*<literal type="number">0.448</literal> + ending_plate_headsnake.width*(i%<literal type="number">10</literal>)</argument>, <argument>GetScreenHeight()*<literal type="number">0.682</literal> + (GetScreenHeight()*<literal type="number">0.055</literal>)*(i/<literal type="number">10</literal>)}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>ending_plate_headdingo</argument>, <argument>(Vector2){GetScreenWidth()*<literal type="number">0.448</literal> + ending_plate_headdingo.width*(i%<literal type="number">10</literal>)</argument>, <argument>GetScreenHeight()*<literal type="number">0.682</literal> + (GetScreenHeight()*<literal type="number">0.055</literal>)*(i/<literal type="number">10</literal>)}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>ending_plate_headowl</argument>, <argument>(Vector2){GetScreenWidth()*<literal type="number">0.448</literal> + ending_plate_headowl.width*(i%<literal type="number">10</literal>)</argument>, <argument>GetScreenHeight()*<literal type="number">0.682</literal> + (GetScreenHeight()*<literal type="number">0.055</literal>)*(i/<literal type="number">10</literal>)}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>ending_plate_headbee</argument>, <argument>(Vector2){GetScreenWidth()*<literal type="number">0.448</literal> + ending_plate_headbee.width*(i%<literal type="number">10</literal>)</argument>, <argument>GetScreenHeight()*<literal type="number">0.682</literal> + (GetScreenHeight()*<literal type="number">0.055</literal>)*(i/<literal type="number">10</literal>)}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>ending_plate_headeagle</argument>, <argument>(Vector2){GetScreenWidth()*<literal type="number">0.448</literal> + ending_plate_headeagle.width*(i%<literal type="number">10</literal>)</argument>, <argument>GetScreenHeight()*<literal type="number">0.682</literal> + (GetScreenHeight()*<literal type="number">0.055</literal>)*(i/<literal type="number">10</literal>)}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>










<if_stmt><if>if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textFire01</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.78f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textDingo01</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.78f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 
<block>{<block_content>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textSnake01</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.78f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textSnake02</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.83f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> 
<block>{<block_content>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textOwl01</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.78f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textOwl02</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.83f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textNaturalDeath01</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.78f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> 
<block>{<block_content>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textBee01</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.78f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textBee02</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.83f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>killer</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textEagle</argument>, <argument>(Vector2){ GetScreenWidth()*<literal type="number">0.13f</literal></argument>, <argument>GetScreenHeight()*<literal type="number">0.78f</literal> }</argument>, <argument>font.baseSize/<literal type="number">2.0f</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function></unit>
