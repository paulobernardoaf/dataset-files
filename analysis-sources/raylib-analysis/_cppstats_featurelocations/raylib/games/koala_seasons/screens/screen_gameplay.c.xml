<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\koala_seasons\screens\screen_gameplay.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atlas01.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atlas02.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ENEMIES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BAMBOO</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEAVES</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FIRE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FIRE_FLAMES</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ICE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RESIN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_WIND</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARTICLES</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARTICLES_RAY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARTICLES_SPEED</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARTICLES_STORM</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED</name></cpp:macro> <cpp:value>3*TIME_FACTOR</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP</name></cpp:macro> <cpp:value>15*TIME_FACTOR</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLYINGMOV</name></cpp:macro> <cpp:value>10*TIME_FACTOR</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAVITY</name></cpp:macro> <cpp:value>1*TIME_FACTOR</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICEGRAVITY</name></cpp:macro> <cpp:value>4*TIME_FACTOR</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KICKSPEED</name></cpp:macro> <cpp:value>3*TIME_FACTOR</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEASONCHANGE</name></cpp:macro> <cpp:value>1200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEASONTRANSITION</name></cpp:macro> <cpp:value>SEASONCHANGE/6</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICESPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESINSPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRESPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDSPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DINGOSPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWLSPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNAKESPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEE_SPAWNCHANCE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGLE_SPAWNCHANCE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGLE_TIME_DELAY</name></cpp:macro> <cpp:value>600</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DINGOSCORE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWLSCORE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNAKESCORE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEESCORE</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGLESCORE</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEAVESTOTRANSFORM</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXTIMESPAWN</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINTIMESPAWN</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTINGMONTH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROGRESION_START</name></cpp:macro> <cpp:value>3600</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROGRESION_DURATION</name></cpp:macro> <cpp:value>12000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROGRESOIN_MAX_SPAWNCHANCE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROGRESION_MAX_SPEED</name></cpp:macro> <cpp:value>0.5</cpp:value></cpp:define> 




<typedef>typedef <type><enum>enum <block>{ <decl><name>WINTER</name></decl>, <decl><name>SPRING</name></decl>, <decl><name>SUMMER</name></decl>, <decl><name>FALL</name></decl>, <decl><name>TRANSITION</name></decl> }</block></enum></type> <name>SeasonState</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{ <decl><name>JUMPING</name></decl>, <decl><name>KICK</name></decl>, <decl><name>FINALFORM</name></decl>, <decl><name>GRABED</name></decl>, <decl><name>ONWIND</name></decl> }</block></enum></type> <name>KoalaState</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotPhy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Particle</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>ParticleSpeed</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>fading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>delayCounter</name></decl>;</decl_stmt>
}</block></struct></type> <name>ParticleRay</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Particle</name></type> <name><name>particles</name><index>[<expr><name>MAX_PARTICLES</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ParticleSystem</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Particle</name></type> <name><name>particles</name><index>[<expr><name>MAX_PARTICLES_STORM</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ParticleSystemStorm</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
}</block></struct></type> <name>PopUpScore</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParticleSpeed</name></type> <name><name>particle</name><index>[<expr><name>MAX_PARTICLES_SPEED</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ParticleSystemSpeed</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParticleRay</name></type> <name><name>particles</name><index>[<expr><name>MAX_PARTICLES_RAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ParticleSystemRay</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>gravity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SeasonState</name></type> <name>season</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>KoalaState</name></type> <name>state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>grabCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>velocity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bambooTimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bambooSpawnTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>colorTimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>jumpSpeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>power</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxPower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>posArray</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>posArrayDingo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>enemyVel</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>beeVelocity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fireSpeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>windCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seasonTimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seasonChange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resinCountjump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resinCountdrag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resinCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentMonth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>monthTimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>monthChange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initMonth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>fireCounter</name><index>[<expr><name>MAX_FIRE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fireOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>beeMov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>killCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>leafType</name><index>[<expr><name>MAX_LEAVES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>posArrayLeaf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transAniCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>globalFrameCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>startCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>animCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>startNum</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finalFormEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>randomMessage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>parallaxBackOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>parallaxFrontOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrame</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrameWind</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentFrameWind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrameBee</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrameSnake</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrameDingo</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrameOwl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrameEagle</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrameEagle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrameBee</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrameSnake</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrameDingo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrameOwl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrame1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrame2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrame3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transitionFramesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thisFrameKoala</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curFrameKoala</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fogSpeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fogPosition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>progresionDelay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>progresionFramesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initLeaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>eagleDelay</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>jumpCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resinCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tornadoCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dashCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>superKoalaCounter</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>snakeKillCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dingoKillCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>owlKillCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>beeKillCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>eagleKillCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>globalKillCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>deathsCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>scrollFront</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>scrollMiddle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>scrollBack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>scrollSpeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>rightAlpha</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>leftAlpha</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>speedMod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>groundPos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>transRotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>clockRotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>clockSpeedRotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>numberAlpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>numberScale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>fogAlpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>speedIncrease</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>speedProgresion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>progresionSpawnChance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>UIfade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>filterAlpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>leafGUIglowFade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>leafGUIpulseFade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>leafGUIpulseScale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>clockInitRotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>clockFinalRotation</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textFinalForm</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"THIS ISN'T EVEN MY FINAL FORM!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textSpring1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"FLOWER POWER!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textSummer1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"PREPARE FOR THE SUMMER!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textFall1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"HERE COMES THE FALL!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textWinter1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"WINTER IS COMING!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textSpring2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"POLLEN IS IN THE AIR"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textSummer2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"HAPPY NEW YEAR!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textFall2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"IT'S RAINING RAIN"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>textWinter2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"LET IT SNOW!"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>snakeActive</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>dingoActive</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>owlActive</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>branchActive</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>bambooActive</name><index>[<expr><name>MAX_BAMBOO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>leafActive</name><index>[<expr><name>MAX_LEAVES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>fireActive</name><index>[<expr><name>MAX_FIRE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>iceActive</name><index>[<expr><name>MAX_ICE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>windActive</name><index>[<expr><name>MAX_WIND</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>resinActive</name><index>[<expr><name>MAX_RESIN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>isHitSnake</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>isHitDingo</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>isHitOwl</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isHitBee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isHitEagle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>onFire</name><index>[<expr><name>MAX_FIRE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>onIce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>onResin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>playerActive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>play</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>transforming</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>onWind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>glowing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>beeActive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>eagleActive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>eagleAlert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>alertActive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>alertBeeActive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>coolDown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>leafSide</name><index>[<expr><name>MAX_LEAVES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>transBackAnim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>fog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>leafGUIglow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>player</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>leftButton</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>rightButton</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>powerButton</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>fire</name><index>[<expr><name>MAX_FIRE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>ice</name><index>[<expr><name>MAX_ICE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>resin</name><index>[<expr><name>MAX_RESIN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>wind</name><index>[<expr><name>MAX_WIND</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>bamboo</name><index>[<expr><name>MAX_BAMBOO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>snake</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>dingo</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>owl</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name><name>leaf</name><index>[<expr><name>MAX_LEAVES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>powerBar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>backBar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>fireAnimation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>windAnimation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>beeAnimation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>snakeAnimation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>dingoAnimation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>owlAnimation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>bee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>eagle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>eagleAnimation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>koalaAnimationIddle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>koalaAnimationJump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>koalaAnimationFly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>koalaAnimationTransform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>alertRectangle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>beeAlertRectangle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>rawtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>ptm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>finalColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>finalColor2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>flyColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>counterColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>color00</name></decl>, <decl><type ref="prev"/><name>color01</name></decl>, <decl><type ref="prev"/><name>color02</name></decl>, <decl><type ref="prev"/><name>color03</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>initcolor00</name></decl>, <decl><type ref="prev"/><name>initcolor01</name></decl>, <decl><type ref="prev"/><name>initcolor02</name></decl>, <decl><type ref="prev"/><name>initcolor03</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>finalcolor00</name></decl>, <decl><type ref="prev"/><name>finalcolor01</name></decl>, <decl><type ref="prev"/><name>finalcolor02</name></decl>, <decl><type ref="prev"/><name>finalcolor03</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>zero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>firePos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name><name>branchPos</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>textSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>clockPosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Particle</name></type> <name><name>enemyHit</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name><name>leafParticles</name><index>[<expr><name>MAX_LEAVES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>snowParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>backSnowParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>dandelionParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>dandelionBackParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>planetreeParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>backPlanetreeParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>flowerParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>backFlowerParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>rainParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystem</name></type> <name>backRainParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystemStorm</name></type> <name>rainStormParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystemStorm</name></type> <name>snowStormParticle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystemRay</name></type> <name>rayParticles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystemRay</name></type> <name>backRayParticles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ParticleSystemSpeed</name></type> <name>speedFX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PopUpScore</name></type> <name><name>popupScore</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PopUpScore</name></type> <name><name>popupLeaves</name><index>[<expr><name>MAX_LEAVES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PopUpScore</name></type> <name>popupBee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PopUpScore</name></type> <name>popupEagle</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BambooSpawn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SnakeSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DingoSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OwlSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BeeSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EagleSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FireSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IceSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResinSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WindSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LeafSpawn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxFront</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxMiddle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxBack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>LinearEaseIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Color</name></type> <name>ColorTransition</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>initialColor</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>finalColor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>framesCounter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CheckArrayValue</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arrayLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>InitGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptm</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentMonth</name> <operator>=</operator> <name><name>ptm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>initMonth</name> <operator>=</operator> <name><name>ptm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>years</name> <operator>=</operator> <literal type="number">1900</literal> <operator>+</operator> <name><name>ptm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>play</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>playerActive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>startCounter</name><operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startCounter</name> <operator>&gt;</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name>startCounter</name> <operator>&lt;</operator> <literal type="number">110</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>animCounter</name><operator>+=</operator><literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numberAlpha</name> <operator>-=</operator> <literal type="number">0.033f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numberScale</name> <operator>-=</operator> <literal type="number">0.0825f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>animCounter</name> <operator>&lt;=</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startNum</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>animCounter</name> <operator>&gt;</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name>animCounter</name> <operator>&lt;=</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startNum</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>startNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>startCounter</name> <operator>&gt;=</operator> <literal type="number">110</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>play</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>numberAlpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>numberAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numberScale</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>numberScale</name> <operator>=</operator> <literal type="number">2.5f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textSize</name> <operator>=</operator> <call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%01i"</literal></expr></argument>, <argument><expr><name>startNum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>*</operator><name>numberScale</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>playerActive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>play</name> <operator>&amp;&amp;</operator> <name>playerActive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>seasonTimer</name> <operator>+=</operator> <name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>monthTimer</name> <operator>+=</operator> <name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleDelay</name> <operator>+=</operator> <name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>globalFrameCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>monthTimer</name> <operator>&gt;=</operator> <name>monthChange</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">225</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rainChance</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockSpeedRotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasons</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">315</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rainChance</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockSpeedRotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasons</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rainChance</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockSpeedRotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasons</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">135</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rainChance</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clockSpeedRotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasons</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currentMonth</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>monthTimer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentMonth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>years</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">11</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monthTimer</name> <operator>&lt;=</operator> <name>SEASONTRANSITION</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transitionFramesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>randomMessage</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>initcolor00</name> <operator>=</operator> <name>color00</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>initcolor01</name> <operator>=</operator> <name>color01</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor02</name> <operator>=</operator> <name>color02</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor03</name> <operator>=</operator> <name>color03</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">242</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>finalcolor01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">190</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">144</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">214</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>season</name> <operator>=</operator> <name>SUMMER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currentSeason</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monthTimer</name> <operator>&lt;=</operator> <name>SEASONTRANSITION</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rainChance</name> <operator>&lt;=</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rainChance</name> <operator>&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>rainChance</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>transitionFramesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>randomMessage</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initcolor00</name> <operator>=</operator> <name>color00</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>initcolor01</name> <operator>=</operator> <name>color01</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor02</name> <operator>=</operator> <name>color02</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor03</name> <operator>=</operator> <name>color03</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">130</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>finalcolor01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">145</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">104</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">57</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>season</name> <operator>=</operator> <name>FALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currentSeason</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monthTimer</name> <operator>&lt;=</operator> <name>SEASONTRANSITION</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rainChance</name> <operator>&lt;=</operator> <literal type="number">40</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>transitionFramesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>randomMessage</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initcolor00</name> <operator>=</operator> <name>color00</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>initcolor01</name> <operator>=</operator> <name>color01</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor02</name> <operator>=</operator> <name>color02</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor03</name> <operator>=</operator> <name>color03</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">196</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>finalcolor01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">178</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">133</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">133</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>season</name> <operator>=</operator> <name>WINTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currentSeason</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">9</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monthTimer</name> <operator>&lt;=</operator> <name>SEASONTRANSITION</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transitionFramesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>randomMessage</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>initcolor00</name> <operator>=</operator> <name>color00</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>initcolor01</name> <operator>=</operator> <name>color01</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor02</name> <operator>=</operator> <name>color02</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initcolor03</name> <operator>=</operator> <name>color03</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">129</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>finalcolor01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">145</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">161</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>finalcolor03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">198</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>season</name> <operator>=</operator> <name>SPRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currentSeason</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transitionFramesCounter</name> <operator>+=</operator> <name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transitionFramesCounter</name> <operator>&lt;=</operator> <name>SEASONTRANSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>color00</name> <operator>=</operator> <call><name>ColorTransition</name><argument_list>(<argument><expr><name>initcolor00</name></expr></argument>, <argument><expr><name>finalcolor00</name></expr></argument>, <argument><expr><name>transitionFramesCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color01</name> <operator>=</operator> <call><name>ColorTransition</name><argument_list>(<argument><expr><name>initcolor01</name></expr></argument>, <argument><expr><name>finalcolor01</name></expr></argument>, <argument><expr><name>transitionFramesCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <call><name>ColorTransition</name><argument_list>(<argument><expr><name>initcolor02</name></expr></argument>, <argument><expr><name>finalcolor02</name></expr></argument>, <argument><expr><name>transitionFramesCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <call><name>ColorTransition</name><argument_list>(<argument><expr><name>initcolor03</name></expr></argument>, <argument><expr><name>finalcolor03</name></expr></argument>, <argument><expr><name>transitionFramesCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>season</name> <operator>=</operator> <name>TRANSITION</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transforming</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scrollFront</name> <operator>-=</operator> <name>scrollSpeed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollMiddle</name> <operator>-=</operator> <operator>(</operator><name>scrollSpeed</name><operator>*</operator><literal type="number">0.75f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollBack</name> <operator>-=</operator> <name>scrollSpeed</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fogPosition</name> <operator>-=</operator> <name>fogSpeed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>groundPos</name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>+=</operator> <name>clockSpeedRotation</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>gravity</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bambooTimer</name> <operator>+=</operator> <operator>(</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>speed</name> <operator>=</operator> <name>SPEED</name><operator>*</operator><name>speedMod</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.6</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>speedIncrease</name> <operator>=</operator> <operator>(</operator><name><name>player</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.6f</literal><operator>)</operator><operator>/</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.6</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>speedIncrease</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>speedMod</name> <operator>=</operator> <literal type="number">1.2</literal> <operator>+</operator> <name>speedIncrease</name> <operator>+</operator> <name>speedProgresion</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>progresionDelay</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progresionDelay</name> <operator>&gt;=</operator> <name>PROGRESION_START</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>progresionFramesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progresionFramesCounter</name> <operator>&lt;</operator> <name>PROGRESION_DURATION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>speedProgresion</name> <operator>=</operator> <call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>progresionFramesCounter</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>PROGRESION_MAX_SPEED</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>PROGRESION_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>progresionSpawnChance</name> <operator>=</operator> <call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>progresionFramesCounter</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>PROGRESOIN_MAX_SPAWNCHANCE</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>PROGRESION_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scrollFront</name> <operator>&lt;=</operator> <operator>-</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scrollFront</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scrollMiddle</name> <operator>&lt;=</operator> <operator>-</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scrollMiddle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scrollBack</name> <operator>&lt;=</operator> <operator>-</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scrollBack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>groundPos</name> <operator>&lt;=</operator> <operator>-</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>groundPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fogPosition</name> <operator>&lt;=</operator> <operator>-</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fogPosition</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fogAlpha</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>fog</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fogAlpha</name> <operator>-=</operator> <literal type="number">0.03f</literal><operator>*</operator><name>speedMod</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fog</name> <operator>&amp;&amp;</operator> <name>fogAlpha</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fogAlpha</name> <operator>+=</operator> <literal type="number">0.03f</literal><operator>*</operator><name>speedMod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filterAlpha</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>fog</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filterAlpha</name> <operator>-=</operator> <literal type="number">0.02f</literal><operator>*</operator><name>speedMod</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fog</name> <operator>&amp;&amp;</operator> <name>filterAlpha</name> <operator>&lt;</operator> <literal type="number">0.15f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filterAlpha</name> <operator>+=</operator> <literal type="number">0.02f</literal><operator>*</operator><name>speedMod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>clockSpeedRotation</name> <operator>+=</operator> <name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clockSpeedRotation</name> <operator>&lt;=</operator> <operator>(</operator><name>SEASONCHANGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>clockSpeedRotation</name></expr></argument>, <argument><expr><name>clockInitRotation</name></expr></argument>, <argument><expr><literal type="number">90.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>SEASONCHANGE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <name>clockFinalRotation</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircleRec</name><argument_list>(<argument><expr><name>clockPosition</name></expr></argument>, <argument><expr><name><name>gameplay_gui_seasonsclock_disc</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>UIfade</name> <operator>&gt;</operator> <literal type="number">0.4f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>UIfade</name> <operator>-=</operator> <literal type="number">0.01f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>UIfade</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>UIfade</name> <operator>+=</operator> <literal type="number">0.01f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name>thisFrameWind</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameWind</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentFrameWind</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameWind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentFrameWind</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentFrameWind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>windAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_props_whirlwind_spritesheet</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>windAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>currentFrameWind</name></expr>;</expr_stmt>


<expr_stmt><expr><name>thisFrame</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrame</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curFrame</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrame1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrame2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrame3</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>thisFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrame</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curFrame1</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curFrame1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curFrame2</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curFrame2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curFrame3</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curFrame3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transforming</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>curFrameEagle</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameEagle</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>*</operator><name>TIME_FACTOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>thisFrameEagle</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameEagle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameEagle</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>thisFrameEagle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eagleAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_eagle</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>eagleAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>thisFrameEagle</name></expr>;</expr_stmt>


<expr_stmt><expr><name>curFrameBee</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameBee</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>thisFrameBee</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameBee</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameBee</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>thisFrameBee</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>beeAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_bee</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>beeAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>thisFrameBee</name></expr>;</expr_stmt>


<expr_stmt><expr><name>thisFrameSnake</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameSnake</name> <operator>&gt;=</operator> <literal type="number">24</literal><operator>*</operator><name>TIME_FACTOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curFrameSnake</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameSnake</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameSnake</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curFrameSnake</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>snakeAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_snake</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>snakeAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>curFrameSnake</name></expr>;</expr_stmt>


<expr_stmt><expr><name>curFrameDingo</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameDingo</name> <operator>&gt;=</operator> <literal type="number">24</literal><operator>*</operator><name>TIME_FACTOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>thisFrameDingo</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameDingo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameDingo</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>thisFrameDingo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dingoAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_dingo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>dingoAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>thisFrameDingo</name></expr>;</expr_stmt>


<expr_stmt><expr><name>curFrameOwl</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameOwl</name> <operator>&gt;=</operator> <literal type="number">24</literal><operator>*</operator><name>TIME_FACTOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>thisFrameOwl</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameOwl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameOwl</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>thisFrameOwl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>owlAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_owl</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>owlAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>thisFrameOwl</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>alertActive</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eagleAlert</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>alertRectangle</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">100</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alertRectangle</name><operator>.</operator><name>width</name></name> <operator>+=</operator> <literal type="number">100</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alertRectangle</name><operator>.</operator><name>height</name></name> <operator>+=</operator> <literal type="number">5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alertRectangle</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alertRectangle</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eagleAlert</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>alertRectangle</name><operator>.</operator><name>height</name></name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alertRectangle</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alertRectangle</name><operator>.</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>eagleAlert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alertActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>eagleActive</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isHitEagle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">10</literal><operator>*</operator><name>speed</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>eagle</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>FINALFORM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>KICK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>eagle</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>FINALFORM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>KICK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>isHitEagle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeVelocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>EAGLESCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>eagle</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>eagle</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>EAGLESCORE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>isHitEagle</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eagle</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>eagle</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>eagleActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>isHitEagle</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeVelocity</name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>beeVelocity</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eagle</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>eagle</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eagleActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>alertBeeActive</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>beeAlertRectangle</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">100</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beeAlertRectangle</name><operator>.</operator><name>width</name></name> <operator>+=</operator> <literal type="number">100</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beeAlertRectangle</name><operator>.</operator><name>height</name></name> <operator>+=</operator> <literal type="number">2.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beeAlertRectangle</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">1.25</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beeAlertRectangle</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>beeActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alertBeeActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>beeActive</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isHitBee</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">3</literal><operator>*</operator><name>speed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeMov</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><literal type="number">400</literal><operator>*</operator><name><name>bee</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>beeMov</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>bee</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>FINALFORM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>KICK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>bee</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>isHitBee</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeVelocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>BEESCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bee</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bee</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>BEESCORE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>isHitBee</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bee</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bee</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>beeActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>isHitBee</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeVelocity</name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>beeVelocity</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bee</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bee</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>beeActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>powerBar</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>power</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>power</name> <operator>&gt;=</operator> <name>maxPower</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>power</name> <operator>=</operator> <name>maxPower</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentLeaves</name> <operator>&gt;=</operator> <name>LEAVESTOTRANSFORM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>coolDown</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flyColor</name> <operator>=</operator> <name>ORANGE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leafGUIglow</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>leafGUIglowFade</name> <operator>+=</operator> <literal type="number">0.01f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leafGUIglowFade</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>leafGUIglow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> 
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>leafGUIglowFade</name> <operator>-=</operator> <literal type="number">0.01f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leafGUIglowFade</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>leafGUIglow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>leafGUIpulseFade</name> <operator>-=</operator> <literal type="number">0.01f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leafGUIpulseScale</name> <operator>+=</operator> <literal type="number">0.005F</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leafGUIpulseFade</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content> 
<expr_stmt><expr><name>leafGUIpulseFade</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leafGUIpulseScale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>powerButton</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FINALFORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transforming</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>initLeaves</name> <operator>=</operator> <name>currentLeaves</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>superKoalaCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>powerButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FINALFORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transforming</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>initLeaves</name> <operator>=</operator> <name>currentLeaves</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>superKoalaCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>currentLeaves</name> <operator>&lt;</operator> <name>LEAVESTOTRANSFORM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentLeaves</name> <operator>+=</operator> <name>LEAVESTOTRANSFORM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>coolDown</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>power</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>power</name> <operator>&gt;=</operator> <name>maxPower</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>coolDown</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>colorTimer</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colorTimer</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>finalColor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalColor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalColor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>colorTimer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ICE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iceActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator> <name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>iceActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>GRABED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>onIce</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_RESIN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>resinActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>resinActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>resinCount</name> <operator>&gt;=</operator> <literal type="number">30</literal><operator>*</operator><name>TIME_FACTOR</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>onResin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxHitResin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GRABED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WIND</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>windActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">500</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-=</operator> <literal type="number">9</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator> <name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>windActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>ONWIND</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>windCounter</name> <operator>&gt;=</operator> <literal type="number">35</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ONWIND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>windCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onIce</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountjump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountdrag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tornadoCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FIRE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>fireActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>(</operator><name><name>player</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>onFire</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>onFire</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>onFire</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">50</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>transforming</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fireCounter</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-=</operator> <name>fireSpeed</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fireCounter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fireActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>onFire</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BAMBOO</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bambooActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>grabCounter</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GRABED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>power</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollSpeed</name> <operator>=</operator> <literal type="number">1.6f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>speedMod</name> <operator>=</operator> <literal type="number">1.2f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>coolDown</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flyColor</name> <operator>=</operator> <name>GRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>snakeActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>dingoActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitDingo</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>owlActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitOwl</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><macro><name>CheckCollisionRecs</name><argument_list>(<argument>(Rectangle){branchPos[k].x</argument>, <argument>branchPos[k].y</argument>, <argument>gameplay_props_owl_branch.width</argument>, <argument>gameplay_props_owl_branch.height}</argument>, <argument>bamboo[i]</argument>)</argument_list></macro><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>branchActive</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>branchPos</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator><literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_LEAVES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>leafActive</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>leafSide</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <literal type="number">18</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">18</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>MAX_FIRE</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>fire</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fireActive</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fire</name><index>[<expr><name>z</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>MAX_ICE</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>ice</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>iceActive</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ice</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>MAX_RESIN</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>resin</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>resinActive</name><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>resin</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><operator>(</operator><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>+</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bambooActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snakeActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dingoActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>owlActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>branchPos</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>branchActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>snakeActive</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">500</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dingoActive</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">500</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>owlActive</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">500</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>KICK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>snakeKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>SNAKESCORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxDieSnake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>SNAKESCORE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>KICK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitDingo</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>isHitDingo</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>DINGOSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dingoKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>DINGOSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>KICK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitOwl</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>isHitOwl</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>OWLSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>owlKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>OWLSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>height</name><operator>)</operator> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snakeActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-=</operator> <name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isHitDingo</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>)</operator> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dingoActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitDingo</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-=</operator> <name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isHitOwl</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>)</operator> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>owlActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitOwl</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-=</operator> <name><name>enemyVel</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_LEAVES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr>}</block></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <operator>-</operator><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>leafActive</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>leafActive</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>leaf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxEatLeaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>leafType</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLeaves</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLeaves</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLeaves</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentLeaves</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>leafActive</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">180</literal></expr></argument>, <argument><expr><literal type="number">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>






<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LEAVES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>==</operator> <name>true</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">6</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.03f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>-=</operator> <literal type="number">0.004</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>+=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">3.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.1f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <literal type="number">0.1f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>+=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">4.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>popupBee</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>alpha</name></name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>scale</name></name> <operator>+=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">4.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popupBee</name><operator>.</operator><name>alpha</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popupEagle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>alpha</name></name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>scale</name></name> <operator>+=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">4.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popupEagle</name><operator>.</operator><name>alpha</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>snowParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>backSnowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backSnowParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>planetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>planetreeParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>backPlanetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backPlanetreeParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dandelionParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>dandelionParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dandelionBackParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>dandelionBackParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>flowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>flowerParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>backFlowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backFlowerParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>rainParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>backRainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backRainParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rainStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>rainStormParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">10</literal></argument>,<argument>-<literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snowStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>snowStormParticle</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">800</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>speedFX</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>spawnTime</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_SPEED</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>speedFX</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>speedFX</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument><literal type="number">30</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>GetScreenHeight() - <literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_SPEED</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.015f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>spawnTime</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_RAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rayParticles</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>rayParticles</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>backRayParticles</name><operator>.</operator><name>spawnTime</name></name> <operator>&gt;=</operator> <name><name>backRayParticles</name><operator>.</operator><name>maxTime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>spawnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>maxTime</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">4</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="number">1.5f</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">30</literal><operator>*</operator><call><name>sin</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><literal type="number">120</literal><operator>*</operator><name>globalFrameCounter</name> <operator>+</operator> <name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotPhy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="number">1.5f</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">30</literal><operator>*</operator><call><name>sin</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><literal type="number">120</literal><operator>*</operator><name>globalFrameCounter</name> <operator>+</operator> <name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotPhy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2.5f</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">4</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2.5f</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">10</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">6</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">6</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">12</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">15</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">12</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">15</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_RAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">0.5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>+=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&gt;=</operator> <literal type="number">0.5f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">0.5</literal><operator>*</operator><name>speedMod</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>+=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&gt;=</operator> <literal type="number">0.5f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GRABED</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>onWind</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>windCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCount</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>


<expr_stmt><expr><name>thisFrameKoala</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameKoala</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curFrameKoala</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameKoala</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>koalaAnimationIddle</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_koala_idle</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>koalaAnimationIddle</name><operator>.</operator><name>width</name></name><operator>*</operator><name>curFrameKoala</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>onResin</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DOUBLETAP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rightButton</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onIce</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jumpCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DOUBLETAP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>leftButton</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>onIce</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>ICEGRAVITY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxDash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>KICK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dashCounter</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>onIce</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>GRAVITY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>ICEGRAVITY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rightButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onIce</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>leftButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>onIce</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>ICEGRAVITY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxDash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>KICK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dashCounter</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>onIce</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>GRAVITY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>ICEGRAVITY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DOUBLETAP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rightButton</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>resinCountjump</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resinCountjump</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onIce</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountjump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountdrag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DOUBLETAP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>leftButton</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>resinCountdrag</name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resinCountdrag</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>KICK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountjump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountdrag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dashCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rightButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>resinCountjump</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resinCountjump</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onIce</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountjump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountdrag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>leftButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>resinCountdrag</name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resinCountdrag</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>KICK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountjump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountdrag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dashCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>JUMPING</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>jumpSpeed</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>velocity</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name><operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>KICK</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>gravity</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>gravity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitSnake</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>snakeActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitSnake</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>SNAKESCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxDieSnake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>snakeKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>SNAKESCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitDingo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>dingoActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitDingo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>DINGOSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxDieDingo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dingoKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>DINGOSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>isHitOwl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>owlActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyVel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitOwl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>OWLSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxDieOwl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>owlKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>, <expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>OWLSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>bee</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>isHitBee</name> <operator>&amp;&amp;</operator> <name>beeActive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeVelocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>isHitBee</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>BEESCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>beeKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bee</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bee</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>BEESCORE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>eagle</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>isHitEagle</name> <operator>&amp;&amp;</operator> <name>eagleActive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>JUMPING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>=</operator> <name>JUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beeVelocity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <name>KICKSPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>isHitEagle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>EAGLESCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>killCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleKillCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>globalKillCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>eagle</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>eagle</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>EAGLESCORE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>FINALFORM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>transforming</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>speedMod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>transCount</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transRotation</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transAniCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>thisFrameKoala</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>currentLeaves</name> <operator>=</operator> <call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>transCount</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>initLeaves</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>-</operator><name>LEAVESTOTRANSFORM</name></expr></argument>, <argument><expr><literal type="number">120.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameKoala</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curFrameKoala</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameKoala</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>koalaAnimationTransform</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_koala_transform</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>koalaAnimationTransform</name><operator>.</operator><name>width</name></name><operator>*</operator><name>curFrameKoala</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>transAniCounter</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transBackAnim</name> <operator>=</operator> <operator>!</operator><name>transBackAnim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transAniCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>transBackAnim</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>finalColor</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalColor2</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>finalColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalColor2</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>transCount</name> <operator>&gt;=</operator> <literal type="number">120</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transforming</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bambooTimer</name> <operator>+=</operator> <literal type="number">15</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>transforming</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>speedMod</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollSpeed</name> <operator>=</operator> <literal type="number">3.2f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>power</name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>thisFrameKoala</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thisFrameKoala</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curFrameKoala</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>thisFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curFrameKoala</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curFrameKoala</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curFrameKoala</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>koalaAnimationFly</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_koala_fly</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>koalaAnimationFly</name><operator>.</operator><name>width</name></name><operator>*</operator><name>curFrameKoala</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>power</name> <operator>&lt;=</operator> <name>maxPower</name><operator>/</operator><literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>finalFormEnd</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>finalFormEnd</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transBackAnim</name> <operator>=</operator> <operator>!</operator><name>transBackAnim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finalFormEnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>transBackAnim</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>finalColor</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transBackAnim</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>finalColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>finalColor</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_HOLD</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DRAG</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>leftButton</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>FLYINGMOV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_HOLD</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DRAG</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rightButton</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>FLYINGMOV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>leftButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>FLYINGMOV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rightButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>FLYINGMOV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gravity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>ONWIND</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>jumpSpeed</name><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>velocity</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <operator>(</operator><operator>-</operator><name><name>player</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>player</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>FINALFORM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>player</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>killer</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>player</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>FINALFORM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <operator>(</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>player</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>player</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bambooTimer</name> <operator>&gt;</operator> <name>bambooSpawnTime</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transforming</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>BambooSpawn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name> <operator>&amp;&amp;</operator> <name>eagleDelay</name> <operator>&gt;=</operator> <name>EAGLE_TIME_DELAY</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>EagleSpawn</name><argument_list>(<argument><expr><name>EAGLE_SPAWNCHANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>season</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WINTER</name></expr>:</case>
<expr_stmt><expr><call><name>IceSpawn</name><argument_list>(<argument><expr><name>ICESPAWNCHANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OwlSpawn</name><argument_list>(<argument><expr><name>OWLSPAWNCHANCE</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>progresionSpawnChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPRING</name></expr>:</case>
<expr_stmt><expr><call><name>ResinSpawn</name><argument_list>(<argument><expr><name>RESINSPAWNCHANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>BeeSpawn</name><argument_list>(<argument><expr><name>BEE_SPAWNCHANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DingoSpawn</name><argument_list>(<argument><expr><name>DINGOSPAWNCHANCE</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>progresionSpawnChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SUMMER</name></expr>:</case>
<expr_stmt><expr><call><name>FireSpawn</name><argument_list>(<argument><expr><name>FIRESPAWNCHANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SnakeSpawn</name><argument_list>(<argument><expr><name>SNAKESPAWNCHANCE</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>progresionSpawnChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FALL</name></expr>:</case>
<expr_stmt><expr><call><name>WindSpawn</name><argument_list>(<argument><expr><name>WINDSPAWNCHANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SnakeSpawn</name><argument_list>(<argument><expr><name>SNAKESPAWNCHANCE</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>progresionSpawnChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>LeafSpawn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bambooTimer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bambooSpawnTime</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>MINTIMESPAWN</name></expr></argument>, <argument><expr><name>MAXTIMESPAWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>play</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>playerActive</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>hiscore</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hiscore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>jumpSpeed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>velocity</name> <operator>-=</operator> <literal type="number">1</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>velocity</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>deathsCounter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>colorBlend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_background</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>gameplay_background.width*<literal type="number">2</literal></argument>, <argument>gameplay_background.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>DrawParallaxBack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawParallaxMiddle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_icecrystal_bw</argument>,
<argument>(Rectangle){ backSnowParticle.particles[i].position.x</argument>, <argument>backSnowParticle.particles[i].position.y</argument>, <argument>particle_icecrystal_bw.width*backSnowParticle.particles[i].size</argument>, <argument>particle_icecrystal_bw.height*backSnowParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_icecrystal_bw.width*backSnowParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_icecrystal_bw.height*backSnowParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>backSnowParticle.particles[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">144</literal>, <literal type="number">214</literal>, <literal type="number">255</literal>, <literal type="number">255</literal>}, backSnowParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_planetreeleaf_bw</argument>,
<argument>(Rectangle){ backPlanetreeParticle.particles[i].position.x</argument>, <argument>backPlanetreeParticle.particles[i].position.y</argument>, <argument>particle_planetreeleaf_bw.width*backPlanetreeParticle.particles[i].size</argument>, <argument>particle_planetreeleaf_bw.height*backPlanetreeParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_planetreeleaf_bw.width*backPlanetreeParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_planetreeleaf_bw.height*backPlanetreeParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>backPlanetreeParticle.particles[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">179</literal>, <literal type="number">86</literal>, <literal type="number">6</literal>, <literal type="number">255</literal>}, backPlanetreeParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_dandelion_bw</argument>,
<argument>(Rectangle){ dandelionBackParticle.particles[i].position.x</argument>, <argument>dandelionBackParticle.particles[i].position.y</argument>, <argument>particle_dandelion_bw.width*dandelionBackParticle.particles[i].size</argument>, <argument>particle_dandelion_bw.height*dandelionBackParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_dandelion_bw.width*dandelionBackParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_dandelion_bw.height*dandelionBackParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>dandelionBackParticle.particles[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">202</literal>, <literal type="number">167</literal>, <literal type="number">126</literal>, <literal type="number">255</literal>}, dandelionBackParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_ecualyptusflower_bw</argument>,
<argument>(Rectangle){ backFlowerParticle.particles[i].position.x</argument>, <argument>backFlowerParticle.particles[i].position.y</argument>, <argument>particle_ecualyptusflower_bw.width*backFlowerParticle.particles[i].size</argument>, <argument>particle_ecualyptusflower_bw.height*backFlowerParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_ecualyptusflower_bw.width*backFlowerParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_ecualyptusflower_bw.height*backFlowerParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>backFlowerParticle.particles[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">218</literal>, <literal type="number">84</literal>, <literal type="number">108</literal>, <literal type="number">255</literal>}, backFlowerParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>particle_waterdrop_bw</argument>,
<argument>(Rectangle){ backRainParticle.particles[i].position.x</argument>, <argument>backRainParticle.particles[i].position.y</argument>, <argument>particle_waterdrop_bw.width*backRainParticle.particles[i].size</argument>, <argument>particle_waterdrop_bw.height*backRainParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_waterdrop_bw.width*backRainParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_waterdrop_bw.height*backRainParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>backRainParticle.particles[i].rotation</argument>,
<argument>Fade((Color){<literal type="number">144</literal>, <literal type="number">183</literal>, <literal type="number">187</literal>, <literal type="number">255</literal>}, backRainParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_RAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_fx_lightraymid</argument>,
<argument>(Rectangle){ backRayParticles.particles[i].position.x</argument>, <argument>backRayParticles.particles[i].position.y</argument>, <argument>gameplay_back_fx_lightraymid.width*backRayParticles.particles[i].size</argument>, <argument>gameplay_back_fx_lightraymid.height*backRayParticles.particles[i].size }</argument>,
<argument>(Vector2){ gameplay_back_fx_lightraymid.width*backRayParticles.particles[i].size/<literal type="number">2</literal></argument>, <argument>gameplay_back_fx_lightraymid.height*backRayParticles.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>backRayParticles.particles[i].rotation</argument>,
<argument>Fade(backRayParticles.particles[i].color, backRayParticles.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>DrawParallaxFront</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BAMBOO</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bambooActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_props_tree</argument>, <argument>(Rectangle){bamboo[i].x</argument>, <argument>bamboo[i].y</argument>, <argument><literal type="number">43</literal></argument>, <argument><literal type="number">720</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color03</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>branchActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_props_owl_branch</argument>, <argument>(Rectangle){branchPos[i].x</argument>, <argument>branchPos[i].y</argument>, <argument><literal type="number">36</literal></argument>, <argument><literal type="number">20</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color03</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FIRE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){gameplay_props_burnttree.x</argument>, <argument>gameplay_props_burnttree.y + fire[i].y + gameplay_props_burnttree.height/<literal type="number">14</literal></argument>, <argument>gameplay_props_burnttree.width</argument>, <argument>gameplay_props_burnttree.height}</argument>,
<argument>(Rectangle){fire[i].x + <literal type="number">5</literal></argument>, <argument>fire[i].y + gameplay_props_burnttree.height/<literal type="number">14</literal></argument>, <argument>gameplay_props_burnttree.width</argument>, <argument>gameplay_props_burnttree.height}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>fireAnimation</argument>, <argument>(Vector2){fire[i].x</argument>, <argument>GetScreenHeight() - gameplay_props_burnttree.height/<literal type="number">7</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>MAX_FIRE_FLAMES</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">25</literal> <operator>&lt;=</operator> <operator>(</operator><name>j</name><operator>*</operator><literal type="number">43</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fireActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name><operator>%</operator><literal type="number">2</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>fireAnimation</argument>, <argument>(Vector2){fire[i].x + fireOffset - <literal type="number">10</literal></argument>, <argument><literal type="number">40</literal>*j}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>fireAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_props_fire_spritesheet</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>fireAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>curFrame1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>j</name><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>fireAnimation</argument>, <argument>(Vector2){fire[i].x - fireOffset</argument> , <argument><literal type="number">40</literal>*j}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>fireAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_props_fire_spritesheet</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>fireAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>curFrame2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>fireAnimation</argument>, <argument>(Vector2){fire[i].x - fireOffset</argument> , <argument><literal type="number">40</literal>*j}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>fireAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_props_fire_spritesheet</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>fireAnimation</name><operator>.</operator><name>width</name></name><operator>*</operator><name>curFrame3</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ICE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iceActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <operator>(</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">6</literal><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_props_ice_sprite</argument>, <argument>(Rectangle){ice[i].x - <literal type="number">5</literal></argument>, <argument>ice[i].y+k</argument>, <argument>gameplay_props_ice_sprite.width</argument>, <argument>gameplay_props_ice_sprite.height}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>colorBlend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground00</argument>, <argument>(Rectangle){(int)groundPos + GetScreenWidth()</argument>, <argument><literal type="number">637</literal></argument>, <argument>gameplay_back_ground00.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_ground00.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color00</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground00</argument>, <argument>(Rectangle){(int)groundPos</argument>, <argument><literal type="number">637</literal></argument>, <argument>gameplay_back_ground00.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_ground00.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color00</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_RESIN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>resinActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_props_resin_sprite</argument>,<argument>(Vector2){ resin[i].x - resin[i].width/<literal type="number">3</literal></argument>, <argument>resin[i].y - resin[i].height/<literal type="number">5</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snakeActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isHitSnake</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content><macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>snakeAnimation</argument>, <argument>(Vector2){snake[i].x - snake[i].width</argument>, <argument>snake[i].y - snake[i].height/<literal type="number">2</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){gameplay_enemy_snake.x + snakeAnimation.width*<literal type="number">2</literal></argument>, <argument>gameplay_enemy_snake.y</argument>, <argument>snakeAnimation.width</argument>, <argument>snakeAnimation.height}</argument>, <argument>(Vector2){snake[i].x - snake[i].width/<literal type="number">2</literal></argument>, <argument>snake[i].y - snake[i].height/<literal type="number">2</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dingoActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isHitDingo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>dingoAnimation</argument>, <argument>(Vector2){dingo[i].x - dingo[i].width/<literal type="number">2</literal></argument>, <argument>dingo[i].y - dingo[i].height/<literal type="number">4</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){gameplay_enemy_dingo.x + dingoAnimation.width*<literal type="number">2</literal></argument>, <argument>gameplay_enemy_dingo.y</argument>, <argument>dingoAnimation.width</argument>, <argument>dingoAnimation.height}</argument>, <argument>(Vector2){dingo[i].x - dingo[i].width/<literal type="number">2</literal></argument>, <argument>dingo[i].y - dingo[i].height/<literal type="number">4</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owlActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isHitOwl</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content><macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>owlAnimation</argument>, <argument>(Vector2){owl[i].x - owl[i].width*<literal type="number">0.7</literal></argument>, <argument>owl[i].y - owl[i].height*<literal type="number">0.1</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){gameplay_enemy_owl.x + owlAnimation.width*<literal type="number">2</literal></argument>, <argument>gameplay_enemy_owl.y</argument>, <argument>owlAnimation.width</argument>, <argument>owlAnimation.height}</argument>, <argument>(Vector2){owl[i].x - owl[i].width/<literal type="number">2</literal></argument>, <argument>owl[i].y - owl[i].height/<literal type="number">6</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_hit</argument>,
<argument>(Rectangle){ enemyHit[i].position.x</argument>, <argument>enemyHit[i].position.y</argument>, <argument>particle_hit.width*enemyHit[i].size</argument>, <argument>particle_hit.height*enemyHit[i].size }</argument>,
<argument>(Vector2){ particle_hit.width*enemyHit[i].size/<literal type="number">2</literal></argument>, <argument>particle_hit.height*enemyHit[i].size/<literal type="number">2</literal> }</argument>, <argument>enemyHit[i].rotation</argument>,
<argument>Fade(enemyHit[i].color, enemyHit[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LEAVES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>leafActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>leafSide</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){ gameplay_props_leaf_lil.x</argument>, <argument>gameplay_props_leaf_lil.y</argument>, <argument>-gameplay_props_leaf_lil.width</argument>, <argument>gameplay_props_leaf_lil.height }</argument>, <argument>(Vector2){ leaf[i].x</argument>, <argument>leaf[i].y - <literal type="number">15</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){ gameplay_props_leaf_lil.x</argument>, <argument>gameplay_props_leaf_lil.y</argument>, <argument>-gameplay_props_leaf_lil.width</argument>, <argument>gameplay_props_leaf_lil.height }</argument>, <argument>(Vector2){leaf[i].x</argument>, <argument>leaf[i].y + <literal type="number">10</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){ gameplay_props_leaf_mid.x</argument>, <argument>gameplay_props_leaf_mid.y</argument>, <argument>-gameplay_props_leaf_mid.width</argument>, <argument>gameplay_props_leaf_mid.height }</argument>, <argument>(Vector2){leaf[i].x</argument>, <argument>leaf[i].y - <literal type="number">15</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){ gameplay_props_leaf_big.x</argument>, <argument>gameplay_props_leaf_big.y</argument>, <argument>-gameplay_props_leaf_big.width</argument>, <argument>gameplay_props_leaf_big.height }</argument>, <argument>(Vector2){leaf[i].x</argument>, <argument>leaf[i].y - <literal type="number">15</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_props_leaf_lil</argument>, <argument>(Vector2){ leaf[i].x - <literal type="number">25</literal></argument>, <argument>leaf[i].y - <literal type="number">15</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_props_leaf_lil</argument>, <argument>(Vector2){leaf[i].x - <literal type="number">25</literal></argument>, <argument>leaf[i].y + <literal type="number">10</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_props_leaf_mid</argument>, <argument>(Vector2){leaf[i].x - <literal type="number">25</literal></argument>, <argument>leaf[i].y - <literal type="number">15</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_props_leaf_big</argument>, <argument>(Vector2){leaf[i].x - <literal type="number">25</literal></argument>, <argument>leaf[i].y - <literal type="number">15</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>leaf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>leaf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>GREEN</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_ecualyptusleaf</argument>,
<argument>(Rectangle){ leafParticles[i].particles[j].position.x</argument>, <argument>leafParticles[i].particles[j].position.y</argument>, <argument>particle_ecualyptusleaf.width*leafParticles[i].particles[j].size</argument>, <argument>particle_ecualyptusleaf.height*leafParticles[i].particles[j].size }</argument>,
<argument>(Vector2){ particle_ecualyptusleaf.width/<literal type="number">2</literal>*leafParticles[i].particles[j].size</argument>, <argument>particle_ecualyptusleaf.height/<literal type="number">2</literal>*leafParticles[i].particles[j].size }</argument>, <argument>leafParticles[i].particles[j].rotation</argument>, <argument>Fade(WHITE,leafParticles[i].particles[j].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>beeActive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isHitBee</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>beeAnimation</argument>, <argument>(Vector2){bee.x</argument>, <argument>bee.y - gameplay_enemy_bee.height/<literal type="number">2</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>beeActive</name> <operator>&amp;&amp;</operator> <name>isHitBee</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){gameplay_enemy_bee.x + beeAnimation.width*<literal type="number">4</literal></argument>, <argument>gameplay_enemy_bee.y</argument>, <argument>beeAnimation.width</argument>, <argument>gameplay_enemy_bee.height}</argument>,
<argument>(Rectangle){bee.x</argument>, <argument>bee.y</argument>, <argument>beeAnimation.width</argument>, <argument>gameplay_enemy_bee.height}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eagleActive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isHitEagle</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>eagleAnimation</argument>, <argument>(Vector2){eagle.x</argument>, <argument>eagle.y}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>eagleActive</name> <operator>&amp;&amp;</operator> <name>isHitEagle</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_enemy_eagle_death</argument>, <argument>(Vector2){eagle.x</argument>, <argument>eagle.y}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alertActive</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_fx_eaglealert</argument>, <argument>alertRectangle</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(RED, <literal type="number">0.7f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>alertBeeActive</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_fx_eaglealert</argument>, <argument>beeAlertRectangle</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(ORANGE, <literal type="number">0.7f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>transforming</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>background_transformation</argument>,
<argument>(Rectangle){player.x + player.width/<literal type="number">2</literal></argument> , <argument>player.y + player.height/<literal type="number">2</literal></argument>, <argument>background_transformation.width*<literal type="number">4</literal></argument>, <argument>background_transformation.height*<literal type="number">4</literal>}</argument>,
<argument>(Vector2){<literal type="number">0</literal></argument>, <argument>background_transformation.height*<literal type="number">2</literal>}</argument>, <argument><literal type="number">45</literal>*i</argument>, <argument>Fade(finalColor, <literal type="number">0.7f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>background_transformation</argument>,
<argument>(Rectangle){player.x + player.width/<literal type="number">2</literal></argument> , <argument>player.y + player.height/<literal type="number">2</literal></argument>, <argument>background_transformation.width*<literal type="number">4</literal></argument>, <argument>background_transformation.height}</argument>,
<argument>(Vector2){<literal type="number">0</literal></argument>, <argument>background_transformation.height/<literal type="number">2</literal>}</argument>, <argument><literal type="number">22.5</literal> + <literal type="number">45</literal>*i</argument>, <argument>Fade(finalColor2, <literal type="number">0.7f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>playerActive</name> <operator>&amp;&amp;</operator> <name>play</name></expr>)</condition>
<block>{<block_content>
<switch>switch<condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GRABED</name></expr>:</case> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>koalaAnimationIddle</argument>, <argument>(Vector2){player.x - player.width</argument>, <argument>player.y - gameplay_koala_idle.height/<literal type="number">4</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<case>case <expr><name>JUMPING</name></expr>:</case> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_koala_jump</argument>, <argument>(Rectangle){player.x - player.width</argument>, <argument>player.y - gameplay_koala_jump.height/<literal type="number">4</literal></argument>, <argument>gameplay_koala_jump.width</argument>, <argument>gameplay_koala_jump.height}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<case>case <expr><name>KICK</name></expr>:</case><macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_koala_dash</argument>, <argument>(Rectangle){player.x - player.width</argument>, <argument>player.y - gameplay_koala_jump.height/<literal type="number">4</literal></argument>, <argument>gameplay_koala_dash.width</argument>, <argument>gameplay_koala_dash.height}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<case>case <expr><name>FINALFORM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>transforming</name></expr>)</condition><block type="pseudo"><block_content><macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>koalaAnimationTransform</argument>, <argument>(Rectangle){player.x - player.width</argument>, <argument>player.y - gameplay_koala_transform.height/<literal type="number">4</literal></argument>, <argument>gameplay_koala_transform.width/<literal type="number">2</literal></argument>, <argument>gameplay_koala_transform.height}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>finalColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>koalaAnimationFly</argument>, <argument>(Rectangle){player.x - gameplay_koala_fly.width/<literal type="number">3</literal></argument>, <argument>player.y - gameplay_koala_fly.height/<literal type="number">4</literal></argument>, <argument>gameplay_koala_fly.width/<literal type="number">2</literal></argument>, <argument>gameplay_koala_fly.height}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>finalColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>ONWIND</name></expr>:</case> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_koala_jump</argument>, <argument>(Rectangle){player.x - player.width</argument>, <argument>player.y - gameplay_koala_jump.height/<literal type="number">4</literal></argument>, <argument>gameplay_koala_jump.width</argument>, <argument>gameplay_koala_jump.height}</argument>, <argument>(Vector2) { <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>play</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>playerActive</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>(Rectangle){gameplay_koala_idle.x</argument>, <argument>gameplay_koala_idle.y</argument>, <argument>gameplay_koala_idle.width/<literal type="number">3</literal></argument>, <argument>gameplay_koala_idle.height}</argument>, <argument>(Vector2){player.x - player.width</argument>, <argument>player.y - gameplay_koala_idle.height/<literal type="number">4</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_koala_die</argument>, <argument>(Rectangle){player.x - player.width</argument>, <argument>player.y - gameplay_koala_die.height/<literal type="number">4</literal></argument>, <argument>gameplay_koala_die.width</argument>, <argument>gameplay_koala_die.height}</argument>, <argument>(Vector2) { <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WIND</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>windActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>atlas01</argument>, <argument>windAnimation</argument>, <argument>(Vector2){wind[i].x - <literal type="number">14</literal></argument>, <argument>wind[i].y - <literal type="number">14</literal>}</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>playerActive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>play</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawRectangle</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>GetScreenWidth()</argument>, <argument>GetScreenHeight()</argument>, <argument>Fade((Color){<literal type="number">216</literal>, <literal type="number">200</literal>, <literal type="number">39</literal>, <literal type="number">255</literal>}, <literal type="number">0.4</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawRectangle</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>GetScreenWidth()</argument>, <argument>GetScreenHeight()</argument>, <argument>Fade((Color){<literal type="number">155</literal>, <literal type="number">70</literal>, <literal type="number">22</literal>, <literal type="number">255</literal>}, <literal type="number">0.4</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawRectangle</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>GetScreenWidth()</argument>, <argument>GetScreenHeight()</argument>, <argument>Fade((Color){<literal type="number">17</literal>, <literal type="number">129</literal>, <literal type="number">162</literal>, <literal type="number">255</literal>}, <literal type="number">0.4</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawRectangle</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>GetScreenWidth()</argument>, <argument>GetScreenHeight()</argument>, <argument>Fade((Color){<literal type="number">82</literal>, <literal type="number">174</literal>, <literal type="number">7</literal>, <literal type="number">255</literal>}, <literal type="number">0.4</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_icecrystal</argument>,
<argument>(Rectangle){ snowParticle.particles[i].position.x</argument>, <argument>snowParticle.particles[i].position.y</argument>, <argument>particle_icecrystal.width*snowParticle.particles[i].size</argument>, <argument>particle_icecrystal.height*snowParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_icecrystal.width*snowParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_icecrystal.height*snowParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>snowParticle.particles[i].rotation</argument>,
<argument>Fade(snowParticle.particles[i].color, snowParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_planetreeleaf</argument>,
<argument>(Rectangle){ planetreeParticle.particles[i].position.x</argument>, <argument>planetreeParticle.particles[i].position.y</argument>, <argument>particle_planetreeleaf.width*planetreeParticle.particles[i].size</argument>, <argument>particle_planetreeleaf.height*planetreeParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_planetreeleaf.width*planetreeParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_planetreeleaf.height*planetreeParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>planetreeParticle.particles[i].rotation</argument>,
<argument>Fade(planetreeParticle.particles[i].color, planetreeParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_dandelion</argument>,
<argument>(Rectangle){ dandelionParticle.particles[i].position.x</argument>, <argument>dandelionParticle.particles[i].position.y</argument>, <argument>particle_dandelion.width*dandelionParticle.particles[i].size</argument>, <argument>particle_dandelion.height*dandelionParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_dandelion.width*dandelionParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_dandelion.height*dandelionParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>dandelionParticle.particles[i].rotation</argument>,
<argument>Fade(dandelionParticle.particles[i].color, dandelionParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_ecualyptusflower</argument>,
<argument>(Rectangle){ flowerParticle.particles[i].position.x</argument>, <argument>flowerParticle.particles[i].position.y</argument>, <argument>particle_ecualyptusflower.width*flowerParticle.particles[i].size</argument>, <argument>particle_ecualyptusflower.height*flowerParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_ecualyptusflower.width*flowerParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_ecualyptusflower.height*flowerParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>flowerParticle.particles[i].rotation</argument>,
<argument>Fade(flowerParticle.particles[i].color, flowerParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_waterdrop</argument>,
<argument>(Rectangle){ rainParticle.particles[i].position.x</argument>, <argument>rainParticle.particles[i].position.y</argument>, <argument>particle_waterdrop.width*rainParticle.particles[i].size</argument>, <argument>particle_waterdrop.height*rainParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_waterdrop.width*rainParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_waterdrop.height*rainParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>rainParticle.particles[i].rotation</argument>,
<argument>Fade(rainParticle.particles[i].color, rainParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_SPEED</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument> , <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_waterdrop</argument>,
<argument>(Rectangle){ rainStormParticle.particles[i].position.x</argument>, <argument>rainStormParticle.particles[i].position.y</argument>, <argument>particle_waterdrop.width*rainStormParticle.particles[i].size</argument>, <argument>particle_waterdrop.height*rainStormParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_waterdrop.width*rainStormParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_waterdrop.height*rainStormParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>rainStormParticle.particles[i].rotation</argument>,
<argument>Fade(rainStormParticle.particles[i].color, rainStormParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>particle_icecrystal</argument>,
<argument>(Rectangle){ snowStormParticle.particles[i].position.x</argument>, <argument>snowStormParticle.particles[i].position.y</argument>, <argument>particle_icecrystal.width*snowStormParticle.particles[i].size</argument>, <argument>particle_icecrystal.height*snowStormParticle.particles[i].size }</argument>,
<argument>(Vector2){ particle_icecrystal.width*snowStormParticle.particles[i].size/<literal type="number">2</literal></argument>, <argument>particle_icecrystal.height*snowStormParticle.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>snowStormParticle.particles[i].rotation</argument>,
<argument>Fade(snowStormParticle.particles[i].color, snowStormParticle.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_RAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_fx_lightraymid</argument>,
<argument>(Rectangle){ rayParticles.particles[i].position.x</argument>, <argument>rayParticles.particles[i].position.y</argument>, <argument>gameplay_fx_lightraymid.width*rayParticles.particles[i].size</argument>, <argument>gameplay_fx_lightraymid.height*rayParticles.particles[i].size }</argument>,
<argument>(Vector2){ gameplay_fx_lightraymid.width*rayParticles.particles[i].size/<literal type="number">2</literal></argument>, <argument>gameplay_fx_lightraymid.height*rayParticles.particles[i].size/<literal type="number">2</literal> }</argument>, <argument>rayParticles.particles[i].rotation</argument>,
<argument>Fade(rayParticles.particles[i].color, rayParticles.particles[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fogAlpha</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>background_fog02</argument>, <argument>(Rectangle){ fogPosition</argument>, <argument>GetScreenHeight()*<literal type="number">0.6</literal></argument>, <argument>GetScreenWidth()</argument>, <argument>background_fog02.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument> , <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(WHITE, fogAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>background_fog02</argument>, <argument>(Rectangle){ fogPosition+GetScreenWidth()</argument>, <argument>GetScreenHeight()*<literal type="number">0.6</literal></argument>, <argument>GetScreenWidth()</argument>, <argument>background_fog02.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument> , <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(WHITE, fogAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filterAlpha</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>FINALFORM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>SKYBLUE</name></expr></argument>, <argument><expr><name>filterAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_gui_leafcounter_base</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>gameplay_gui_leafcounter_base.width</argument>, <argument>gameplay_gui_leafcounter_base.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument> , <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_gui_seasonsclock_disc</argument>, <argument>(Rectangle) {GetScreenWidth()</argument>, <argument><literal type="number">0</literal></argument>, <argument>gameplay_gui_seasonsclock_disc.width</argument>, <argument>gameplay_gui_seasonsclock_disc.height}</argument>, <argument>(Vector2) {gameplay_gui_seasonsclock_disc.width/<literal type="number">2</literal></argument>, <argument>gameplay_gui_seasonsclock_disc.height/<literal type="number">2</literal>}</argument>, 
<argument>clockRotation</argument>, <argument>Fade(WHITE, UIfade)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_gui_seasonsclock_base</argument>, <argument>(Rectangle){ (GetScreenWidth() - gameplay_gui_seasonsclock_base.width )</argument>, <argument><literal type="number">0</literal></argument>, <argument>gameplay_gui_seasonsclock_base.width</argument>, <argument>gameplay_gui_seasonsclock_base.height}</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument> , <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(WHITE, UIfade)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>currentLeaves</name><operator>/</operator><literal type="number">5</literal><operator>)</operator> <operator>&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_gui_leafcounter_cell</argument>, <argument>(Rectangle) {<literal type="number">87</literal></argument>, <argument><literal type="number">83</literal></argument>, <argument>gameplay_gui_leafcounter_cell.width</argument>, <argument>gameplay_gui_leafcounter_cell.height}</argument>, <argument>(Vector2) {gameplay_gui_leafcounter_cell.width/<literal type="number">4</literal></argument>, <argument><literal type="number">69</literal>}</argument>, <argument>i*(-<literal type="number">18</literal>)</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>power</name><operator>/</operator><literal type="number">18</literal> <operator>&gt;=</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_gui_leafcounter_cell</argument>, <argument>(Rectangle) {<literal type="number">87</literal></argument>, <argument><literal type="number">83</literal></argument>, <argument>gameplay_gui_leafcounter_cell.width</argument>, <argument>gameplay_gui_leafcounter_cell.height}</argument>, <argument>(Vector2) {gameplay_gui_leafcounter_cell.width/<literal type="number">4</literal></argument>, <argument><literal type="number">69</literal>}</argument>, <argument>i*(-<literal type="number">18</literal>)</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>currentLeaves</name> <operator>&gt;=</operator> <name>LEAVESTOTRANSFORM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>!=</operator> <name>FINALFORM</name><operator>)</operator></expr>)</condition> 
<block>{<block_content>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_gui_leafcounter_pulsel</argument>, 
<argument>(Rectangle){ <literal type="number">85</literal></argument>, <argument><literal type="number">84</literal></argument>, <argument>gameplay_gui_leafcounter_pulsel.width*leafGUIpulseScale</argument>, <argument>gameplay_gui_leafcounter_pulsel.height*leafGUIpulseScale}</argument>, 
<argument>(Vector2){ gameplay_gui_leafcounter_pulsel.width*leafGUIpulseScale/<literal type="number">2</literal></argument> , <argument>gameplay_gui_leafcounter_pulsel.height*leafGUIpulseScale/<literal type="number">2</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade((Color){<literal type="number">126</literal>, <literal type="number">248</literal>, <literal type="number">25</literal>, <literal type="number">255</literal>}, leafGUIpulseFade)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_gui_leafcounter_glow</argument>, 
<argument>(Rectangle){ <literal type="number">84</literal></argument>, <argument><literal type="number">83</literal></argument>, <argument>gameplay_gui_leafcounter_glow.width</argument>, <argument>gameplay_gui_leafcounter_glow.height}</argument>, 
<argument>(Vector2){ gameplay_gui_leafcounter_glow.width/<literal type="number">2</literal></argument> , <argument>gameplay_gui_leafcounter_glow.height/<literal type="number">2</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(WHITE, leafGUIglowFade)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>play</name> <operator>==</operator> <name>false</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>playerActive</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>startNum</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_countdown_3</argument>, 
<argument>(Rectangle){ GetScreenWidth()/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">2</literal></argument>, <argument>gameplay_countdown_3.width*numberScale</argument>, <argument>gameplay_countdown_3.height*numberScale}</argument>, 
<argument>(Vector2){ gameplay_countdown_3.width*numberScale/<literal type="number">2</literal></argument> , <argument>gameplay_countdown_3.height*numberScale/<literal type="number">2</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(RED, numberAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>startNum</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_countdown_2</argument>, 
<argument>(Rectangle){ GetScreenWidth()/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">2</literal></argument>, <argument>gameplay_countdown_2.width*numberScale</argument>, <argument>gameplay_countdown_2.height*numberScale}</argument>, 
<argument>(Vector2){ gameplay_countdown_2.width*numberScale/<literal type="number">2</literal></argument> , <argument>gameplay_countdown_2.height*numberScale/<literal type="number">2</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(RED, leafGUIpulseFade)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>startNum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTexturePro</name><argument_list>(<argument>atlas01</argument>, <argument>gameplay_countdown_1</argument>, 
<argument>(Rectangle){ GetScreenWidth()/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">2</literal></argument>, <argument>gameplay_countdown_1.width*numberScale</argument>, <argument>gameplay_countdown_1.height*numberScale}</argument>, 
<argument>(Vector2){ gameplay_countdown_1.width*numberScale/<literal type="number">2</literal></argument> , <argument>gameplay_countdown_1.height*numberScale/<literal type="number">2</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument>Fade(RED, leafGUIpulseFade)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt> 



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%i"</literal>, popupScore[i].score)</argument>, <argument>popupScore[i].position</argument>, <argument>font.baseSize/<literal type="number">4</literal>*popupScore[i].scale</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>Fade((Color){<literal type="number">255</literal>, <literal type="number">73</literal>, <literal type="number">73</literal>, <literal type="number">255</literal>}, popupScore[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>popupBee</name><operator>.</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%i"</literal>, popupBee.score)</argument>, <argument>popupBee.position</argument>, <argument>font.baseSize/<literal type="number">4</literal>*popupBee.scale</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>Fade((Color){<literal type="number">255</literal>, <literal type="number">73</literal>, <literal type="number">73</literal>, <literal type="number">255</literal>}, popupBee.alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>popupEagle</name><operator>.</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%i"</literal>, popupEagle.score)</argument>, <argument>popupEagle.position</argument>, <argument>font.baseSize/<literal type="number">4</literal>*popupEagle.scale</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>Fade((Color){<literal type="number">255</literal>, <literal type="number">73</literal>, <literal type="number">73</literal>, <literal type="number">255</literal>}, popupEagle.alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LEAVES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"+ %i"</literal>, popupLeaves[i].score)</argument>, <argument>popupLeaves[i].position</argument>, <argument>font.baseSize/<literal type="number">4</literal>*popupLeaves[i].scale</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>Fade((Color){<literal type="number">139</literal>, <literal type="number">179</literal>, <literal type="number">0</literal>, <literal type="number">255</literal>}, popupLeaves[i].alpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%03i"</literal>, currentLeaves)</argument>, <argument>(Vector2){ <literal type="number">47</literal></argument>, <argument><literal type="number">50</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">8</literal></argument>, <argument>counterColor</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>transforming</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textFinalForm</argument>, <argument>(Vector2){ GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textFinalForm, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">4</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">246</literal></argument>, <argument><literal type="number">133</literal></argument>, <argument><literal type="number">133</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>transitionFramesCounter</name> <operator>&gt;=</operator> <name>SEASONTRANSITION</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>randomMessage</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textSpring1</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textSpring1, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">185</literal></argument>, <argument><literal type="number">222</literal></argument>, <argument><literal type="number">105</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textSpring2</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textSpring2, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">185</literal></argument>, <argument><literal type="number">222</literal></argument>, <argument><literal type="number">105</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> 
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>transitionFramesCounter</name> <operator>&gt;=</operator> <name>SEASONTRANSITION</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>randomMessage</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textSummer1</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textSummer1, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">253</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument><literal type="number">108</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textSummer2</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textSummer2, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">253</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument><literal type="number">108</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if> 
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>currentMonth</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>transitionFramesCounter</name> <operator>&gt;=</operator> <name>SEASONTRANSITION</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>randomMessage</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textFall1</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textFall1, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">255</literal></argument>, <argument><literal type="number">149</literal></argument>, <argument><literal type="number">107</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textFall2</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textFall2, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">255</literal></argument>, <argument><literal type="number">149</literal></argument>, <argument><literal type="number">107</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if> 
<if type="elseif">else if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>transitionFramesCounter</name> <operator>&gt;=</operator> <name>SEASONTRANSITION</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>randomMessage</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textWinter1</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textWinter1, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">133</literal></argument>, <argument><literal type="number">249</literal></argument>, <argument><literal type="number">253</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>textWinter2</argument>, <argument>(Vector2){GetScreenWidth()/<literal type="number">2</literal> - MeasureText(textWinter2, <literal type="number">40</literal>)/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">3</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">5</literal></argument>, <argument>(Color){<literal type="number">133</literal></argument>, <argument><literal type="number">249</literal></argument>, <argument><literal type="number">253</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WIND</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>windActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>Fade</name> <argument_list>(<argument><expr><name>GRAY</name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>owlActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dingoActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snakeActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>beeActive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>bee</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>eagleActive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>eagle</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>season</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WINTER</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"June"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"July"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>SPRING</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"September"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"October"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>SUMMER</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"December"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"January"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>FALL</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"March"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"April"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>TRANSITION</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currentMonth</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"May"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"Score: %02i"</literal></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"HighScore: %02i"</literal></expr></argument>, <argument><expr><name>hiscore</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"SeasonChange: %03i"</literal></expr></argument>, <argument><expr><name>seasonTimer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>BambooSpawn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>bambooActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bambooActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>SnakeSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>posArray</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>snakeActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>posArray</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snake</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">25</literal> <operator>+</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">5</literal><operator>*</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snakeActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitSnake</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DingoSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>posArrayDingo</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name></expr>)</condition>
<block>{<block_content>
<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>dingoActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>posArray</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">25</literal> <operator>+</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">5</literal><operator>*</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingoActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitDingo</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>OwlSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>posArray</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>owlActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>branchActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>posArray</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">25</literal> <operator>+</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">5</literal><operator>*</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owlActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>branchPos</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>branchPos</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>owl</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>branchActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>LeafSpawn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxLeavesCounter</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>posArrayLeaf</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_LEAVES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>leafActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;=</operator> <name>maxLeavesCounter</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>leafPosition</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>leafTypeSelection</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>leafSideSelection</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>leafSide</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>leafSideSelection</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><call><name>CheckArrayValue</name><argument_list>(<argument><expr><name>posArray</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>leafPosition</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>leafPosition</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while> 
<expr_stmt><expr><name><name>posArrayLeaf</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>leafPosition</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>counter</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<while>while<condition>(<expr><name>leafPosition</name> <operator>==</operator> <name><name>posArrayLeaf</name><index>[<expr><name>counter</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <call><name>CheckArrayValue</name><argument_list>(<argument><expr><name>posArray</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>leafPosition</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>leafPosition</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>posArrayLeaf</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>leafPosition</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>counter</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<while>while<condition>(<expr><operator>(</operator><name>leafPosition</name> <operator>==</operator> <name><name>posArrayLeaf</name><index>[<expr><name>counter</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>leafPosition</name> <operator>==</operator> <name><name>posArrayLeaf</name><index>[<expr><name>counter</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>CheckArrayValue</name><argument_list>(<argument><expr><name>posArray</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>leafPosition</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>leafPosition</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>posArrayLeaf</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>leafPosition</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>leaf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">30</literal> <operator>+</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">5</literal><operator>*</operator><name>leafPosition</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leaf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leafTypeSelection</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>leafType</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>leafTypeSelection</name> <operator>&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>leafTypeSelection</name> <operator>&lt;=</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>leafType</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>leafTypeSelection</name> <operator>&gt;</operator> <literal type="number">50</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>leafTypeSelection</name> <operator>&lt;=</operator> <literal type="number">75</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>leafType</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>leafType</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FireSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_FIRE</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>fireActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fire</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fire</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fireActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>onFire</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IceSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_ICE</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>iceActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ice</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ice</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iceActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResinSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_RESIN</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>resinActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>resPosition</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>CheckArrayValue</name><argument_list>(<argument><expr><name>posArray</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>resPosition</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>resPosition</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>resin</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">25</literal> <operator>+</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">5</literal><operator>*</operator><name>resPosition</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resin</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resinActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WindSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_WIND</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>windActive</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>resPosition</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>CheckArrayValue</name><argument_list>(<argument><expr><name>posArray</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>resPosition</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>resPosition</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>wind</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">25</literal> <operator>+</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">5</literal><operator>*</operator><name>resPosition</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wind</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>windActive</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>BeeSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>beeActive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>alertBeeActive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>bee</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beeAlertRectangle</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{<expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>, <expr><name><name>bee</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>gameplay_enemy_bee</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>beeActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alertBeeActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>EagleSpawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chance</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>eagleActive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>alertActive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>eagleDelay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alertRectangle</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{<expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>, <expr><name><name>eagle</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>gameplay_enemy_eagle</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleAlert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alertActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckArrayValue</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arrayLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>arrayLength</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxFront</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>ground01</name> <init>= <expr><name>gameplay_back_ground01</name></expr></init></decl>;</decl_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset</argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree01_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + <literal type="number">140</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree02_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument>gameplay_back_tree02_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree04_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree05_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument>gameplay_back_tree06_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree07_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree08_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground01</argument>, <argument>(Rectangle){(int)scrollFront</argument>, <argument><literal type="number">559</literal></argument>, <argument>ground01.width*<literal type="number">2</literal></argument>, <argument>ground01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground01.x</argument>, <argument>ground01.y + ground01.height</argument>, <argument>ground01.width</argument>, <argument>-ground01.height}</argument>, <argument>(Rectangle){(int)scrollFront</argument>, <argument>-<literal type="number">33</literal></argument>, <argument>ground01.width*<literal type="number">2</literal></argument>, <argument>ground01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + GetScreenWidth()</argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree01_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer01.height*<literal type="number">2</literal>}</argument>,<argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + GetScreenWidth() + <literal type="number">140</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree02_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument>gameplay_back_tree03_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree03_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree04_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree05_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument>gameplay_back_tree06_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree07_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer01</argument>, <argument>(Rectangle){(int)scrollFront + parallaxFrontOffset+ GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>gameplay_back_tree08_layer01.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground01</argument>, <argument>(Rectangle){(int)scrollFront + GetScreenWidth()</argument>, <argument><literal type="number">559</literal></argument>, <argument>ground01.width*<literal type="number">2</literal></argument>, <argument>ground01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> 
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground01.x</argument>, <argument>ground01.y + ground01.height</argument>, <argument>ground01.width</argument>, <argument>-ground01.height}</argument>, <argument>(Rectangle){(int)scrollFront+ GetScreenWidth()</argument>, <argument>-<literal type="number">33</literal></argument>, <argument>ground01.width*<literal type="number">2</literal></argument>, <argument>ground01.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxMiddle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>ground02</name> <init>= <expr><name>gameplay_back_ground02</name></expr></init></decl>;</decl_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle</argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree01_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + <literal type="number">140</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree02_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree03_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree03_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree04_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree05_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree06_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree07_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree08_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground02</argument>, <argument>(Rectangle){(int)scrollMiddle</argument>, <argument><literal type="number">509</literal></argument>, <argument>ground02.width*<literal type="number">2</literal></argument>, <argument>ground02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground02.x</argument>, <argument>ground02.y + ground02.height</argument>, <argument>ground02.width</argument>, <argument>-ground02.height}</argument>, <argument>(Rectangle){(int)scrollMiddle</argument>, <argument><literal type="number">19</literal></argument>, <argument>ground02.width*<literal type="number">2</literal></argument>, <argument>ground02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth() + <literal type="number">140</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree02_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree03_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree03_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree04_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree05_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree06_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree07_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree08_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer02</argument>, <argument>(Rectangle){(int)scrollMiddle+ GetScreenWidth()</argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree01_layer02.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer02.height*<literal type="number">2</literal>}</argument>,<argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground02</argument>, <argument>(Rectangle){(int)scrollMiddle + GetScreenWidth()</argument>, <argument><literal type="number">509</literal></argument>, <argument>ground02.width*<literal type="number">2</literal></argument>, <argument>ground02.height*<literal type="number">2</literal>}</argument>,<argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground02.x</argument>, <argument>ground02.y + ground02.height</argument>, <argument>ground02.width</argument>, <argument>-ground02.height}</argument>, <argument>(Rectangle){(int)scrollMiddle+ GetScreenWidth()</argument>, <argument><literal type="number">19</literal></argument>, <argument>ground02.width*<literal type="number">2</literal></argument>, <argument>ground02.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawParallaxBack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>ground03</name> <init>= <expr><name>gameplay_back_ground03</name></expr></init></decl>;</decl_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset</argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree01_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + <literal type="number">140</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree02_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree03_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree03_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree04_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree05_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree06_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree07_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree08_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground03</argument>, <argument>(Rectangle){(int)scrollBack</argument>, <argument><literal type="number">469</literal></argument>, <argument>ground03.width*<literal type="number">2</literal></argument>, <argument>ground03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground03.x</argument>, <argument>ground03.y + ground03.height</argument>, <argument>ground03.width</argument>, <argument>-ground03.height}</argument>, <argument>(Rectangle){(int)scrollBack</argument>, <argument><literal type="number">67</literal></argument>, <argument>ground03.width*<literal type="number">2</literal></argument>, <argument>ground03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree01_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset+ GetScreenWidth()</argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree01_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree01_layer03.height*<literal type="number">2</literal>}</argument>,<argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree02_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + GetScreenWidth() + <literal type="number">140</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree02_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree02_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree03_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">2</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree03_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree03_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree04_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">3</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree04_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree04_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree05_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">4</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree05_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree05_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree06_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">5</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree06_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree06_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree07_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">6</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree07_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree07_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_tree08_layer03</argument>, <argument>(Rectangle){(int)scrollBack + parallaxBackOffset + GetScreenWidth() + <literal type="number">140</literal>*<literal type="number">7</literal></argument>, <argument><literal type="number">67</literal></argument>, <argument>gameplay_back_tree08_layer03.width*<literal type="number">2</literal></argument>, <argument>gameplay_back_tree08_layer03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color02</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>gameplay_back_ground03</argument>, <argument>(Rectangle){(int)scrollBack + GetScreenWidth()</argument>, <argument><literal type="number">469</literal></argument>, <argument>ground03.width*<literal type="number">2</literal></argument>, <argument>ground03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexturePro</name><argument_list>(<argument>atlas02</argument>, <argument>(Rectangle){ground03.x</argument>, <argument>ground03.y + ground03.height</argument>, <argument>ground03.width</argument>, <argument>-ground03.height}</argument>, <argument>(Rectangle){(int)scrollBack+ GetScreenWidth()</argument>, <argument><literal type="number">67</literal></argument>, <argument>ground03.width*<literal type="number">2</literal></argument>, <argument>ground03.height*<literal type="number">2</literal>}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>color01</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>float</name></type> <name>LinearEaseIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>c</name><operator>*</operator><name>t</name><operator>/</operator><name>d</name> <operator>+</operator> <name>b</name></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Color</name></type> <name>ColorTransition</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>initialColor</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>finalColor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>framesCounter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name></type> <name>currentColor</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>currentColor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>initialColor</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>finalColor</name><operator>.</operator><name>r</name></name> <operator>-</operator> <name><name>initialColor</name><operator>.</operator><name>r</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>SEASONTRANSITION</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>currentColor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>initialColor</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>finalColor</name><operator>.</operator><name>g</name></name> <operator>-</operator> <name><name>initialColor</name><operator>.</operator><name>g</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>SEASONTRANSITION</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>currentColor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>LinearEaseIn</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>framesCounter</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>initialColor</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>finalColor</name><operator>.</operator><name>b</name></name> <operator>-</operator> <name><name>initialColor</name><operator>.</operator><name>b</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>SEASONTRANSITION</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>currentColor</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<return>return <expr><name>currentColor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>grabCounter</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bambooTimer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bambooSpawnTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gravity</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hiscore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>power</name> <operator>=</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightAlpha</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftAlpha</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>speedMod</name> <operator>=</operator> <literal type="number">1.2f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>transCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>windCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxPower</name> <operator>=</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>playerActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollFront</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollMiddle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollBack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollSpeed</name> <operator>=</operator> <literal type="number">1.6f</literal><operator>*</operator><name>TIME_FACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>groundPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountjump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCountdrag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>colorTimer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>play</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onIce</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onResin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jumpSpeed</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>transforming</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleAlert</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alertActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fireSpeed</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasonTimer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasonChange</name> <operator>=</operator> <name>SEASONCHANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>monthChange</name> <operator>=</operator> <name>seasonChange</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>glowing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currentFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrame1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrame2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrame3</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curFrameBee</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fireOffset</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>beeMov</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>killCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>currentLeaves</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flyColor</name> <operator>=</operator> <name>GRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>globalFrameCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>startCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>numberAlpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>numberScale</name> <operator>=</operator> <literal type="number">2.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>startNum</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>animCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finalFormEnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>randomMessage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>years</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UIfade</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fogAlpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seasons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fog</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clockSpeedRotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>eagleDelay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>parallaxBackOffset</name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parallaxFrontOffset</name> <operator>=</operator> <call><name>GetRandomValue</name> <argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>progresionDelay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>progresionFramesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>speedProgresion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>jumpCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>resinCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tornadoCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dashCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>superKoalaCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fogSpeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leafGUIglow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leafGUIglowFade</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leafGUIpulseFade</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leafGUIpulseScale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>initYears</name> <operator>=</operator> <literal type="number">1900</literal> <operator>+</operator> <name><name>ptm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>initMonth</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">225</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">225</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">129</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">145</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">161</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">198</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>initMonth</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">315</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">315</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">242</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">190</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">144</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">214</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>initMonth</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">130</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">145</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">104</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">57</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>initSeason</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>initMonth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockRotation</name> <operator>=</operator> <literal type="number">135</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockInitRotation</name> <operator>=</operator> <literal type="number">135</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clockFinalRotation</name> <operator>=</operator> <name>clockInitRotation</name> <operator>+</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>color00</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">196</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name>color01</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">178</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color02</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">133</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>color03</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><literal type="number">133</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currentMonth</name> <operator>=</operator> <name>initMonth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>leftButton</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leftButton</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leftButton</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leftButton</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rightButton</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rightButton</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rightButton</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rightButton</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>powerButton</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>powerButton</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>powerButton</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>powerButton</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>finalColor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalColor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalColor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalColor</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backBar</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backBar</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backBar</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>maxPower</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backBar</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>powerBar</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>powerBar</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>powerBar</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>power</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>powerBar</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fireAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_props_fire_spritesheet</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fireAnimation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_props_fire_spritesheet</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fireAnimation</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_props_fire_spritesheet</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fireAnimation</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_props_fire_spritesheet</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>windAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_props_whirlwind_spritesheet</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>windAnimation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_props_whirlwind_spritesheet</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>windAnimation</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_props_whirlwind_spritesheet</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>windAnimation</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_props_whirlwind_spritesheet</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beeAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_bee</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beeAnimation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_enemy_bee</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beeAnimation</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_enemy_bee</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beeAnimation</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_enemy_bee</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eagleAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_eagle</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagleAnimation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_enemy_eagle</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagleAnimation</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_enemy_eagle</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagleAnimation</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_enemy_eagle</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snakeAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_snake</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snakeAnimation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_enemy_snake</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snakeAnimation</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_enemy_snake</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snakeAnimation</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_enemy_snake</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dingoAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_dingo</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingoAnimation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_enemy_dingo</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingoAnimation</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_enemy_dingo</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingoAnimation</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_enemy_dingo</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owlAnimation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gameplay_enemy_owl</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owlAnimation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gameplay_enemy_owl</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owlAnimation</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_enemy_owl</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owlAnimation</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gameplay_enemy_owl</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>koalaAnimationIddle</name> <operator>=</operator> <name>gameplay_koala_idle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>koalaAnimationIddle</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_koala_idle</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>koalaAnimationJump</name> <operator>=</operator> <name>gameplay_koala_jump</name></expr>;</expr_stmt>
<expr_stmt><expr><name>koalaAnimationFly</name> <operator>=</operator> <name>gameplay_koala_fly</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>koalaAnimationFly</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_koala_fly</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>koalaAnimationTransform</name> <operator>=</operator> <name>gameplay_koala_transform</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>koalaAnimationTransform</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gameplay_koala_transform</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clockPosition</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_PARTICLES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backSnowParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backPlanetreeParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotPhy</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dandelionBackParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotPhy</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backFlowerParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRainParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.7f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_PARTICLES_SPEED</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>, <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedFX</name><operator>.</operator><name>particle</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <operator>-</operator><literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rainStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_PARTICLES_STORM</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snowStormParticle</name><operator>.</operator><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PARTICLES_RAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">182</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">182</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fading</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backRayParticles</name><operator>.</operator><name>particles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delayCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_KILLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>killHistory</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BAMBOO</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">150</literal> <operator>+</operator> <literal type="number">200</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bamboo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bambooActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>bambooActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FIRE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fire</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fireActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>onFire</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fireCounter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ICE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iceActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_RESIN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resinActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WIND</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">70</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>windActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snakeActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitSnake</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dingoActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitDingo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owlActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>branchActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isHitOwl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>branchPos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>branchPos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>owl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">20</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyHit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">20</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupScore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LEAVES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>leaf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leaf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leaf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leaf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">20</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupLeaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">20</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leafParticles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>particles</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.26f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bee</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>beeActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">20</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupBee</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eagle</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>eagleActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>-<literal type="number">20</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>popupEagle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>counterColor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counterColor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <literal type="number">224</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counterColor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">185</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counterColor</name><operator>.</operator><name>a</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zero</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zero</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>firePos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firePos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>textSize</name> <operator>=</operator> <call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>*</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
