<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\gorilas.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUILDINGS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXPLOSIONS</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PLAYERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_RELATIVE_ERROR</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_MIN_RELATIVE_HEIGHT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_MAX_RELATIVE_HEIGHT</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_MIN_GRAYSCALE_COLOR</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_MAX_GRAYSCALE_COLOR</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_PLAYER_POSITION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PLAYER_POSITION</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAVITY</name></cpp:macro> <cpp:value>9.81f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELTA_FPS</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>Player</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>aimingPoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aimingAngle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aimingPower</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>previousPoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previousAngle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previousPower</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>impactPoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isLeftTeam</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isPlayer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isAlive</name></decl>;</decl_stmt>
}</block></struct></type> <name>Player</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Building</name> <block>{
<decl_stmt><decl><type><name>Rectangle</name></type> <name>rectangle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
}</block></struct></type> <name>Building</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Explosion</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Explosion</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Ball</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Ball</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gameOver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Player</name></type> <name><name>player</name><index>[<expr><name>MAX_PLAYERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Building</name></type> <name><name>building</name><index>[<expr><name>MAX_BUILDINGS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Explosion</name></type> <name><name>explosion</name><index>[<expr><name>MAX_EXPLOSIONS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Ball</name></type> <name>ball</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>playerTurn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ballOnAir</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitBuildings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitPlayers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UpdatePlayer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>playerTurn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UpdateBall</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>playerTurn</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"sample game: gorilas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>UnloadGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ballOnAir</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitBuildings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitPlayers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EXPLOSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ballOnAir</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ballOnAir</name> <operator>=</operator> <call><name>UpdatePlayer</name><argument_list>(<argument><expr><name>playerTurn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UpdateBall</name><argument_list>(<argument><expr><name>playerTurn</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>leftTeamAlive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rightTeamAlive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isAlive</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>leftTeamAlive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rightTeamAlive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>leftTeamAlive</name> <operator>&amp;&amp;</operator> <name>rightTeamAlive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ballOnAir</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>playerTurn</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>playerTurn</name> <operator>==</operator> <name>MAX_PLAYERS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerTurn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BUILDINGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rectangle</name></expr></argument>, <argument><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EXPLOSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isAlive</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>ball</name><operator>.</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ball</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ballOnAir</name></expr>)</condition>
<block>{<block_content>























<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name></expr>)</condition>
<block>{<block_content>

<macro><name>DrawTriangle</name><argument_list>(<argument>(Vector2){ player[playerTurn].position.x - player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y - player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>(Vector2){ player[playerTurn].position.x + player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y + player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>player[playerTurn].previousPoint</argument>, <argument>GRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>DrawTriangle</name><argument_list>(<argument>(Vector2){ player[playerTurn].position.x - player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y - player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>(Vector2){ player[playerTurn].position.x + player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y + player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>player[playerTurn].aimingPoint</argument>, <argument>DARKBLUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<macro><name>DrawTriangle</name><argument_list>(<argument>(Vector2){ player[playerTurn].position.x - player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y + player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>(Vector2){ player[playerTurn].position.x + player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y - player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>player[playerTurn].previousPoint</argument>, <argument>GRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>DrawTriangle</name><argument_list>(<argument>(Vector2){ player[playerTurn].position.x - player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y + player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>(Vector2){ player[playerTurn].position.x + player[playerTurn].size.x/<literal type="number">4</literal></argument>, <argument>player[playerTurn].position.y - player[playerTurn].size.y/<literal type="number">4</literal> }</argument>,
<argument>player[playerTurn].aimingPoint</argument>, <argument>MAROON</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>InitBuildings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>currentWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>float</name></type> <name>relativeWidth</name> <init>= <expr><literal type="number">100</literal><operator>/</operator><operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name>BUILDING_RELATIVE_ERROR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>buildingWidthMean</name> <init>= <expr><operator>(</operator><name>screenWidth</name><operator>*</operator><name>relativeWidth</name><operator>/</operator><name>MAX_BUILDINGS</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>currentHeighth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grayLevel</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BUILDINGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>currentWidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>buildingWidthMean</name><operator>*</operator><operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name>BUILDING_RELATIVE_ERROR</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">100</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buildingWidthMean</name><operator>*</operator><operator>(</operator><literal type="number">100</literal> <operator>+</operator> <name>BUILDING_RELATIVE_ERROR</name><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentWidth</name> <operator>+=</operator> <name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>currentHeighth</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>BUILDING_MIN_RELATIVE_HEIGHT</name></expr></argument>, <argument><expr><name>BUILDING_MAX_RELATIVE_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenHeight</name> <operator>-</operator> <operator>(</operator><name>screenHeight</name><operator>*</operator><name>currentHeighth</name><operator>/</operator><literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>screenHeight</name><operator>*</operator><name>currentHeighth</name><operator>/</operator><literal type="number">100</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>grayLevel</name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>BUILDING_MIN_GRAYSCALE_COLOR</name></expr></argument>, <argument><expr><name>BUILDING_MAX_GRAYSCALE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><name>grayLevel</name></expr>, <expr><name>grayLevel</name></expr>, <expr><name>grayLevel</name></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitPlayers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isAlive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPlayer</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>screenWidth</name><operator>*</operator><name>MIN_PLAYER_POSITION</name><operator>/</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>*</operator><name>MAX_PLAYER_POSITION</name><operator>/</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>screenWidth</name> <operator>-</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>screenWidth</name><operator>*</operator><name>MIN_PLAYER_POSITION</name><operator>/</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>*</operator><name>MAX_PLAYER_POSITION</name><operator>/</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_BUILDINGS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>building</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>building</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>building</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>building</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rectangle</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aimingPoint</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>previousAngle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>previousPower</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>previousPoint</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aimingAngle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aimingPower</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>impactPoint</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>-</operator><literal type="number">100</literal></expr>, <expr><operator>-</operator><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>UpdatePlayer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>playerTurn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>&lt;=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name> <operator>&amp;&amp;</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>&gt;=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingAngle</name> <operator>=</operator> <call><name>asin</name><argument_list>(<argument><expr><operator>(</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>)</operator><operator>/</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name></expr></argument>)</argument_list></call><operator>*</operator><name>RAD2DEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPoint</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPoint</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPoint</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPower</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousAngle</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingAngle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name> <operator>&amp;&amp;</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>&lt;=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingAngle</name> <operator>=</operator> <call><name>asin</name><argument_list>(<argument><expr><operator>(</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>)</operator><operator>/</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name></expr></argument>)</argument_list></call><operator>*</operator><name>RAD2DEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPoint</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPoint</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPoint</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPower</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousAngle</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingAngle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPoint</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingAngle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPoint</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingPower</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>aimingAngle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>UpdateBall</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>playerTurn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>explosionNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ball</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>isLeftTeam</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousAngle</name><operator>*</operator><name>DEG2RAD</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPower</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><name>DELTA_FPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousAngle</name><operator>*</operator><name>DEG2RAD</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPower</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><name>DELTA_FPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><call><name>cos</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousAngle</name><operator>*</operator><name>DEG2RAD</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPower</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><name>DELTA_FPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousAngle</name><operator>*</operator><name>DEG2RAD</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>previousPower</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><name>DELTA_FPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>ball</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>ball</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ball</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>GRAVITY</name><operator>/</operator><name>DELTA_FPS</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>ball</name><operator>.</operator><name>radius</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ball</name><operator>.</operator><name>radius</name></name> <operator>&gt;</operator> <name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionCircleRec</name><argument_list>(<argument>ball.position</argument>, <argument>ball.radius</argument>, <argument>(Rectangle){ player[i].position.x - player[i].size.x/<literal type="number">2</literal></argument>, <argument>player[i].position.y - player[i].size.y/<literal type="number">2</literal></argument>,
<argument>player[i].size.x</argument>, <argument>player[i].size.y }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>playerTurn</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>impactPoint</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>impactPoint</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>ball</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>player</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isAlive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BUILDINGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>ball</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>ball</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name> <operator>-</operator> <name><name>ball</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BUILDINGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircleRec</name><argument_list>(<argument><expr><name><name>ball</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>ball</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rectangle</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>impactPoint</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name><name>impactPoint</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ball</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>ball</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionNumber</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>player</name><index>[<expr><name>playerTurn</name></expr>]</index></name><operator>.</operator><name>impactPoint</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionNumber</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>explosionNumber</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
