<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\just_do\screens\screen_level02.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>bouncingBallPos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>bouncingBallRadius</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>bouncingBallSpeed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>holeCirclePos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>holeCircleRadius</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ballOnHole</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>levelTimeSec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>levelFinished</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<function_decl><type><name>float</name></type> <name>Vector2Distance</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>InitLevel02Screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bouncingBallPos</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">120</literal></expr>, <expr><literal type="number">80</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>bouncingBallSpeed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>holeCirclePos</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateLevel02Screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ballOnHole</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bouncingBallPos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>bouncingBallSpeed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bouncingBallPos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>bouncingBallSpeed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>bouncingBallPos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>bouncingBallRadius</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>bouncingBallPos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>bouncingBallRadius</name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bouncingBallSpeed</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>bouncingBallPos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>bouncingBallRadius</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>bouncingBallPos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>bouncingBallRadius</name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bouncingBallSpeed</name><operator>.</operator><name>y</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePos</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointCircle</name><argument_list>(<argument><expr><name>mousePos</name></expr></argument>, <argument><expr><name>bouncingBallPos</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bouncingBallPos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bouncingBallPos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">650</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointCircle</name><argument_list>(<argument><expr><name>mousePos</name></expr></argument>, <argument><expr><name>holeCirclePos</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>holeCirclePos</name> <operator>=</operator> <name>mousePos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>holeCirclePos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>holeCircleRadius</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>holeCirclePos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>holeCircleRadius</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>holeCirclePos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>holeCircleRadius</name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>holeCirclePos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name>holeCircleRadius</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>holeCirclePos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>holeCircleRadius</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>holeCirclePos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>holeCircleRadius</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>holeCirclePos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>holeCircleRadius</name><operator>)</operator> <operator>&gt;=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>holeCirclePos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>holeCircleRadius</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Vector2Distance</name><argument_list>(<argument><expr><name>bouncingBallPos</name></expr></argument>, <argument><expr><name>holeCirclePos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ballOnHole</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>levelWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ballOnHole</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>levelFinished</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>levelTimeSec</name> <operator>=</operator> <name>framesCounter</name><operator>/</operator><literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>levelFinished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>levelFinished</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">90</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawLevel02Screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>holeCirclePos</name></expr></argument>, <argument><expr><name>holeCircleRadius</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>bouncingBallPos</name></expr></argument>, <argument><expr><name>bouncingBallRadius</name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleLines</name><argument_list>(<argument><expr><name><name>bouncingBallPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bouncingBallPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>, <argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>levelFinished</name></expr>)</condition>
<block>{<block_content>
<macro><name>DrawRectangleBordersRec</name><argument_list>(<argument>(Rectangle){<literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>GetScreenWidth()</argument>, <argument>GetScreenHeight()}</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>Fade(LIGHTGRAY, <literal type="number">0.6f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"LEVEL 02"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"LEVEL 02"</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"DONE! (Seconds: %03i)"</literal></expr></argument>, <argument><expr><name>levelTimeSec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"DONE! (Seconds: 000)"</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"LEVEL 02"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"LEVEL 02"</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadLevel02Screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishLevel02Screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function></unit>
