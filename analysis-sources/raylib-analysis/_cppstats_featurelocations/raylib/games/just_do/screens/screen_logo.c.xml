<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\just_do\screens\screen_logo.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>msgLogoA</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><literal type="string">"A simple and easy-to-use library"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>msgLogoB</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><literal type="string">"to enjoy videogames programming"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>logoPositionX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>logoPositionY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>raylibLettersCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>topSideRecWidth</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>leftSideRecHeight</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottomSideRecWidth</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rightSideRecHeight</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>raylib</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><literal type="string">" \0"</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>logoScreenState</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>msgLogoADone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>msgLogoBDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lettersCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msgBuffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">' '</literal></expr> }</block></expr></init></decl>;</decl_stmt>






<function><type><name>void</name></type> <name>InitLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>logoPositionX</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>logoPositionY</name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>==</operator> <literal type="number">120</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>logoScreenState</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>topSideRecWidth</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftSideRecHeight</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>topSideRecWidth</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>logoScreenState</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>bottomSideRecWidth</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightSideRecHeight</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bottomSideRecWidth</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lettersCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>msgBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>logoScreenState</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>%</operator><literal type="number">12</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>raylibLettersCount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>raylibLettersCount</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>raylib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>raylib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>raylib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'y'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>raylib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name><name>raylib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name><name>raylib</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>raylibLettersCount</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lettersCounter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msgLogoADone</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lettersCounter</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msgLogoA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>, <argument><expr><name>msgLogoA</name></expr></argument>, <argument><expr><name>lettersCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>msgBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>lettersCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msgLogoADone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>msgLogoBDone</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lettersCounter</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msgLogoB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>, <argument><expr><name>msgLogoB</name></expr></argument>, <argument><expr><name>lettersCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>msgLogoBDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>levelWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>msgLogoBDone</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">90</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">15</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>topSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>leftSideRecHeight</name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>topSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>leftSideRecHeight</name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name> <operator>+</operator> <literal type="number">240</literal></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>rightSideRecHeight</name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">240</literal> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>bottomSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>logoScreenState</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>topSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>leftSideRecHeight</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name> <operator>+</operator> <literal type="number">240</literal></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>rightSideRecHeight</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">240</literal> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>bottomSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">112</literal> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">224</literal></expr></argument>, <argument><expr><literal type="number">224</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>raylib</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">44</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">48</literal> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msgLogoADone</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><name>msgLogoA</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">230</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>msgLogoA</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><name>msgLogoA</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">230</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msgLogoBDone</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><name>msgLogoB</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">280</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name>msgLogoB</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><name>msgLogoA</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">280</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function></unit>
