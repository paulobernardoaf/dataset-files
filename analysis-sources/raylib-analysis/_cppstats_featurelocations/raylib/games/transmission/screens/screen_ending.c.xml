<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\transmission\screens\screen_ending.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TITLE_CHAR</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SUBTITLE_CHAR</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>codingWords</name><index>[<expr><name>MAX_CODING_WORDS</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"pollo\0"</literal></expr>,
<expr><literal type="string">"conejo\0"</literal></expr>,
<expr><literal type="string">"huevo\0"</literal></expr>,
<expr><literal type="string">"nido\0"</literal></expr>,
<expr><literal type="string">"aire\0"</literal></expr>,
<expr><literal type="string">"armario\0"</literal></expr>,
<expr><literal type="string">"agujero\0"</literal></expr>,
<expr><literal type="string">"platano\0"</literal></expr>,
<expr><literal type="string">"pastel\0"</literal></expr>,
<expr><literal type="string">"mercado\0"</literal></expr>,
<expr><literal type="string">"raton\0"</literal></expr>,
<expr><literal type="string">"melon\0"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texBackground</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texNewspaper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texVignette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxNews</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>rotation</name> <init>= <expr><literal type="number">0.1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>scale</name> <init>= <expr><literal type="number">0.05f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Mission</name> <modifier>*</modifier></type><name>missions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>headline</name><index>[<expr><name>MAX_TITLE_CHAR</name></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Font</name></type> <name>fontNews</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>StringReplace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>with</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>InitEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rotation</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>texBackground</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/ending_background.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texVignette</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/message_vignette.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fxNews</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/fx_batman.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>missions</name> <operator>=</operator> <call><name>LoadMissions</name><argument_list>(<argument><expr><literal type="string">"resources/missions.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wordsCount</name> <init>= <expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>headline</name></expr></argument>, <argument><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>headline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>headline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>headline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>wordsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name><name>sols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>StringReplace</name><argument_list>(<argument><expr><name>headline</name></expr></argument>, <argument><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><name><name>codingWords</name><index>[<expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>headline</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Titular: %s"</literal></expr></argument>, <argument><expr><name>headline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Image</name></type> <name>imNewspaper</name> <init>= <expr><call><name>LoadImage</name><argument_list>(<argument><expr><literal type="string">"resources/textures/ending_newspaper.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fontNews</name> <operator>=</operator> <call><name>LoadFontEx</name><argument_list>(<argument><expr><literal type="string">"resources/fonts/Lora-Bold.ttf"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ImageDrawTextEx</name><argument_list>(<argument>&amp;imNewspaper</argument>, <argument>(Vector2){ <literal type="number">50</literal></argument>, <argument><literal type="number">220</literal> }</argument>, <argument>fontNews</argument>, <argument>headline</argument>, <argument>fontNews.baseSize</argument>, <argument><literal type="number">0</literal></argument>, <argument>DARKGRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>texNewspaper</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>imNewspaper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imNewspaper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxNews</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rotation</name> <operator>+=</operator> <literal type="number">18.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>+=</operator> <literal type="number">0.0096f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsButtonPressed</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentMission</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentMission</name> <operator>&gt;=</operator> <name>totalMissions</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texBackground</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>texNewspaper</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>texNewspaper.width</argument>, <argument>texNewspaper.height }</argument>,
<argument>(Rectangle){ GetScreenWidth()/<literal type="number">2</literal></argument>, <argument>GetScreenHeight()/<literal type="number">2</literal></argument>, <argument>texNewspaper.width*scale</argument>, <argument>texNewspaper.height*scale }</argument>,
<argument>(Vector2){ (float)texNewspaper.width*scale/<literal type="number">2</literal></argument>, <argument>(float)texNewspaper.height*scale/<literal type="number">2</literal> }</argument>, <argument>rotation</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextureEx</name><argument_list>(<argument>texVignette</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>DrawTextEx</name><argument_list>(<argument>fontNews</argument>, <argument>headline</argument>, <argument>(Vector2){ <literal type="number">10</literal></argument>, <argument><literal type="number">10</literal> }</argument>, <argument>fontNews.baseSize</argument>, <argument><literal type="number">0</literal></argument>, <argument>RAYWHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name><name>codingWords</name><index>[<expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>+</operator> <literal type="number">30</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name><name>sols</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>GREEN</name></expr> </then><else>: <expr><name>RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawButton</name><argument_list>(<argument><expr><literal type="string">"continuar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texBackground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texNewspaper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texVignette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxNews</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>missions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>StringReplace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>with</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len_rep</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len_with</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len_front</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>orig</name> <operator>||</operator> <operator>!</operator><name>rep</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len_rep</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len_rep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>with</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>with</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>len_with</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>with</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>len_rep</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>result</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>len_with</name> <operator>-</operator> <name>len_rep</name><operator>)</operator><operator>*</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 





<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_front</name> <operator>=</operator> <name>ins</name> <operator>-</operator> <name>orig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><name>len_front</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len_front</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>with</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len_with</name></expr>;</expr_stmt>
<expr_stmt><expr><name>orig</name> <operator>+=</operator> <name>len_front</name> <operator>+</operator> <name>len_rep</name></expr>;</expr_stmt> 
</block_content>}</block></while>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
