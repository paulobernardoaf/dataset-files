<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\skully_escape\skully_escape.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens/screens.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">1280</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">720</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>transAlpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>onTransition</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>transFadeOut</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transFromScreen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transToScreen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Music</name></type> <name>music</name></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>TransitionToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ChangeToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>void</name></type> <name>UpdateTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DrawTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"SKULLY ESCAPE [KING GAMEJAM 2015]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>music</name> <operator>=</operator> <call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/audio/come_play_with_me.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadFont</name><argument_list>(<argument><expr><literal type="string">"resources/textures/alagard.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>doors</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/doors.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sndDoor</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/door.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sndScream</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/scream.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>LOGO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>UnloadPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>doors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>sndDoor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>sndScream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>TransitionToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>onTransition</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transFromScreen</name> <operator>=</operator> <name>currentScreen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transToScreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ChangeToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>currentScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LOGO_RL</name></expr>:</case> <expr_stmt><expr><call><name>rlUnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ATTIC</name></expr>:</case> <expr_stmt><expr><call><name>UnloadAtticScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AISLE01</name></expr>:</case> <expr_stmt><expr><call><name>UnloadAisle01Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>AISLE02</name></expr>:</case> <expr_stmt><expr><call><name>UnloadAisle02Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>ARMORY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadArmoryScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>LIVINGROOM</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLivingroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>KITCHEN</name></expr>:</case> <expr_stmt><expr><call><name>UnloadKitchenScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>BATHROOM</name></expr>:</case> <expr_stmt><expr><call><name>UnloadBathroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>screen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LOGO_RL</name></expr>:</case> <expr_stmt><expr><call><name>rlInitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ATTIC</name></expr>:</case> <expr_stmt><expr><call><name>InitAtticScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AISLE01</name></expr>:</case> <expr_stmt><expr><call><name>InitAisle01Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>AISLE02</name></expr>:</case> <expr_stmt><expr><call><name>InitAisle02Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>ARMORY</name></expr>:</case> <expr_stmt><expr><call><name>InitArmoryScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>LIVINGROOM</name></expr>:</case> <expr_stmt><expr><call><name>InitLivingroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>KITCHEN</name></expr>:</case> <expr_stmt><expr><call><name>InitKitchenScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>BATHROOM</name></expr>:</case> <expr_stmt><expr><call><name>InitBathroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>InitEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transFadeOut</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>+=</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transAlpha</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>transFromScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LOGO_RL</name></expr>:</case> <expr_stmt><expr><call><name>rlUnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ATTIC</name></expr>:</case> <expr_stmt><expr><call><name>UnloadAtticScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AISLE01</name></expr>:</case> <expr_stmt><expr><call><name>UnloadAisle01Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>AISLE02</name></expr>:</case> <expr_stmt><expr><call><name>UnloadAisle02Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>ARMORY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadArmoryScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>LIVINGROOM</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLivingroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>KITCHEN</name></expr>:</case> <expr_stmt><expr><call><name>UnloadKitchenScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>BATHROOM</name></expr>:</case> <expr_stmt><expr><call><name>UnloadBathroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>transToScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>LOGO</name></expr>;</expr_stmt> 
</block_content>}</block> <break>break;</break>
<case>case <expr><name>LOGO_RL</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>rlInitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>LOGO_RL</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>TITLE</name></expr>;</expr_stmt> 
</block_content>}</block> <break>break;</break>
<case>case <expr><name>ATTIC</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitAtticScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>ATTIC</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AISLE01</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitAisle01Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>AISLE01</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AISLE02</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitAisle02Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>AISLE02</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>BATHROOM</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitBathroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>BATHROOM</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>LIVINGROOM</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitLivingroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>LIVINGROOM</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>KITCHEN</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitKitchenScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>KITCHEN</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>ARMORY</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitArmoryScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>ARMORY</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>InitEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>ENDING</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>-=</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transAlpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onTransition</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transFromScreen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>transToScreen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>transAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>onTransition</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>dead</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>dead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>numLifes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishLogoScreen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ChangeToScreen</name><argument_list>(<argument><expr><name>LOGO_RL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>LOGO_RL</name></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>rlUpdateLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlFinishLogoScreen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishTitleScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>ATTIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>ATTIC</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateAtticScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishAtticScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>AISLE01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>AISLE01</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateAisle01Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishAisle01Screen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>BATHROOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>FinishAisle01Screen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>KITCHEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>FinishAisle01Screen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>LIVINGROOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>BATHROOM</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateBathroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishBathroomScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>AISLE01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>LIVINGROOM</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateLivingroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishLivingroomScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>AISLE01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>FinishLivingroomScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>AISLE02</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>AISLE02</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateAisle02Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishAisle02Screen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>KITCHEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>KITCHEN</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateKitchenScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishKitchenScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>ARMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>FinishKitchenScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>AISLE02</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>ARMORY</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateArmoryScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FinishArmoryScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>ENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>FinishArmoryScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>KITCHEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishEndingScreen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>UpdateTransition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>DrawLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LOGO_RL</name></expr>:</case> <expr_stmt><expr><call><name>rlDrawLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>DrawTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ATTIC</name></expr>:</case> <expr_stmt><expr><call><name>DrawAtticScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AISLE01</name></expr>:</case> <expr_stmt><expr><call><name>DrawAisle01Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>AISLE02</name></expr>:</case> <expr_stmt><expr><call><name>DrawAisle02Screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>BATHROOM</name></expr>:</case> <expr_stmt><expr><call><name>DrawBathroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>LIVINGROOM</name></expr>:</case> <expr_stmt><expr><call><name>DrawLivingroomScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>KITCHEN</name></expr>:</case> <expr_stmt><expr><call><name>DrawKitchenScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>ARMORY</name></expr>:</case> <expr_stmt><expr><call><name>DrawArmoryScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>DrawEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>onTransition</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTransition</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
