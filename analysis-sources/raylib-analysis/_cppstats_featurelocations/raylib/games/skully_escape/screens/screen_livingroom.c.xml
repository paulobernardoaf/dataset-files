<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\skully_escape\screens\screen_livingroom.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../player.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../monster.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>background</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Door</name></type> <name>doorCenter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Door</name></type> <name>doorLeft</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Monster</name></type> <name>candle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Monster</name></type> <name>picture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Monster</name></type> <name>phone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>monsterHover</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>monsterCheck</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">"WHEN WIND BLOWS, IT KNOWS THE DIRECTION\nLET IT GUIDE YOU!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msgPosX</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msgState</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lettersCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msgBuffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msgCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>searching</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>






<function><type><name>void</name></type> <name>InitLivingroomScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ResetPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>monsterHover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>monsterCheck</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msgState</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msgCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lettersCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>msgBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>background</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/background_livingroom.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator> <block>{ <expr><operator>-</operator><literal type="number">45</literal></expr>, <expr><literal type="number">140</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>facing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>frameRec</name></name> <operator>=</operator><operator>(</operator><name>Rectangle</name><operator>)</operator> <block>{<expr><operator>(</operator><operator>(</operator><name><name>doors</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name><name>doorLeft</name><operator>.</operator><name>facing</name></name><operator>)</operator></expr>, <expr><name><name>doors</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name><name>doors</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>, <expr><name><name>doors</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>bound</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator> <block>{ <expr><name><name>doorLeft</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>doorLeft</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>doors</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>, <expr><name><name>doors</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator> <block>{ <expr><literal type="number">830</literal></expr>, <expr><literal type="number">108</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>facing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>frameRec</name></name> <operator>=</operator><operator>(</operator><name>Rectangle</name><operator>)</operator> <block>{<expr><operator>(</operator><operator>(</operator><name><name>doors</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name><name>doorCenter</name><operator>.</operator><name>facing</name></name><operator>)</operator></expr>, <expr><name><name>doors</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name><name>doors</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>, <expr><name><name>doors</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>bound</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator> <block>{ <expr><name><name>doorCenter</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>doorCenter</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>doors</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>, <expr><name><name>doors</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">154</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/monster_candle.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>currentFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>framesCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>numFrames</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>bounds</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name><name>candle</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">90</literal></expr>, <expr><name><name>candle</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">340</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>frameRec</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>candle</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name><operator>/</operator><name><name>candle</name><operator>.</operator><name>numFrames</name></name></expr>, <expr><name><name>candle</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>spooky</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">504</literal></expr>, <expr><literal type="number">164</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/monster_picture.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>currentFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>framesCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>numFrames</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>bounds</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name><name>picture</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">44</literal></expr>, <expr><name><name>picture</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">264</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>frameRec</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>picture</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name><operator>/</operator><name><name>picture</name><operator>.</operator><name>numFrames</name></name></expr>, <expr><name><name>picture</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>spooky</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">1054</literal></expr>, <expr><literal type="number">404</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/monster_phone.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>currentFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>framesCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>numFrames</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>bounds</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name><name>phone</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">64</literal></expr>, <expr><name><name>phone</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator><literal type="number">120</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">160</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>frameRec</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>phone</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name><operator>/</operator><name><name>phone</name><operator>.</operator><name>numFrames</name></name></expr>, <expr><name><name>phone</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>spooky</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateLivingroomScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>key</name></name></expr>)</condition>
<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
<operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>doorLeft</name><operator>.</operator><name>selected</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>doorLeft</name><operator>.</operator><name>locked</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>frameRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorLeft</name><operator>.</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>sndDoor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
<operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>doorCenter</name><operator>.</operator><name>selected</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>bound</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>doorCenter</name><operator>.</operator><name>locked</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>frameRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>doorCenter</name><operator>.</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>sndDoor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msgState</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>UpdatePlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UpdateMonster</name><argument_list>(<argument><expr><operator>&amp;</operator><name>candle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateMonster</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateMonster</name><argument_list>(<argument><expr><operator>&amp;</operator><name>phone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>candle</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>candle</name><operator>.</operator><name>active</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>picture</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>picture</name><operator>.</operator><name>active</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>phone</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>phone</name><operator>.</operator><name>active</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>monsterHover</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>monsterHover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>candle</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>candle</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
<operator>(</operator><operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>candle</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SearchKeyPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>searching</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>monsterCheck</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>candle</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>picture</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>picture</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
<operator>(</operator><operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>picture</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SearchKeyPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>searching</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>monsterCheck</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>picture</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><name><name>phone</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>phone</name><operator>.</operator><name>active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
<operator>(</operator><operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>phone</name><operator>.</operator><name>bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SearchKeyPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>searching</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>monsterCheck</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>phone</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>searching</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">180</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monsterCheck</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>candle</name><operator>.</operator><name>spooky</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ScarePlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>sndScream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>FindKeyPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>candle</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>monsterCheck</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>picture</name><operator>.</operator><name>spooky</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ScarePlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>sndScream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>FindKeyPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>monsterCheck</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>phone</name><operator>.</operator><name>spooky</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ScarePlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>sndScream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>FindKeyPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phone</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>searching</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lettersCounter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msgState</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lettersCounter</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>lettersCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msgBuffer</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>msgBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>lettersCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msgState</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>msgState</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msgState</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msgCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msgState</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msgCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msgState</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msgCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msgCounter</name> <operator>&gt;</operator> <literal type="number">180</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>msgState</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>msgCounter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawLivingroomScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>background</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawMonster</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawMonster</name><argument_list>(<argument><expr><name>candle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawMonster</name><argument_list>(<argument><expr><name>phone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>doorCenter</name><operator>.</operator><name>selected</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTextureRec</name><argument_list>(<argument><expr><name>doors</name></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>frameRec</name></name></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTextureRec</name><argument_list>(<argument><expr><name>doors</name></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>frameRec</name></name></expr></argument>, <argument><expr><name><name>doorCenter</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>doorLeft</name><operator>.</operator><name>selected</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTextureRec</name><argument_list>(<argument><expr><name>doors</name></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>frameRec</name></name></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTextureRec</name><argument_list>(<argument><expr><name>doors</name></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>frameRec</name></name></expr></argument>, <argument><expr><name><name>doorLeft</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>msgState</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>msgState</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msgState</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>msgBuffer</argument>, <argument>(Vector2){ msgPosX</argument>, <argument><literal type="number">80</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msgState</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>message</argument>, <argument>(Vector2){ msgPosX</argument>, <argument><literal type="number">80</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msgCounter</name><operator>/</operator><literal type="number">30</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS ENTER or CLICK"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">280</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msgState</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msgCounter</name><operator>/</operator><literal type="number">30</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"CHOOSE WISELY!"</literal></argument>, <argument>(Vector2){ <literal type="number">300</literal></argument>, <argument><literal type="number">95</literal> }</argument>, <argument>font.baseSize*<literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>candle</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>phone</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>picture</name><operator>.</operator><name>bounds</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>monsterHover</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>msgCounter</name><operator>/</operator><literal type="number">30</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS SPACE or CLICK to INTERACT"</literal></expr></argument>, <argument><expr><literal type="number">420</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DrawPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadLivingroomScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMonster</name><argument_list>(<argument><expr><name>candle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadMonster</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadMonster</name><argument_list>(<argument><expr><name>phone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishLivingroomScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function>
</unit>
