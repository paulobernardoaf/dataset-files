<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\repair\repair.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens/screens.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GameScreen</name></type> <name>currentScreen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Music</name></type> <name>music</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sound</name></type> <name>fxCoin</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>background</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texNPatch</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NPatchInfo</name></type> <name>npInfo</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texHead</name></decl>, <decl><type ref="prev"/><name>texHair</name></decl>, <decl><type ref="prev"/><name>texNose</name></decl>, <decl><type ref="prev"/><name>texMouth</name></decl>, <decl><type ref="prev"/><name>texEyes</name></decl>, <decl><type ref="prev"/><name>texComp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Character</name></type> <name>playerBase</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Character</name></type> <name>datingBase</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Character</name></type> <name>player</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Character</name></type> <name>dating</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">1280</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">720</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>transAlpha</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>onTransition</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>transFadeOut</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transFromScreen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transToScreen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>







<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ChangeToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TransitionToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"RE-PAIR [GGJ2020]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadFont</name><argument_list>(<argument><expr><literal type="string">"resources/font.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>music</name> <operator>=</operator> <call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/elevator_romance.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fxCoin</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/coin.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>background</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/background.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>texNPatch</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/npatch.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>npInfo</name><operator>.</operator><name>sourceRec</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><name><name>texNPatch</name><operator>.</operator><name>height</name></name></expr> }</block></expr><operator>,</operator>
<expr><name><name>npInfo</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>npInfo</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>npInfo</name><operator>.</operator><name>right</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>npInfo</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>texHead</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/head_models.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texHair</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/hair_models.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texNose</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/nose_models.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texMouth</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/mouth_models.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texEyes</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/eyes_models.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetMusicVolume</name><argument_list>(<argument><expr><name>music</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>LOGO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<switch>switch <condition>(<expr><name>currentScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxCoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texNPatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texHair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texNose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texMouth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texEyes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CloseAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>Character</name></type> <name>GenerateCharacter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Character</name></type> <name>character</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>character</name><operator>.</operator><name>head</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texHead</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_HEAD_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>character</name><operator>.</operator><name>colHead</name></name> <operator>=</operator> <name><name>headColors</name><index>[<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>character</name><operator>.</operator><name>hair</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texHair</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_HAIR_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>character</name><operator>.</operator><name>colHair</name></name> <operator>=</operator> <name><name>hairColors</name><index>[<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>character</name><operator>.</operator><name>eyes</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texEyes</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_EYES_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>character</name><operator>.</operator><name>nose</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texNose</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_NOSE_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>character</name><operator>.</operator><name>mouth</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texMouth</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_MOUTH_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>character</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CustomizeCharacter</name><parameter_list>(<parameter><decl><type><name>Character</name> <modifier>*</modifier></type><name>character</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>character</name><operator>-&gt;</operator><name>hair</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texHair</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_HAIR_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>character</name><operator>-&gt;</operator><name>colHair</name></name> <operator>=</operator> <name><name>hairColors</name><index>[<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>character</name><operator>-&gt;</operator><name>eyes</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texEyes</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_EYES_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>character</name><operator>-&gt;</operator><name>nose</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texNose</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_NOSE_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>character</name><operator>-&gt;</operator><name>mouth</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texMouth</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_MOUTH_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawCharacter</name><parameter_list>(<parameter><decl><type><name>Character</name></type> <name>character</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DrawTextureRec</name><argument_list>(<argument>texHair</argument>, <argument>(Rectangle){ BASE_HAIR_WIDTH*character.hair</argument>, <argument><literal type="number">240</literal></argument>, <argument>BASE_HAIR_WIDTH</argument>, <argument>texHair.height - <literal type="number">240</literal> }</argument>, <argument>(Vector2){ position.x + (<literal type="number">250</literal> - BASE_HAIR_WIDTH)/<literal type="number">2</literal></argument>, <argument>position.y + <literal type="number">240</literal> }</argument>, <argument>GetColor(character.colHair)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextureRec</name><argument_list>(<argument>texHead</argument>, <argument>(Rectangle){ BASE_HEAD_WIDTH*character.head</argument>, <argument><literal type="number">0</literal></argument>, <argument>BASE_HEAD_WIDTH</argument>, <argument>texHead.height }</argument>, <argument>(Vector2){ position.x + (<literal type="number">250</literal> - BASE_HEAD_WIDTH)/<literal type="number">2</literal></argument>, <argument>position.y + <literal type="number">60</literal> }</argument>, <argument>GetColor(character.colHead)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextureRec</name><argument_list>(<argument>texHair</argument>, <argument>(Rectangle){ BASE_HAIR_WIDTH*character.hair</argument>, <argument><literal type="number">0</literal></argument>, <argument>BASE_HAIR_WIDTH</argument>, <argument><literal type="number">240</literal> }</argument>, <argument>(Vector2){ position.x + (<literal type="number">250</literal> - BASE_HAIR_WIDTH)/<literal type="number">2</literal></argument>, <argument>position.y }</argument>, <argument>GetColor(character.colHair)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextureRec</name><argument_list>(<argument>texEyes</argument>, <argument>(Rectangle){ BASE_EYES_WIDTH*character.eyes</argument>, <argument><literal type="number">0</literal></argument>, <argument>BASE_EYES_WIDTH</argument>, <argument>texEyes.height }</argument>, <argument>(Vector2){ position.x + (<literal type="number">250</literal> - BASE_EYES_WIDTH)/<literal type="number">2</literal></argument>, <argument>position.y + <literal type="number">190</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextureRec</name><argument_list>(<argument>texNose</argument>, <argument>(Rectangle){ BASE_NOSE_WIDTH*character.nose</argument>, <argument><literal type="number">0</literal></argument>, <argument>BASE_NOSE_WIDTH</argument>, <argument>texNose.height }</argument>, <argument>(Vector2){ position.x + (<literal type="number">250</literal> - BASE_NOSE_WIDTH)/<literal type="number">2</literal></argument>, <argument>position.y + <literal type="number">275</literal> }</argument>, <argument>GetColor(character.colHead)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextureRec</name><argument_list>(<argument>texMouth</argument>, <argument>(Rectangle){ BASE_MOUTH_WIDTH*character.mouth</argument>, <argument><literal type="number">0</literal></argument>, <argument>BASE_MOUTH_WIDTH</argument>, <argument>texMouth.height }</argument>, <argument>(Vector2){ position.x + (<literal type="number">250</literal> - BASE_MOUTH_WIDTH)/<literal type="number">2</literal></argument>, <argument>position.y + <literal type="number">370</literal> }</argument>, <argument>GetColor(character.colHead)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>GuiButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forcedState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>textColor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xeff6ffff</literal></expr>, <expr><literal type="number">0x78e782ff</literal></expr>, <expr><literal type="number">0xb04d5fff</literal></expr>, <expr><literal type="number">0xd6d6d6ff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>forcedState</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>forcedState</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>textSize</name> <init>= <expr><call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>forcedState</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsGestureDetected</name><argument_list>(<argument><expr><name>GESTURE_TAP</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxCoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>npInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">80</literal><operator>*</operator><name>state</name></expr>;</expr_stmt>







<macro><name>DrawTextureNPatch</name><argument_list>(<argument>texNPatch</argument>, <argument>npInfo</argument>, <argument>bounds</argument>, <argument>(Vector2){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>text</argument>, <argument>(Vector2){ bounds.x + bounds.width/<literal type="number">2</literal> - textSize.x/<literal type="number">2</literal></argument>, <argument>bounds.y + bounds.height/<literal type="number">2</literal> - textSize.y/<literal type="number">2</literal> + <literal type="number">4</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">1</literal></argument>, <argument>GetColor(textColor[state])</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<return>return <expr><name>pressed</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>ChangeToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>currentScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<switch>switch <condition>(<expr><name>screen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>InitGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>InitEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>TransitionToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>onTransition</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transFromScreen</name> <operator>=</operator> <name>currentScreen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transToScreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transFadeOut</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>+=</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>transAlpha</name> <operator>&gt;</operator> <literal type="number">1.01f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>transFromScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<switch>switch <condition>(<expr><name>transToScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>InitGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>InitEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>transToScreen</name></expr>;</expr_stmt>


<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transAlpha</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.01f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>onTransition</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>transFromScreen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>transToScreen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>transAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>onTransition</name></expr>)</condition>
<block>{<block_content>
<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishLogoScreen</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishTitleScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>GAMEPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishGameplayScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>ENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case>
<block>{<block_content> 
<expr_stmt><expr><call><name>UpdateEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishEndingScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>UpdateTransition</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 
<block>{<block_content>
<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>DrawLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>DrawTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>DrawGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>DrawEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>onTransition</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTransition</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
