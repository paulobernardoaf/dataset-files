<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\repair\screens\screens.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCREENS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREENS_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_HEAD_WIDTH</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_HAIR_WIDTH</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_NOSE_WIDTH</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_MOUTH_WIDTH</name></cpp:macro> <cpp:value>170</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_EYES_WIDTH</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>




<typedef>typedef <type><enum>enum <name>GameScreen</name> <block>{ <decl><name>LOGO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>TITLE</name></decl>, <decl><name>OPTIONS</name></decl>, <decl><name>GAMEPLAY</name></decl>, <decl><name>ENDING</name></decl> }</block></enum></type> <name>GameScreen</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colHead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eyes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nose</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mouth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hair</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>colHair</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>glasses</name></decl>;</decl_stmt> 


}</block></struct></type> <name>Character</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>headColors</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>hairColors</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>GameScreen</name></type> <name>currentScreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Font</name></type> <name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Music</name></type> <name>music</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Sound</name></type> <name>fxCoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Texture2D</name></type> <name>background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Texture2D</name></type> <name>texNPatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>NPatchInfo</name></type> <name>npInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Texture2D</name></type> <name>texHead</name></decl>, <decl><type ref="prev"/><name>texHair</name></decl>, <decl><type ref="prev"/><name>texNose</name></decl>, <decl><type ref="prev"/><name>texMouth</name></decl>, <decl><type ref="prev"/><name>texEyes</name></decl>, <decl><type ref="prev"/><name>texComp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Texture2D</name></type> <name>texMakeup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Character</name></type> <name>player</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Character</name></type> <name>playerBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Character</name></type> <name>dating</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Character</name></type> <name>datingBase</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>bool</name></type> <name>GuiButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forcedState</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Character</name></type> <name>GenerateCharacter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CustomizeCharacter</name><parameter_list>(<parameter><decl><type><name>Character</name> <modifier>*</modifier></type><name>character</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DrawCharacter</name><parameter_list>(<parameter><decl><type><name>Character</name></type> <name>character</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>InitLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UpdateLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DrawLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>FinishLogoScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>InitTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UpdateTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DrawTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>FinishTitleScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>InitGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UpdateGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DrawGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>FinishGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>InitEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UpdateEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DrawEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>FinishEndingScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
