<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\wave_collector\screens\screen_gameplay.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SAMPLES_SPEED</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_SAMPLES_SPEED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES_SPACING</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES_MULTIPLIER</name></cpp:macro> <cpp:value>700</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GAME_HEIGHT</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define> 




<typedef>typedef <type><struct>struct <name>Player</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
}</block></struct></type> <name>Player</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Sample</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>collected</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>renderable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>
}</block></struct></type> <name>Sample</name>;</typedef>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Player</name></type> <name>player</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>playerArea</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>warpCounter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>synchro</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>combo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxCombo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>waveRec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Sample</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>totalSamples</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>collectedSamples</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currentSample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>samplesSpeed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>waveTime</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texBackground</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texPlayer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texSampleSmall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texSampleMid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texSampleBig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RenderTexture2D</name></type> <name>waveTarget</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxSampleOn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxSampleOff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxPause</name></decl>;</decl_stmt> 





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawSamplesMap</name><parameter_list>(<parameter><decl><type><name>Sample</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>playedSamples</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>InitGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pause</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endingStatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>texBackground</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/background_gameplay.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texPlayer</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/player.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texSampleSmall</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/sample_small.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texSampleMid</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/sample_mid.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texSampleBig</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/sample_big.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>waveRec</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">1280</literal> <operator>-</operator> <literal type="number">64</literal></expr>, <expr><literal type="number">105</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>waveTarget</name> <operator>=</operator> <call><name>LoadRenderTexture</name><argument_list>(<argument><expr><name><name>waveRec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>waveRec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>fxSampleOn</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/sample_on.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fxSampleOff</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/sample_off.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fxPause</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/pause.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetSoundVolume</name><argument_list>(<argument><expr><name>fxSampleOn</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetSoundVolume</name><argument_list>(<argument><expr><name>fxPause</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>playerArea</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">200</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>GOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>playerArea</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>playerArea</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>texPlayer</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>, 
<expr><name><name>playerArea</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>playerArea</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>texPlayer</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>warpCounter</name> <operator>=</operator> <literal type="number">395</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>synchro</name> <operator>=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>combo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxCombo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Wave</name></type> <name>wave</name> <init>= <expr><call><name>LoadWave</name><argument_list>(<argument><expr><literal type="string">"resources/audio/wave.ogg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>waveData</name> <init>= <expr><call><name>GetWaveData</name><argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 




<expr_stmt><expr><name>waveTime</name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>/</operator><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>requiredSamples</name> <init>= <expr><operator>(</operator><name>MAX_SAMPLES_SPEED</name><operator>*</operator><name>waveTime</name><operator>*</operator><literal type="number">60</literal> <operator>-</operator> <literal type="number">1000</literal><operator>)</operator><operator>/</operator><name>SAMPLES_SPACING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samplesDivision</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>/</operator><name>requiredSamples</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>totalSamples</name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>/</operator><name>samplesDivision</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnloadWave</name><argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>collectedSamples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>Sample</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>totalSamples</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Sample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>minSampleValue</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxSampleValue</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSamples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>waveData</name><index>[<expr><name>i</name><operator>*</operator><name>samplesDivision</name></expr>]</index></name> <operator>&lt;</operator> <name>minSampleValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minSampleValue</name> <operator>=</operator> <name><name>waveData</name><index>[<expr><name>i</name><operator>*</operator><name>samplesDivision</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>waveData</name><index>[<expr><name>i</name><operator>*</operator><name>samplesDivision</name></expr>]</index></name> <operator>&gt;</operator> <name>maxSampleValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxSampleValue</name> <operator>=</operator> <name><name>waveData</name><index>[<expr><name>i</name><operator>*</operator><name>samplesDivision</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>float</name></type> <name>sampleScaleFactor</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><operator>(</operator><name>maxSampleValue</name> <operator>-</operator> <name>minSampleValue</name><operator>)</operator></expr></init></decl>;</decl_stmt> 


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSamples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>waveData</name><index>[<expr><name>i</name><operator>*</operator><name>samplesDivision</name></expr>]</index></name><operator>*</operator><name>sampleScaleFactor</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1000</literal> <operator>+</operator> <name>i</name><operator>*</operator><name>SAMPLES_SPACING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name><operator>*</operator><name>SAMPLES_MULTIPLIER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>MAX_GAME_HEIGHT</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>MAX_GAME_HEIGHT</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>MAX_GAME_HEIGHT</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>MAX_GAME_HEIGHT</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collected</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>renderable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>samplesSpeed</name> <operator>=</operator> <name>MAX_SAMPLES_SPEED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currentSample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>waveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>StopMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxPause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PauseMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ResumeMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_W</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
















<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>playerArea</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>playerArea</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>playerArea</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>playerArea</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>playerArea</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>playerArea</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>playerArea</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>playerArea</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>playerArea</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>playerArea</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>playerArea</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>playerArea</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSamples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>samplesSpeed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name><operator>)</operator> <operator>&gt;</operator> <operator>-</operator><name>SAMPLES_SPACING</name><operator>)</operator> <operator>&amp;&amp;</operator> 
<operator>(</operator><operator>(</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name><operator>)</operator> <operator>&lt;</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>renderable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>renderable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collected</name> <operator>&amp;&amp;</operator> <macro><name>CheckCollisionCircleRec</name><argument_list>(<argument>samples[i].position</argument>, <argument>samples[i].radius</argument>, <argument>(Rectangle){ (int)player.position.x</argument>, <argument>(int)player.position.y</argument>, <argument>player.width</argument>, <argument>player.height }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>collectedSamples</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>synchro</name> <operator>+=</operator> <literal type="number">0.02</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>combo</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>combo</name> <operator>&gt;</operator> <name>maxCombo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxCombo</name> <operator>=</operator> <name>combo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>synchro</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>synchro</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>SetSoundPitch</name><argument_list>(<argument><expr><name>fxSampleOn</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name><operator>*</operator><literal type="number">1.4f</literal> <operator>+</operator> <literal type="number">0.7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxSampleOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radius</name><operator>)</operator> <operator>&lt;</operator> <name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentSample</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collected</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>synchro</name> <operator>-=</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxSampleOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>combo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>warpCounter</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>warpCounter</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>warpCounter</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>warpCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samplesSpeed</name> <operator>-=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>samplesSpeed</name> <operator>&lt;=</operator> <name>MIN_SAMPLES_SPEED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>samplesSpeed</name> <operator>=</operator> <name>MIN_SAMPLES_SPEED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetMusicPitch</name><argument_list>(<argument><expr><name>music</name></expr></argument>, <argument><expr><name>samplesSpeed</name><operator>/</operator><name>MAX_SAMPLES_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>warpCounter</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>warpCounter</name> <operator>&gt;</operator> <literal type="number">395</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>warpCounter</name> <operator>=</operator> <literal type="number">395</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samplesSpeed</name> <operator>+=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>samplesSpeed</name> <operator>&gt;=</operator> <name>MAX_SAMPLES_SPEED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>samplesSpeed</name> <operator>=</operator> <name>MAX_SAMPLES_SPEED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetMusicPitch</name><argument_list>(<argument><expr><name>music</name></expr></argument>, <argument><expr><name>samplesSpeed</name><operator>/</operator><name>MAX_SAMPLES_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>currentSample</name> <operator>&gt;=</operator> <name>totalSamples</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endingStatus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>synchro</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>synchro</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endingStatus</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texBackground</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLUE</name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSamples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>renderable</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name></type> <name>col</name> <init>= <expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>currentSample</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>Fade</name><argument_list>(<argument><expr><name>DARKGRAY</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collected</name></expr>)</condition> 
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>combo</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texSampleSmall</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>texSampleSmall</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>texSampleSmall</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>combo</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texSampleMid</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>texSampleMid</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>texSampleMid</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texSampleBig</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>texSampleBig</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>texSampleBig</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>currentSample</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>Fade</name><argument_list>(<argument><expr><name>GRAY</name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>DrawLineEx</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><literal type="number">3.0f</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texPlayer</name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"WAVE PAUSED"</literal></argument>, <argument>(Vector2){ <literal type="number">235</literal></argument>, <argument><literal type="number">400</literal> }</argument>, <argument>font.baseSize*<literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>




<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%05i / %05i"</literal>, collectedSamples, totalSamples)</argument>, <argument>(Vector2){<literal type="number">810</literal></argument>, <argument><literal type="number">170</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>SKYBLUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"Combo: %02i [max: %02i]"</literal>, combo, maxCombo)</argument>, <argument>(Vector2){<literal type="number">200</literal></argument>, <argument><literal type="number">170</literal>}</argument>, <argument>font.baseSize/<literal type="number">2</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument>SKYBLUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>, <argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>synchro</name> <operator>&lt;=</operator> <literal type="number">0.3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><name>synchro</name><operator>*</operator><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>synchro</name> <operator>&lt;=</operator> <literal type="number">0.8f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><name>synchro</name><operator>*</operator><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>ORANGE</name></expr></argument>,<argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>synchro</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><name>synchro</name><operator>*</operator><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIME</name></expr></argument>,<argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><name>synchro</name><operator>*</operator><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>GREEN</name></expr></argument>, <argument><expr><literal type="number">0.9f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>synchro</name> <operator>==</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%02i%%"</literal>, (int)(synchro*<literal type="number">100</literal>))</argument>, <argument>(Vector2){<literal type="number">99</literal> + <literal type="number">390</literal></argument>, <argument><literal type="number">600</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>GREEN</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%02i%%"</literal>, (int)(synchro*<literal type="number">100</literal>))</argument>, <argument>(Vector2){<literal type="number">99</literal> + <literal type="number">390</literal></argument>, <argument><literal type="number">600</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>SKYBLUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">754</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>, <argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">754</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><name>warpCounter</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>SKYBLUE</name></expr></argument>, <argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><literal type="number">754</literal></expr></argument>, <argument><expr><literal type="number">622</literal></expr></argument>, <argument><expr><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%02i%%"</literal>, (int)((float)warpCounter/<literal type="number">395.0f</literal>*<literal type="number">100.0f</literal>))</argument>, <argument>(Vector2){<literal type="number">754</literal> + <literal type="number">390</literal></argument>, <argument><literal type="number">600</literal>}</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>SKYBLUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<if_stmt><if>if <condition>(<expr><name><name>waveTarget</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>

<expr_stmt><expr><call><name>DrawSamplesMap</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>totalSamples</name></expr></argument>, <argument><expr><name>currentSample</name></expr></argument>, <argument><expr><name>waveRec</name></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>waveRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>currentSample</name><operator>*</operator><literal type="number">1215</literal><operator>/</operator><name>totalSamples</name></expr></argument>, <argument><expr><name><name>waveRec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>waveTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DrawSamplesMap</name><argument_list>(<argument>samples</argument>, <argument>totalSamples</argument>, <argument>currentSample</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>waveTarget.texture.width</argument>, <argument>waveTarget.texture.height }</argument>, <argument>MAROON</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<macro><name>DrawTextureEx</name><argument_list>(<argument>waveTarget.texture</argument>, <argument>(Vector2){ waveRec.x</argument>, <argument>waveRec.y }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>waveRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>currentSample</name><operator>*</operator><literal type="number">1215</literal><operator>/</operator><name>totalSamples</name></expr></argument>, <argument><expr><name><name>waveRec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>StopMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texBackground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texPlayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texSampleSmall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texSampleMid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texSampleBig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadRenderTexture</name><argument_list>(<argument><expr><name>waveTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxSampleOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxSampleOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxPause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><name>int</name></type> <name>FinishGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>finishScreen</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawSamplesMap</name><parameter_list>(<parameter><decl><type><name>Sample</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>playedSamples</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sampleIncrementX</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><name>sampleCount</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>col</name> <init>= <expr><name>color</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>playedSamples</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>=</operator> <name>GRAY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<macro><name>DrawLineV</name><argument_list>(<argument>(Vector2){ (float)bounds.x + (float)i*sampleIncrementX</argument>, <argument>(float)(bounds.y + bounds.height/<literal type="number">2</literal>) + samples[i].value*bounds.height }</argument>, 
<argument>(Vector2){ (float)bounds.x + (float)(i + <literal type="number">1</literal>)*sampleIncrementX</argument>, <argument>(float)(bounds.y + bounds.height/<literal type="number">2</literal>) + + samples[i + <literal type="number">1</literal>].value*bounds.height }</argument>, <argument>col</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></function></unit>
