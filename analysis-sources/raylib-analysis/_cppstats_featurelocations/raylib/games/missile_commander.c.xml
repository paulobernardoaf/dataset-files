<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\missile_commander.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MISSILES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INTERCEPTORS</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXPLOSIONS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAUNCHERS_AMOUNT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDINGS_AMOUNT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAUNCHER_SIZE</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_SIZE</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPLOSION_RADIUS</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MISSILE_SPEED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MISSILE_LAUNCH_FRAMES</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_SPEED</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPLOSION_INCREASE_TIME</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPLOSION_TOTAL_TIME</name></cpp:macro> <cpp:value>210</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPLOSION_COLOR</name></cpp:macro> <cpp:value>(Color){ 125, 125, 125, 125 }</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>Missile</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>objective</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Missile</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Interceptor</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>objective</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Interceptor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Explosion</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>radiusMultiplier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Explosion</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Launcher</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Launcher</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Building</name> <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>Building</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gameOver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Missile</name></type> <name><name>missile</name><index>[<expr><name>MAX_MISSILES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Interceptor</name></type> <name><name>interceptor</name><index>[<expr><name>MAX_INTERCEPTORS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Explosion</name></type> <name><name>explosion</name><index>[<expr><name>MAX_EXPLOSIONS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Launcher</name></type> <name><name>launcher</name><index>[<expr><name>LAUNCHERS_AMOUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Building</name></type> <name><name>building</name><index>[<expr><name>BUILDINGS_AMOUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>explosionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateOutgoingFire</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateIncomingFire</name><parameter_list>()</parameter_list>;</function_decl>




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"sample game: missile commander"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>UnloadGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MISSILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>origin</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_INTERCEPTORS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>origin</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EXPLOSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>int</name></type> <name>sparcing</name> <init>= <expr><name>screenWidth</name><operator>/</operator><operator>(</operator><name>LAUNCHERS_AMOUNT</name> <operator>+</operator> <name>BUILDINGS_AMOUNT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>launcher</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">1</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>LAUNCHER_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">2</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">3</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">4</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>launcher</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">5</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>LAUNCHER_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">6</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">7</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>building</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">8</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>launcher</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">9</literal><operator>*</operator><name>sparcing</name></expr>, <expr><name>screenHeight</name> <operator>-</operator> <name>LAUNCHER_SIZE</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LAUNCHERS_AMOUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>launcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUILDINGS_AMOUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> 
<name>float</name></type> <name>distance</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_INTERCEPTORS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>distance</name> <operator>=</operator> <call><name>sqrt</name><argument_list>( <argument><expr><call><name>pow</name><argument_list>(<argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>pow</name><argument_list>(<argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>INTERCEPTOR_SPEED</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>explosionIndex</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>explosionIndex</name> <operator>==</operator> <name>MAX_EXPLOSIONS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>explosionIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MISSILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>screenHeight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LAUNCHERS_AMOUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>launcher</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionPointRec</name><argument_list>(<argument>missile[i].position</argument>, <argument>(Rectangle){ launcher[j].position.x - LAUNCHER_SIZE/<literal type="number">2</literal></argument>, <argument>launcher[j].position.y - LAUNCHER_SIZE/<literal type="number">2</literal></argument>,
<argument>LAUNCHER_SIZE</argument>, <argument>LAUNCHER_SIZE }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>launcher</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>explosionIndex</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>explosionIndex</name> <operator>==</operator> <name>MAX_EXPLOSIONS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>explosionIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>BUILDINGS_AMOUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>building</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionPointRec</name><argument_list>(<argument>missile[i].position</argument>, <argument>(Rectangle){ building[j].position.x - BUILDING_SIZE/<literal type="number">2</literal></argument>, <argument>building[j].position.y - BUILDING_SIZE/<literal type="number">2</literal></argument>,
<argument>BUILDING_SIZE</argument>, <argument>BUILDING_SIZE }</argument>)</argument_list></macro></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>building</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>explosionIndex</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>explosionIndex</name> <operator>==</operator> <name>MAX_EXPLOSIONS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>explosionIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_EXPLOSIONS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>explosion</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointCircle</name><argument_list>(<argument><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>explosion</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name>EXPLOSION_RADIUS</name><operator>*</operator><name><name>explosion</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>radiusMultiplier</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>explosionIndex</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>explosionIndex</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>explosionIndex</name> <operator>==</operator> <name>MAX_EXPLOSIONS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>explosionIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EXPLOSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>&lt;=</operator> <name>EXPLOSION_INCREASE_TIME</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radiusMultiplier</name> <operator>=</operator> <name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>EXPLOSION_INCREASE_TIME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>&lt;=</operator> <name>EXPLOSION_TOTAL_TIME</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radiusMultiplier</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name>EXPLOSION_INCREASE_TIME</name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>EXPLOSION_TOTAL_TIME</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>UpdateOutgoingFire</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateIncomingFire</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>checker</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LAUNCHERS_AMOUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>launcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>checker</name> <operator>==</operator> <name>LAUNCHERS_AMOUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>checker</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUILDINGS_AMOUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>checker</name> <operator>==</operator> <name>BUILDINGS_AMOUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MISSILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>%</operator> <literal type="number">16</literal> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>missile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>YELLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_INTERCEPTORS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>%</operator> <literal type="number">16</literal> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>interceptor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EXPLOSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>EXPLOSION_RADIUS</name><operator>*</operator><name><name>explosion</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>radiusMultiplier</name></expr></argument>, <argument><expr><name>EXPLOSION_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LAUNCHERS_AMOUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>launcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>launcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>LAUNCHER_SIZE</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>launcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>LAUNCHER_SIZE</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>LAUNCHER_SIZE</name></expr></argument>, <argument><expr><name>LAUNCHER_SIZE</name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUILDINGS_AMOUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>building</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>BUILDING_SIZE</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>BUILDING_SIZE</name></expr></argument>, <argument><expr><name>BUILDING_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"SCORE %4i"</literal></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateOutgoingFire</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>interceptorNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>launcherShooting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>launcherShooting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_MIDDLE_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>launcherShooting</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>launcherShooting</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>launcherShooting</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>launcher</name><index>[<expr><name>launcherShooting</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sideX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sideY</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name>origin</name> <operator>=</operator> <name><name>launcher</name><index>[<expr><name>launcherShooting</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name>origin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name>objective</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>sqrt</name><argument_list>( <argument><expr><call><name>pow</name><argument_list>(<argument><expr><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>pow</name><argument_list>(<argument><expr><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sideX</name> <operator>=</operator> <operator>(</operator><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name>INTERCEPTOR_SPEED</name><operator>/</operator><name>module</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sideY</name> <operator>=</operator> <operator>(</operator><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name>INTERCEPTOR_SPEED</name><operator>/</operator><name>module</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interceptor</name><index>[<expr><name>interceptorNumber</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>sideX</name></expr>, <expr><name>sideY</name></expr> }</block></expr>;</expr_stmt>


<expr_stmt><expr><name>interceptorNumber</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interceptorNumber</name> <operator>==</operator> <name>MAX_INTERCEPTORS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>interceptorNumber</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateIncomingFire</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>missileIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>framesCounter</name><operator>%</operator><name>MISSILE_LAUNCH_FRAMES</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sideX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sideY</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name>origin</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name>origin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name>objective</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <expr><name>screenHeight</name> <operator>+</operator> <literal type="number">10</literal></expr> }</block></expr>;</expr_stmt>


<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>sqrt</name><argument_list>( <argument><expr><call><name>pow</name><argument_list>(<argument><expr><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>pow</name><argument_list>(<argument><expr><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sideX</name> <operator>=</operator> <operator>(</operator><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name>MISSILE_SPEED</name><operator>/</operator><name>module</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sideY</name> <operator>=</operator> <operator>(</operator><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>objective</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name><name>origin</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name>MISSILE_SPEED</name><operator>/</operator><name>module</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>missile</name><index>[<expr><name>missileIndex</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>sideX</name></expr>, <expr><name>sideY</name></expr> }</block></expr>;</expr_stmt>


<expr_stmt><expr><name>missileIndex</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>missileIndex</name> <operator>==</operator> <name>MAX_MISSILES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>missileIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
