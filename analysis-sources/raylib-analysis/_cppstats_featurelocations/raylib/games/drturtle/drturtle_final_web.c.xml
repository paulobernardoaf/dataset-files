<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\games\drturtle\drturtle_final_web.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ENEMIES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{ <decl><name>TITLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>GAMEPLAY</name></decl>, <decl><name>ENDING</name></decl> }</block></enum></type> <name>GameScreen</name>;</typedef>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">1280</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">720</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>sky</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>mountains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>sea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>turtle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>gamera</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>shark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>orca</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>swhale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>fish</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>gframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Font</name></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sound</name></type> <name>eat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sound</name></type> <name>die</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sound</name></type> <name>growl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Music</name></type> <name>music</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>backScrolling</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seaScrolling</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GameScreen</name></type> <name>currentScreen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>playerRail</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>playerBounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gameraMode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Rectangle</name></type> <name><name>enemyBounds</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>enemyRail</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>enemyType</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>enemyActive</name><index>[<expr><name>MAX_ENEMIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>enemySpeed</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>distance</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hiscore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>hidistance</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>foodBar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>blue</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>timeCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 




<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"Dr. Turtle &amp; Mr. GAMERA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>sky</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/sky.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mountains</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/mountains.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sea</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/sea.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/title.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>turtle</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/turtle.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gamera</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/gamera.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shark</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/shark.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orca</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/orca.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>swhale</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/swhale.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fish</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/fish.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gframe</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/gframe.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadFont</name><argument_list>(<argument><expr><literal type="string">"resources/komika.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>eat</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/eat.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>die</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/die.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>growl</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/gamera.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>music</name> <operator>=</operator> <call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/speeding.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>playerBounds</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><name>playerRail</name><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>enemyProb</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enemyProb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>enemyProb</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>enemyProb</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>enemyRail</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name>screenWidth</name> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>sky</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>mountains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>sea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>gframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>turtle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>shark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>orca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>swhale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>fish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>gamera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>eat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>growl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CloseAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>blue</name> <operator>=</operator> <literal type="number">210</literal> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>timeCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timeCounter</name> <operator>+=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>currentScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>TITLE</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><name>seaScrolling</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seaScrolling</name> <operator>&lt;=</operator> <operator>-</operator><name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>seaScrolling</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>GAMEPLAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><name>backScrolling</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>backScrolling</name> <operator>&lt;=</operator> <operator>-</operator><name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>backScrolling</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>seaScrolling</name> <operator>-=</operator> <operator>(</operator><name>enemySpeed</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seaScrolling</name> <operator>&lt;=</operator> <operator>-</operator><name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>seaScrolling</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerRail</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerRail</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>playerRail</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerRail</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>playerRail</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerRail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>playerBounds</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><name>playerRail</name><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>MAX_ENEMIES</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-=</operator> <name>enemySpeed</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>-</operator> <literal type="number">128</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>enemyRail</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name>screenWidth</name> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameraMode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>enemySpeed</name> <operator>+=</operator> <literal type="number">0.005</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>playerBounds</name></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gameraMode</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">150</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">300</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>foodBar</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>enemyRail</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name>screenWidth</name> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>eat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>ENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>hiscore</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hiscore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <name>hidistance</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hidistance</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>enemyRail</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name>screenWidth</name> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameraMode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>foodBar</name> <operator>+=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>foodBar</name> <operator>+=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>foodBar</name> <operator>==</operator> <literal type="number">400</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gameraMode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>growl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>eat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>gameraMode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>foodBar</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>foodBar</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>gameraMode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>enemySpeed</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enemySpeed</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>enemySpeed</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>distance</name> <operator>+=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>GAMEPLAY</name></expr>;</expr_stmt>


<expr_stmt><expr><name>playerRail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>playerBounds</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><name>playerRail</name><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>gameraMode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>enemyProb</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enemyProb</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>enemyProb</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>enemyProb</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>enemyRail</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name>screenWidth</name> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><name><name>enemyRail</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">14</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>enemySpeed</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>foodBar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>




<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>sky</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>mountains</name></expr></argument>, <argument><expr><name>backScrolling</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>mountains</name></expr></argument>, <argument><expr><name>screenWidth</name> <operator>+</operator> <name>backScrolling</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameraMode</name></expr>)</condition>
<block>{<block_content>
<macro><name>DrawTexture</name><argument_list>(<argument>sea</argument>, <argument>seaScrolling</argument>, <argument><literal type="number">0</literal></argument>, <argument>(Color){ <literal type="number">16</literal></argument>, <argument><literal type="number">189</literal></argument>, <argument>blue</argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexture</name><argument_list>(<argument>sea</argument>, <argument>screenWidth + seaScrolling</argument>, <argument><literal type="number">0</literal></argument>, <argument>(Color){ <literal type="number">16</literal></argument>, <argument><literal type="number">189</literal></argument>, <argument>blue</argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<macro><name>DrawTexture</name><argument_list>(<argument>sea</argument>, <argument>seaScrolling</argument>, <argument><literal type="number">0</literal></argument>, <argument>(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">113</literal></argument>, <argument><literal type="number">66</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTexture</name><argument_list>(<argument>sea</argument>, <argument>screenWidth + seaScrolling</argument>, <argument><literal type="number">0</literal></argument>, <argument>(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">113</literal></argument>, <argument><literal type="number">66</literal></argument>, <argument><literal type="number">255</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>currentScreen</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>TITLE</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>title</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>title</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">30</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"PRESS ENTER"</literal></argument>, <argument>(Vector2){ screenWidth/<literal type="number">2</literal> - <literal type="number">150</literal></argument>, <argument><literal type="number">480</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">1</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>GAMEPLAY</name></expr>:</case>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">120</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>SKYBLUE</name></expr></argument>, <argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameraMode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>turtle</name></expr></argument>, <argument><expr><name><name>playerBounds</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>playerBounds</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>gamera</name></expr></argument>, <argument><expr><name><name>playerBounds</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name><name>playerBounds</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>






<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enemyActive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> 
<block>{<block_content>

<switch>switch<condition>(<expr><name><name>enemyType</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>shark</name></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>orca</name></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>swhale</name></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>fish</name></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>enemyBounds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>












</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>GRAY</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>foodBar</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>ORANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"SCORE: %04i"</literal>, score)</argument>, <argument>(Vector2){ screenWidth - <literal type="number">300</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>ORANGE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"DISTANCE: %04i"</literal>, (int)distance)</argument>, <argument>(Vector2){ <literal type="number">550</literal></argument>, <argument><literal type="number">20</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>ORANGE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>gameraMode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"GAMERA MODE"</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>gframe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>ENDING</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"GAME OVER"</literal></argument>, <argument>(Vector2){ <literal type="number">300</literal></argument>, <argument><literal type="number">160</literal> }</argument>, <argument>font.baseSize*<literal type="number">3</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument>MAROON</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"SCORE: %04i"</literal>, score)</argument>, <argument>(Vector2){ <literal type="number">680</literal></argument>, <argument><literal type="number">350</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>GOLD</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"DISTANCE: %04i"</literal>, (int)distance)</argument>, <argument>(Vector2){ <literal type="number">290</literal></argument>, <argument><literal type="number">350</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>GOLD</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"HISCORE: %04i"</literal>, hiscore)</argument>, <argument>(Vector2){ <literal type="number">665</literal></argument>, <argument><literal type="number">400</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>ORANGE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"HIDISTANCE: %04i"</literal>, (int)hidistance)</argument>, <argument>(Vector2){ <literal type="number">270</literal></argument>, <argument><literal type="number">400</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>ORANGE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">30</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"PRESS ENTER to REPLAY"</literal></argument>, <argument>(Vector2){ screenWidth/<literal type="number">2</literal> - <literal type="number">250</literal></argument>, <argument><literal type="number">520</literal> }</argument>, <argument>font.baseSize</argument>, <argument>-<literal type="number">2</literal></argument>, <argument>LIGHTGRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
