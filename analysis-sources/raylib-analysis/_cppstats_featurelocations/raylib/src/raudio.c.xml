<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\raudio.c">


































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAUDIO_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raudio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTERNAL_CONFIG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOGDICAPMASKS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOVIRTUALKEYCODES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWINMESSAGES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWINSTYLES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSYSMETRICS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMENUS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOICONS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOKEYSTATES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSYSCOMMANDS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORASTEROPS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSHOWWINDOW</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEMRESOURCE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOATOM</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCLIPBOARD</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCOLOR</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCTLMGR</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODRAWTEXT</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOGDI</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOKERNEL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOUSER</name></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMB</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMEMMGR</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMETAFILE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMINMAX</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMSG</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOOPENFILE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSCROLL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSERVICE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSOUND</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTEXTMETRIC</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWH</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWINOFFSETS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCOMM</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOKANJI</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOHELP</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOPROFILER</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEFERWINDOWPOS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMCX</name></cpp:macro></cpp:define> 


<typedef>typedef <type><name><name>struct</name> <name>tagMSG</name></name> <modifier>*</modifier></type><name>LPMSG</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>tagBITMAPINFOHEADER</name> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>biSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>biWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>biHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>biPlanes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>biBitCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>biCompression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>biSizeImage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>biXPelsPerMeter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>biYPelsPerMeter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>biClrUsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>biClrImportant</name></decl>;</decl_stmt>
}</block></struct></type> <name>BITMAPINFOHEADER</name><operator>,</operator> *<name>PBITMAPINFOHEADER</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmreg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"propidl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MA_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MA_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MA_NO_JACK</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIAUDIO_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/miniaudio.h"</cpp:file></cpp:include> 
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PlaySound</name></cpp:undef> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAUDIO_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRACELOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_vorbis.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_XM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARXM_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARXM_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAR_XM_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/jar_xm.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARMOD_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARMOD_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAR_MOD_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/jar_mod.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_REALLOC</name></cpp:macro> <cpp:value>RL_REALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRFLAC_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_FLAC_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_FLAC_NO_WIN32_IO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/dr_flac.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_REALLOC</name></cpp:macro> <cpp:value>RL_REALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRMP3_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_MP3_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/dr_mp3.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bool</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_DEVICE_FORMAT</name></cpp:macro> <cpp:value>ma_format_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_DEVICE_CHANNELS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_DEVICE_SAMPLE_RATE</name></cpp:macro> <cpp:value>44100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>








<typedef>typedef <type><enum>enum <block>{
<decl><name>MUSIC_AUDIO_WAV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MUSIC_AUDIO_OGG</name></decl>,
<decl><name>MUSIC_AUDIO_FLAC</name></decl>,
<decl><name>MUSIC_AUDIO_MP3</name></decl>,
<decl><name>MUSIC_MODULE_XM</name></decl>,
<decl><name>MUSIC_MODULE_MOD</name></decl>
}</block></enum></type> <name>MusicContextType</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAUDIO_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <block>{
<decl><name>LOG_ALL</name></decl>,
<decl><name>LOG_TRACE</name></decl>,
<decl><name>LOG_DEBUG</name></decl>,
<decl><name>LOG_INFO</name></decl>,
<decl><name>LOG_WARNING</name></decl>,
<decl><name>LOG_ERROR</name></decl>,
<decl><name>LOG_FATAL</name></decl>,
<decl><name>LOG_NONE</name></decl>
}</block></enum></type> <name>TraceLogType</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><enum>enum <block>{
<decl><name>AUDIO_BUFFER_USAGE_STATIC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AUDIO_BUFFER_USAGE_STREAM</name></decl>
}</block></enum></type> <name>AudioBufferUsage</name>;</typedef>


<struct>struct <name>rAudioBuffer</name> <block>{
<decl_stmt><decl><type><name>ma_data_converter</name></type> <name>converter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>volume</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>pitch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>playing</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>paused</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>looping</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>usage</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name><name>isSubBufferProcessed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sizeInFrames</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frameCursorPos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>totalFramesProcessed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>rAudioBuffer</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rAudioBuffer</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AudioBuffer</name></cpp:macro> <cpp:value>rAudioBuffer</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <name>AudioData</name> <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>ma_context</name></type> <name>context</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ma_device</name></type> <name>device</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ma_mutex</name></type> <name>lock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isReady</name></decl>;</decl_stmt> 
}</block> <decl><name>System</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>defaultSize</name></decl>;</decl_stmt> 
}</block> <decl><name>Buffer</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name><name>pool</name><index>[<expr><name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>poolCounter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>channels</name><index>[<expr><name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>MultiChannel</name></decl>;</struct>
}</block></struct></type> <name>AudioData</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <name>AudioData</name></type> <name>AUDIO</name> <init>= <expr><block>{ 





<expr><operator>.</operator><name><name>Buffer</name><operator>.</operator><name>defaultSize</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OnLog</name><parameter_list>(<parameter><decl><type><name>ma_context</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>, <parameter><decl><type><name>ma_device</name> <modifier>*</modifier></type><name>pDevice</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>logLevel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OnSendAudioDataToDevice</name><parameter_list>(<parameter><decl><type><name>ma_device</name> <modifier>*</modifier></type><name>pDevice</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pFramesOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pFramesInput</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>frameCount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MixAudioFrames</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>framesOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>framesIn</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>localVolume</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitAudioBufferPool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseAudioBufferPool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_WAV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadWAV</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SaveWAV</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadOGG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadFLAC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadMP3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAUDIO_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>IsFileExtension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>TraceLog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>LoadAudioBuffer</name><parameter_list>(<parameter><decl><type><name>ma_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>sizeInFrames</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsAudioBufferPlaying</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PlayAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>StopAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PauseAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ResumeAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetAudioBufferVolume</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetAudioBufferPitch</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>TrackAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UntrackAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><name>void</name></type> <name>InitAudioDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>ma_context_config</name></type> <name>ctxConfig</name> <init>= <expr><call><name>ma_context_config_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctxConfig</name><operator>.</operator><name>logCallback</name></name> <operator>=</operator> <name>OnLog</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ma_result</name></type> <name>result</name> <init>= <expr><call><name>ma_context_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>MA_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Failed to initialize context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>ma_device_config</name></type> <name>config</name> <init>= <expr><call><name>ma_device_config_init</name><argument_list>(<argument><expr><name>ma_device_type_playback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>playback</name><operator>.</operator><name>pDeviceID</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>playback</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>AUDIO_DEVICE_FORMAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>playback</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name>AUDIO_DEVICE_CHANNELS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>capture</name><operator>.</operator><name>pDeviceID</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>capture</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>ma_format_s16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>capture</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name>AUDIO_DEVICE_SAMPLE_RATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>dataCallback</name></name> <operator>=</operator> <name>OnSendAudioDataToDevice</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ma_device_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>MA_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Failed to initialize playback device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ma_context_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ma_device_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>MA_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Failed to start playback device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ma_device_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ma_context_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ma_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MA_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Failed to create mutex for mixing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ma_device_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ma_context_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Device initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Backend: miniaudio / %s"</literal></expr></argument>, <argument><expr><call><name>ma_get_backend_name</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name><operator>.</operator><name>backend</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Format: %s -&gt; %s"</literal></expr></argument>, <argument><expr><call><name>ma_get_format_name</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ma_get_format_name</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>internalFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Channels: %d -&gt; %d"</literal></expr></argument>, <argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>internalChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Sample rate: %d -&gt; %d"</literal></expr></argument>, <argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>internalSampleRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Periods size: %d"</literal></expr></argument>, <argument><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>internalPeriodSizeInFrames</name></name><operator>*</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>internalPeriods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitAudioBufferPool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>isReady</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>CloseAudioDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>isReady</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ma_mutex_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ma_device_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ma_context_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseAudioBufferPool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Device closed successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Device could not be closed, not currently initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsAudioDeviceReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>isReady</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetMasterVolume</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ma_device_set_master_volume</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>LoadAudioBuffer</name><parameter_list>(<parameter><decl><type><name>ma_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>sizeInFrames</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>usage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>audioBuffer</name> <init>= <expr><operator>(</operator><name>AudioBuffer</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>audioBuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Failed to allocate memory for buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>sizeInFrames</name><operator>*</operator><name>channels</name><operator>*</operator><call><name>ma_get_bytes_per_sample</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ma_data_converter_config</name></type> <name>converterConfig</name> <init>= <expr><call><name>ma_data_converter_config_init</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_FORMAT</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_CHANNELS</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_SAMPLE_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>converterConfig</name><operator>.</operator><name>resampling</name><operator>.</operator><name>allowDynamicSampleRate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>ma_result</name></type> <name>result</name> <init>= <expr><call><name>ma_data_converter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>converterConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>MA_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Failed to create data conversion pipeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>audioBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>pitch</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>looping</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>usage</name></name> <operator>=</operator> <name>usage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name> <operator>=</operator> <name>sizeInFrames</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TrackAudioBuffer</name><argument_list>(<argument><expr><name>audioBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>audioBuffer</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ma_data_converter_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UntrackAudioBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsAudioBufferPlaying</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>playing</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>paused</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>PlayAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>StopAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsAudioBufferPlaying</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>totalFramesProcessed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PauseAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ResumeAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetAudioBufferVolume</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetAudioBufferPitch</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pitchMul</name> <init>= <expr><name>pitch</name><operator>/</operator><name><name>buffer</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>ma_uint32</name></type> <name>newOutputSampleRate</name> <init>= <expr><operator>(</operator><name>ma_uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>buffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>sampleRateOut</name></name><operator>/</operator><name>pitchMul</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>buffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>sampleRateOut</name></name><operator>/</operator><name>newOutputSampleRate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ma_data_converter_set_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>sampleRateIn</name></name></expr></argument>, <argument><expr><name>newOutputSampleRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>TrackAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ma_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ma_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UntrackAudioBuffer</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ma_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ma_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>Wave</name></type> <name>LoadWave</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wave</name></type> <name>wave</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content> </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_WAV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".wav"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wave</name> <operator>=</operator> <call><name>LoadWAV</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".ogg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wave</name> <operator>=</operator> <call><name>LoadOGG</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".flac"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wave</name> <operator>=</operator> <call><name>LoadFLAC</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".mp3"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wave</name> <operator>=</operator> <call><name>LoadMP3</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] File format not supported"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>wave</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Sound</name></type> <name>LoadSound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wave</name></type> <name>wave</name> <init>= <expr><call><name>LoadWave</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sound</name></type> <name>sound</name> <init>= <expr><call><name>LoadSoundFromWave</name><argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnloadWave</name><argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>sound</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Sound</name></type> <name>LoadSoundFromWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Sound</name></type> <name>sound</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>









<decl_stmt><decl><type><name>ma_format</name></type> <name>formatIn</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_u8</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_s16</name></expr> </then><else>: <expr><name>ma_format_f32</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ma_uint32</name></type> <name>frameCountIn</name> <init>= <expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>/</operator><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>frameCount</name> <init>= <expr><operator>(</operator><name>ma_uint32</name><operator>)</operator><call><name>ma_convert_frames</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AUDIO_DEVICE_FORMAT</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_CHANNELS</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_SAMPLE_RATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>frameCountIn</name></expr></argument>, <argument><expr><name>formatIn</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frameCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SOUND: Failed to get frame count for format conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>audioBuffer</name> <init>= <expr><call><name>LoadAudioBuffer</name><argument_list>(<argument><expr><name>AUDIO_DEVICE_FORMAT</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_CHANNELS</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_SAMPLE_RATE</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>AUDIO_BUFFER_USAGE_STATIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>audioBuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SOUND: Failed to create buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frameCount</name> <operator>=</operator> <operator>(</operator><name>ma_uint32</name><operator>)</operator><call><name>ma_convert_frames</name><argument_list>(<argument><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_FORMAT</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_CHANNELS</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_SAMPLE_RATE</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>frameCountIn</name></expr></argument>, <argument><expr><name>formatIn</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frameCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SOUND: Failed format conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sound</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <name>frameCount</name><operator>*</operator><name>AUDIO_DEVICE_CHANNELS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name>AUDIO_DEVICE_SAMPLE_RATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>sampleSize</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name>AUDIO_DEVICE_CHANNELS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>audioBuffer</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>sound</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>wave</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WAVE: Unloaded wave data from RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UnloadAudioBuffer</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WAVE: Unloaded sound data from RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplesCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>StopAudioBuffer</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>samplesCount</name><operator>*</operator><call><name>ma_get_bytes_per_frame</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>formatIn</name></name></expr></argument>, <argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>channelsIn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ExportWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content> </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_WAV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".wav"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>SaveWAV</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".raw"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>SaveFileData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Wave data exported successfully"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to export wave data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ExportWaveAsCode</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TEXT_PER_LINE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>varFileName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>txtFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>txtFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"\n//////////////////////////////////////////////////////////////////////////////////\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// WaveAsCode exporter v1.0 - Wave data exported as an array of bytes //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// more info and bugs-report: github.com/raysan5/raylib //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// feedback and support: ray[at]raylib.com //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// Copyright (c) 2018 Ramon Santamaria (@raysan5) //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"//////////////////////////////////////////////////////////////////////////////////\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAUDIO_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>varFileName</name></expr></argument>, <argument><expr><call><name>GetFileNameWithoutExt</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// Wave data information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"#define %s_SAMPLE_COUNT %u\n"</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"#define %s_SAMPLE_RATE %u\n"</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"#define %s_SAMPLE_SIZE %u\n"</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"#define %s_CHANNELS %u\n\n"</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"static unsigned char %s_DATA[%i] = { "</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name><operator>%</operator><name>BYTES_TEXT_PER_LINE</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"0x%x,\n"</literal></expr> </then><else>: <expr><literal type="string">"0x%x, "</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>wave</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"0x%x };\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>wave</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>dataSize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PlaySound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayAudioBuffer</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PlaySoundMulti</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oldAge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>oldAge</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>oldAge</name> <operator>=</operator> <name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsAudioBufferPlaying</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SOUND: Buffer pool is already full, count: %i"</literal></expr></argument>, <argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>poolCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SOUND: Buffer pool could not determine oldest buffer not playing sound"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>oldIndex</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>StopAudioBuffer</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>channels</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>poolCounter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>poolCounter</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>volume</name> <operator>=</operator> <name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>volume</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>pitch</name> <operator>=</operator> <name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>looping</name> <operator>=</operator> <name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>looping</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>usage</name> <operator>=</operator> <name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>usage</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>sizeInFrames</name> <operator>=</operator> <name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>=</operator> <name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlayAudioBuffer</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>StopSoundMulti</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>StopAudioBuffer</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetSoundsPlaying</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsAudioBufferPlaying</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>counter</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PauseSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PauseAudioBuffer</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ResumeSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ResumeAudioBuffer</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>StopSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>StopAudioBuffer</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsSoundPlaying</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>IsAudioBufferPlaying</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetSoundVolume</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetAudioBufferVolume</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetSoundPitch</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetAudioBufferPitch</name><argument_list>(<argument><expr><name><name>sound</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>WaveFormat</name><parameter_list>(<parameter><decl><type><name>Wave</name> <modifier>*</modifier></type><name>wave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ma_format</name></type> <name>formatIn</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>-&gt;</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_u8</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>-&gt;</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_s16</name></expr> </then><else>: <expr><name>ma_format_f32</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ma_format</name></type> <name>formatOut</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator> <name>sampleSize</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_u8</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator> <name>sampleSize</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_s16</name></expr> </then><else>: <expr><name>ma_format_f32</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>frameCountIn</name> <init>= <expr><name><name>wave</name><operator>-&gt;</operator><name>sampleCount</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>frameCount</name> <init>= <expr><operator>(</operator><name>ma_uint32</name><operator>)</operator><call><name>ma_convert_frames</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>formatOut</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>frameCountIn</name></expr></argument>, <argument><expr><name>formatIn</name></expr></argument>, <argument><expr><name><name>wave</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frameCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: Failed to get frame count for format conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>frameCount</name><operator>*</operator><name>channels</name><operator>*</operator><operator>(</operator><name>sampleSize</name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>frameCount</name> <operator>=</operator> <operator>(</operator><name>ma_uint32</name><operator>)</operator><call><name>ma_convert_frames</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>frameCount</name></expr></argument>, <argument><expr><name>formatOut</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name><name>wave</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>frameCountIn</name></expr></argument>, <argument><expr><name>formatIn</name></expr></argument>, <argument><expr><name><name>wave</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frameCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: Failed format conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wave</name><operator>-&gt;</operator><name>sampleCount</name></name> <operator>=</operator> <name>frameCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>-&gt;</operator><name>sampleSize</name></name> <operator>=</operator> <name>sampleSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>wave</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Wave</name></type> <name>WaveCopy</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wave</name></type> <name>newWave</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>newWave</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newWave</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newWave</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newWave</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleCount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newWave</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newWave</name><operator>.</operator><name>sampleSize</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newWave</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>newWave</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>WaveCrop</name><parameter_list>(<parameter><decl><type><name>Wave</name> <modifier>*</modifier></type><name>wave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initSample</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>finalSample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>initSample</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>initSample</name> <operator>&lt;</operator> <name>finalSample</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>finalSample</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>finalSample</name> <operator>&lt;</operator> <name><name>wave</name><operator>-&gt;</operator><name>sampleCount</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sampleCount</name> <init>= <expr><name>finalSample</name> <operator>-</operator> <name>initSample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>sampleCount</name><operator>*</operator><name><name>wave</name><operator>-&gt;</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal><operator>*</operator><name><name>wave</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>wave</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>initSample</name><operator>*</operator><name><name>wave</name><operator>-&gt;</operator><name>channels</name></name><operator>*</operator><name><name>wave</name><operator>-&gt;</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><name>sampleCount</name><operator>*</operator><name><name>wave</name><operator>-&gt;</operator><name>channels</name></name><operator>*</operator><name><name>wave</name><operator>-&gt;</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>wave</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: Crop range out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>float</name> <modifier>*</modifier></type><name>GetWaveData</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wave</name><operator>.</operator><name>sampleCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>wave</name><operator>.</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>samples</name><index>[<expr><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>wave</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index> <operator>-</operator> <literal type="number">127</literal><operator>)</operator><operator>/</operator><literal type="number">256.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>samples</name><index>[<expr><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name><name>wave</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index><operator>/</operator><literal type="number">32767.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>samples</name><index>[<expr><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>wave</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>samples</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>Music</name></type> <name>LoadMusicStream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Music</name></type> <name>music</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>musicLoaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content> </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".ogg"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name> <operator>=</operator> <call><name>stb_vorbis_open_filename</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>=</operator> <name>MUSIC_AUDIO_OGG</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stb_vorbis_info</name></type> <name>info</name> <init>= <expr><call><name>stb_vorbis_get_info</name><argument_list>(<argument><expr><operator>(</operator><name>stb_vorbis</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><name><name>music</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>InitAudioStream</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>stb_vorbis_stream_length_in_samples</name><argument_list>(<argument><expr><operator>(</operator><name>stb_vorbis</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>musicLoaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".flac"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name> <operator>=</operator> <call><name>drflac_open_file</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>=</operator> <name>MUSIC_AUDIO_FLAC</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>drflac</name> <modifier>*</modifier></type><name>ctxFlac</name> <init>= <expr><operator>(</operator><name>drflac</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>music</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>InitAudioStream</name><argument_list>(<argument><expr><name><name>ctxFlac</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>ctxFlac</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><name><name>ctxFlac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>ctxFlac</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>musicLoaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".mp3"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>drmp3</name> <modifier>*</modifier></type><name>ctxMp3</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>drmp3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name> <operator>=</operator> <name>ctxMp3</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>drmp3_init_file</name><argument_list>(<argument><expr><name>ctxMp3</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>=</operator> <name>MUSIC_AUDIO_MP3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>music</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>InitAudioStream</name><argument_list>(<argument><expr><name><name>ctxMp3</name><operator>-&gt;</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>ctxMp3</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>drmp3_get_pcm_frame_count</name><argument_list>(<argument><expr><name>ctxMp3</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>ctxMp3</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>musicLoaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_XM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".xm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>jar_xm_context_t</name> <modifier>*</modifier></type><name>ctxXm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>jar_xm_create_context_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctxXm</name></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>=</operator> <name>MUSIC_MODULE_XM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_set_max_loop_count</name><argument_list>(<argument><expr><name>ctxXm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>music</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>InitAudioStream</name><argument_list>(<argument><expr><literal type="number">48000</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>jar_xm_get_remaining_samples</name><argument_list>(<argument><expr><name>ctxXm</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>jar_xm_reset</name><argument_list>(<argument><expr><name>ctxXm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>musicLoaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name> <operator>=</operator> <name>ctxXm</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".mod"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type><name>ctxMod</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jar_mod_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jar_mod_init</name><argument_list>(<argument><expr><name>ctxMod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>jar_mod_load_file</name><argument_list>(<argument><expr><name>ctxMod</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>=</operator> <name>MUSIC_MODULE_MOD</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>music</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>InitAudioStream</name><argument_list>(<argument><expr><literal type="number">48000</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>jar_mod_max_samples</name><argument_list>(<argument><expr><name>ctxMod</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>musicLoaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name> <operator>=</operator> <name>ctxMod</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>musicLoaded</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content> </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_AUDIO_OGG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><operator>(</operator><name>stb_vorbis</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_AUDIO_FLAC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>drflac_free</name><argument_list>(<argument><expr><operator>(</operator><name>drflac</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_AUDIO_MP3</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>drmp3_uninit</name><argument_list>(<argument><expr><operator>(</operator><name>drmp3</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_XM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_MODULE_XM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>jar_xm_free_context</name><argument_list>(<argument><expr><operator>(</operator><name>jar_xm_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_MODULE_MOD</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>jar_mod_unload</name><argument_list>(<argument><expr><operator>(</operator><name>jar_mod_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Music file could not be opened"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Music file successfully loaded:"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Total samples: %i"</literal></expr></argument>, <argument><expr><name><name>music</name><operator>.</operator><name>sampleCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Sample rate: %i Hz"</literal></expr></argument>, <argument><expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>sampleRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Sample size: %i bits"</literal></expr></argument>, <argument><expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>sampleSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Channels: %i (%s)"</literal></expr></argument>, <argument><expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Mono"</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Stereo"</literal></expr> </then><else>: <expr><literal type="string">"Multi"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>music</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseAudioStream</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content> </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_AUDIO_OGG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><operator>(</operator><name>stb_vorbis</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_AUDIO_FLAC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>drflac_free</name><argument_list>(<argument><expr><operator>(</operator><name>drflac</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_AUDIO_MP3</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>drmp3_uninit</name><argument_list>(<argument><expr><operator>(</operator><name>drmp3</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_XM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_MODULE_XM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>jar_xm_free_context</name><argument_list>(<argument><expr><operator>(</operator><name>jar_xm_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_MODULE_MOD</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>jar_mod_unload</name><argument_list>(<argument><expr><operator>(</operator><name>jar_mod_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PlayMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>ma_uint32</name></type> <name>frameCursorPos</name> <init>= <expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PlayAudioStream</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>=</operator> <name>frameCursorPos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PauseMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PauseAudioStream</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ResumeMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ResumeAudioStream</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>StopMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>StopAudioStream</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_AUDIO_OGG</name></expr>:</case> <expr_stmt><expr><call><name>stb_vorbis_seek_start</name><argument_list>(<argument><expr><operator>(</operator><name>stb_vorbis</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_AUDIO_FLAC</name></expr>:</case> <expr_stmt><expr><call><name>drflac_seek_to_pcm_frame</name><argument_list>(<argument><expr><operator>(</operator><name>drflac</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_AUDIO_MP3</name></expr>:</case> <expr_stmt><expr><call><name>drmp3_seek_to_pcm_frame</name><argument_list>(<argument><expr><operator>(</operator><name>drmp3</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_XM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_MODULE_XM</name></expr>:</case> <expr_stmt><expr><call><name>jar_xm_reset</name><argument_list>(<argument><expr><operator>(</operator><name>jar_xm_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_MODULE_MOD</name></expr>:</case> <expr_stmt><expr><call><name>jar_mod_seek_start</name><argument_list>(<argument><expr><operator>(</operator><name>jar_mod_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>streamEnding</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subBufferSizeInFrames</name> <init>= <expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>subBufferSizeInFrames</name><operator>*</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name><operator>*</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samplesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int</name></type> <name>sampleLeft</name> <init>= <expr><name><name>music</name><operator>.</operator><name>sampleCount</name></name> <operator>-</operator> <operator>(</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>totalFramesProcessed</name></name><operator>*</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>IsAudioStreamProcessed</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sampleLeft</name><operator>/</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name><operator>)</operator> <operator>&gt;=</operator> <name>subBufferSizeInFrames</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>samplesCount</name> <operator>=</operator> <name>subBufferSizeInFrames</name><operator>*</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>samplesCount</name> <operator>=</operator> <name>sampleLeft</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>music</name><operator>.</operator><name>ctxType</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_AUDIO_OGG</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>stb_vorbis_get_samples_short_interleaved</name><argument_list>(<argument><expr><operator>(</operator><name>stb_vorbis</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>, <argument><expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name>pcm</name></expr></argument>, <argument><expr><name>samplesCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_AUDIO_FLAC</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>drflac_read_pcm_frames_s16</name><argument_list>(<argument><expr><operator>(</operator><name>drflac</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>, <argument><expr><name>samplesCount</name></expr></argument>, <argument><expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_AUDIO_MP3</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>drmp3_read_pcm_frames_f32</name><argument_list>(<argument><expr><operator>(</operator><name>drmp3</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>, <argument><expr><name>samplesCount</name><operator>/</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_XM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_MODULE_XM</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>jar_xm_generate_samples_16bit</name><argument_list>(<argument><expr><operator>(</operator><name>jar_xm_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name>pcm</name></expr></argument>, <argument><expr><name>samplesCount</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MUSIC_MODULE_MOD</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>jar_mod_fillbuffer</name><argument_list>(<argument><expr><operator>(</operator><name>jar_mod_context_t</name> <operator>*</operator><operator>)</operator><name><name>music</name><operator>.</operator><name>ctxData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name>pcm</name></expr></argument>, <argument><expr><name>samplesCount</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>UpdateAudioStream</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>samplesCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_MODULE_XM</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>music</name><operator>.</operator><name>ctxType</name></name> <operator>==</operator> <name>MUSIC_MODULE_MOD</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>samplesCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sampleLeft</name> <operator>-=</operator> <name>samplesCount</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sampleLeft</name> <operator>-=</operator> <name>samplesCount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sampleLeft</name> <operator>-=</operator> <name>samplesCount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleLeft</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>streamEnding</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>streamEnding</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>StopMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>loopCount</name></name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>IsMusicPlaying</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsMusicPlaying</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>IsAudioStreamPlaying</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetMusicVolume</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetAudioStreamVolume</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetMusicPitch</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetAudioStreamPitch</name><argument_list>(<argument><expr><name><name>music</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetMusicLoopCount</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>music</name><operator>.</operator><name>loopCount</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>float</name></type> <name>GetMusicTimeLength</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>totalSeconds</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>totalSeconds</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>music</name><operator>.</operator><name>sampleCount</name></name><operator>/</operator><operator>(</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>sampleRate</name></name><operator>*</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>totalSeconds</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>float</name></type> <name>GetMusicTimePlayed</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>secondsPlayed</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>samplesPlayed</name> <init>= <expr><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>totalFramesProcessed</name></name><operator>*</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>secondsPlayed</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>samplesPlayed</name> <operator>/</operator> <operator>(</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>sampleRate</name></name><operator>*</operator><name><name>music</name><operator>.</operator><name>stream</name><operator>.</operator><name>channels</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>secondsPlayed</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>AudioStream</name></type> <name>InitAudioStream</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioStream</name></type> <name>stream</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>sampleSize</name></name> <operator>=</operator> <name>sampleSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ma_format</name></type> <name>formatIn</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>stream</name><operator>.</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_u8</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>stream</name><operator>.</operator><name>sampleSize</name></name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr>?</condition><then> <expr><name>ma_format_s16</name></expr> </then><else>: <expr><name>ma_format_f32</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>periodSize</name> <init>= <expr><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>internalPeriodSizeInFrames</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subBufferSize</name> <init>= <expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>defaultSize</name></name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>subBufferSize</name> <operator>&lt;</operator> <name>periodSize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>subBufferSize</name> <operator>=</operator> <name>periodSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <call><name>LoadAudioBuffer</name><argument_list>(<argument><expr><name>formatIn</name></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name>subBufferSize</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>AUDIO_BUFFER_USAGE_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>looping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"STREAM: Initialized successfully (%i Hz, %i bit, %s)"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>sampleSize</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>stream</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Mono"</literal></expr> </then><else>: <expr><literal type="string">"Stereo"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"STREAM: Failed to load audio buffer, stream could not be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>CloseAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UnloadAudioBuffer</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"STREAM: Unloaded audio stream data from RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>UpdateAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplesCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ma_uint32</name></type> <name>subBufferToUpdate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>subBufferToUpdate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>subBufferToUpdate</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>subBufferSizeInFrames</name> <init>= <expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>subBuffer</name> <init>= <expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>subBufferSizeInFrames</name><operator>*</operator><name><name>stream</name><operator>.</operator><name>channels</name></name><operator>*</operator><operator>(</operator><name><name>stream</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>subBufferToUpdate</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>totalFramesProcessed</name></name> <operator>+=</operator> <name>subBufferSizeInFrames</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>subBufferSizeInFrames</name> <operator>&gt;=</operator> <operator>(</operator><name>ma_uint32</name><operator>)</operator><name>samplesCount</name><operator>/</operator><name><name>stream</name><operator>.</operator><name>channels</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesToWrite</name> <init>= <expr><name>subBufferSizeInFrames</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>framesToWrite</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>ma_uint32</name><operator>)</operator><name>samplesCount</name><operator>/</operator><name><name>stream</name><operator>.</operator><name>channels</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framesToWrite</name> <operator>=</operator> <operator>(</operator><name>ma_uint32</name><operator>)</operator><name>samplesCount</name><operator>/</operator><name><name>stream</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>bytesToWrite</name> <init>= <expr><name>framesToWrite</name><operator>*</operator><name><name>stream</name><operator>.</operator><name>channels</name></name><operator>*</operator><operator>(</operator><name><name>stream</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subBuffer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytesToWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ma_uint32</name></type> <name>leftoverFrameCount</name> <init>= <expr><name>subBufferSizeInFrames</name> <operator>-</operator> <name>framesToWrite</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>leftoverFrameCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>subBuffer</name> <operator>+</operator> <name>bytesToWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>leftoverFrameCount</name><operator>*</operator><name><name>stream</name><operator>.</operator><name>channels</name></name><operator>*</operator><operator>(</operator><name><name>stream</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><name>subBufferToUpdate</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"STREAM: Attempting to write too many frames to buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"STREAM: Buffer not available for updating"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsAudioStreamProcessed</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PlayAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayAudioBuffer</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PauseAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PauseAudioBuffer</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ResumeAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ResumeAudioBuffer</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsAudioStreamPlaying</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>IsAudioBufferPlaying</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>StopAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>StopAudioBuffer</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetAudioStreamVolume</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetAudioBufferVolume</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetAudioStreamPitch</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetAudioBufferPitch</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetAudioStreamBufferSizeDefault</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>defaultSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>OnLog</name><parameter_list>(<parameter><decl><type><name>ma_context</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>, <parameter><decl><type><name>ma_device</name> <modifier>*</modifier></type><name>pDevice</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>logLevel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pContext</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pDevice</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"miniaudio: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ma_uint32</name></type> <name>ReadAudioBufferFramesInInternalFormat</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>audioBuffer</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>framesOut</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>frameCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ma_uint32</name></type> <name>subBufferSizeInFrames</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name><operator>/</operator><literal type="number">2</literal></expr> </then><else>: <expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ma_uint32</name></type> <name>currentSubBufferIndex</name> <init>= <expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name><operator>/</operator><name>subBufferSizeInFrames</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>currentSubBufferIndex</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name><name>isSubBufferProcessed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>audioBuffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>audioBuffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>frameSizeInBytes</name> <init>= <expr><call><name>ma_get_bytes_per_frame</name><argument_list>(<argument><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>formatIn</name></name></expr></argument>, <argument><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>channelsIn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>usage</name></name> <operator>==</operator> <name>AUDIO_BUFFER_USAGE_STATIC</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>framesRead</name> <operator>&gt;=</operator> <name>frameCount</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>isSubBufferProcessed</name><index>[<expr><name>currentSubBufferIndex</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>totalFramesRemaining</name> <init>= <expr><operator>(</operator><name>frameCount</name> <operator>-</operator> <name>framesRead</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>totalFramesRemaining</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesRemainingInOutputBuffer</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>usage</name></name> <operator>==</operator> <name>AUDIO_BUFFER_USAGE_STATIC</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesRemainingInOutputBuffer</name> <operator>=</operator> <name><name>audioBuffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name> <operator>-</operator> <name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>ma_uint32</name></type> <name>firstFrameIndexOfThisSubBuffer</name> <init>= <expr><name>subBufferSizeInFrames</name><operator>*</operator><name>currentSubBufferIndex</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>framesRemainingInOutputBuffer</name> <operator>=</operator> <name>subBufferSizeInFrames</name> <operator>-</operator> <operator>(</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>-</operator> <name>firstFrameIndexOfThisSubBuffer</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesToRead</name> <init>= <expr><name>totalFramesRemaining</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>framesToRead</name> <operator>&gt;</operator> <name>framesRemainingInOutputBuffer</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framesToRead</name> <operator>=</operator> <name>framesRemainingInOutputBuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>framesOut</name> <operator>+</operator> <operator>(</operator><name>framesRead</name><operator>*</operator><name>frameSizeInBytes</name><operator>)</operator></expr></argument>, <argument><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name><operator>*</operator><name>frameSizeInBytes</name><operator>)</operator></expr></argument>, <argument><expr><name>framesToRead</name><operator>*</operator><name>frameSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>=</operator> <operator>(</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>+</operator> <name>framesToRead</name><operator>)</operator><operator>%</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>sizeInFrames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesRead</name> <operator>+=</operator> <name>framesToRead</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>framesToRead</name> <operator>==</operator> <name>framesRemainingInOutputBuffer</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>isSubBufferProcessed</name><index>[<expr><name>currentSubBufferIndex</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isSubBufferProcessed</name><index>[<expr><name>currentSubBufferIndex</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>currentSubBufferIndex</name> <operator>=</operator> <operator>(</operator><name>currentSubBufferIndex</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>looping</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>StopAudioBuffer</name><argument_list>(<argument><expr><name>audioBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<decl_stmt><decl><type><name>ma_uint32</name></type> <name>totalFramesRemaining</name> <init>= <expr><operator>(</operator><name>frameCount</name> <operator>-</operator> <name>framesRead</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>totalFramesRemaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>framesOut</name> <operator>+</operator> <operator>(</operator><name>framesRead</name><operator>*</operator><name>frameSizeInBytes</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalFramesRemaining</name><operator>*</operator><name>frameSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>usage</name></name> <operator>!=</operator> <name>AUDIO_BUFFER_USAGE_STATIC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framesRead</name> <operator>+=</operator> <name>totalFramesRemaining</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>framesRead</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ma_uint32</name></type> <name>ReadAudioBufferFramesInMixingFormat</name><parameter_list>(<parameter><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>audioBuffer</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>framesOut</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>frameCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>ma_uint8</name></type> <name><name>inputBuffer</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ma_uint32</name></type> <name>inputBufferFrameCap</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>inputBuffer</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <call><name>ma_get_bytes_per_frame</name><argument_list>(<argument><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>formatIn</name></name></expr></argument>, <argument><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>channelsIn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>totalOutputFramesProcessed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>totalOutputFramesProcessed</name> <operator>&lt;</operator> <name>frameCount</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ma_uint64</name></type> <name>outputFramesToProcessThisIteration</name> <init>= <expr><name>frameCount</name> <operator>-</operator> <name>totalOutputFramesProcessed</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ma_uint64</name></type> <name>inputFramesToProcessThisIteration</name> <init>= <expr><call><name>ma_data_converter_get_required_input_frame_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>outputFramesToProcessThisIteration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>inputFramesToProcessThisIteration</name> <operator>&gt;</operator> <name>inputBufferFrameCap</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>inputFramesToProcessThisIteration</name> <operator>=</operator> <name>inputBufferFrameCap</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>runningFramesOut</name> <init>= <expr><name>framesOut</name> <operator>+</operator> <operator>(</operator><name>totalOutputFramesProcessed</name> <operator>*</operator> <name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name><operator>.</operator><name>config</name><operator>.</operator><name>channelsOut</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ma_uint64</name></type> <name>inputFramesProcessedThisIteration</name> <init>= <expr><call><name>ReadAudioBufferFramesInInternalFormat</name><argument_list>(<argument><expr><name>audioBuffer</name></expr></argument>, <argument><expr><name>inputBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ma_uint32</name><operator>)</operator><name>inputFramesToProcessThisIteration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ma_uint64</name></type> <name>outputFramesProcessedThisIteration</name> <init>= <expr><name>outputFramesToProcessThisIteration</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ma_data_converter_process_pcm_frames</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>inputBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputFramesProcessedThisIteration</name></expr></argument>, <argument><expr><name>runningFramesOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputFramesProcessedThisIteration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totalOutputFramesProcessed</name> <operator>+=</operator> <operator>(</operator><name>ma_uint32</name><operator>)</operator><name>outputFramesProcessedThisIteration</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>inputFramesProcessedThisIteration</name> <operator>&lt;</operator> <name>inputFramesToProcessThisIteration</name></expr>)</condition>
<block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>inputFramesProcessedThisIteration</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>outputFramesProcessedThisIteration</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>totalOutputFramesProcessed</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>OnSendAudioDataToDevice</name><parameter_list>(<parameter><decl><type><name>ma_device</name> <modifier>*</modifier></type><name>pDevice</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pFramesOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pFramesInput</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>frameCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pDevice</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pFramesOut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frameCount</name><operator>*</operator><name><name>pDevice</name><operator>-&gt;</operator><name>playback</name><operator>.</operator><name>channels</name></name><operator>*</operator><call><name>ma_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>pDevice</name><operator>-&gt;</operator><name>playback</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>ma_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>AudioBuffer</name> <modifier>*</modifier></type><name>audioBuffer</name> <init>= <expr><name><name>AUDIO</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>audioBuffer</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>audioBuffer</name> <operator>=</operator> <name><name>audioBuffer</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>playing</name></name> <operator>||</operator> <name><name>audioBuffer</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>framesRead</name> <operator>&gt;=</operator> <name>frameCount</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesToRead</name> <init>= <expr><operator>(</operator><name>frameCount</name> <operator>-</operator> <name>framesRead</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>framesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>tempBuffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesToReadRightNow</name> <init>= <expr><name>framesToRead</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>framesToReadRightNow</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tempBuffer</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tempBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>AUDIO_DEVICE_CHANNELS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesToReadRightNow</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tempBuffer</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tempBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>AUDIO_DEVICE_CHANNELS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ma_uint32</name></type> <name>framesJustRead</name> <init>= <expr><call><name>ReadAudioBufferFramesInMixingFormat</name><argument_list>(<argument><expr><name>audioBuffer</name></expr></argument>, <argument><expr><name>tempBuffer</name></expr></argument>, <argument><expr><name>framesToReadRightNow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>framesOut</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>pFramesOut</name> <operator>+</operator> <operator>(</operator><name>framesRead</name><operator>*</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>framesIn</name> <init>= <expr><name>tempBuffer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MixAudioFrames</name><argument_list>(<argument><expr><name>framesOut</name></expr></argument>, <argument><expr><name>framesIn</name></expr></argument>, <argument><expr><name>framesJustRead</name></expr></argument>, <argument><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>framesToRead</name> <operator>-=</operator> <name>framesJustRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name>framesRead</name> <operator>+=</operator> <name>framesJustRead</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>playing</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>framesRead</name> <operator>=</operator> <name>frameCount</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>framesJustRead</name> <operator>&lt;</operator> <name>framesToReadRightNow</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audioBuffer</name><operator>-&gt;</operator><name>looping</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>StopAudioBuffer</name><argument_list>(<argument><expr><name>audioBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name><name>audioBuffer</name><operator>-&gt;</operator><name>frameCursorPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>framesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>ma_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>MixAudioFrames</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>framesOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>framesIn</name></decl></parameter>, <parameter><decl><type><name>ma_uint32</name></type> <name>frameCount</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>localVolume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>ma_uint32</name></type> <name>iFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iFrame</name> <operator>&lt;</operator> <name>frameCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>iFrame</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>ma_uint32</name></type> <name>iChannel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iChannel</name> <operator>&lt;</operator> <name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iChannel</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>frameOut</name> <init>= <expr><name>framesOut</name> <operator>+</operator> <operator>(</operator><name>iFrame</name><operator>*</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>frameIn</name> <init>= <expr><name>framesIn</name> <operator>+</operator> <operator>(</operator><name>iFrame</name><operator>*</operator><name><name>AUDIO</name><operator>.</operator><name>System</name><operator>.</operator><name>device</name><operator>.</operator><name>playback</name><operator>.</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frameOut</name><index>[<expr><name>iChannel</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>frameIn</name><index>[<expr><name>iChannel</name></expr>]</index></name><operator>*</operator><name>localVolume</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>InitAudioBufferPool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>LoadAudioBuffer</name><argument_list>(<argument><expr><name>AUDIO_DEVICE_FORMAT</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_CHANNELS</name></expr></argument>, <argument><expr><name>AUDIO_DEVICE_SAMPLE_RATE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AUDIO_BUFFER_USAGE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"AUDIO: Multichannel pool size: %i"</literal></expr></argument>, <argument><expr><name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseAudioBufferPool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_BUFFER_POOL_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>AUDIO</name><operator>.</operator><name>MultiChannel</name><operator>.</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_WAV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadWAV</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>chunkID</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chunkSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>format</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVRiffHeader</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>subChunkID</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subChunkSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>audioFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>numChannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byteRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>blockAlign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVFormat</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>subChunkID</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subChunkSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVData</name>;</typedef>

<decl_stmt><decl><type><name>WAVRiffHeader</name></type> <name>wavRiffHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVFormat</name></type> <name>wavFormat</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVData</name></type> <name>wavData</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Wave</name></type> <name>wave</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>wavFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wavFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wavFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open WAV file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wavRiffHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVRiffHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'R'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'I'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'F'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'F'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'W'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'V'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavRiffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] RIFF or WAVE header are not valid"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wavFormat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVFormat</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wavFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>wavFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'m'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'t'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>wavFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] Wave format header is not valid"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wavFormat</name><operator>.</operator><name>subChunkSize</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>wavFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wavData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wavData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'d'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>wavData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>wavData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'t'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>wavData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'a'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] Data header is not valid"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>wavData</name><operator>.</operator><name>subChunkSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>wave</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>wavData</name><operator>.</operator><name>subChunkSize</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>wavFormat</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>=</operator> <name><name>wavFormat</name><operator>.</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>wavFormat</name><operator>.</operator><name>numChannels</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>!=</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] Sample size (%ibit) not supported, converted to 16bit"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaveFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wave</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WaveFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wave</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] Channels number (%i) not supported, converted to 2 channels"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name><name>wavData</name><operator>.</operator><name>subChunkSize</name></name><operator>/</operator><operator>(</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>/</operator><name><name>wave</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] File loaded successfully (%i Hz, %i bit, %s)"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Mono"</literal></expr> </then><else>: <expr><literal type="string">"Stereo"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>wave</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>SaveWAV</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>chunkID</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chunkSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>format</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RiffHeader</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>subChunkID</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subChunkSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>audioFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>numChannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byteRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>blockAlign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>
}</block></struct></type> <name>WaveFormat</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>subChunkID</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subChunkSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>WaveData</name>;</typedef>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>wavFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wavFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open audio file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>RiffHeader</name></type> <name>riffHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WaveFormat</name></type> <name>waveFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WaveData</name></type> <name>waveData</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'F'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>chunkID</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'F'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>chunkSize</name></name> <operator>=</operator> <literal type="number">44</literal> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>riffHeader</name><operator>.</operator><name>format</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>subChunkSize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>audioFormat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>numChannels</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>byteRate</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleRate</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>blockAlign</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleSize</name></name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveFormat</name><operator>.</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>waveData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveData</name><operator>.</operator><name>subChunkID</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveData</name><operator>.</operator><name>subChunkSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>riffHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RiffHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waveFormat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WaveFormat</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waveData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WaveData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name><name>wave</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>wavFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OGG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadOGG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wave</name></type> <name>wave</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>oggFile</name> <init>= <expr><call><name>stb_vorbis_open_filename</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oggFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open OGG file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>stb_vorbis_info</name></type> <name>info</name> <init>= <expr><call><name>stb_vorbis_get_info</name><argument_list>(<argument><expr><name>oggFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>stb_vorbis_stream_length_in_samples</name><argument_list>(<argument><expr><name>oggFile</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>totalSeconds</name> <init>= <expr><call><name>stb_vorbis_stream_length_in_seconds</name><argument_list>(<argument><expr><name>oggFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>totalSeconds</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] Ogg audio length larger than 10 seconds (%f), that's a big file in memory, consider music streaming"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>totalSeconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stb_vorbis_get_samples_short_interleaved</name><argument_list>(<argument><expr><name>oggFile</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name><name>wave</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] OGG file loaded successfully (%i Hz, %i bit, %s)"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Mono"</literal></expr> </then><else>: <expr><literal type="string">"Stereo"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><name>oggFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>wave</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FLAC</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadFLAC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wave</name></type> <name>wave</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>totalSampleCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>drflac_open_file_and_read_pcm_frames_s16</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to load FLAC data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>totalSampleCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] FLAC channels number (%i) not supported"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] FLAC file loaded successfully (%i Hz, %i bit, %s)"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Mono"</literal></expr> </then><else>: <expr><literal type="string">"Stereo"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>wave</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MP3</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>Wave</name></type> <name>LoadMP3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Wave</name></type> <name>wave</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>totalFrameCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmp3_config</name></type> <name>config</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>drmp3_open_file_and_read_f32</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to load MP3 data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>outputChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>outputSampleRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleCount</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>totalFrameCount</name><operator>*</operator><name><name>wave</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] MP3 channels number (%i) not supported"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WAVE: [%s] MP3 file loaded successfully (%i Hz, %i bit, %s)"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><name><name>wave</name><operator>.</operator><name>sampleSize</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>wave</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"Mono"</literal></expr> </then><else>: <expr><literal type="string">"Stereo"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>wave</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAUDIO_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>bool</name></type> <name>IsFileExtension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileExt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fileExt</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AudioBuffer</name></cpp:undef>
</unit>
