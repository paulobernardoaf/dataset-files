<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\rmem.h">







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RMEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMEM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BUILD_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMEMAPI</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMEMAPI</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMEMAPI</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<typedef>typedef <type><name><name>struct</name> <name>MemNode</name></name></type> <name>MemNode</name>;</typedef>
<struct>struct <name>MemNode</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>AllocList</name> <block>{
<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>head</name></decl>, <modifier>*</modifier><name>tail</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <name>maxNodes</name>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>autoDefrag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>AllocList</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Stack</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mem</name></decl>, <modifier>*</modifier><name>base</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>Stack</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPOOL_BUCKET_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPOOL_BUCKET_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MemPool</name> <block>{
<decl_stmt><decl><type><name>AllocList</name></type> <name>freeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stack</name></type> <name>stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier></type><name><name>buckets</name><index>[<expr><name>MEMPOOL_BUCKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>MemPool</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ObjPool</name> <block>{
<decl_stmt><decl><type><name>Stack</name></type> <name>stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>objSize</name></decl>, <name>freeBlocks</name>;</decl_stmt>
}</block></struct></type> <name>ObjPool</name>;</typedef>



<typedef>typedef <type><struct>struct <name>BiStack</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mem</name></decl>, <modifier>*</modifier><name>front</name>, <modifier>*</modifier><name>back</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>BiStack</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>RMEMAPI</name> <name>MemPool</name></type> <name>CreateMemPool</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>MemPool</name></type> <name>CreateMemPoolFromBuffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>DestroyMemPool</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RMEMAPI</name> <name>void</name> <modifier>*</modifier></type><name>MemPoolAlloc</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name> <modifier>*</modifier></type><name>MemPoolRealloc</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>MemPoolFree</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>MemPoolCleanUp</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>MemPoolReset</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>bool</name></type> <name>MemPoolDefrag</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RMEMAPI</name> <name>size_t</name></type> <name>GetMemPoolFreeMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemPool</name></type> <name>mempool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>ToggleMemPoolAutoDefrag</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>mempool</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>RMEMAPI</name> <name>ObjPool</name></type> <name>CreateObjPool</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>objsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>ObjPool</name></type> <name>CreateObjPoolFromBuffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>objsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>DestroyObjPool</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier></type><name>objpool</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RMEMAPI</name> <name>void</name> <modifier>*</modifier></type><name>ObjPoolAlloc</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier></type><name>objpool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>ObjPoolFree</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier></type><name>objpool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>ObjPoolCleanUp</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier></type><name>objpool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrref</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>RMEMAPI</name> <name>BiStack</name></type> <name>CreateBiStack</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>BiStack</name></type> <name>CreateBiStackFromBuffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>DestroyBiStack</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier></type><name>destack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RMEMAPI</name> <name>void</name> <modifier>*</modifier></type><name>BiStackAllocFront</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier></type><name>destack</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name> <modifier>*</modifier></type><name>BiStackAllocBack</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier></type><name>destack</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>BiStackResetFront</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier></type><name>destack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>BiStackResetBack</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier></type><name>destack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RMEMAPI</name> <name>void</name></type> <name>BiStackResetAll</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier></type><name>destack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RMEMAPI</name> <name>intptr_t</name></type> <name>BiStackMargins</name><parameter_list>(<parameter><decl><type><name>BiStack</name></type> <name>destack</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RMEM_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>restrict</specifier></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>restrict</name></cpp:macro> <cpp:value>__restrict</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>__AlignSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>size</name> <operator>+</operator> <operator>(</operator><name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>align</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>MemPool</name></type> <name>CreateMemPool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MemPool</name></type> <name>mempool</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0UL</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>mempool</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name><operator>*</operator><sizeof>sizeof <name/></sizeof>*<name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>
<return>return <expr><name>mempool</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>+</operator> <name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><name>mempool</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>MemPool</name></type> <name>CreateMemPoolFromBuffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MemPool</name></type> <name>mempool</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>buf</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>size</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MemNode</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>mempool</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>+</operator> <name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><name>mempool</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DestroyMemPool</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mempool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mempool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mempool</name> <operator>=</operator> <operator>(</operator><name>MemPool</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>MemPoolAlloc</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mempool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mempool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>size</name> <operator>&gt;</operator> <name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>new_mem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ALLOC_SIZE</name> <init>= <expr><call><name>__AlignSize</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof <name/></sizeof>*<name>new_mem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>BUCKET_INDEX</name> <init>= <expr><operator>(</operator><name>ALLOC_SIZE</name> <operator>&gt;&gt;</operator> <name>MEMPOOL_BUCKET_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>BUCKET_INDEX</name> <operator>&lt;</operator> <name>MEMPOOL_BUCKET_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> 
<operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> 
<operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>&gt;=</operator> <name>ALLOC_SIZE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_mem</name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name><operator>-&gt;</operator><name>next</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>MEM_SPLIT_THRESHOLD</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr></init></decl>;</init> <condition><expr><name>inode</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>inode</name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inode</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>ALLOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>inode</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <operator>(</operator><name>ALLOC_SIZE</name> <operator>+</operator> <name>MEM_SPLIT_THRESHOLD</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>new_mem</name> <operator>=</operator> <name>inode</name></expr>;</expr_stmt>
<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name><name>inode</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>inode</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name><name>inode</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>inode</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>new_mem</name> <operator>=</operator> <operator>(</operator><name>MemNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>inode</name> <operator>+</operator> <operator>(</operator><name><name>inode</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>ALLOC_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inode</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>ALLOC_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_mem</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ALLOC_SIZE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>-</operator> <name>ALLOC_SIZE</name><operator>)</operator> <operator>&lt;</operator> <name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>-=</operator> <name>ALLOC_SIZE</name></expr>;</expr_stmt>


<expr_stmt><expr><name>new_mem</name> <operator>=</operator> <operator>(</operator><name>MemNode</name> <operator>*</operator><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_mem</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ALLOC_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>











<expr_stmt><expr><name><name>new_mem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new_mem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>final_mem</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>new_mem</name> <operator>+</operator> <sizeof>sizeof <name/></sizeof>*<name>new_mem</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>memset</name><argument_list>(<argument><expr><name>final_mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>new_mem</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <sizeof>sizeof <name/></sizeof>*<name>new_mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>MemPoolRealloc</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier> <specifier>restrict</specifier></type> <name>mempool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mempool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>size</name> <operator>&gt;</operator> <name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>MemPoolAlloc</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MemNode</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>MemNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof <name/></sizeof>*<name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>NODE_SIZE</name> <init>= <expr><sizeof>sizeof <name/></sizeof>*<name>node</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>resized_block</name> <init>= <expr><call><name>MemPoolAlloc</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>resized_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>resized</name> <init>= <expr><operator>(</operator><name>MemNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>resized_block</name> <operator>-</operator> <sizeof>sizeof <name/></sizeof>*<name>resized</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>resized_block</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>resized</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>resized</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>NODE_SIZE</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>NODE_SIZE</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MemPoolFree</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>resized_block</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>MemPoolFree</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier> <specifier>restrict</specifier></type> <name>mempool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mempool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ptr</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MemNode</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mem_node</name> <init>= <expr><operator>(</operator><name>MemNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof <name/></sizeof>*<name>mem_node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>BUCKET_INDEX</name> <init>= <expr><operator>(</operator><name><name>mem_node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <name>MEMPOOL_BUCKET_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mem_node</name> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mem_node</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>mem_node</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>mem_node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mem_node</name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>+=</operator> <name><name>mem_node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>BUCKET_INDEX</name> <operator>&lt;</operator> <name>MEMPOOL_BUCKET_SIZE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><name>mem_node</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>BUCKET_INDEX</name></expr>]</index></name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<else>else 
<block>{<block_content>
<for>for <control>(<init><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>mem_node</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>mem_node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mem_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>mem_node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>mem_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>autoDefrag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>maxNodes</name></name> <operator>!=</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>maxNodes</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>MemPoolDefrag</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>MemPoolCleanUp</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier> <specifier>restrict</specifier></type> <name>mempool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mempool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ptrref</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptrref</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>MemPoolFree</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><operator>*</operator><name>ptrref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptrref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>GetMemPoolFreeMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemPool</name></type> <name>mempool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_remaining</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>mempool</name><operator>.</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>total_remaining</name> <operator>+=</operator> <name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MEMPOOL_BUCKET_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>MemNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>mempool</name><operator>.</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>total_remaining</name> <operator>+=</operator> <name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>total_remaining</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>MemPoolReset</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mempool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mempool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MEMPOOL_BUCKET_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>+</operator> <name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>MemPoolDefrag</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mempool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mempool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>==</operator> <call><name>GetMemPoolFreeMemory</name><argument_list>(<argument><expr><operator>*</operator><name>mempool</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MemPoolReset</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MEMPOOL_BUCKET_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>+=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>PRE_DEFRAG_LEN</name> <init>= <expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>node</name> <init>= <expr><operator>&amp;</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>node</name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>prev</name></name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>node</name> <operator>+</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>size</name></name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>size</name></name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>next</name></name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>next</name></name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>node</name> <operator>+</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>prev</name></name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>size</name></name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>size</name></name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>


<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>prev</name></name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>node</name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>size</name></name></name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>size</name></name></name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>prev</name></name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>node</name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>size</name></name></name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>size</name></name></name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>prev</name></name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>PRE_DEFRAG_LEN</name> <operator>&gt;</operator> <name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>len</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ToggleMemPoolAutoDefrag</name><parameter_list>(<parameter><decl><type><name>MemPool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mempool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mempool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>mempool</name><operator>-&gt;</operator><name>freeList</name><operator>.</operator><name>autoDefrag</name></name> <operator>^=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<union>union <name>ObjInfo</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>index</name></decl>;</decl_stmt>
}</block>;</union>

<function><type><name>ObjPool</name></type> <name>CreateObjPool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>objsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ObjPool</name></type> <name>objpool</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>objsize</name> <operator>==</operator> <literal type="number">0UL</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>objpool</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>objSize</name></name> <operator>=</operator> <call><name>__AlignSize</name><argument_list>(<argument><expr><name>objsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>objpool</name><operator>.</operator><name>freeBlocks</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>objpool</name><operator>.</operator><name>objSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>
<return>return <expr><name>objpool</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>objpool</name><operator>.</operator><name>freeBlocks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>ObjInfo</name></name></type> <name>block</name> <init>= <expr><block>{ <expr><operator>.</operator><name>byte</name> <operator>=</operator> <operator>&amp;</operator><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name><index>[<expr><name>i</name><operator>*</operator><name><name>objpool</name><operator>.</operator><name>objSize</name></name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name><name>block</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr>;</expr_stmt>
<return>return <expr><name>objpool</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ObjPool</name></type> <name>CreateObjPoolFromBuffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>objsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ObjPool</name></type> <name>objpool</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>objsize</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name>objsize</name><operator>*</operator><name>len</name> <operator>!=</operator> <call><name>__AlignSize</name><argument_list>(<argument><expr><name>objsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>*</operator><name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>objpool</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>objSize</name></name> <operator>=</operator> <call><name>__AlignSize</name><argument_list>(<argument><expr><name>objsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>objpool</name><operator>.</operator><name>freeBlocks</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>objpool</name><operator>.</operator><name>freeBlocks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>ObjInfo</name></name></type> <name>block</name> <init>= <expr><block>{ <expr><operator>.</operator><name>byte</name> <operator>=</operator> <operator>&amp;</operator><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name><index>[<expr><name>i</name><operator>*</operator><name><name>objpool</name><operator>.</operator><name>objSize</name></name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name><name>block</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>objpool</name><operator>.</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr>;</expr_stmt>
<return>return <expr><name>objpool</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DestroyObjPool</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>objpool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>objpool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>objpool</name> <operator>=</operator> <operator>(</operator><name>ObjPool</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ObjPoolAlloc</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>objpool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>objpool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>objpool</name><operator>-&gt;</operator><name>freeBlocks</name></name> <operator>&gt;</operator> <literal type="number">0UL</literal></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name><name>union</name> <name>ObjInfo</name></name></type> <name>ret</name> <init>= <expr><block>{ <expr><operator>.</operator><name>byte</name> <operator>=</operator> <name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>objpool</name><operator>-&gt;</operator><name>freeBlocks</name></name><operator>--</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>objpool</name><operator>-&gt;</operator><name>freeBlocks</name></name> <operator>!=</operator> <literal type="number">0UL</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name><name>ret</name><operator>.</operator><name>index</name></name><operator>*</operator><name><name>objpool</name><operator>-&gt;</operator><name>objSize</name></name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>byte</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>objpool</name><operator>-&gt;</operator><name>objSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ret</name><operator>.</operator><name>byte</name></name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ObjPoolFree</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier><specifier>const</specifier> <specifier>restrict</specifier></type> <name>objpool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>ObjInfo</name></name></type> <name>p</name> <init>= <expr><block>{ <expr><operator>.</operator><name>byte</name> <operator>=</operator> <name>ptr</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>objpool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ptr</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>byte</name></name> <operator>&lt;</operator> <name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>byte</name></name> <operator>&gt;</operator> <name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name> <operator>+</operator> <name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name><operator>*</operator><name><name>objpool</name><operator>-&gt;</operator><name>objSize</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name><name>p</name><operator>.</operator><name>index</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>-</operator> <name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>mem</name></name><operator>)</operator><operator>/</operator><name><name>objpool</name><operator>-&gt;</operator><name>objSize</name></name></expr> </then><else>: <expr><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objpool</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>byte</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objpool</name><operator>-&gt;</operator><name>freeBlocks</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ObjPoolCleanUp</name><parameter_list>(<parameter><decl><type><name>ObjPool</name> <modifier>*</modifier><specifier>const</specifier> <specifier>restrict</specifier></type> <name>objpool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>objpool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ptrref</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptrref</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>ObjPoolFree</name><argument_list>(<argument><expr><name>objpool</name></expr></argument>, <argument><expr><operator>*</operator><name>ptrref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptrref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>BiStack</name></type> <name>CreateBiStack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BiStack</name></type> <name>destack</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0UL</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>destack</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>destack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destack</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name><operator>*</operator><sizeof>sizeof <name/></sizeof>*<name><name>destack</name><operator>.</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>destack</name><operator>.</operator><name>mem</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>destack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>destack</name><operator>.</operator><name>front</name></name> <operator>=</operator> <name><name>destack</name><operator>.</operator><name>mem</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destack</name><operator>.</operator><name>back</name></name> <operator>=</operator> <name><name>destack</name><operator>.</operator><name>mem</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>destack</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BiStack</name></type> <name>CreateBiStackFromBuffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BiStack</name></type> <name>destack</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0UL</literal> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>destack</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>destack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destack</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <name><name>destack</name><operator>.</operator><name>front</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destack</name><operator>.</operator><name>back</name></name> <operator>=</operator> <name><name>destack</name><operator>.</operator><name>mem</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>destack</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DestroyBiStack</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>destack</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>destack</name><operator>-&gt;</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>destack</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>destack</name> <operator>=</operator> <operator>(</operator><name>BiStack</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>BiStackAllocFront</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>destack</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>destack</name><operator>-&gt;</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ALIGNED_LEN</name> <init>= <expr><call><name>__AlignSize</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>destack</name><operator>-&gt;</operator><name>front</name></name> <operator>+</operator> <name>ALIGNED_LEN</name> <operator>&gt;=</operator> <name><name>destack</name><operator>-&gt;</operator><name>back</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>destack</name><operator>-&gt;</operator><name>front</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>destack</name><operator>-&gt;</operator><name>front</name></name> <operator>+=</operator> <name>ALIGNED_LEN</name></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>BiStackAllocBack</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>destack</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>destack</name><operator>-&gt;</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ALIGNED_LEN</name> <init>= <expr><call><name>__AlignSize</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>destack</name><operator>-&gt;</operator><name>back</name></name> <operator>-</operator> <name>ALIGNED_LEN</name> <operator>&lt;=</operator> <name><name>destack</name><operator>-&gt;</operator><name>front</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>destack</name><operator>-&gt;</operator><name>back</name></name> <operator>-=</operator> <name>ALIGNED_LEN</name></expr>;</expr_stmt>
<return>return <expr><name><name>destack</name><operator>-&gt;</operator><name>back</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>BiStackResetFront</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>destack</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>destack</name><operator>-&gt;</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>destack</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name><name>destack</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>BiStackResetBack</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>destack</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>destack</name><operator>-&gt;</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>destack</name><operator>-&gt;</operator><name>back</name></name> <operator>=</operator> <name><name>destack</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name><name>destack</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>BiStackResetAll</name><parameter_list>(<parameter><decl><type><name>BiStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BiStackResetBack</name><argument_list>(<argument><expr><name>destack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BiStackResetFront</name><argument_list>(<argument><expr><name>destack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>intptr_t</name></type> <name>BiStackMargins</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BiStack</name></type> <name>destack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>destack</name><operator>.</operator><name>back</name></name> <operator>-</operator> <name><name>destack</name><operator>.</operator><name>front</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
