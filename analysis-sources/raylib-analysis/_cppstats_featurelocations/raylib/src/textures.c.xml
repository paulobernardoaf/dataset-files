<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\textures.c">


























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTERNAL_CONFIG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlgl.h"</cpp:file></cpp:include> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_BMP</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PNG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_TGA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_JPG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_JPEG</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PSD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_GIF</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_HDR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PIC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_NO_PNM</name></cpp:macro></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_BMP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PNG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_JPG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PIC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_HDR</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_REALLOC</name></cpp:macro> <cpp:value>RL_REALLOC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_IMAGE_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_image.h"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_REALLOC</name></cpp:macro> <cpp:value>RL_REALLOC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_IMAGE_WRITE_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_image_write.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_MANIPULATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_MALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(c), RL_MALLOC(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIR_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(c), RL_FREE(ptr))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_IMAGE_RESIZE_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_image_resize.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_GENERATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_PERLIN_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_perlin.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Image</name></type> <name>LoadAnimatedGIF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>delays</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_DDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Image</name></type> <name>LoadDDS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PKM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Image</name></type> <name>LoadPKM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_KTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Image</name></type> <name>LoadKTX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SaveKTX</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PVR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Image</name></type> <name>LoadPVR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_ASTC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Image</name></type> <name>LoadASTC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>Image</name></type> <name>LoadImage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PNG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_BMP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PIC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_HDR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBI_REQUIRED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<decl_stmt><expr><operator>(</operator><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".png"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>false</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".bmp"</literal></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".tga"</literal></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_JPG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".jpg"</literal></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".gif"</literal></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".pic"</literal></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".psd"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition></if></if_stmt></condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_REQUIRED</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>stbi_load_from_memory</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAY_ALPHA</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".hdr"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_REQUIRED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>stbi_loadf_from_memory</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R32G32B32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R32G32B32A32</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] HDR fileformat not supported"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_DDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".dds"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>LoadDDS</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PKM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".pkm"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>LoadPKM</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_KTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".ktx"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>LoadKTX</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PVR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".pvr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>LoadPVR</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_ASTC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".astc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>LoadASTC</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] Fileformat not supported"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] Data loaded successfully (%ix%i)"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] Failed to load data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Image</name></type> <name>LoadImageEx</name><parameter_list>(<parameter><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Image</name></type> <name>LoadImagePro</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>srcImage</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>srcImage</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcImage</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcImage</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcImage</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcImage</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>dstImage</name> <init>= <expr><call><name>ImageCopy</name><argument_list>(<argument><expr><name>srcImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>dstImage</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>LoadImageRaw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>headerSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataPtr</name> <init>= <expr><name>fileData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name> <init>= <expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>headerSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataPtr</name> <operator>+=</operator> <name>headerSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>dataPtr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Texture2D</name></type> <name>LoadTexture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImage</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>texture</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>texture</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Texture2D</name></type> <name>LoadTextureFromImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>image</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>rlLoadTexture</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Data is not valid to load texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>mipmaps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt>

<return>return <expr><name>texture</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RenderTexture2D</name></type> <name>LoadRenderTexture</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>target</name> <init>= <expr><call><name>rlLoadRenderTexture</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rlDeleteTextures</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Unloaded texture data from VRAM (GPU)"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadRenderTexture</name><parameter_list>(<parameter><decl><type><name>RenderTexture2D</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlDeleteRenderTextures</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>Color</name> <modifier>*</modifier></type><name>GetImageData</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>.</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>&gt;=</operator> <name>COMPRESSED_DXT1_RGB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Pixel data retrieval not supported for compressed image formats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>UNCOMPRESSED_R32</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>image</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>UNCOMPRESSED_R32G32B32</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>image</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>UNCOMPRESSED_R32G32B32A32</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Pixel format converted from 32bit to 8bit per channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>image</name><operator>.</operator><name>format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>pixel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b1111100000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000011111000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000111110</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000000001</literal><operator>)</operator><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>pixel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b1111100000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000011111100000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000011111</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>pixel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b1111000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000111100000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000011110000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000001111</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32A32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>pixels</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Vector4</name> <modifier>*</modifier></type><name>GetImageDataNormalized</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector4</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Vector4</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>&gt;=</operator> <name>COMPRESSED_DXT1_RGB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Pixel data retrieval not supported for compressed image formats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>image</name><operator>.</operator><name>format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>pixel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b1111100000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000011111000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000111110</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>pixel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b1111100000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000011111100000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000011111</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>pixel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b1111000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000111100000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000011110000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0b0000000000001111</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32A32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>pixels</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Rectangle</name></type> <name>GetImageAlphaBorder</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>crop</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pixels</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xMin</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>xMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yMin</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>threshold</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xMin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>xMin</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>xMax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>xMax</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>yMin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yMin</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>yMax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yMax</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>xMin</name> <operator>!=</operator> <literal type="number">65536</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>xMax</name> <operator>!=</operator> <literal type="number">65536</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>crop</name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><name>xMin</name></expr>, <expr><name>yMin</name></expr>, <expr><operator>(</operator><name>xMax</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>xMin</name></expr>, <expr><operator>(</operator><name>yMax</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>yMin</name></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>crop</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>GetPixelDataSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<switch>switch <condition>(<expr><name>format</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32A32</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_DXT1_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_DXT1_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ETC1_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ETC2_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_PVRT_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_PVRT_RGBA</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_DXT3_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_DXT5_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ETC2_EAC_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ASTC_4x4_RGBA</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_ASTC_8x8_RGBA</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>dataSize</name> <operator>=</operator> <name>width</name><operator>*</operator><name>height</name><operator>*</operator><name>bpp</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt> 

<return>return <expr><name>dataSize</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Image</name></type> <name>GetTextureData</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>format</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>rlReadTexturePixels</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>texture</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>texture</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>texture</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Pixel data retrieved successfully"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Failed to retrieve pixel data"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Failed to retrieve compressed pixel data"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>GetScreenData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>rlReadScreenPixels</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>UpdateTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlUpdateTexture</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ExportImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>imgData</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>GetImageData</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".png"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>stbi_write_png</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>imgData</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content/>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_BMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".bmp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>stbi_write_bmp</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>imgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".tga"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>stbi_write_tga</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>imgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_JPG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".jpg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>stbi_write_jpg</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>imgData</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_KTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".ktx"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>SaveKTX</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".raw"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>SaveFileData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>imgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Image exported successfully"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to export image"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ExportImageAsCode</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TEXT_PER_LINE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>txtFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>txtFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>varFileName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"////////////////////////////////////////////////////////////////////////////////////////\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// ImageAsCode exporter v1.0 - Image pixel data exported as an array of bytes //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// more info and bugs-report: github.com/raysan5/raylib //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// feedback and support: ray[at]raylib.com //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// Copyright (c) 2020 Ramon Santamaria (@raysan5) //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"////////////////////////////////////////////////////////////////////////////////////////\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>varFileName</name></expr></argument>, <argument><expr><call><name>GetFileNameWithoutExt</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>varFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt></block_content></block></for>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"// Image data information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"#define %s_WIDTH %i\n"</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"#define %s_HEIGHT %i\n"</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"#define %s_FORMAT %i // raylib internal pixel format\n\n"</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"static unsigned char %s_DATA[%i] = { "</literal></expr></argument>, <argument><expr><name>varFileName</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataSize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name><operator>%</operator><name>BYTES_TEXT_PER_LINE</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"0x%x,\n"</literal></expr> </then><else>: <expr><literal type="string">"0x%x, "</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>, <argument><expr><literal type="string">"0x%x };\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>dataSize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>txtFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>ImageCopy</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>newImage</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>mipmaps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>newImage</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newImage</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newImage</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newImage</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newImage</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newImage</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>mipmaps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newImage</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>newImage</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>ImageFromImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>result</name> <init>= <expr><call><name>ImageCopy</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_MANIPULATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ImageCrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ImageToPOT</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>fillColor</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>potWidth</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ceilf</name><argument_list>(<argument><expr><call><name>logf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call><operator>/</operator><call><name>logf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>potHeight</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ceilf</name><argument_list>(<argument><expr><call><name>logf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call><operator>/</operator><call><name>logf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>potWidth</name> <operator>!=</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>potHeight</name> <operator>!=</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixelsPOT</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>pixelsPOT</name> <operator>=</operator> <operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>potWidth</name><operator>*</operator><name>potHeight</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>potHeight</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>potWidth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixelsPOT</name><index>[<expr><name>j</name><operator>*</operator><name>potWidth</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixelsPOT</name><index>[<expr><name>j</name><operator>*</operator><name>potWidth</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>fillColor</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixelsPOT</name></expr></argument>, <argument><expr><name>potWidth</name></expr></argument>, <argument><expr><name>potHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixelsPOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Converted to POT: (%ix%i) -&gt; (%ix%i)"</literal></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>potWidth</name></expr></argument>, <argument><expr><name>potHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageFormat</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newFormat</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newFormat</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>newFormat</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>&lt;</operator> <name>COMPRESSED_DXT1_RGB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>newFormat</name> <operator>&lt;</operator> <name>COMPRESSED_DXT1_RGB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector4</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageDataNormalized</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>newFormat</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">0.299f</literal> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">0.587f</literal> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">0.114f</literal><operator>)</operator><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">2</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">0.299f</literal> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">0.587f</literal> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">0.114f</literal><operator>)</operator><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>w</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">31.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">63.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">31.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_THRESHOLD</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">31.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">31.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">31.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>ALPHA_THRESHOLD</name><operator>/</operator><literal type="number">255.0f</literal><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">15.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">15.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">15.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name><operator>*</operator><literal type="number">15.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>w</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32</name></expr>:</case>
<block>{<block_content>


<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><literal type="number">0.299f</literal> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><literal type="number">0.587f</literal> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name><operator>*</operator><literal type="number">0.114f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32A32</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>mipmaps</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_MANIPULATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ImageMipmaps</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Data format is compressed, can not be converted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ImageAlphaMask</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Image</name></type> <name>alphaMask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>alphaMask</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>alphaMask</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Alpha mask must be same size as image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>&gt;=</operator> <name>COMPRESSED_DXT1_RGB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Alpha mask can not be applied to compressed data formats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>Image</name></type> <name>mask</name> <init>= <expr><call><name>ImageCopy</name><argument_list>(<argument><expr><name>alphaMask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mask</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_GRAYSCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>mask</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>mask</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mask</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAY_ALPHA</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>mask</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>mask</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>k</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mask</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ImageAlphaClear</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>threshold</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevFormat</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>prevFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageAlphaPremultiply</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name><operator>*</operator><name>alpha</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name><operator>*</operator><name>alpha</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name><operator>*</operator><name>alpha</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevFormat</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>prevFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_MANIPULATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>TextureCubemap</name></type> <name>LoadTextureCubemap</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layoutType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TextureCubemap</name></type> <name>cubemap</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>layoutType</name> <operator>==</operator> <name>CUBEMAP_AUTO_DETECT</name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">6</literal><operator>)</operator> <operator>==</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>layoutType</name> <operator>=</operator> <name>CUBEMAP_LINE_HORIZONTAL</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>image</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>layoutType</name> <operator>=</operator> <name>CUBEMAP_CROSS_FOUR_BY_THREE</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">1.85f</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>layoutType</name> <operator>=</operator> <name>CUBEMAP_PANORAMA</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">6</literal><operator>)</operator> <operator>==</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>layoutType</name> <operator>=</operator> <name>CUBEMAP_LINE_VERTICAL</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>image</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>layoutType</name> <operator>=</operator> <name>CUBEMAP_CROSS_THREE_BY_FOUR</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>cubemap</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>layoutType</name> <operator>!=</operator> <name>CUBEMAP_AUTO_DETECT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>cubemap</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>faces</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Rectangle</name></type> <name><name>faceRecs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>size</name></expr>, <expr><name>size</name></expr> }</block></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>layoutType</name> <operator>==</operator> <name>CUBEMAP_LINE_VERTICAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>faces</name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name><operator>*</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>layoutType</name> <operator>==</operator> <name>CUBEMAP_PANORAMA</name></expr>)</condition>
<block>{<block_content>


</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>layoutType</name> <operator>==</operator> <name>CUBEMAP_LINE_HORIZONTAL</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name><operator>*</operator><name>i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>layoutType</name> <operator>==</operator> <name>CUBEMAP_CROSS_THREE_BY_FOUR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>layoutType</name> <operator>==</operator> <name>CUBEMAP_CROSS_FOUR_BY_THREE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>faceRecs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>faces</name> <operator>=</operator> <call><name>GenImageColor</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name><operator>*</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>MAGENTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>faces</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <macro><name>ImageDraw</name><argument_list>(<argument>&amp;faces</argument>, <argument>image</argument>, <argument>faceRecs[i]</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument>size*i</argument>, <argument>size</argument>, <argument>size }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>rlLoadTextureCubemap</name><argument_list>(<argument><expr><name><name>faces</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>faces</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cubemap</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Failed to load cubemap image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>faces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Failed to detect cubemap image layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>cubemap</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ImageCrop</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>crop</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>crop</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>crop</name><operator>.</operator><name>width</name></name> <operator>+=</operator> <name><name>crop</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>crop</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>crop</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>crop</name><operator>.</operator><name>height</name></name> <operator>+=</operator> <name><name>crop</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>crop</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crop</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>crop</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>crop</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>crop</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crop</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>crop</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>crop</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>crop</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crop</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>crop</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>cropPixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>width</name></name><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>y</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>crop</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>crop</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>x</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>crop</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>crop</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>cropPixels</name><index>[<expr><operator>(</operator><name>j</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><name>cropPixels</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>cropPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Failed to crop, rectangle out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageAlphaCrop</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xMin</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>xMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yMin</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>threshold</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xMin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>xMin</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>xMax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>xMax</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>yMin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yMin</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>yMax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yMax</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>crop</name> <init>= <expr><block>{ <expr><name>xMin</name></expr>, <expr><name>yMin</name></expr>, <expr><operator>(</operator><name>xMax</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>xMin</name></expr>, <expr><operator>(</operator><name>yMax</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>yMin</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>xMax</name> <operator>&lt;</operator> <name>xMin</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>yMax</name> <operator>&lt;</operator> <name>yMin</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ImageCrop</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>crop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>ImageResize</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newHeight</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>newWidth</name><operator>*</operator><name>newHeight</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>stbir_resize_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>output</name></expr></argument>, <argument><expr><name>newWidth</name></expr></argument>, <argument><expr><name>newHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>newWidth</name></expr></argument>, <argument><expr><name>newHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageResizeNN</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>newWidth</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>newHeight</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>newWidth</name><operator>*</operator><name>newHeight</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>xRatio</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>/</operator><name>newWidth</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yRatio</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>/</operator><name>newHeight</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>newHeight</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>newWidth</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>*</operator><name>xRatio</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>*</operator><name>yRatio</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><name>y</name><operator>*</operator><name>newWidth</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><operator>(</operator><name>y2</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>+</operator> <name>x2</name></expr>]</index></name></expr> ;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>newWidth</name></expr></argument>, <argument><expr><name>newHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ImageResizeCanvas</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newWidth</name> <operator>!=</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>newHeight</name> <operator>!=</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offsetX</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>image</argument>, <argument>(Rectangle) { -offsetX</argument>, <argument><literal type="number">0</literal></argument>, <argument>image-&gt;width + offsetX</argument>, <argument>image-&gt;height }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>offsetX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>offsetX</name> <operator>&gt;</operator> <operator>(</operator><name>newWidth</name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>image</argument>, <argument>(Rectangle) { <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>image-&gt;width - (offsetX - (newWidth - image-&gt;width))</argument>, <argument>image-&gt;height }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>offsetX</name> <operator>=</operator> <name>newWidth</name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offsetY</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>image</argument>, <argument>(Rectangle) { <literal type="number">0</literal></argument>, <argument>-offsetY</argument>, <argument>image-&gt;width</argument>, <argument>image-&gt;height + offsetY }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>offsetY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>offsetY</name> <operator>&gt;</operator> <operator>(</operator><name>newHeight</name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>image</argument>, <argument>(Rectangle) { <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>image-&gt;width</argument>, <argument>image-&gt;height - (offsetY - (newHeight - image-&gt;height)) }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>offsetY</name> <operator>=</operator> <name>newHeight</name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newWidth</name> <operator>&gt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>newHeight</name> <operator>&gt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>imTemp</name> <init>= <expr><call><name>GenImageColor</name><argument_list>(<argument><expr><name>newWidth</name></expr></argument>, <argument><expr><name>newHeight</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>srcRec</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>dstRec</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetY</name></expr>, <expr><name><name>srcRec</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>srcRec</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ImageDraw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imTemp</name></expr></argument>, <argument><expr><operator>*</operator><name>image</name></expr></argument>, <argument><expr><name>srcRec</name></expr></argument>, <argument><expr><name>dstRec</name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imTemp</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <name>imTemp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>newWidth</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>newHeight</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>crop</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetY</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>newWidth</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>newHeight</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageCrop</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>crop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>imTemp</name> <init>= <expr><call><name>GenImageColor</name><argument_list>(<argument><expr><name>newWidth</name></expr></argument>, <argument><expr><name>newHeight</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>srcRec</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>dstRec</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetY</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newWidth</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>offsetX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>newWidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newHeight</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>offsetY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>newHeight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ImageDraw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imTemp</name></expr></argument>, <argument><expr><operator>*</operator><name>image</name></expr></argument>, <argument><expr><name>srcRec</name></expr></argument>, <argument><expr><name>dstRec</name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imTemp</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>image</name> <operator>=</operator> <name>imTemp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>ImageMipmaps</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mipCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mipWidth</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mipHeight</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mipSize</name> <init>= <expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<while>while <condition>(<expr><operator>(</operator><name>mipWidth</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mipHeight</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mipWidth</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipWidth</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mipHeight</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipHeight</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mipWidth</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipWidth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mipHeight</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipHeight</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"IMAGE: Next mipmap level: %i x %i - current size %i"</literal></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name>mipSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mipCount</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mipSize</name> <operator>+=</operator> <call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>mipmaps</name></name> <operator>&lt;</operator> <name>mipCount</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>RL_REALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>mipSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Mipmaps required memory could not be allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nextmip</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mipWidth</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mipHeight</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mipSize</name> <operator>=</operator> <call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Image</name></type> <name>imCopy</name> <init>= <expr><call><name>ImageCopy</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mipCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"IMAGE: Generating mipmap level: %i (%i x %i) - size: %i - offset: 0x%x"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name>mipSize</name></expr></argument>, <argument><expr><name>nextmip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ImageResize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imCopy</name></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nextmip</name></expr></argument>, <argument><expr><name><name>imCopy</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>mipSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nextmip</name> <operator>+=</operator> <name>mipSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>mipmaps</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mipWidth</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mipHeight</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mipWidth</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipWidth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mipHeight</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipHeight</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mipSize</name> <operator>=</operator> <call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Mipmaps already available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ImageDither</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rBpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gBpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bBpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aBpp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>&gt;=</operator> <name>COMPRESSED_DXT1_RGB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Compressed data formats can not be dithered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rBpp</name> <operator>+</operator> <name>gBpp</name> <operator>+</operator> <name>bBpp</name> <operator>+</operator> <name>aBpp</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Unsupported dithering bpps (%ibpp), only 16bpp or lower modes supported"</literal></expr></argument>, <argument><expr><operator>(</operator><name>rBpp</name><operator>+</operator><name>gBpp</name><operator>+</operator><name>bBpp</name><operator>+</operator><name>aBpp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>UNCOMPRESSED_R8G8B8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>UNCOMPRESSED_R8G8B8A8</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Format is already 16bpp or lower, dithering could have no effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rBpp</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>gBpp</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bBpp</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>aBpp</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R5G6B5</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>rBpp</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>gBpp</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bBpp</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>aBpp</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R5G5B5A1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>rBpp</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>gBpp</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bBpp</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>aBpp</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R4G4B4A4</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Unsupported dithered OpenGL internal format: %ibpp (R%iG%iB%iA%i)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>rBpp</name><operator>+</operator><name>gBpp</name><operator>+</operator><name>bBpp</name><operator>+</operator><name>aBpp</name><operator>)</operator></expr></argument>, <argument><expr><name>rBpp</name></expr></argument>, <argument><expr><name>gBpp</name></expr></argument>, <argument><expr><name>bBpp</name></expr></argument>, <argument><expr><name>aBpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>oldPixel</name> <init>= <expr><name>WHITE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>newPixel</name> <init>= <expr><name>WHITE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rError</name></decl>, <decl><type ref="prev"/><name>gError</name></decl>, <decl><type ref="prev"/><name>bError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rPixel</name></decl>, <decl><type ref="prev"/><name>gPixel</name></decl>, <decl><type ref="prev"/><name>bPixel</name></decl>, <decl><type ref="prev"/><name>aPixel</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&lt;(b))?(a):(b))</cpp:value></cpp:define>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>oldPixel</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>newPixel</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>oldPixel</name><operator>.</operator><name>r</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>rBpp</name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>newPixel</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>oldPixel</name><operator>.</operator><name>g</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>gBpp</name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>newPixel</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name><name>oldPixel</name><operator>.</operator><name>b</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bBpp</name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>newPixel</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name><name>oldPixel</name><operator>.</operator><name>a</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>aBpp</name><operator>)</operator></expr>;</expr_stmt> 



<expr_stmt><expr><name>rError</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oldPixel</name><operator>.</operator><name>r</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>newPixel</name><operator>.</operator><name>r</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>rBpp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gError</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oldPixel</name><operator>.</operator><name>g</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>newPixel</name><operator>.</operator><name>g</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>gBpp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bError</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oldPixel</name><operator>.</operator><name>b</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>newPixel</name><operator>.</operator><name>b</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bBpp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>newPixel</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>rError</name><operator>*</operator><literal type="number">7.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>gError</name><operator>*</operator><literal type="number">7.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>bError</name><operator>*</operator><literal type="number">7.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>rError</name><operator>*</operator><literal type="number">3.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>gError</name><operator>*</operator><literal type="number">3.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>bError</name><operator>*</operator><literal type="number">3.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>rError</name><operator>*</operator><literal type="number">5.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>gError</name><operator>*</operator><literal type="number">5.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>bError</name><operator>*</operator><literal type="number">5.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>rError</name><operator>*</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>gError</name><operator>*</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>bError</name><operator>*</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rPixel</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>newPixel</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gPixel</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>newPixel</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bPixel</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>newPixel</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>aPixel</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>newPixel</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>rPixel</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>gBpp</name> <operator>+</operator> <name>bBpp</name> <operator>+</operator> <name>aBpp</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>gPixel</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>bBpp</name> <operator>+</operator> <name>aBpp</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>bPixel</name> <operator>&lt;&lt;</operator> <name>aBpp</name><operator>)</operator> <operator>|</operator> <name>aPixel</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>Color</name> <modifier>*</modifier></type><name>ImageExtractPalette</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxPaletteSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>extractCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_EQUAL</name><parameter_list>(<parameter><type><name>col1</name></type></parameter>, <parameter><type><name>col2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((col1.r == col2.r)&amp;&amp;(col1.g == col2.g)&amp;&amp;(col1.b == col2.b)&amp;&amp;(col1.a == col2.a))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>palette</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>maxPaletteSize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>palCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxPaletteSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BLANK</name></expr>;</expr_stmt></block_content></block></for> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>colorInPalette</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>maxPaletteSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>COLOR_EQUAL</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>palette</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>colorInPalette</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>colorInPalette</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>palette</name><index>[<expr><name>palCount</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>palCount</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>palCount</name> <operator>&gt;=</operator> <name>maxPaletteSize</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Palette is greater than %i colors"</literal></expr></argument>, <argument><expr><name>maxPaletteSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>extractCount</name> <operator>=</operator> <name>palCount</name></expr>;</expr_stmt>

<return>return <expr><name>palette</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ImageDraw</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Image</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>srcRec</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>dstRec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>src</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>src</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>src</name><operator>.</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>srcRec</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>srcRec</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>srcRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>srcRec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>src</name><operator>.</operator><name>width</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>srcRec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Source rectangle width out of bounds, rescaled width: %i"</literal></expr></argument>, <argument><expr><name><name>srcRec</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>srcRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>srcRec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>src</name><operator>.</operator><name>height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>srcRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>srcRec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Source rectangle height out of bounds, rescaled height: %i"</literal></expr></argument>, <argument><expr><name><name>srcRec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>srcCopy</name> <init>= <expr><call><name>ImageCopy</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>src</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcRec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>src</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcRec</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ImageCrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcCopy</name></expr></argument>, <argument><expr><name>srcRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcRec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcRec</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageResize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcCopy</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>dstRec</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>&amp;srcCopy</argument>, <argument>(Rectangle) { -dstRec.x</argument>, <argument><literal type="number">0</literal></argument>, <argument>dstRec.width + dstRec.x</argument>, <argument>dstRec.height }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>dstRec</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name><name>dstRec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dstRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>dstRec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>&amp;srcCopy</argument>, <argument>(Rectangle) { <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>dst-&gt;width - dstRec.x</argument>, <argument>dstRec.height }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>dstRec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dstRec</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>&amp;srcCopy</argument>, <argument>(Rectangle) { <literal type="number">0</literal></argument>, <argument>-dstRec.y</argument>, <argument>dstRec.width</argument>, <argument>dstRec.height + dstRec.y }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>dstRec</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name><name>dstRec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dstRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>dstRec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition>
<block>{<block_content>
<macro><name>ImageCrop</name><argument_list>(<argument>&amp;srcCopy</argument>, <argument>(Rectangle) { <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>dstRec.width</argument>, <argument>dst-&gt;height - dstRec.y }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>dstRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>dstRec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>dstPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>srcPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>srcCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>srcCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector4</name></type> <name>fsrc</name></decl>, <decl><type ref="prev"/><name>fdst</name></decl>, <decl><type ref="prev"/><name>fout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Vector4</name></type> <name>ftint</name> <init>= <expr><call><name>ColorNormalize</name><argument_list>(<argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 



<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>y</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>dstRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>dstRec</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>x</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>dstRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>dstRec</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<expr_stmt><expr><name>fdst</name> <operator>=</operator> <call><name>ColorNormalize</name><argument_list>(<argument><expr><name><name>dstPixels</name><index>[<expr><name>j</name><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fsrc</name> <operator>=</operator> <call><name>ColorNormalize</name><argument_list>(<argument><expr><name><name>srcPixels</name><index>[<expr><operator>(</operator><name>j</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>dstRec</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fsrc</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <name><name>ftint</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>fsrc</name><operator>.</operator><name>y</name></name> <operator>*=</operator> <name><name>ftint</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>fsrc</name><operator>.</operator><name>z</name></name> <operator>*=</operator> <name><name>ftint</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>fsrc</name><operator>.</operator><name>w</name></name> <operator>*=</operator> <name><name>ftint</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fout</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>fsrc</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name><name>fdst</name><operator>.</operator><name>w</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>fsrc</name><operator>.</operator><name>w</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fout</name><operator>.</operator><name>w</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fout</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>fout</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>fsrc</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>fsrc</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name><name>fdst</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>fdst</name><operator>.</operator><name>w</name></name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>fsrc</name><operator>.</operator><name>w</name></name><operator>)</operator><operator>)</operator><operator>/</operator><name><name>fout</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>fsrc</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>fsrc</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name><name>fdst</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>fdst</name><operator>.</operator><name>w</name></name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>fsrc</name><operator>.</operator><name>w</name></name><operator>)</operator><operator>)</operator><operator>/</operator><name><name>fout</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fout</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>fsrc</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>fsrc</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name><name>fdst</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>fdst</name><operator>.</operator><name>w</name></name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>fsrc</name><operator>.</operator><name>w</name></name><operator>)</operator><operator>)</operator><operator>/</operator><name><name>fout</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dstPixels</name><index>[<expr><name>j</name><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>fout</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>fout</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>fout</name><operator>.</operator><name>z</name></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>fout</name><operator>.</operator><name>w</name></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr> }</block></expr>;</expr_stmt>


</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><name>dstPixels</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>srcPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>dstPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>ImageText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>defaultFontSize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>fontSize</name> <operator>&lt;</operator> <name>defaultFontSize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fontSize</name> <operator>=</operator> <name>defaultFontSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spacing</name> <init>= <expr><name>fontSize</name> <operator>/</operator> <name>defaultFontSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>imText</name> <init>= <expr><call><name>ImageTextEx</name><argument_list>(<argument><expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fontSize</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>spacing</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>imText</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>ImageTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textOffsetX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>textOffsetY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>Vector2</name></type> <name>imSize</name> <init>= <expr><call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></argument>, <argument><expr><name>spacing</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Image</name></type> <name>imText</name> <init>= <expr><call><name>GenImageColor</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>imSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>imSize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>BLANK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>codepointByteCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codepoint</name> <init>= <expr><call><name>GetNextCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codepointByteCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>GetGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>codepointByteCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>textOffsetY</name> <operator>+=</operator> <operator>(</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>textOffsetX</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>codepoint</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>codepoint</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name> <init>= <expr><block>{ <expr><name>textOffsetX</name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>offsetX</name></expr>, <expr><name>textOffsetY</name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>offsetY</name></expr>, <expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name></expr>, <expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>
<macro><name>ImageDraw</name><argument_list>(<argument>&amp;imText</argument>, <argument>font.chars[index].image</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>font.chars[index].image.width</argument>, <argument>font.chars[index].image.height }</argument>, <argument>rec</argument>, <argument>tint</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>spacing</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>codepointByteCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>fontSize</name> <operator>&gt;</operator> <name><name>imSize</name><operator>.</operator><name>y</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name>fontSize</name><operator>/</operator><name><name>imSize</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: Text scaled by factor: %f"</literal></expr></argument>, <argument><expr><name>scaleFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>==</operator> <call><name>GetFontDefault</name><argument_list>()</argument_list></call><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ImageResizeNN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imText</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>imSize</name><operator>.</operator><name>x</name></name><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>imSize</name><operator>.</operator><name>y</name></name><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ImageResize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imText</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>imSize</name><operator>.</operator><name>x</name></name><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>imSize</name><operator>.</operator><name>y</name></name><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>imText</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawRectangle</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>ImageDrawRectangleRec</name><argument_list>(<argument>dst</argument>, <argument>(Rectangle){ posX</argument>, <argument>posY</argument>, <argument>width</argument>, <argument>height }</argument>, <argument>color</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawRectangleV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawRectangleRec</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>imRec</name> <init>= <expr><call><name>GenImageColor</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>ImageDraw</name><argument_list>(<argument>dst</argument>, <argument>imRec</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>rec.width</argument>, <argument>rec.height }</argument>, <argument>rec</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawRectangleLines</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>thick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>thick</name></expr></argument>, <argument><expr><name>thick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>thick</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>thick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>thick</name></expr></argument>, <argument><expr><name>thick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>thick</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>thick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>thick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageClearBackground</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawPixel</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawPixelV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawRectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawCircle</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>radius</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decesionParameter</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>radius</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>x</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>centerY</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>centerY</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>centerY</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>centerX</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>centerY</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decesionParameter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>decesionParameter</name> <operator>=</operator> <name>decesionParameter</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>decesionParameter</name> <operator>=</operator> <name>decesionParameter</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawCircleV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawCircle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawLine</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startPosY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>endPosY</name> <operator>-</operator> <name>startPosY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slopeError</name> <init>= <expr><name>m</name> <operator>-</operator> <operator>(</operator><name>startPosY</name> <operator>-</operator> <name>startPosX</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>startPosX</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>startPosY</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>startPosY</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawPixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slopeError</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slopeError</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>slopeError</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>startPosY</name> <operator>-</operator> <name>startPosX</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawLineV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageDrawLine</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>start</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>start</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>end</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>end</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawText</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>ImageDrawTextEx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fontSize</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fontSize</name><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageDrawTextEx</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>imText</name> <init>= <expr><call><name>ImageTextEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>, <argument><expr><name>spacing</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>srcRec</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>imText</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>imText</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>dstRec</name> <init>= <expr><block>{ <expr><name><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>imText</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>imText</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ImageDraw</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>imText</name></expr></argument>, <argument><expr><name>srcRec</name></expr></argument>, <argument><expr><name>dstRec</name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageFlipVertical</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>srcPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>dstPixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>dstPixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcPixels</name><index>[<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>dstPixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>srcPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>dstPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageFlipHorizontal</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>srcPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>dstPixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>dstPixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcPixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>dstPixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>srcPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>dstPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageRotateCW</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>srcPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>rotPixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rotPixels</name><index>[<expr><name>x</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>srcPixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>rotPixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>srcPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>rotPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageRotateCCW</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>srcPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>rotPixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rotPixels</name><index>[<expr><name>x</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name>y</name></expr>]</index></name> <operator>=</operator> <name><name>srcPixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>rotPixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>srcPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>rotPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageColorTint</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cR</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cG</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cB</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cA</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name> <init>= <expr><literal type="number">255</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>r</name><operator>/</operator><literal type="number">255</literal><operator>*</operator><name>cR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name> <init>= <expr><literal type="number">255</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>g</name><operator>/</operator><literal type="number">255</literal><operator>*</operator><name>cG</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><literal type="number">255</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>b</name><operator>/</operator><literal type="number">255</literal><operator>*</operator><name>cB</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name> <init>= <expr><literal type="number">255</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>a</name><operator>/</operator><literal type="number">255</literal><operator>*</operator><name>cA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageColorInvert</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageColorGrayscale</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_GRAYSCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ImageColorContrast</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>contrast</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>contrast</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>contrast</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>contrast</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>contrast</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>contrast</name> <operator>=</operator> <operator>(</operator><literal type="number">100.0f</literal> <operator>+</operator> <name>contrast</name><operator>)</operator><operator>/</operator><literal type="number">100.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>contrast</name> <operator>*=</operator> <name>contrast</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pR</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name><operator>/</operator><literal type="number">255.0f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pR</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pR</name> <operator>*=</operator> <name>contrast</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pR</name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pR</name> <operator>*=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pR</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pR</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pR</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pG</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name><operator>/</operator><literal type="number">255.0f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pG</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pG</name> <operator>*=</operator> <name>contrast</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pG</name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pG</name> <operator>*=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pG</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pG</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pG</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pG</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pB</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name><operator>/</operator><literal type="number">255.0f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pB</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pB</name> <operator>*=</operator> <name>contrast</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pB</name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pB</name> <operator>*=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pB</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pB</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pB</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pB</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>pR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>pG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>pB</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ImageColorBrightness</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>brightness</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>brightness</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>brightness</name> <operator>=</operator> <operator>-</operator><literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>brightness</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>brightness</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cR</name> <init>= <expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>+</operator> <name>brightness</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cG</name> <init>= <expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>+</operator> <name>brightness</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cB</name> <init>= <expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>+</operator> <name>brightness</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cR</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cR</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cR</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cR</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cG</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cG</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cG</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cG</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cB</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cB</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cB</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cB</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cB</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ImageColorReplace</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <name><name>color</name><operator>.</operator><name>r</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>==</operator> <name><name>color</name><operator>.</operator><name>g</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>==</operator> <name><name>color</name><operator>.</operator><name>b</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>==</operator> <name><name>color</name><operator>.</operator><name>a</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>replace</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>replace</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>replace</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>replace</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>processed</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>processed</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<function><type><name>Image</name></type> <name>GenImageColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_IMAGE_GENERATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>Image</name></type> <name>GenImageGradientV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>j</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>bottom</name><operator>.</operator><name>r</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>top</name><operator>.</operator><name>r</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>bottom</name><operator>.</operator><name>g</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>top</name><operator>.</operator><name>g</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>bottom</name><operator>.</operator><name>b</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>top</name><operator>.</operator><name>b</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>bottom</name><operator>.</operator><name>a</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>top</name><operator>.</operator><name>a</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>GenImageGradientH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>width</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>right</name><operator>.</operator><name>r</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>left</name><operator>.</operator><name>r</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>right</name><operator>.</operator><name>g</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>left</name><operator>.</operator><name>g</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>right</name><operator>.</operator><name>b</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>left</name><operator>.</operator><name>b</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name>width</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>right</name><operator>.</operator><name>a</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>left</name><operator>.</operator><name>a</name></name><operator>*</operator><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>GenImageGradientRadial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>density</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>inner</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>outer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>radius</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name> <operator>&lt;</operator> <name>height</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name>float</name><operator>)</operator><name>width</name><operator>/</operator><literal type="number">2.0f</literal></expr> </then><else>: <expr><operator>(</operator><name>float</name><operator>)</operator><name>height</name><operator>/</operator><literal type="number">2.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>centerX</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>width</name><operator>/</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>centerY</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>height</name><operator>/</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>x</name> <operator>-</operator> <name>centerX</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name> <operator>-</operator> <name>centerY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><operator>(</operator><name>dist</name> <operator>-</operator> <name>radius</name><operator>*</operator><name>density</name><operator>)</operator><operator>/</operator><operator>(</operator><name>radius</name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>density</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fmax</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>factor</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fmin</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>outer</name><operator>.</operator><name>r</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>inner</name><operator>.</operator><name>r</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>outer</name><operator>.</operator><name>g</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>inner</name><operator>.</operator><name>g</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>outer</name><operator>.</operator><name>b</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>inner</name><operator>.</operator><name>b</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>outer</name><operator>.</operator><name>a</name></name><operator>*</operator><name>factor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>inner</name><operator>.</operator><name>a</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>factor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>GenImageChecked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checksX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checksY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name><operator>/</operator><name>checksX</name> <operator>+</operator> <name>y</name><operator>/</operator><name>checksY</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>GenImageWhiteNoise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>factor</name><operator>*</operator><literal type="number">100.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>GenImagePerlinNoise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>nx</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>offsetX</name><operator>)</operator><operator>*</operator><name>scale</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ny</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>offsetY</name><operator>)</operator><operator>*</operator><name>scale</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><operator>(</operator><call><name>stb_perlin_fbm_noise3</name><argument_list>(<argument><expr><name>nx</name></expr></argument>, <argument><expr><name>ny</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intensity</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><name>intensity</name></expr>, <expr><name>intensity</name></expr>, <expr><name>intensity</name></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Image</name></type> <name>GenImageCellular</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tileSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seedsPerRow</name> <init>= <expr><name>width</name><operator>/</operator><name>tileSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seedsPerCol</name> <init>= <expr><name>height</name><operator>/</operator><name>tileSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seedsCount</name> <init>= <expr><name>seedsPerRow</name> <operator>*</operator> <name>seedsPerCol</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>seeds</name> <init>= <expr><operator>(</operator><name>Vector2</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>seedsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seedsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>i</name><operator>/</operator><name>seedsPerRow</name><operator>)</operator><operator>*</operator><name>tileSize</name> <operator>+</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tileSize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>i</name><operator>%</operator><name>seedsPerRow</name><operator>)</operator><operator>*</operator><name>tileSize</name> <operator>+</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tileSize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>x</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tileY</name> <init>= <expr><name>y</name><operator>/</operator><name>tileSize</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tileX</name> <init>= <expr><name>x</name><operator>/</operator><name>tileSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>minDistance</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>strtod</name><argument_list>(<argument><expr><literal type="string">"Inf"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tileX</name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tileX</name> <operator>+</operator> <name>i</name> <operator>&gt;=</operator> <name>seedsPerRow</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tileY</name> <operator>+</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tileY</name> <operator>+</operator> <name>j</name> <operator>&gt;=</operator> <name>seedsPerCol</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>neighborSeed</name> <init>= <expr><name><name>seeds</name><index>[<expr><operator>(</operator><name>tileY</name> <operator>+</operator> <name>j</name><operator>)</operator><operator>*</operator><name>seedsPerRow</name> <operator>+</operator> <name>tileX</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>hypot</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>neighborSeed</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>neighborSeed</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>minDistance</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fmin</name><argument_list>(<argument><expr><name>minDistance</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<decl_stmt><decl><type><name>int</name></type> <name>intensity</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>minDistance</name><operator>*</operator><literal type="number">256.0f</literal><operator>/</operator><name>tileSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>intensity</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>intensity</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><name>intensity</name></expr>, <expr><name>intensity</name></expr>, <expr><name>intensity</name></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<function><type><name>void</name></type> <name>GenTextureMipmaps</name><parameter_list>(<parameter><decl><type><name>Texture2D</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>rlGenerateMipmaps</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetTextureFilter</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>filterMode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>FILTER_POINT</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>mipmaps</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_MIP_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>FILTER_BILINEAR</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>mipmaps</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_LINEAR_MIP_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>FILTER_TRILINEAR</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>mipmaps</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_MIP_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] No mipmaps available for TRILINEAR texture filtering"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>RL_FILTER_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>FILTER_ANISOTROPIC_4X</name></expr>:</case> <expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_ANISOTROPIC_FILTER</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILTER_ANISOTROPIC_8X</name></expr>:</case> <expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_ANISOTROPIC_FILTER</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILTER_ANISOTROPIC_16X</name></expr>:</case> <expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_ANISOTROPIC_FILTER</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetTextureWrap</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wrapMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>wrapMode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WRAP_REPEAT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>RL_WRAP_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>RL_WRAP_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>WRAP_CLAMP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>RL_WRAP_CLAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>RL_WRAP_CLAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>WRAP_MIRROR_REPEAT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>RL_WRAP_MIRROR_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>RL_WRAP_MIRROR_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>WRAP_MIRROR_CLAMP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>RL_WRAP_MIRROR_CLAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTextureParameters</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>RL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>RL_WRAP_MIRROR_CLAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DrawTextureEx</name><argument_list>(<argument>texture</argument>, <argument>(Vector2){ (float)posX</argument>, <argument>(float)posY }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>tint</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawTextureV</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawTextureEx</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawTextureEx</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>sourceRec</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>destRec</name> <init>= <expr><block>{ <expr><name><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>width</name></name><operator>*</operator><name>scale</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>height</name></name><operator>*</operator><name>scale</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>origin</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawTexturePro</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>sourceRec</name></expr></argument>, <argument><expr><name>destRec</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>rotation</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawTextureRec</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>destRec</name> <init>= <expr><block>{ <expr><name><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>sourceRec</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>, <macro><name>fabsf</name><argument_list>(<argument>sourceRec.height</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>origin</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawTexturePro</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>sourceRec</name></expr></argument>, <argument><expr><name>destRec</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>DrawTextureQuad</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>tiling</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>quad</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>source</name> <init>= <expr><block>{ <expr><name><name>offset</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>offset</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr>, <expr><name><name>tiling</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>tiling</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>origin</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawTexturePro</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>DrawTexturePro</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>destRec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>flipX</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sourceRec</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>flipX</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>sourceRec</name><operator>.</operator><name>width</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sourceRec</name><operator>.</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>sourceRec</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>destRec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>destRec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>rotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>tint</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>flipX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>/</operator><name>width</name></expr></argument>, <argument><expr><name><name>sourceRec</name><operator>.</operator><name>y</name></name><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>sourceRec</name><operator>.</operator><name>x</name></name><operator>/</operator><name>width</name></expr></argument>, <argument><expr><name><name>sourceRec</name><operator>.</operator><name>y</name></name><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flipX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>/</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>sourceRec</name><operator>.</operator><name>x</name></name><operator>/</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>destRec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flipX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>sourceRec</name><operator>.</operator><name>x</name></name><operator>/</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>/</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>destRec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>destRec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flipX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>sourceRec</name><operator>.</operator><name>x</name></name><operator>/</operator><name>width</name></expr></argument>, <argument><expr><name><name>sourceRec</name><operator>.</operator><name>y</name></name><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>/</operator><name>width</name></expr></argument>, <argument><expr><name><name>sourceRec</name><operator>.</operator><name>y</name></name><operator>/</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>destRec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawTextureNPatch</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>NPatchInfo</name></type> <name>nPatchInfo</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>destRec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>patchWidth</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>destRec</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><name><name>destRec</name><operator>.</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>patchHeight</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>destRec</name><operator>.</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><name><name>destRec</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nPatchInfo</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NPT_3PATCH_HORIZONTAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>patchHeight</name> <operator>=</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nPatchInfo</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NPT_3PATCH_VERTICAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>patchWidth</name> <operator>=</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>drawCenter</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>drawMiddle</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>leftBorder</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>nPatchInfo</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>topBorder</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>nPatchInfo</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rightBorder</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>nPatchInfo</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bottomBorder</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>nPatchInfo</name><operator>.</operator><name>bottom</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>patchWidth</name> <operator>&lt;=</operator> <operator>(</operator><name>leftBorder</name> <operator>+</operator> <name>rightBorder</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>nPatchInfo</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>NPT_3PATCH_VERTICAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>drawCenter</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leftBorder</name> <operator>=</operator> <operator>(</operator><name>leftBorder</name> <operator>/</operator> <operator>(</operator><name>leftBorder</name> <operator>+</operator> <name>rightBorder</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>patchWidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rightBorder</name> <operator>=</operator> <name>patchWidth</name> <operator>-</operator> <name>leftBorder</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>patchHeight</name> <operator>&lt;=</operator> <operator>(</operator><name>topBorder</name> <operator>+</operator> <name>bottomBorder</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>nPatchInfo</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>NPT_3PATCH_HORIZONTAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>drawMiddle</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>topBorder</name> <operator>=</operator> <operator>(</operator><name>topBorder</name> <operator>/</operator> <operator>(</operator><name>topBorder</name> <operator>+</operator> <name>bottomBorder</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>patchHeight</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bottomBorder</name> <operator>=</operator> <name>patchHeight</name> <operator>-</operator> <name>topBorder</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>vertA</name></decl>, <decl><type ref="prev"/><name>vertB</name></decl>, <decl><type ref="prev"/><name>vertC</name></decl>, <decl><type ref="prev"/><name>vertD</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vertA</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vertA</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vertB</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>leftBorder</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vertB</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>topBorder</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vertC</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>patchWidth</name> <operator>-</operator> <name>rightBorder</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vertC</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>patchHeight</name> <operator>-</operator> <name>bottomBorder</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vertD</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>patchWidth</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vertD</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>patchHeight</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>coordA</name></decl>, <decl><type ref="prev"/><name>coordB</name></decl>, <decl><type ref="prev"/><name>coordC</name></decl>, <decl><type ref="prev"/><name>coordD</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coordA</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coordA</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coordB</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>leftBorder</name><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coordB</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>topBorder</name><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coordC</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>rightBorder</name><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coordC</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>bottomBorder</name><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coordD</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coordD</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>nPatchInfo</name><operator>.</operator><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>/</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>destRec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>destRec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>rotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>tint</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>nPatchInfo</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NPT_9PATCH</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>drawCenter</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>drawMiddle</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>drawCenter</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>drawCenter</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>nPatchInfo</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NPT_3PATCH_VERTICAL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>drawCenter</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertB</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertC</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>nPatchInfo</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NPT_3PATCH_HORIZONTAL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertA</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>drawCenter</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertB</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertD</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertD</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><name><name>coordC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>coordA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>vertC</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vertA</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GIF</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>Image</name></type> <name>LoadAnimatedGIF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>delays</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>stbi_load_gif_from_memory</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>delays</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_DDS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Image</name></type> <name>LoadDDS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_DXT1</name></cpp:macro> <cpp:value>0x31545844</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_DXT3</name></cpp:macro> <cpp:value>0x33545844</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_DXT5</name></cpp:macro> <cpp:value>0x35545844</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fourCC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rgbBitCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rBitMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gBitMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bBitMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>aBitMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>DDSPixelFormat</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pitchOrLinearSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mipmapCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DDSPixelFormat</name></type> <name>ddspf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>caps2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>caps3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>caps4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>DDSHeader</name>;</typedef>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ddsFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddsFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open DDS file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>ddsHeaderId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>ddsHeaderId</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ddsHeaderId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'D'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ddsHeaderId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'D'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ddsHeaderId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'S'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ddsHeaderId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] DDS file not a valid image"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>DDSHeader</name></type> <name>ddsHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ddsHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DDSHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"IMAGE: [%s] DDS file info:"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Header size: %i"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DDSHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Pixel format size: %i"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Pixel format flags: 0x%x"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; File format: 0x%x"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>fourCC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; File bit count: 0x%x"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>rgbBitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ddsHeader</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>ddsHeader</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>mipmapCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <name><name>ddsHeader</name><operator>.</operator><name>mipmapCount</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>rgbBitCount</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0x40</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R5G6B5</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0x41</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>aBitMask</name></name> <operator>==</operator> <literal type="number">0x8000</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>alpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+=</operator> <name>alpha</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R5G5B5A1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>aBitMask</name></name> <operator>==</operator> <literal type="number">0xf000</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>alpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+=</operator> <name>alpha</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R4G4B4A4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>rgbBitCount</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> 
<block>{<block_content>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0x41</literal> <operator>&amp;&amp;</operator> <name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>rgbBitCount</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>blue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>blue</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>blue</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0x05</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>fourCC</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>mipmapCount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>ddsHeader</name><operator>.</operator><name>pitchOrLinearSize</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>ddsHeader</name><operator>.</operator><name>pitchOrLinearSize</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>size</name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>fourCC</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>FOURCC_DXT1</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ddsHeader</name><operator>.</operator><name>ddspf</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_DXT1_RGB</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_DXT1_RGBA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>FOURCC_DXT3</name></expr>:</case> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_DXT3_RGBA</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FOURCC_DXT5</name></expr>:</case> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_DXT5_RGBA</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ddsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PKM</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>Image</name></type> <name>LoadPKM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>










<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>version</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>format</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>origWidth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>origHeight</name></decl>;</decl_stmt> 
}</block></struct></type> <name>PKMHeader</name>;</typedef>








<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pkmFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pkmFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open PKM file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>PKMHeader</name></type> <name>pkmHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkmHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PKMHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pkmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'K'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'M'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] PKM file not a valid image"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>pkmHeader</name><operator>.</operator><name>format</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkmHeader</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkmHeader</name><operator>.</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>pkmHeader</name><operator>.</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"IMAGE: [%s] PKM file info:"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image width: %i"</literal></expr></argument>, <argument><expr><name><name>pkmHeader</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image height: %i"</literal></expr></argument>, <argument><expr><name><name>pkmHeader</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image format: %i"</literal></expr></argument>, <argument><expr><name><name>pkmHeader</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>pkmHeader</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>pkmHeader</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkmHeader</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><name>bpp</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>size</name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pkmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkmHeader</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ETC1_RGB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pkmHeader</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ETC2_RGB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pkmHeader</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ETC2_EAC_RGBA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>pkmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_KTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Image</name></type> <name>LoadKTX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>















<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>endianness</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glType</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glTypeSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glFormat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glInternalFormat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glBaseInternalFormat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>elements</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>faces</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mipmapLevels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>keyValueDataSize</name></decl>;</decl_stmt> 
}</block></struct></type> <name>KTXHeader</name>;</typedef>



<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ktxFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ktxFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to load KTX file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>KTXHeader</name></type> <name>ktxHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ktxHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KTXHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ktxHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'K'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ktxHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'T'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ktxHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'X'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>ktxHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ktxHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'1'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ktxHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'1'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] KTX file not a valid image"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ktxHeader</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>ktxHeader</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <name><name>ktxHeader</name><operator>.</operator><name>mipmapLevels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"IMAGE: [%s] KTX file info:"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image width: %i"</literal></expr></argument>, <argument><expr><name><name>ktxHeader</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image height: %i"</literal></expr></argument>, <argument><expr><name><name>ktxHeader</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image format: 0x%x"</literal></expr></argument>, <argument><expr><name><name>ktxHeader</name><operator>.</operator><name>glInternalFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>unused</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ktxHeader</name><operator>.</operator><name>keyValueDataSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ktxHeader</name><operator>.</operator><name>keyValueDataSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>dataSize</name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ktxHeader</name><operator>.</operator><name>glInternalFormat</name></name> <operator>==</operator> <literal type="number">0x8D64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ETC1_RGB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ktxHeader</name><operator>.</operator><name>glInternalFormat</name></name> <operator>==</operator> <literal type="number">0x9274</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ETC2_RGB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ktxHeader</name><operator>.</operator><name>glInternalFormat</name></name> <operator>==</operator> <literal type="number">0x9278</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ETC2_EAC_RGBA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>SaveKTX</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>endianness</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glType</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glTypeSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glFormat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glInternalFormat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glBaseInternalFormat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>elements</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>faces</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mipmapLevels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>keyValueDataSize</name></decl>;</decl_stmt> 


}</block></struct></type> <name>KTXHeader</name>;</typedef>



<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ktxFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ktxFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open KTX file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>KTXHeader</name></type> <name>ktxHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ktxIdentifier</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="char">'\r'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="char">'\n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ktxHeader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>ktxIdentifier</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>endianness</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>glType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>glTypeSize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>glFormat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>glInternalFormat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>glBaseInternalFormat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>elements</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>faces</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>mipmapLevels</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>mipmaps</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>keyValueDataSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlGetGlTextureFormats</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ktxHeader</name><operator>.</operator><name>glInternalFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ktxHeader</name><operator>.</operator><name>glFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ktxHeader</name><operator>.</operator><name>glType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ktxHeader</name><operator>.</operator><name>glBaseInternalFormat</name></name> <operator>=</operator> <name><name>ktxHeader</name><operator>.</operator><name>glFormat</name></name></expr>;</expr_stmt> 



<if_stmt><if>if <condition>(<expr><name><name>ktxHeader</name><operator>.</operator><name>glFormat</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: GL format not supported for KTX export (%i)"</literal></expr></argument>, <argument><expr><name><name>ktxHeader</name><operator>.</operator><name>glFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ktxHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KTXHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dataOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>mipmaps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>dataOffset</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dataOffset</name> <operator>+=</operator> <name>dataSize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ktxFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>


<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_PVR</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>Image</name></type> <name>LoadPVR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

typedef struct {
unsigned int headerLength;
unsigned int height;
unsigned int width;
unsigned int numMipmaps;
unsigned int flags;
unsigned int dataLength;
unsigned int bpp;
unsigned int bitmaskRed;
unsigned int bitmaskGreen;
unsigned int bitmaskBlue;
unsigned int bitmaskAlpha;
unsigned int pvrTag;
unsigned int numSurfs;
} PVRHeaderV2;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>channels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>channelDepth</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>colourSpace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channelType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numSurfaces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numFaces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numMipmaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>metaDataSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>PVRHeaderV3</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

typedef struct {
unsigned int devFOURCC;
unsigned int key;
unsigned int dataSize; 
unsigned char *data; 
} PVRMetadata;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pvrFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pvrFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to load PVR file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>pvrVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pvrVersion</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pvrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>pvrFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pvrVersion</name> <operator>==</operator> <literal type="number">0x50</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PVRHeaderV3</name></type> <name>pvrHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pvrHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PVRHeaderV3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pvrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'V'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'R'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] PVR file not a valid image"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>pvrHeader</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>pvrHeader</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <name><name>pvrHeader</name><operator>.</operator><name>numMipmaps</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAY_ALPHA</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R5G5B5A1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R4G4B4A4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R5G6B5</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pvrHeader</name><operator>.</operator><name>channelDepth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_PVRT_RGB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pvrHeader</name><operator>.</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_PVRT_RGBA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>unused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pvrHeader</name><operator>.</operator><name>metaDataSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pvrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>image</name><operator>.</operator><name>format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_PVRT_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_PVRT_RGBA</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><name>bpp</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>dataSize</name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pvrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pvrVersion</name> <operator>==</operator> <literal type="number">52</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] PVRv2 format not supported, update your files to PVRv3"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>pvrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_ASTC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Image</name></type> <name>LoadASTC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>









<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>blockX</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>blockY</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>blockZ</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>height</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>length</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>ASTCHeader</name>;</typedef>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>astcFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>astcFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to load ASTC file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>ASTCHeader</name></type> <name>astcHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>astcHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ASTCHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>astcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astcHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x5c</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>astcHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xa1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>astcHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xab</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>astcHeader</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x13</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] ASTC file not a valid image"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0x00000000</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>astcHeader</name><operator>.</operator><name>width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>astcHeader</name><operator>.</operator><name>width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>astcHeader</name><operator>.</operator><name>width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">0x00000000</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>astcHeader</name><operator>.</operator><name>height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>astcHeader</name><operator>.</operator><name>height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>astcHeader</name><operator>.</operator><name>height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"IMAGE: [%s] ASTC file info:"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image width: %i"</literal></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image height: %i"</literal></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Image blocks: %ix%i"</literal></expr></argument>, <argument><expr><name><name>astcHeader</name><operator>.</operator><name>blockX</name></name></expr></argument>, <argument><expr><name><name>astcHeader</name><operator>.</operator><name>blockY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><literal type="number">128</literal><operator>/</operator><operator>(</operator><name><name>astcHeader</name><operator>.</operator><name>blockX</name></name><operator>*</operator><name><name>astcHeader</name><operator>.</operator><name>blockY</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bpp</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bpp</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><name><name>image</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><name>bpp</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>dataSize</name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>astcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ASTC_4x4_RGBA</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>COMPRESSED_ASTC_8x8_RGBA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: [%s] ASTC block size configuration not supported"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>astcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
