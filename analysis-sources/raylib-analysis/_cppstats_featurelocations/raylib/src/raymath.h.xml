<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\raymath.h">








































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAYMATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYMATH_H</name></cpp:macro></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAYMATH_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYMATH_IMPLEMENTATION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>RAYMATH_HEADER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Specifying both RAYMATH_IMPLEMENTATION and RAYMATH_HEADER_ONLY is contradictory"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYMATH_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BUILD_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMDEF</name></cpp:macro> <cpp:value>__declspec(dllexport) extern inline</cpp:value></cpp:define> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMDEF</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMDEF</name></cpp:macro> <cpp:value>extern inline</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYMATH_HEADER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMDEF</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMDEF</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMDEF</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEG2RAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEG2RAD</name></cpp:macro> <cpp:value>(PI/180.0f)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAD2DEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAD2DEG</name></cpp:macro> <cpp:value>(180.0f/PI)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MatrixToFloat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MatrixToFloat</name><parameter_list>(<parameter><type><name>mat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(MatrixToFloatV(mat).v)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Vector3ToFloat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Vector3ToFloat</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(Vector3ToFloatV(vec).v)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYMATH_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>Vector2</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
}</block></struct></type> <name>Vector2</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Vector3</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>
}</block></struct></type> <name>Vector3</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Quaternion</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>w</name></decl>;</decl_stmt>
}</block></struct></type> <name>Quaternion</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Matrix</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>m0</name></decl>, <name>m4</name>, <name>m8</name>, <name>m12</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m1</name></decl>, <name>m5</name>, <name>m9</name>, <name>m13</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m2</name></decl>, <name>m6</name>, <name>m10</name>, <name>m14</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m3</name></decl>, <name>m7</name>, <name>m11</name>, <name>m15</name>;</decl_stmt>
}</block></struct></type> <name>Matrix</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <name>float3</name> <block>{ <decl_stmt><decl><type><name>float</name></type> <name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> }</block></struct></type> <name>float3</name>;</typedef>
<typedef>typedef <type><struct>struct <name>float16</name> <block>{ <decl_stmt><decl><type><name>float</name></type> <name><name>v</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> }</block></struct></type> <name>float16</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 






<function><type><name>RMDEF</name> <name>float</name></type> <name>Clamp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>res</name> <init>= <expr><ternary><condition><expr><name>value</name> <operator>&lt;</operator> <name>min</name></expr> ?</condition><then> <expr><name>min</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>res</name> <operator>&gt;</operator> <name>max</name></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><name>res</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Lerp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>start</name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Zero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2One</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Add</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Subtract</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Vector2Length</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name><name>v</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Vector2DotProduct</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><operator>(</operator><name><name>v1</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>v1</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Vector2Distance</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Vector2Angle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><literal type="number">180.0f</literal><operator>/</operator><name>PI</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">360.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Scale</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v</name><operator>.</operator><name>x</name></name><operator>*</operator><name>scale</name></expr>, <expr><name><name>v</name><operator>.</operator><name>y</name></name><operator>*</operator><name>scale</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2MultiplyV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Negate</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>-</operator><name><name>v</name><operator>.</operator><name>x</name></name></expr>, <expr><operator>-</operator><name><name>v</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Divide</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>div</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v</name><operator>.</operator><name>x</name></name><operator>/</operator><name>div</name></expr>, <expr><name><name>v</name><operator>.</operator><name>y</name></name><operator>/</operator><name>div</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2DivideV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name><operator>/</operator><name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name><operator>/</operator><name><name>v2</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Normalize</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><call><name>Vector2Divide</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>Vector2Length</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Lerp</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector2</name></type> <name>Vector2Rotate</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>degs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rads</name> <init>= <expr><name>degs</name><operator>*</operator><name>DEG2RAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><block>{<expr><name><name>v</name><operator>.</operator><name>x</name></name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>rads</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>rads</name></expr></argument>)</argument_list></call></expr> , <expr><name><name>v</name><operator>.</operator><name>x</name></name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>rads</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>*</operator> <macro><name>cosf</name><argument_list>(<argument>rads</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Zero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3One</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Add</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Subtract</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Scale</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scalar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v</name><operator>.</operator><name>x</name></name><operator>*</operator><name>scalar</name></expr>, <expr><name><name>v</name><operator>.</operator><name>y</name></name><operator>*</operator><name>scalar</name></expr>, <expr><name><name>v</name><operator>.</operator><name>z</name></name><operator>*</operator><name>scalar</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Multiply</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3CrossProduct</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>z</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>x</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Perpendicular</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>min</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>cardinalAxis</name> <init>= <expr><block>{<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>min</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>tmp</name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cardinalAxis</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>min</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>tmp</name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cardinalAxis</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>cardinalAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Vector3Length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>v</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Vector3DotProduct</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><operator>(</operator><name><name>v1</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>v1</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>v1</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>v2</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>Vector3Distance</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dz</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dy</name><operator>*</operator><name>dy</name> <operator>+</operator> <name>dz</name><operator>*</operator><name>dz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Negate</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>-</operator><name><name>v</name><operator>.</operator><name>x</name></name></expr>, <expr><operator>-</operator><name><name>v</name><operator>.</operator><name>y</name></name></expr>, <expr><operator>-</operator><name><name>v</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Divide</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>div</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>div</name></expr>, <expr><name><name>v</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>div</name></expr>, <expr><name><name>v</name><operator>.</operator><name>z</name></name> <operator>/</operator> <name>div</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3DivideV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><name><name>v1</name><operator>.</operator><name>x</name></name><operator>/</operator><name><name>v2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>y</name></name><operator>/</operator><name><name>v2</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>v1</name><operator>.</operator><name>z</name></name><operator>/</operator><name><name>v2</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Normalize</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>ilength</name></decl>;</decl_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>Vector3Length</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ilength</name> <operator>=</operator> <literal type="number">1.0f</literal><operator>/</operator><name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <name>ilength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>*=</operator> <name>ilength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>*=</operator> <name>ilength</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>RMDEF</name> <name>void</name></type> <name>Vector3OrthoNormalize</name><parameter_list>(<parameter><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>v1</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><operator>*</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>vn</name> <init>= <expr><call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><operator>*</operator><name>v1</name></expr></argument>, <argument><expr><operator>*</operator><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vn</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>v2</name> <operator>=</operator> <call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>vn</name></expr></argument>, <argument><expr><operator>*</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Transform</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>v</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>v</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>v</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m0</name></name><operator>*</operator><name>x</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m4</name></name><operator>*</operator><name>y</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m8</name></name><operator>*</operator><name>z</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m1</name></name><operator>*</operator><name>x</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m5</name></name><operator>*</operator><name>y</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m9</name></name><operator>*</operator><name>z</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name><operator>*</operator><name>x</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m6</name></name><operator>*</operator><name>y</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m10</name></name><operator>*</operator><name>z</name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3RotateByQuaternion</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <name><name>v</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <name><name>v</name><operator>.</operator><name>z</name></name><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <name><name>v</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <name><name>v</name><operator>.</operator><name>z</name></name><operator>*</operator><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <name><name>v</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>+</operator> <name><name>v</name><operator>.</operator><name>z</name></name><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Lerp</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>v2</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Reflect</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dotProduct</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name><name>normal</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name>dotProduct</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name><name>normal</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name>dotProduct</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>z</name></name> <operator>-</operator> <operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name><name>normal</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>*</operator><name>dotProduct</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Min</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>fminf</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>fminf</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>fminf</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Max</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>Vector3Barycenter</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>Vector3</name></type> <name>v0</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v1</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v2</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d00</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d01</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d11</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d20</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d21</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>denom</name> <init>= <expr><name>d00</name><operator>*</operator><name>d11</name> <operator>-</operator> <name>d01</name><operator>*</operator><name>d01</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>d11</name><operator>*</operator><name>d20</name> <operator>-</operator> <name>d01</name><operator>*</operator><name>d21</name><operator>)</operator><operator>/</operator><name>denom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>d00</name><operator>*</operator><name>d21</name> <operator>-</operator> <name>d01</name><operator>*</operator><name>d20</name><operator>)</operator><operator>/</operator><name>denom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name><name>result</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float3</name></type> <name>Vector3ToFloatV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float3</name></type> <name>buffer</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>RMDEF</name> <name>float</name></type> <name>MatrixDeterminant</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a00</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a01</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m1</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a02</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m2</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a03</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m3</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a10</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m4</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a11</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m5</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a12</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m6</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a13</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m7</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a20</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m8</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a21</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m9</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a22</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m10</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a23</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m11</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a30</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m12</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a31</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m13</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a32</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m14</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a33</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m15</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><name>a30</name><operator>*</operator><name>a21</name><operator>*</operator><name>a12</name><operator>*</operator><name>a03</name> <operator>-</operator> <name>a20</name><operator>*</operator><name>a31</name><operator>*</operator><name>a12</name><operator>*</operator><name>a03</name> <operator>-</operator> <name>a30</name><operator>*</operator><name>a11</name><operator>*</operator><name>a22</name><operator>*</operator><name>a03</name> <operator>+</operator> <name>a10</name><operator>*</operator><name>a31</name><operator>*</operator><name>a22</name><operator>*</operator><name>a03</name> <operator>+</operator>
<name>a20</name><operator>*</operator><name>a11</name><operator>*</operator><name>a32</name><operator>*</operator><name>a03</name> <operator>-</operator> <name>a10</name><operator>*</operator><name>a21</name><operator>*</operator><name>a32</name><operator>*</operator><name>a03</name> <operator>-</operator> <name>a30</name><operator>*</operator><name>a21</name><operator>*</operator><name>a02</name><operator>*</operator><name>a13</name> <operator>+</operator> <name>a20</name><operator>*</operator><name>a31</name><operator>*</operator><name>a02</name><operator>*</operator><name>a13</name> <operator>+</operator>
<name>a30</name><operator>*</operator><name>a01</name><operator>*</operator><name>a22</name><operator>*</operator><name>a13</name> <operator>-</operator> <name>a00</name><operator>*</operator><name>a31</name><operator>*</operator><name>a22</name><operator>*</operator><name>a13</name> <operator>-</operator> <name>a20</name><operator>*</operator><name>a01</name><operator>*</operator><name>a32</name><operator>*</operator><name>a13</name> <operator>+</operator> <name>a00</name><operator>*</operator><name>a21</name><operator>*</operator><name>a32</name><operator>*</operator><name>a13</name> <operator>+</operator>
<name>a30</name><operator>*</operator><name>a11</name><operator>*</operator><name>a02</name><operator>*</operator><name>a23</name> <operator>-</operator> <name>a10</name><operator>*</operator><name>a31</name><operator>*</operator><name>a02</name><operator>*</operator><name>a23</name> <operator>-</operator> <name>a30</name><operator>*</operator><name>a01</name><operator>*</operator><name>a12</name><operator>*</operator><name>a23</name> <operator>+</operator> <name>a00</name><operator>*</operator><name>a31</name><operator>*</operator><name>a12</name><operator>*</operator><name>a23</name> <operator>+</operator>
<name>a10</name><operator>*</operator><name>a01</name><operator>*</operator><name>a32</name><operator>*</operator><name>a23</name> <operator>-</operator> <name>a00</name><operator>*</operator><name>a11</name><operator>*</operator><name>a32</name><operator>*</operator><name>a23</name> <operator>-</operator> <name>a20</name><operator>*</operator><name>a11</name><operator>*</operator><name>a02</name><operator>*</operator><name>a33</name> <operator>+</operator> <name>a10</name><operator>*</operator><name>a21</name><operator>*</operator><name>a02</name><operator>*</operator><name>a33</name> <operator>+</operator>
<name>a20</name><operator>*</operator><name>a01</name><operator>*</operator><name>a12</name><operator>*</operator><name>a33</name> <operator>-</operator> <name>a00</name><operator>*</operator><name>a21</name><operator>*</operator><name>a12</name><operator>*</operator><name>a33</name> <operator>-</operator> <name>a10</name><operator>*</operator><name>a01</name><operator>*</operator><name>a22</name><operator>*</operator><name>a33</name> <operator>+</operator> <name>a00</name><operator>*</operator><name>a11</name><operator>*</operator><name>a22</name><operator>*</operator><name>a33</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>MatrixTrace</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><operator>(</operator><name><name>mat</name><operator>.</operator><name>m0</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m5</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m15</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixTranspose</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m4</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m8</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m5</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m9</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m6</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m10</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m7</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m11</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixInvert</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>a00</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a01</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m1</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a02</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m2</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a03</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m3</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a10</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m4</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a11</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m5</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a12</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m6</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a13</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m7</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a20</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m8</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a21</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m9</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a22</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m10</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a23</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m11</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a30</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m12</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a31</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m13</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a32</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m14</name></name></expr></init></decl>, <decl><type ref="prev"/><name>a33</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m15</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b00</name> <init>= <expr><name>a00</name><operator>*</operator><name>a11</name> <operator>-</operator> <name>a01</name><operator>*</operator><name>a10</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b01</name> <init>= <expr><name>a00</name><operator>*</operator><name>a12</name> <operator>-</operator> <name>a02</name><operator>*</operator><name>a10</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b02</name> <init>= <expr><name>a00</name><operator>*</operator><name>a13</name> <operator>-</operator> <name>a03</name><operator>*</operator><name>a10</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b03</name> <init>= <expr><name>a01</name><operator>*</operator><name>a12</name> <operator>-</operator> <name>a02</name><operator>*</operator><name>a11</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b04</name> <init>= <expr><name>a01</name><operator>*</operator><name>a13</name> <operator>-</operator> <name>a03</name><operator>*</operator><name>a11</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b05</name> <init>= <expr><name>a02</name><operator>*</operator><name>a13</name> <operator>-</operator> <name>a03</name><operator>*</operator><name>a12</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b06</name> <init>= <expr><name>a20</name><operator>*</operator><name>a31</name> <operator>-</operator> <name>a21</name><operator>*</operator><name>a30</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b07</name> <init>= <expr><name>a20</name><operator>*</operator><name>a32</name> <operator>-</operator> <name>a22</name><operator>*</operator><name>a30</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b08</name> <init>= <expr><name>a20</name><operator>*</operator><name>a33</name> <operator>-</operator> <name>a23</name><operator>*</operator><name>a30</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b09</name> <init>= <expr><name>a21</name><operator>*</operator><name>a32</name> <operator>-</operator> <name>a22</name><operator>*</operator><name>a31</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b10</name> <init>= <expr><name>a21</name><operator>*</operator><name>a33</name> <operator>-</operator> <name>a23</name><operator>*</operator><name>a31</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b11</name> <init>= <expr><name>a22</name><operator>*</operator><name>a33</name> <operator>-</operator> <name>a23</name><operator>*</operator><name>a32</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>invDet</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><operator>(</operator><name>b00</name><operator>*</operator><name>b11</name> <operator>-</operator> <name>b01</name><operator>*</operator><name>b10</name> <operator>+</operator> <name>b02</name><operator>*</operator><name>b09</name> <operator>+</operator> <name>b03</name><operator>*</operator><name>b08</name> <operator>-</operator> <name>b04</name><operator>*</operator><name>b07</name> <operator>+</operator> <name>b05</name><operator>*</operator><name>b06</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <operator>(</operator><name>a11</name><operator>*</operator><name>b11</name> <operator>-</operator> <name>a12</name><operator>*</operator><name>b10</name> <operator>+</operator> <name>a13</name><operator>*</operator><name>b09</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a01</name><operator>*</operator><name>b11</name> <operator>+</operator> <name>a02</name><operator>*</operator><name>b10</name> <operator>-</operator> <name>a03</name><operator>*</operator><name>b09</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <operator>(</operator><name>a31</name><operator>*</operator><name>b05</name> <operator>-</operator> <name>a32</name><operator>*</operator><name>b04</name> <operator>+</operator> <name>a33</name><operator>*</operator><name>b03</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a21</name><operator>*</operator><name>b05</name> <operator>+</operator> <name>a22</name><operator>*</operator><name>b04</name> <operator>-</operator> <name>a23</name><operator>*</operator><name>b03</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a10</name><operator>*</operator><name>b11</name> <operator>+</operator> <name>a12</name><operator>*</operator><name>b08</name> <operator>-</operator> <name>a13</name><operator>*</operator><name>b07</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <operator>(</operator><name>a00</name><operator>*</operator><name>b11</name> <operator>-</operator> <name>a02</name><operator>*</operator><name>b08</name> <operator>+</operator> <name>a03</name><operator>*</operator><name>b07</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a30</name><operator>*</operator><name>b05</name> <operator>+</operator> <name>a32</name><operator>*</operator><name>b02</name> <operator>-</operator> <name>a33</name><operator>*</operator><name>b01</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <operator>(</operator><name>a20</name><operator>*</operator><name>b05</name> <operator>-</operator> <name>a22</name><operator>*</operator><name>b02</name> <operator>+</operator> <name>a23</name><operator>*</operator><name>b01</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <operator>(</operator><name>a10</name><operator>*</operator><name>b10</name> <operator>-</operator> <name>a11</name><operator>*</operator><name>b08</name> <operator>+</operator> <name>a13</name><operator>*</operator><name>b06</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a00</name><operator>*</operator><name>b10</name> <operator>+</operator> <name>a01</name><operator>*</operator><name>b08</name> <operator>-</operator> <name>a03</name><operator>*</operator><name>b06</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <operator>(</operator><name>a30</name><operator>*</operator><name>b04</name> <operator>-</operator> <name>a31</name><operator>*</operator><name>b02</name> <operator>+</operator> <name>a33</name><operator>*</operator><name>b00</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a20</name><operator>*</operator><name>b04</name> <operator>+</operator> <name>a21</name><operator>*</operator><name>b02</name> <operator>-</operator> <name>a23</name><operator>*</operator><name>b00</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a10</name><operator>*</operator><name>b09</name> <operator>+</operator> <name>a11</name><operator>*</operator><name>b07</name> <operator>-</operator> <name>a12</name><operator>*</operator><name>b06</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <operator>(</operator><name>a00</name><operator>*</operator><name>b09</name> <operator>-</operator> <name>a01</name><operator>*</operator><name>b07</name> <operator>+</operator> <name>a02</name><operator>*</operator><name>b06</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>a30</name><operator>*</operator><name>b03</name> <operator>+</operator> <name>a31</name><operator>*</operator><name>b01</name> <operator>-</operator> <name>a32</name><operator>*</operator><name>b00</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <operator>(</operator><name>a20</name><operator>*</operator><name>b03</name> <operator>-</operator> <name>a21</name><operator>*</operator><name>b01</name> <operator>+</operator> <name>a22</name><operator>*</operator><name>b00</name><operator>)</operator><operator>*</operator><name>invDet</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixNormalize</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>det</name> <init>= <expr><call><name>MatrixDeterminant</name><argument_list>(<argument><expr><name>mat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m0</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m1</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m3</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m4</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m5</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m6</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m7</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m8</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m9</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m10</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m11</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m12</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m13</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m14</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m15</name></name><operator>/</operator><name>det</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixIdentity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixAdd</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m0</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m1</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m2</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m3</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m4</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m4</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m5</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m5</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m6</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m6</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m7</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m7</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m8</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m8</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m9</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m9</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m10</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m11</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m12</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m13</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m14</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m15</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixSubtract</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m0</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m1</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m2</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m3</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m4</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m4</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m5</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m5</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m6</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m6</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m7</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m7</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m8</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m8</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m9</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m9</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m10</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m10</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m11</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m11</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m12</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m13</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m14</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m15</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixTranslate</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><name>x</name></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><name>y</name></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><name>z</name></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixRotate</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>axis</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>axis</name><operator>.</operator><name>y</name></name></expr></init></decl>, <decl><type ref="prev"/><name>z</name> <init>= <expr><name><name>axis</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>length</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>y</name> <operator>+</operator> <name>z</name><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>!=</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>length</name> <operator>!=</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1.0f</literal><operator>/</operator><name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>*=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>*=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>*=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sinres</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cosres</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <name>cosres</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><name>t</name> <operator>+</operator> <name>cosres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name>y</name><operator>*</operator><name>x</name><operator>*</operator><name>t</name> <operator>+</operator> <name>z</name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name>z</name><operator>*</operator><name>x</name><operator>*</operator><name>t</name> <operator>-</operator> <name>y</name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name>x</name><operator>*</operator><name>y</name><operator>*</operator><name>t</name> <operator>-</operator> <name>z</name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name>y</name><operator>*</operator><name>y</name><operator>*</operator><name>t</name> <operator>+</operator> <name>cosres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name>z</name><operator>*</operator><name>y</name><operator>*</operator><name>t</name> <operator>+</operator> <name>x</name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name>x</name><operator>*</operator><name>z</name><operator>*</operator><name>t</name> <operator>+</operator> <name>y</name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name>y</name><operator>*</operator><name>z</name><operator>*</operator><name>t</name> <operator>-</operator> <name>x</name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name>z</name><operator>*</operator><name>z</name><operator>*</operator><name>t</name> <operator>+</operator> <name>cosres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixRotateXYZ</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>ang</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosz</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><operator>-</operator><name><name>ang</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinz</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><operator>-</operator><name><name>ang</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cosy</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><operator>-</operator><name><name>ang</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>siny</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><operator>-</operator><name><name>ang</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cosx</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><operator>-</operator><name><name>ang</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinx</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><operator>-</operator><name><name>ang</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name>cosz</name> <operator>*</operator> <name>cosy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <operator>(</operator><name>cosz</name> <operator>*</operator> <name>siny</name> <operator>*</operator> <name>sinx</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>sinz</name> <operator>*</operator> <name>cosx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <operator>(</operator><name>cosz</name> <operator>*</operator> <name>siny</name> <operator>*</operator> <name>cosx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sinz</name> <operator>*</operator> <name>sinx</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name>sinz</name> <operator>*</operator> <name>cosy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <operator>(</operator><name>sinz</name> <operator>*</operator> <name>siny</name> <operator>*</operator> <name>sinx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>cosz</name> <operator>*</operator> <name>cosx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <operator>(</operator><name>sinz</name> <operator>*</operator> <name>siny</name> <operator>*</operator> <name>cosx</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>cosz</name> <operator>*</operator> <name>sinx</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <operator>-</operator><name>siny</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name>cosy</name> <operator>*</operator> <name>sinx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name><operator>=</operator> <name>cosy</name> <operator>*</operator> <name>cosx</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixRotateX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosres</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinres</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name>cosres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <operator>-</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name>cosres</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixRotateY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosres</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinres</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name>cosres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <operator>-</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name>cosres</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixRotateZ</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosres</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinres</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name>cosres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <operator>-</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name>cosres</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixScale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><name>x</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><name>y</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><name>z</name></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixMultiply</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m0</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m0</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m1</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m4</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m2</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m8</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m3</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m0</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m1</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m1</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m5</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m2</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m9</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m3</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m0</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m2</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m1</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m6</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m2</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m3</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m0</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m3</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m1</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m7</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m2</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m3</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m4</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m0</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m5</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m4</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m6</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m8</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m7</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m4</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m1</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m5</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m5</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m6</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m9</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m7</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m4</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m2</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m5</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m6</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m6</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m7</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m4</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m3</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m5</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m7</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m6</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m7</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m8</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m0</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m9</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m4</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m10</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m8</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m11</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m8</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m1</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m9</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m5</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m10</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m9</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m11</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m8</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m2</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m9</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m6</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m10</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m11</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m8</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m3</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m9</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m7</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m10</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m11</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m12</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m0</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m13</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m4</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m14</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m8</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m15</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m12</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m1</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m13</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m5</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m14</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m9</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m15</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m12</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m2</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m13</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m6</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m14</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m15</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>m12</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m3</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m13</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m7</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m14</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name><name>left</name><operator>.</operator><name>m15</name></name><operator>*</operator><name><name>right</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixFrustum</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>near</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>far</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rl</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>right</name> <operator>-</operator> <name>left</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tb</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>top</name> <operator>-</operator> <name>bottom</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fn</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>far</name> <operator>-</operator> <name>near</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>near</name><operator>*</operator><literal type="number">2.0f</literal><operator>)</operator><operator>/</operator><name>rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>near</name><operator>*</operator><literal type="number">2.0f</literal><operator>)</operator><operator>/</operator><name>tb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>right</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>left</name><operator>)</operator><operator>/</operator><name>rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>top</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>bottom</name><operator>)</operator><operator>/</operator><name>tb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>far</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>near</name><operator>)</operator><operator>/</operator><name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>far</name><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><name>near</name><operator>*</operator><literal type="number">2.0f</literal><operator>)</operator><operator>/</operator><name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixPerspective</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>fovy</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>aspect</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>near</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>far</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>top</name> <init>= <expr><name>near</name><operator>*</operator><call><name>tan</name><argument_list>(<argument><expr><name>fovy</name><operator>*</operator><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>right</name> <init>= <expr><name>top</name><operator>*</operator><name>aspect</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><call><name>MatrixFrustum</name><argument_list>(<argument><expr><operator>-</operator><name>right</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><operator>-</operator><name>top</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>near</name></expr></argument>, <argument><expr><name>far</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixOrtho</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>near</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>far</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rl</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>right</name> <operator>-</operator> <name>left</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tb</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>top</name> <operator>-</operator> <name>bottom</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fn</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>far</name> <operator>-</operator> <name>near</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <literal type="number">2.0f</literal><operator>/</operator><name>rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <literal type="number">2.0f</literal><operator>/</operator><name>tb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2.0f</literal><operator>/</operator><name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>left</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>right</name><operator>)</operator><operator>/</operator><name>rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>top</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>bottom</name><operator>)</operator><operator>/</operator><name>tb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>far</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>near</name><operator>)</operator><operator>/</operator><name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>MatrixLookAt</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>eye</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>up</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>z</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>eye</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>x</name> <init>= <expr><call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>up</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>y</name> <init>= <expr><call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>z</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>z</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>z</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>eye</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>eye</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>eye</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>MatrixInvert</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float16</name></type> <name>MatrixToFloatV</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float16</name></type> <name>buffer</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m4</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m5</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m6</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m7</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m8</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m9</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m10</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m11</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m12</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m13</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m14</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m15</name></name></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionIdentity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>float</name></type> <name>QuaternionLength</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>sqrt</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionNormalize</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>ilength</name></decl>;</decl_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>QuaternionLength</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ilength</name> <operator>=</operator> <literal type="number">1.0f</literal><operator>/</operator><name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name>ilength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name>ilength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>*</operator><name>ilength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name>ilength</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionInvert</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>length</name> <init>= <expr><call><name>QuaternionLength</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lengthSq</name> <init>= <expr><name>length</name><operator>*</operator><name>length</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lengthSq</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>i</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><name>lengthSq</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>*=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>*=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>*=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionMultiply</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>Quaternion</name></type> <name>q2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qax</name> <init>= <expr><name><name>q1</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>qay</name> <init>= <expr><name><name>q1</name><operator>.</operator><name>y</name></name></expr></init></decl>, <decl><type ref="prev"/><name>qaz</name> <init>= <expr><name><name>q1</name><operator>.</operator><name>z</name></name></expr></init></decl>, <decl><type ref="prev"/><name>qaw</name> <init>= <expr><name><name>q1</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qbx</name> <init>= <expr><name><name>q2</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>qby</name> <init>= <expr><name><name>q2</name><operator>.</operator><name>y</name></name></expr></init></decl>, <decl><type ref="prev"/><name>qbz</name> <init>= <expr><name><name>q2</name><operator>.</operator><name>z</name></name></expr></init></decl>, <decl><type ref="prev"/><name>qbw</name> <init>= <expr><name><name>q2</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>qax</name><operator>*</operator><name>qbw</name> <operator>+</operator> <name>qaw</name><operator>*</operator><name>qbx</name> <operator>+</operator> <name>qay</name><operator>*</operator><name>qbz</name> <operator>-</operator> <name>qaz</name><operator>*</operator><name>qby</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>qay</name><operator>*</operator><name>qbw</name> <operator>+</operator> <name>qaw</name><operator>*</operator><name>qby</name> <operator>+</operator> <name>qaz</name><operator>*</operator><name>qbx</name> <operator>-</operator> <name>qax</name><operator>*</operator><name>qbz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>qaz</name><operator>*</operator><name>qbw</name> <operator>+</operator> <name>qaw</name><operator>*</operator><name>qbz</name> <operator>+</operator> <name>qax</name><operator>*</operator><name>qby</name> <operator>-</operator> <name>qay</name><operator>*</operator><name>qbx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>qaw</name><operator>*</operator><name>qbw</name> <operator>-</operator> <name>qax</name><operator>*</operator><name>qbx</name> <operator>-</operator> <name>qay</name><operator>*</operator><name>qby</name> <operator>-</operator> <name>qaz</name><operator>*</operator><name>qbz</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionLerp</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>Quaternion</name></type> <name>q2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>q1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>q2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>q1</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>q1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>q2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>q1</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>q1</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>q2</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>q1</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>q1</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name>amount</name><operator>*</operator><operator>(</operator><name><name>q2</name><operator>.</operator><name>w</name></name> <operator>-</operator> <name><name>q1</name><operator>.</operator><name>w</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionNlerp</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>Quaternion</name></type> <name>q2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><call><name>QuaternionLerp</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>QuaternionNormalize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionSlerp</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>Quaternion</name></type> <name>q2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosHalfTheta</name> <init>= <expr><name><name>q1</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>q1</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>q1</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>q2</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>q1</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q2</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>cosHalfTheta</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>q1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cosHalfTheta</name> <operator>&gt;</operator> <literal type="number">0.95f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>QuaternionNlerp</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>halfTheta</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><name>cosHalfTheta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinHalfTheta</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>cosHalfTheta</name><operator>*</operator><name>cosHalfTheta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>sinHalfTheta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.001f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>z</name></name><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>z</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>w</name></name><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>w</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ratioA</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>amount</name><operator>)</operator><operator>*</operator><name>halfTheta</name></expr></argument>)</argument_list></call><operator>/</operator><name>sinHalfTheta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ratioB</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>amount</name><operator>*</operator><name>halfTheta</name></expr></argument>)</argument_list></call><operator>/</operator><name>sinHalfTheta</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>x</name></name><operator>*</operator><name>ratioA</name> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>x</name></name><operator>*</operator><name>ratioB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>y</name></name><operator>*</operator><name>ratioA</name> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>y</name></name><operator>*</operator><name>ratioB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>z</name></name><operator>*</operator><name>ratioA</name> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>z</name></name><operator>*</operator><name>ratioB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>.</operator><name>w</name></name><operator>*</operator><name>ratioA</name> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>w</name></name><operator>*</operator><name>ratioB</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionFromVector3ToVector3</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cos2Theta</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>cross</name> <init>= <expr><call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>cross</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>cross</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>cross</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>+</operator> <name>cos2Theta</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>QuaternionNormalize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionFromMatrix</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>trace</name> <init>= <expr><call><name>MatrixTrace</name><argument_list>(<argument><expr><name>mat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trace</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>trace</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>invS</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>s</name><operator>*</operator><literal type="number">0.25f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m6</name></name> <operator>-</operator> <name><name>mat</name><operator>.</operator><name>m9</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m8</name></name> <operator>-</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m1</name></name> <operator>-</operator> <name><name>mat</name><operator>.</operator><name>m4</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>m00</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>m11</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m5</name></name></expr></init></decl>, <decl><type ref="prev"/><name>m22</name> <init>= <expr><name><name>mat</name><operator>.</operator><name>m10</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m00</name> <operator>&gt;</operator> <name>m11</name> <operator>&amp;&amp;</operator> <name>m00</name> <operator>&gt;</operator> <name>m22</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>+</operator> <name>m00</name> <operator>-</operator> <name>m11</name> <operator>-</operator> <name>m22</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>invS</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m6</name></name> <operator>-</operator> <name><name>mat</name><operator>.</operator><name>m9</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>s</name><operator>*</operator><literal type="number">0.25f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m4</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m1</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m8</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>m11</name> <operator>&gt;</operator> <name>m22</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>+</operator> <name>m11</name> <operator>-</operator> <name>m00</name> <operator>-</operator> <name>m22</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>invS</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m8</name></name> <operator>-</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m4</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m1</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>s</name><operator>*</operator><literal type="number">0.25f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m9</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m6</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>+</operator> <name>m22</name> <operator>-</operator> <name>m00</name> <operator>-</operator> <name>m11</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>invS</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m1</name></name> <operator>-</operator> <name><name>mat</name><operator>.</operator><name>m4</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m8</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>mat</name><operator>.</operator><name>m9</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m6</name></name><operator>)</operator><operator>*</operator><name>invS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>s</name><operator>*</operator><literal type="number">0.25f</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Matrix</name></type> <name>QuaternionToMatrix</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>q</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>q</name><operator>.</operator><name>y</name></name></expr></init></decl>, <decl><type ref="prev"/><name>z</name> <init>= <expr><name><name>q</name><operator>.</operator><name>z</name></name></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>q</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name>x</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y2</name> <init>= <expr><name>y</name> <operator>+</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z2</name> <init>= <expr><name>z</name> <operator>+</operator> <name>z</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>length</name> <init>= <expr><call><name>QuaternionLength</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lengthSquared</name> <init>= <expr><name>length</name><operator>*</operator><name>length</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xx</name> <init>= <expr><name>x</name><operator>*</operator><name>x2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xy</name> <init>= <expr><name>x</name><operator>*</operator><name>y2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xz</name> <init>= <expr><name>x</name><operator>*</operator><name>z2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>yy</name> <init>= <expr><name>y</name><operator>*</operator><name>y2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>yz</name> <init>= <expr><name>y</name><operator>*</operator><name>z2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>zz</name> <init>= <expr><name>z</name><operator>*</operator><name>z2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>wx</name> <init>= <expr><name>w</name><operator>*</operator><name>x2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wy</name> <init>= <expr><name>w</name><operator>*</operator><name>y2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wz</name> <init>= <expr><name>w</name><operator>*</operator><name>z2</name><operator>/</operator><name>lengthSquared</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name>yy</name> <operator>+</operator> <name>zz</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name>xy</name> <operator>-</operator> <name>wz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name>xz</name> <operator>+</operator> <name>wy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name>xy</name> <operator>+</operator> <name>wz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name>xx</name> <operator>+</operator> <name>zz</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name>yz</name> <operator>-</operator> <name>wx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name>xz</name> <operator>-</operator> <name>wy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name>yz</name> <operator>+</operator> <name>wx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name>xx</name> <operator>+</operator> <name>yy</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionFromAxisAngle</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Vector3Length</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>angle</name> <operator>*=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>axis</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sinres</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cosres</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>axis</name><operator>.</operator><name>x</name></name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>axis</name><operator>.</operator><name>y</name></name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>axis</name><operator>.</operator><name>z</name></name><operator>*</operator><name>sinres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>cosres</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>QuaternionNormalize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>void</name></type> <name>QuaternionToAxisAngle</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>outAxis</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>outAngle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>QuaternionNormalize</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>resAxis</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>resAngle</name> <init>= <expr><literal type="number">2.0f</literal><operator>*</operator><call><name>acosf</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>den</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>den</name> <operator>&gt;</operator> <literal type="number">0.0001f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>resAxis</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>q</name><operator>.</operator><name>x</name></name><operator>/</operator><name>den</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resAxis</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>/</operator><name>den</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resAxis</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>/</operator><name>den</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name><name>resAxis</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outAxis</name> <operator>=</operator> <name>resAxis</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outAngle</name> <operator>=</operator> <name>resAngle</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionFromEuler</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>roll</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yaw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>q</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>roll</name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>roll</name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y0</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>pitch</name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y1</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>pitch</name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z0</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>yaw</name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z1</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>yaw</name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x1</name><operator>*</operator><name>y0</name><operator>*</operator><name>z0</name> <operator>-</operator> <name>x0</name><operator>*</operator><name>y1</name><operator>*</operator><name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>x0</name><operator>*</operator><name>y1</name><operator>*</operator><name>z0</name> <operator>+</operator> <name>x1</name><operator>*</operator><name>y0</name><operator>*</operator><name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>x0</name><operator>*</operator><name>y0</name><operator>*</operator><name>z1</name> <operator>-</operator> <name>x1</name><operator>*</operator><name>y1</name><operator>*</operator><name>z0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>x0</name><operator>*</operator><name>y0</name><operator>*</operator><name>z0</name> <operator>+</operator> <name>x1</name><operator>*</operator><name>y1</name><operator>*</operator><name>z1</name></expr>;</expr_stmt>

<return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RMDEF</name> <name>Vector3</name></type> <name>QuaternionToEuler</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call><operator>*</operator><name>RAD2DEG</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>y0</name> <init>= <expr><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <ternary><condition><expr><name>y0</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><name>y0</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <ternary><condition><expr><name>y0</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0f</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0f</literal></expr> </then><else>: <expr><name>y0</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>asinf</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call><operator>*</operator><name>RAD2DEG</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>z0</name> <init>= <expr><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>w</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z1</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name><name>q</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>q</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name>z0</name></expr></argument>, <argument><expr><name>z1</name></expr></argument>)</argument_list></call><operator>*</operator><name>RAD2DEG</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RMDEF</name> <name>Quaternion</name></type> <name>QuaternionTransform</name><parameter_list>(<parameter><decl><type><name>Quaternion</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m0</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m4</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m8</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m12</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m1</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m5</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m9</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m13</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m2</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m6</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m10</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m14</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>mat</name><operator>.</operator><name>m3</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m7</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m11</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>mat</name><operator>.</operator><name>m15</name></name><operator>*</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
