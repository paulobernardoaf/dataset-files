<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\rnet.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RNET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include> 







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOGDICAPMASKS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOVIRTUALKEYCODES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWINMESSAGES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWINSTYLES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSYSMETRICS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMENUS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOICONS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOKEYSTATES</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSYSCOMMANDS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORASTEROPS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSHOWWINDOW</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEMRESOURCE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOATOM</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCLIPBOARD</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCOLOR</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCTLMGR</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODRAWTEXT</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOGDI</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOKERNEL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOUSER</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONLS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMB</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMEMMGR</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMETAFILE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMINMAX</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMSG</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOOPENFILE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSCROLL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSERVICE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSOUND</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTEXTMETRIC</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWH</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWINOFFSETS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCOMM</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOKANJI</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOHELP</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOPROFILER</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEFERWINDOWPOS</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMCX</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMNOSOUND</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RNET_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNET_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RNET_CALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNET_CALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>calloc(n,sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RNET_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNET_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RESULT_SUCCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RESULT_FAILURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT_FAILURE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>htonll</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htonll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntohll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htonll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((uint64) htonl(x)) &lt;&lt; 32) + htonl(x &gt;&gt; 32))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntohll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((uint64) ntohl(x)) &lt;&lt; 32) + ntohl(x &gt;&gt; 32))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_W32_SOCKETS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPTOS_LOWDELAY</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SOCKET</name></cpp:macro> <cpp:value>~(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USE_W32_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>closesocket</name></cpp:macro> <cpp:value>close</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SOCKET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_ERROR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USE_W32_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINTR</name></cpp:macro> <cpp:value>WSAEINTR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_MAX_SET_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_MAX_QUEUE_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_MAX_SOCK_OPTS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_MAX_UDPCHANNELS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_MAX_UDPADDRESSES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_IPV4_ADDRSTRLEN</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_IPV6_ADDRSTRLEN</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_TYPE_ANY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_TYPE_IPV4</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_TYPE_IPV6</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_MAXHOST</name></cpp:macro> <cpp:value>1025</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_MAXSERV</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_ANY</name></cpp:macro> <cpp:value>(unsigned long)0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_LOOPBACK</name></cpp:macro> <cpp:value>0x7f000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_BROADCAST</name></cpp:macro> <cpp:value>(unsigned long)0xffffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_NONE</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_INFO_DEFAULT</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_INFO_NOFQDN</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_INFO_NUMERICHOST</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_INFO_NAMEREQD</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_INFO_NUMERICSERV</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_INFO_DGRAM</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_PASSIVE</name></cpp:macro> <cpp:value>(0x00000001)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_CANONNAME</name></cpp:macro> <cpp:value>(0x00000002)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_NUMERICHOST</name></cpp:macro> <cpp:value>(0x00000004)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_NUMERICSERV</name></cpp:macro> <cpp:value>(0x00000008)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_DNS_ONLY</name></cpp:macro> <cpp:value>(0x00000010)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_ALL</name></cpp:macro> <cpp:value>(0x00000100)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_ADDRCONFIG</name></cpp:macro> <cpp:value>(0x00000400)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_V4MAPPED</name></cpp:macro> <cpp:value>(0x00000800)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_NON_AUTHORITATIVE</name></cpp:macro> <cpp:value>(0x00004000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_SECURE</name></cpp:macro> <cpp:value>(0x00008000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_RETURN_PREFERRED_NAMES</name></cpp:macro> <cpp:value>(0x00010000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_FQDN</name></cpp:macro> <cpp:value>(0x00020000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_FILESERVER</name></cpp:macro> <cpp:value>(0x00040000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_DISABLE_IDN_ENCODING</name></cpp:macro> <cpp:value>(0x00080000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_EXTENDED</name></cpp:macro> <cpp:value>(0x80000000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_INFO_RESOLUTION_HANDLE</name></cpp:macro> <cpp:value>(0x40000000)</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><enum>enum <block>{ <decl><name>false</name></decl>, <decl><name>true</name></decl> }</block></enum></type> <name>bool</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{
<decl><name>SOCKET_TCP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>SOCKET_UDP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> 
}</block></enum></type> <name>SocketType</name>;</typedef>


<typedef>typedef <type><name>uint32_t</name></type> <name>SocketChannel</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_AddressInformation</name></name> <modifier>*</modifier></type><name>AddressInformation</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_SocketAddress</name></name> <modifier>*</modifier></type><name>SocketAddress</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_SocketAddressIPv4</name></name> <modifier>*</modifier></type><name>SocketAddressIPv4</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_SocketAddressIPv6</name></name> <modifier>*</modifier></type><name>SocketAddressIPv6</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_SocketAddressStorage</name></name> <modifier>*</modifier></type><name>SocketAddressStorage</name>;</typedef>


<typedef>typedef <type><struct>struct <name>IPAddress</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>host</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt> 
}</block></struct></type> <name>IPAddress</name>;</typedef>

<typedef>typedef <type><struct>struct <name>UDPChannel</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>numbound</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IPAddress</name></type> <name><name>address</name><index>[<expr><name>SOCKET_MAX_UDPADDRESSES</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>UDPChannel</name>;</typedef>


<typedef>typedef <type><struct>struct <name>SocketOpt</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>valueLen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SocketOpt</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Socket</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ready</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isServer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SocketChannel</name></type> <name>channel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SocketType</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>isIPv6</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SocketAddressIPv4</name></type> <name>addripv4</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SocketAddressIPv6</name></type> <name>addripv6</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>UDPChannel</name></name></type> <name><name>binding</name><index>[<expr><name>SOCKET_MAX_UDPCHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>Socket</name>;</typedef>


<typedef>typedef <type><struct>struct <name>SocketConfig</name> <block>{
<decl_stmt><decl><type><name>SocketType</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>server</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>nonblocking</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>backlog_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SocketOpt</name></type> <name><name>sockopts</name><index>[<expr><name>SOCKET_MAX_SOCK_OPTS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SocketConfig</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SocketDataPacket</name> <block>{
<decl_stmt><decl><type><name>IPAddress</name></type> <name>address</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SocketDataPacket</name>;</typedef>


<typedef>typedef <type><struct>struct <name>SocketResult</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Socket</name> <modifier>*</modifier></type><name>socket</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SocketResult</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SocketSet</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>numsockets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxsockets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Socket</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sockets</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SocketSet</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Packet</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Packet</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function_decl><type><name>bool</name></type> <name>InitNetworkDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CloseNetworkDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ResolveIP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outhost</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outserv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ResolveHost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addressType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AddressInformation</name> <modifier>*</modifier></type><name>outAddr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>GetAddressFamily</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>GetAddressSocketType</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>GetAddressProtocol</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>GetAddressCanonName</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>GetAddressHostAndPort</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outhost</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outport</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>AddressInformation</name></type> <name>LoadAddress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadAddress</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name> <modifier>*</modifier></type><name>addressInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>AddressInformation</name> <modifier>*</modifier></type><name>LoadAddressList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>SocketCreate</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SocketBind</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SocketListen</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SocketConnect</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Socket</name> <modifier>*</modifier></type><name>SocketAccept</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>SocketSend</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>SocketReceive</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SocketAddressStorage</name></type> <name>SocketGetPeerAddress</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>GetSocketAddressHost</name><parameter_list>(<parameter><decl><type><name>SocketAddressStorage</name></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>GetSocketAddressPort</name><parameter_list>(<parameter><decl><type><name>SocketAddressStorage</name></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SocketClose</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>SocketSetChannel</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IPAddress</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SocketUnsetChannel</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>SocketDataPacket</name> <modifier>*</modifier></type><name>AllocPacket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ResizePacket</name><parameter_list>(<parameter><decl><type><name>SocketDataPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FreePacket</name><parameter_list>(<parameter><decl><type><name>SocketDataPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SocketDataPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>AllocPacketList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FreePacketList</name><parameter_list>(<parameter><decl><type><name>SocketDataPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>packets</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>Socket</name> <modifier>*</modifier></type><name>LoadSocket</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadSocket</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier><modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>LoadSocketResult</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadSocketResult</name><parameter_list>(<parameter><decl><type><name>SocketResult</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>LoadSocketSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnloadSocketSet</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>sockset</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>IsSocketReady</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsSocketConnected</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AddSocket</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>RemoveSocket</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>CheckSockets</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>PacketSend</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PacketReceive</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PacketWrite8</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PacketWrite16</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PacketWrite32</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PacketWrite64</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint16_t</name></type> <name>PacketRead8</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint16_t</name></type> <name>PacketRead16</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>PacketRead32</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>PacketRead64</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RNET_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_DEBUG_ENABLED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_TRACELOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TraceLog(level, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_TRACELOG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOGD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TraceLog(LOG_DEBUG, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOGD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOGD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<typedef>typedef <type><struct>struct <name>_SocketAddress</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>address</name></decl>;</decl_stmt>
}</block></struct></type> <name>_SocketAddress</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_SocketAddressIPv4</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>address</name></decl>;</decl_stmt>
}</block></struct></type> <name>_SocketAddressIPv4</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_SocketAddressIPv6</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>address</name></decl>;</decl_stmt>
}</block></struct></type> <name>_SocketAddressIPv6</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_SocketAddressStorage</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>address</name></decl>;</decl_stmt>
}</block></struct></type> <name>_SocketAddressStorage</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_AddressInformation</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>addr</name></decl>;</decl_stmt>
}</block></struct></type> <name>_AddressInformation</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PrintSocket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SocketAddressToString</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsIPv4Address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsIPv6Address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GetSocketPortPtr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GetSocketAddressPtr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsSocketValid</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SocketSetLastError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SocketGetLastError</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>SocketGetLastErrorString</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>SocketErrorCodeToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetDefaults</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>InitSocket</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSocket</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>outresult</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetBlocking</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetNonBlocking</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetOptions</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SocketSetHints</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintSocket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>family</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_UNSPEC</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tFamily: Unspecified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tFamily: AF_INET (IPv4)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\t- IPv4 address %s"</literal></expr></argument>, <argument><expr><call><name>SocketAddressToString</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tFamily: AF_INET6 (IPv6)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\t- IPv6 address %s"</literal></expr></argument>, <argument><expr><call><name>SocketAddressToString</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AF_NETBIOS</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tFamily: AF_NETBIOS (NetBIOS)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tFamily: Other %ld"</literal></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tSocket type:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>socktype</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- Unspecified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SOCK_STREAM</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- SOCK_STREAM (stream)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SOCK_DGRAM</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- SOCK_DGRAM (datagram)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SOCK_RAW</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- SOCK_RAW (raw)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SOCK_RDM</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- SOCK_RDM (reliable message datagram)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SOCK_SEQPACKET</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- SOCK_SEQPACKET (pseudo-stream packet)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- Other %ld"</literal></expr></argument>, <argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tProtocol:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>protocol</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- Unspecified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- IPPROTO_TCP (TCP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>IPPROTO_UDP</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- IPPROTO_UDP (UDP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t- Other %ld"</literal></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SocketAddressToString</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sockaddr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sockaddr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>sockaddr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>sockaddr</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>


</block_content>}</block>
<break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>


</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsIPv4Address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsIPv6Address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GetSocketPortPtr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GetSocketAddressPtr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsSocketValid</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>SocketSetLastError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WSASetLastError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>SocketGetLastError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>errno</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>SocketGetLastErrorString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>SocketErrorCodeToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>gaiStrErrorBuffer</name><index>[<expr><name>GAI_STRERROR_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><name>gaiStrErrorBuffer</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>gaiStrErrorBuffer</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetDefaults</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>backlog_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>backlog_size</name></name> <operator>=</operator> <name>SOCKET_MAX_QUEUE_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>InitSocket</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sckt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>sckt</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SOCKET_TCP</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sckt</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>sckt</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>SOCKET_UDP</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sckt</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>sckt</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid socket type specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>IsSocketValid</name><argument_list>(<argument><expr><name>sckt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSocket</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>outresult</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>addrstatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_FAILURE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>








<expr_stmt><expr><call><name>SocketSetHints</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>addrstatus</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, 
<argument><expr><name><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>res</name></expr></argument> 
)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>addrstatus</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to get resolve host %s:%s: %s"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>SocketGetLastErrorString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>success</name> <operator>=</operator> <name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hoststr</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Successfully resolved host %s:%s"</literal></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <name>res</name></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>it</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitSocket</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocketSetOptions</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>success</name> <operator>=</operator> <name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsSocketValid</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>success</name> <operator>=</operator> <name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>isServer</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name> <operator>=</operator> <operator>(</operator>struct <name>_SocketAddressIPv4</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>isIPv6</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hoststr</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>client_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>client_len</name></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hoststr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>portstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Socket address set to %s:%s"</literal></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name></name> <operator>=</operator> <operator>(</operator>struct <name>_SocketAddressIPv6</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>isIPv6</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hoststr</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>client_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>outresult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>client_len</name></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hoststr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>portstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Socket address set to %s:%s"</literal></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetBlocking</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctlsocket</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket was already in blocking mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>^</operator> <name>O_NONBLOCK</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetNonBlocking</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mode</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctlsocket</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket was already in non-blocking mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>SocketSetOptions</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SOCKET_MAX_SOCK_OPTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>SocketOpt</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>sockopts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>valueLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>SocketSetHints</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>config</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hints</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsIPv4Address</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>|=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsIPv6Address</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>|=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator> <operator>||</operator> <name><name>config</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>InitNetworkDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WORD</name></type> <name>wVersionRequested</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wVersionRequested</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>WSAStartup</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WinSock failed to initialise."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WinSock initialised."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name><name>wsaData</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>HIBYTE</name><argument_list>(<argument><expr><name><name>wsaData</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WinSock failed to initialise."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>CloseNetworkDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>














<function><type><name>void</name></type> <name>ResolveIP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt> 


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>hints</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, 
<argument><expr><name>port</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>res</name></expr></argument> 
)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to get resolve host %s:%s: %s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Resolving... %s::%s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<switch>switch <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name><operator>)</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NI_MAXHOST</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>NI_MAXSERV</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>





</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to resolve ip %s: %s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><call><name>SocketGetLastErrorString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Successfully resolved %s::%s to %s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>ResolveHost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addressType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AddressInformation</name> <modifier>*</modifier></type><name>outAddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>address</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>address</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>service</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>service</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>addressType</name> <operator>==</operator> <name>AF_INET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>addressType</name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>addressType</name> <operator>==</operator> <name>AF_UNSPEC</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>hints</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>addressType</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_addrlen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_addrlen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_canonname</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_canonname</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_addr</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_addr</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_next</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_next</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>address</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_PASSIVE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>|=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Resolving host..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>address</name></expr></argument>, 
<argument><expr><name>service</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>res</name></expr></argument> 
)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to get resolve host: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Successfully resolved host %s:%s"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>iterator</name> <operator>=</operator> <name>res</name></expr>;</init> <condition><expr><name>iterator</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iterator</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Error, no addresses found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>outAddr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>outAddr</name> <operator>=</operator> <operator>(</operator><name>AddressInformation</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AddressInformation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>outAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>LoadAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>outAddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Error, failed to dynamically allocate memory for the address list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>iterator</name> <operator>=</operator> <name>res</name></expr>;</init> <condition><expr><name>iterator</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iterator</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>ai_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>ai_family</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_addrlen</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_addr</name></name> <operator>=</operator> <operator>*</operator><name><name>iterator</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NET_DEBUG_ENABLED</name></expr></cpp:if>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"GetAddressInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\tFlags: 0x%x"</literal></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>ai_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Length of this sockaddr: %d"</literal></expr></argument>, <argument><expr><name><name>outAddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Canonical name: %s"</literal></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>bool</name></type> <name>SocketCreate</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>config</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>success</name> <operator>=</operator> <name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocketSetDefaults</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Configuration Error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CreateSocket</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>nonblocking</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SocketSetNonBlocking</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SocketSetBlocking</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>SocketBind</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_FAILURE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sock_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsSocketValid</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition>
<block>{<block_content>
<macro><name>TRACELOG</name><argument_list>(<argument>LOG_WARNING</argument>, <argument>Cannot bind to socket marked as \<literal type="string">"Client\" in SocketConfig."</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>isIPv6</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sock_addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv6</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sock_addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sock_addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sock_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sock_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Successfully bound socket."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>sock_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sock_addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sock_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Couldn't get socket address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sock_addr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name> <operator>=</operator> <operator>(</operator>struct <name>_SocketAddressIPv4</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>SocketListen</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_FAILURE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsSocketValid</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot listen on socket marked as \"Client\" in SocketConfig."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>backlog_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Started listening on socket..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot listen on socket marked as \"UDP\" (datagram) in SocketConfig."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>SocketConnect</name><parameter_list>(<parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_FAILURE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot connect to socket marked as \"Server\" in SocketConfig."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsIPv4Address</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>ip4addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ip4addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hport</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hport</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip4addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>hport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>connect_result</name> <init>= <expr><call><name>connect</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ip4addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip4addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>connect_result</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WSAEWOULDBLOCK</name></expr>:</case> <expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Successfully connected to socket."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsIPv6Address</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>ip6addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ip6addr</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hport</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hport</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip6addr</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>hport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>connect_result</name> <init>= <expr><call><name>connect</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ip6addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip6addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>connect_result</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WSAEWOULDBLOCK</name></expr>:</case> <expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Successfully connected to socket."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RESULT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>SocketClose</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>SocketAddressStorage</name></type> <name>SocketGetPeerAddress</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>GetSocketAddressHost</name><parameter_list>(<parameter><decl><type><name>SocketAddressStorage</name></type> <name>storage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>storage</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>SocketAddressToString</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><name>storage</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>short</name></type> <name>GetSocketAddressPort</name><parameter_list>(<parameter><decl><type><name>SocketAddressStorage</name></type> <name>storage</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

















<function><type><name>Socket</name> <modifier>*</modifier></type><name>SocketAccept</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>SocketConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>-&gt;</operator><name>isServer</name></name> <operator>||</operator> <name><name>server</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sock_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>sock_alen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>LoadSocket</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sock_alen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sock_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sock_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock_alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketClose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>nonblocking</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>SocketSetNonBlocking</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>SocketSetBlocking</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>isServer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>sock_addr</name><operator>.</operator><name>ss_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sock_addr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name></name> <operator>=</operator> <operator>(</operator>struct <name>_SocketAddressIPv4</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Server: Got connection from %s::%hu"</literal></expr></argument>, <argument><expr><call><name>SocketAddressToString</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sock_addr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name></name> <operator>=</operator> <operator>(</operator>struct <name>_SocketAddressIPv6</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Server: Got connection from %s::%hu"</literal></expr></argument>, <argument><expr><call><name>SocketAddressToString</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ValidChannel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>channel</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>channel</name> <operator>&gt;=</operator> <name>SOCKET_MAX_UDPCHANNELS</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>SocketSetChannel</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IPAddress</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>UDPChannel</name></name> <modifier>*</modifier></type><name>binding</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>socket</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Passed a NULL socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>SOCKET_MAX_UDPCHANNELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>channel</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>binding</name> <operator>=</operator> <operator>&amp;</operator><name><name>socket</name><operator>-&gt;</operator><name>binding</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>binding</name><operator>-&gt;</operator><name>numbound</name></name> <operator>&lt;</operator> <name>SOCKET_MAX_UDPADDRESSES</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ValidChannel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>binding</name> <operator>=</operator> <operator>&amp;</operator><name><name>socket</name><operator>-&gt;</operator><name>binding</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>binding</name><operator>-&gt;</operator><name>numbound</name></name> <operator>==</operator> <name>SOCKET_MAX_UDPADDRESSES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No room for new addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>address</name><index>[<expr><name><name>binding</name><operator>-&gt;</operator><name>numbound</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>address</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>channel</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SocketUnsetChannel</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>channel</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>channel</name> <operator>&lt;</operator> <name>SOCKET_MAX_UDPCHANNELS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>socket</name><operator>-&gt;</operator><name>binding</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>numbound</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>SocketDataPacket</name> <modifier>*</modifier></type><name>AllocPacket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SocketDataPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>(</operator><name>SocketDataPacket</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>packet</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FreePacket</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>packet</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ResizePacket</name><parameter_list>(<parameter><decl><type><name>SocketDataPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>newdata</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newdata</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>newdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>maxlen</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreePacket</name><parameter_list>(<parameter><decl><type><name>SocketDataPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>packet</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>SocketDataPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>AllocPacketList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>howmany</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SocketDataPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>packetV</name> <init>= <expr><operator>(</operator><name>SocketDataPacket</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>howmany</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>packetV</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>packetV</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>howmany</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>packetV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AllocPacket</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>packetV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>packetV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>howmany</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FreePacketList</name><argument_list>(<argument><expr><name>packetV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packetV</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>packetV</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreePacketList</name><parameter_list>(<parameter><decl><type><name>SocketDataPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>packetV</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>packetV</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>packetV</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FreePacket</name><argument_list>(<argument><expr><name><name>packetV</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name>packetV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>SocketSend</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numsent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>datap</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>isServer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot send information on a server socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SOCKET_TCP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sent</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> 
<operator>(</operator><operator>(</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> 
<operator>(</operator><call><name>SocketGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAEINTR</name><operator>)</operator><operator>)</operator></expr> 
)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Successfully sent \"%s\" (%d bytes)"</literal></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>sent</name></expr>;</return>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>SOCKET_UDP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>isIPv6</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv6</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>addripv4</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sent</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>numsent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Successfully sent \"%s\" (%d bytes)"</literal></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketGetLastErrorString</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>numsent</name></expr>;</return>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>SocketReceive</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numrecv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>sock_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sock_addr</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>isServer</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_TCP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><literal type="string">"Server sockets cannot be used to receive data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SOCKET_TCP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>SocketGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAEINTR</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name></expr>)</condition>
<block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><name>len</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Received \"%s\" (%d bytes)"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>SOCKET_UDP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sock_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sock_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, 
<argument><expr><name>data</name></expr></argument>, 
<argument><expr><name>maxlen</name></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sock_addr</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>sock_len</name></expr></argument> 
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>numrecv</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WSAEWOULDBLOCK</name></expr>:</case> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>numrecv</name></expr>;</return>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsSocketReady</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>sock</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>ready</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsSocketConnected</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FD_SET</name></type> <name>writefds</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">1000000000UL</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writefds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>total</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writefds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>SocketResult</name> <modifier>*</modifier></type><name>LoadSocketResult</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SocketResult</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator>struct <name>SocketResult</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <call><name>LoadSocket</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadSocketResult</name><parameter_list>(<parameter><decl><type><name>SocketResult</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator><operator>-&gt;</operator><name>socket</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnloadSocket</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator><operator>-&gt;</operator><name>socket</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>Socket</name> <modifier>*</modifier></type><name>LoadSocket</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Socket</name></name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <operator>(</operator><name>Socket</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran out of memory attempting to allocate a socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketClose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadSocket</name><parameter_list>(<parameter><decl><type><name>Socket</name> <modifier>*</modifier><modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><operator>*</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>SocketSet</name> <modifier>*</modifier></type><name>LoadSocketSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SocketSet</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><operator>(</operator>struct <name>SocketSet</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>maxsockets</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name></name> <operator>=</operator> <operator>(</operator>struct <name>Socket</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><name>max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>set</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>set</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadSocketSet</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>AddSocket</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name> <operator>==</operator> <name><name>set</name><operator>-&gt;</operator><name>maxsockets</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><literal type="string">"SocketSet is full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>Socket</name> <operator>*</operator><operator>)</operator><name>sock</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><literal type="string">"Socket was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>RemoveSocket</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>Socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator>struct <name>Socket</name> <operator>*</operator><operator>)</operator><name>sock</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><literal type="string">"Socket not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>CheckSockets</name><parameter_list>(<parameter><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>maxfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>mask</name></decl>;</decl_stmt>


<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>channel</name> <operator>&gt;</operator> <name>maxfd</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>channel</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for> 

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>SocketGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAEINTR</name></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>numsockets</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>AddressInformation</name></type> <name>LoadAddress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AddressInformation</name></type> <name>addressInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>addressInfo</name> <operator>=</operator> <operator>(</operator><name>AddressInformation</name><operator>)</operator><call><name>RNET_CALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>addressInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addressInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>addressInfo</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><call><name>RNET_CALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addressInfo</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_addr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for \"struct sockaddr\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for \"struct AddressInformation\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>addressInfo</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadAddress</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name> <modifier>*</modifier></type><name>addressInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>addressInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>addressInfo</name><operator>)</operator><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_addr</name></name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>addressInfo</name><operator>)</operator><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_addr</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>addressInfo</name><operator>)</operator><operator>-&gt;</operator><name><name>addr</name><operator>.</operator><name>ai_addr</name></name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RNET_FREE</name><argument_list>(<argument><expr><operator>*</operator><name>addressInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>addressInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>AddressInformation</name> <modifier>*</modifier></type><name>LoadAddressList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AddressInformation</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>AddressInformation</name> <operator>*</operator><operator>)</operator><call><name>RNET_MALLOC</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AddressInformation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetAddressFamily</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_family</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetAddressSocketType</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_socktype</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetAddressProtocol</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_protocol</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>GetAddressCanonName</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_canonname</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>GetAddressHostAndPort</name><parameter_list>(<parameter><decl><type><name>AddressInformation</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outhost</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outport</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_addr</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>outport</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ai_addr</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>outport</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Socket Error: %s"</literal></expr></argument>, <argument><expr><call><name>SocketErrorCodeToString</name><argument_list>(<argument><expr><call><name>SocketGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketSetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>outhost</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PacketSend</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Sending packet (%s) with size %d\n"</literal></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PacketReceive</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Receiving packet (%s) with size %d\n"</literal></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PacketWrite16</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Original: 0x%04"</literal> <name>PRIX16</name> <literal type="string">" - %"</literal> <name>PRIu16</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offs</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Network: 0x%04"</literal> <name>PRIX16</name> <literal type="string">" - %"</literal> <name>PRIu16</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PacketWrite32</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Original: 0x%08"</literal> <name>PRIX32</name> <literal type="string">" - %"</literal> <name>PRIu32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offs</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Network: 0x%08"</literal> <name>PRIX32</name> <literal type="string">" - %"</literal> <name>PRIu32</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>PacketWrite64</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Original: 0x%016"</literal> <name>PRIX64</name> <literal type="string">" - %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>value</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offs</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Network: 0x%016"</literal> <name>PRIX64</name> <literal type="string">" - %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>uint16_t</name></type> <name>PacketRead16</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offs</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Original: 0x%04"</literal> <name>PRIX16</name> <literal type="string">" - %"</literal> <name>PRIu16</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint32_t</name></type> <name>PacketRead32</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offs</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Original: 0x%08"</literal> <name>PRIX32</name> <literal type="string">" - %"</literal> <name>PRIu32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>PacketRead64</name><parameter_list>(<parameter><decl><type><name>Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offs</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Original: 0x%016"</literal> <name>PRIX64</name> <literal type="string">" - %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
