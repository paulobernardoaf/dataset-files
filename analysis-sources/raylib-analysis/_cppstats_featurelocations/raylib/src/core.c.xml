<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\core.c">


















































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTERNAL_CONFIG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYLIB_VERSION</name></cpp:macro> <cpp:value>"3.0"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>_POSIX_C_SOURCE</name> <operator>&lt;</operator> <literal type="number">199309L</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_C_SOURCE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_C_SOURCE</name></cpp:macro> <cpp:value>199309L</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYMATH_IMPLEMENTATION</name></cpp:macro></cpp:define> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLGL_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlgl.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GESTURES_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gestures.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_CAMERA_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMERA_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"camera.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GIF_RECORDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIF_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIF_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIF_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/rgif.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPORT_HIGH_DPI</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRENT_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRENT_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/dirent.h"</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETCWD</name></cpp:macro> <cpp:value>_getcwd</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHDIR</name></cpp:macro> <cpp:value>_chdir</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETCWD</name></cpp:macro> <cpp:value>getcwd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHDIR</name></cpp:macro> <cpp:value>chdir</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_INCLUDE_NONE</name></cpp:macro></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLFW/glfw3.h&gt;</cpp:file></cpp:include> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_EXPOSE_NATIVE_WIN32</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLFW/glfw3native.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_BUSY_WAIT_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>unsigned</name> <name>int</name> <name>__stdcall</name></type> <name>timeBeginPeriod</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uPeriod</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name> <name>__stdcall</name></type> <name>timeEndPeriod</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uPeriod</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include> 




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLFW/glfw3native.h&gt;</cpp:file></cpp:include> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLFW/glfw3native.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FILEPATH_LENGTH</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FILEPATH_LENGTH</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/window.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android_native_app_glue.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/egl.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/kd.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/joystick.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bcm_host.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EGL/egl.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EGL/eglext.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GLES2/gl2.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EGL/egl.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EGL/eglext.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GLES2/gl2.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_INCLUDE_ES2</name></cpp:macro></cpp:define> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLFW/glfw3.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/html5.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_COMPRESSION_API</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbi_zlib_compress</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>stbi_zlib_decode_malloc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_LAST_TOUCH_DEVICE</name></cpp:macro></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_KEYBOARD_DEV</name></cpp:macro> <cpp:value>STDIN_FILENO</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GAMEPAD_DEV</name></cpp:macro> <cpp:value>"/dev/input/js"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_EVDEV_PATH</name></cpp:macro> <cpp:value>"/dev/input/"</cpp:value></cpp:define> 






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_SENSITIVITY</name></cpp:macro> <cpp:value>0.8f</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GAMEPADS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GAMEPAD_AXIS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GAMEPAD_BUTTONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHARS_QUEUE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DATA_STORAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_DATA_FILE</name></cpp:macro> <cpp:value>"storage.data"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>pthread_t</name></type> <name>threadId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>eventNum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Rectangle</name></type> <name>absRange</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>touchSlot</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isMouse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isTouch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isMultitouch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isKeyboard</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>isGamepad</name></decl>;</decl_stmt> 
}</block></struct></type> <name>InputEventWorker</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>contents</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>head</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>tail</name></decl>;</decl_stmt> 
}</block></struct></type> <name>KeyEventFifo</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt> }</block></struct></type> <name>Point</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt> }</block></struct></type> <name>Size</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>EGLNativeWindowType</name></type> <name>handle</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <name>CoreData</name> <block>{
<struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EGL_DISPMANX_WINDOW_T</name></type> <name>handle</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EGLDisplay</name></type> <name>device</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EGLSurface</name></type> <name>surface</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EGLContext</name></type> <name>context</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EGLConfig</name></type> <name>config</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>ready</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>minimized</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>resized</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>fullscreen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>alwaysRun</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>shouldClose</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Point</name></type> <name>position</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Size</name></type> <name>display</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Size</name></type> <name>screen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Size</name></type> <name>currentFbo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Size</name></type> <name>render</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Point</name></type> <name>renderOffset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name>screenScale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dropFilesPath</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dropFilesCount</name></decl>;</decl_stmt> 

}</block> <decl><name>Window</name></decl>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>appEnabled</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>android_app</name></name> <modifier>*</modifier></type><name>app</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>android_poll_source</name></name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>internalDataPath</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>contextRebindRequired</name></decl>;</decl_stmt> 
}</block> <decl><name>Android</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>InputEventWorker</name></type> <name><name>eventWorker</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>exitKey</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>currentKeyState</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>previousKeyState</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>keyPressedQueue</name><index>[<expr><name>MAX_CHARS_QUEUE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>keyPressedQueueCount</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>defaultMode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>defaultSettings</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>KeyEventFifo</name></type> <name>lastKeyPressed</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>Keyboard</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Vector2</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Vector2</name></type> <name>scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>cursorHidden</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>cursorOnScreen</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>cursorLockRequired</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>currentButtonState</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>previousButtonState</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>currentWheelMove</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>previousWheelMove</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>currentButtonStateEvdev</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>Mouse</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>Vector2</name></type> <name><name>position</name><index>[<expr><name>MAX_TOUCH_POINTS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>currentTouchState</name><index>[<expr><name>MAX_TOUCH_POINTS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>previousTouchState</name><index>[<expr><name>MAX_TOUCH_POINTS</name></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>Touch</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lastButtonPressed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>axisCount</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ready</name><index>[<expr><name>MAX_GAMEPADS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>axisState</name><index>[<expr><name>MAX_GAMEPADS</name></expr>]</index><index>[<expr><name>MAX_GAMEPAD_AXIS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>currentState</name><index>[<expr><name>MAX_GAMEPADS</name></expr>]</index><index>[<expr><name>MAX_GAMEPAD_BUTTONS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>previousState</name><index>[<expr><name>MAX_GAMEPADS</name></expr>]</index><index>[<expr><name>MAX_GAMEPAD_BUTTONS</name></expr>]</index></name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>threadId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>streamId</name><index>[<expr><name>MAX_GAMEPADS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>Gamepad</name></decl>;</struct>
}</block> <decl><name>Input</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>current</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>previous</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>update</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>draw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>target</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>base</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>Time</name></decl>;</struct>
}</block></struct></type> <name>CoreData</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <name>CoreData</name></type> <name>CORE</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dirFilesPath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dirFilesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SCREEN_CAPTURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screenshotCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GIF_RECORDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gifFramesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gifRecording</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>LoadFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>UnloadFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>InitGraphicsDevice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetupFramebuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetupViewport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SwapBuffers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitTimer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Wait</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>ms</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetGamepadButton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetGamepadAxis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PollInputEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ErrorCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>KeyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MouseButtonCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MouseCursorPosCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CharCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ScrollCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>yoffset</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CursorEnterCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enter</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WindowSizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WindowIconifyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iconified</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WindowDropCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AndroidCommandCallback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name> <modifier>*</modifier></type><name>app</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>AndroidInputCallback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name> <modifier>*</modifier></type><name>app</name></decl></parameter>, <parameter><decl><type><name>AInputEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenFullscreenChangeCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenFullscreenChangeEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenKeyboardCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenKeyboardEvent</name> <modifier>*</modifier></type><name>keyEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenMouseCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenMouseEvent</name> <modifier>*</modifier></type><name>mouseEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenTouchCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenTouchEvent</name> <modifier>*</modifier></type><name>touchEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenGamepadCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenGamepadEvent</name> <modifier>*</modifier></type><name>gamepadEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SSH_KEYBOARD_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitKeyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ProcessKeyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RestoreKeyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitTerminal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RestoreTerminal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitEvdevInput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EventThreadSpawn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>EventThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitGamepad</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GamepadThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name> <name>__stdcall</name></type> <name>Sleep</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>msTimeout</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>android_main</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name> <modifier>*</modifier></type><name>app</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>arg0</name><index>[]</index></name> <init>= <expr><literal type="string">"raylib"</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name></name> <operator>=</operator> <name>app</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator>main<operator>(</operator><literal type="number">1</literal><operator>,</operator> <operator>(</operator><name>char</name> <operator>*</operator><index>[]</index><operator>)</operator> <block>{ <expr><name>arg0</name></expr>, <expr><name>NULL</name></expr> }</block><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>android_app</name></name> <modifier>*</modifier></type><name>GetAndroidApp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SSH_KEYBOARD_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitTerminal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RPI: Reconfiguring terminal..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>keyboardNewSettings</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultSettings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>keyboardNewSettings</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultSettings</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>keyboardNewSettings</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ICANON</name> <operator>|</operator> <name>ECHO</name> <operator>|</operator> <name>ISIG</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keyboardNewSettings</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keyboardNewSettings</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyboardNewSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>KDGKBMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultMode</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to change keyboard mode (not a local terminal)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>KDSKBMODE</name></expr></argument>, <argument><expr><name>K_XLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>RestoreTerminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RestoreTerminal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RPI: Restoring terminal..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultSettings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>KDSKBMODE</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>InitWindow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Initializing raylib %s"</literal></expr></argument>, <argument><expr><name>RAYLIB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>exitKey</name></name> <operator>=</operator> <name>KEY_ESCAPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>lastButtonPressed</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>internalDataPath</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>activity</name><operator>-&gt;</operator><name>internalDataPath</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ANativeActivity_setWindowFlags</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>activity</name></name></expr></argument>, <argument><expr><name>AWINDOW_FLAG_FULLSCREEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>orientation</name> <init>= <expr><call><name>AConfiguration_getOrientation</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>orientation</name> <operator>==</operator> <name>ACONFIGURATION_ORIENTATION_PORT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"ANDROID: Window orientation set as portrait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>orientation</name> <operator>==</operator> <name>ACONFIGURATION_ORIENTATION_LAND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"ANDROID: Window orientation set as landscape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <name>height</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AConfiguration_setOrientation</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>ACONFIGURATION_ORIENTATION_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ANDROID: Window orientation changed to portrait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>AConfiguration_setOrientation</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>ACONFIGURATION_ORIENTATION_LAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ANDROID: Window orientation changed to landscape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>onAppCmd</name></name> <operator>=</operator> <name>AndroidCommandCallback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>onInputEvent</name></name> <operator>=</operator> <name>AndroidInputCallback</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitAssetManager</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>activity</name><operator>-&gt;</operator><name>assetManager</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>activity</name><operator>-&gt;</operator><name>internalDataPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"ANDROID: App initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pollResult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pollEvents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>!</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>ready</name></name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>pollResult</name> <operator>=</operator> <call><name>ALooper_pollAll</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pollEvents</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name><operator>-&gt;</operator><name>process</name></name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



</block_content>}</block></while>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>ready</name></name> <operator>=</operator> <call><name>InitGraphicsDevice</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>ready</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>InitTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>LoadFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name> <init>= <expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call><operator>.</operator><name><name>recs</name><index>[<expr><literal type="number">95</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<macro><name>SetShapesTexture</name><argument_list>(<argument>GetFontDefault().texture</argument>, <argument>(Rectangle){ rec.x + <literal type="number">1</literal></argument>, <argument>rec.y + <literal type="number">1</literal></argument>, <argument>rec.width - <literal type="number">2</literal></argument>, <argument>rec.height - <literal type="number">2</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HIGH_DPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call><operator>.</operator><name>texture</name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>InitEvdevInput</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>InitGamepad</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SSH_KEYBOARD_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>InitKeyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>InitTerminal</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>emscripten_set_fullscreenchange_callback</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenFullscreenChangeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>emscripten_set_keypress_callback</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenKeyboardCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>emscripten_set_click_callback</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenMouseCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>emscripten_set_touchstart_callback</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenTouchCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emscripten_set_touchend_callback</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenTouchCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emscripten_set_touchmove_callback</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenTouchCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emscripten_set_touchcancel_callback</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenTouchCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>emscripten_set_gamepadconnected_callback</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenGamepadCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emscripten_set_gamepaddisconnected_callback</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EmscriptenGamepadCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2.0f</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>


<function><type><name>void</name></type> <name>CloseWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GIF_RECORDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gifRecording</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GifEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gifRecording</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>UnloadFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rlglClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwDestroyWindow</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwTerminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_BUSY_WAIT_LOOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>timeEndPeriod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>!=</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>, <argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name> <operator>!=</operator> <name>EGL_NO_SURFACE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>eglDestroySurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name>EGL_NO_SURFACE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name> <operator>!=</operator> <name>EGL_NO_CONTEXT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>eglDestroyContext</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>EGL_NO_CONTEXT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eglTerminate</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>EGL_NO_DISPLAY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>InputEventWorker</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadId</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>threadId</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>threadId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Window closed successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsWindowReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>ready</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>WindowShouldClose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><call><name>emscripten_sleep</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>ready</name></name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>alwaysRun</name></name> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>minimized</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWaitEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name> <operator>=</operator> <call><name>glfwWindowShouldClose</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>ready</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsWindowMinimized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>minimized</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsWindowResized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>resized</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsWindowHidden</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><call><name>glfwGetWindowAttrib</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GLFW_VISIBLE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GL_FALSE</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsWindowFullscreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ToggleFullscreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <operator>!</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>glfwGetWindowPos</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><call><name>glfwGetPrimaryMonitor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>monitor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to get monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwSetWindowMonitor</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><call><name>glfwGetPrimaryMonitor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>GLFW_DONT_CARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>glfwGetVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glfwSetWindowMonitor</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><call><name>glfwGetPrimaryMonitor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>refreshRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_VSYNC_HINT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwSwapInterval</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwSetWindowMonitor</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>GLFW_DONT_CARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name></expr>)</condition><block type="pseudo"><block_content> <macro><name>EM_ASM</name><argument_list>(<argument>Module.requestFullscreen(false, false);</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <macro><name>EM_ASM</name><argument_list>(<argument>document.exitFullscreen();</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM: Failed to toggle to windowed mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetWindowIcon</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLFWimage</name></type> <name><name>icon</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>icon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pixels</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glfwSetWindowIcon</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Window icon image must be in R8G8B8A8 pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetWindowTitle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetWindowTitle</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetWindowPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetWindowPos</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier><modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>glfwGetMonitors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitorCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>monitor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monitor</name> <operator>&lt;</operator> <name>monitorCount</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Selected fullscreen monitor: [%i] %s"</literal></expr></argument>, <argument><expr><name>monitor</name></expr></argument>, <argument><expr><call><name>glfwGetMonitorName</name><argument_list>(<argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>glfwGetVideoMode</name><argument_list>(<argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glfwSetWindowMonitor</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>refreshRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to find selected monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetWindowMinSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>glfwGetVideoMode</name><argument_list>(<argument><expr><call><name>glfwGetPrimaryMonitor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glfwSetWindowSizeLimits</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetWindowSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetWindowSize</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>emscripten_set_canvas_size</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnhideWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwShowWindow</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>HideWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwHideWindow</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetScreenWidth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetScreenHeight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>GetWindowHandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>glfwGetWin32Window</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<return>return <expr><name>NULL</name></expr>;</return> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><name>NULL</name></expr>;</return> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMonitorCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glfwGetMonitors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitorCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>monitorCount</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMonitorWidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier><modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>glfwGetMonitors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitorCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>monitor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monitor</name> <operator>&lt;</operator> <name>monitorCount</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>glfwGetVideoMode</name><argument_list>(<argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to find selected monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMonitorHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier><modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>glfwGetMonitors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitorCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>monitor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monitor</name> <operator>&lt;</operator> <name>monitorCount</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>glfwGetVideoMode</name><argument_list>(<argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to find selected monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMonitorPhysicalWidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier><modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>glfwGetMonitors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitorCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>monitor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monitor</name> <operator>&lt;</operator> <name>monitorCount</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>physicalWidth</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glfwGetMonitorPhysicalSize</name><argument_list>(<argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>physicalWidth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>physicalWidth</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to find selected monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMonitorPhysicalHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier><modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>glfwGetMonitors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitorCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>monitor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monitor</name> <operator>&lt;</operator> <name>monitorCount</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>physicalHeight</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glfwGetMonitorPhysicalSize</name><argument_list>(<argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>physicalHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>physicalHeight</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to find selected monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>Vector2</name></type> <name>GetWindowPosition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwGetWindowPos</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>x</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name></expr> }</block></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetMonitorName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier><modifier>*</modifier></type><name>monitors</name> <init>= <expr><call><name>glfwGetMonitors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monitorCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>monitor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>monitor</name> <operator>&lt;</operator> <name>monitorCount</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>glfwGetMonitorName</name><argument_list>(<argument><expr><name><name>monitors</name><index>[<expr><name>monitor</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to find selected monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetClipboardText</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>glfwGetClipboardString</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetClipboardText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetClipboardString</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ShowCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetInputMode</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GLFW_CURSOR</name></expr></argument>, <argument><expr><name>GLFW_CURSOR_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>UWPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SHOW_MOUSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessageToUWP</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorHidden</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>HideCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetInputMode</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GLFW_CURSOR</name></expr></argument>, <argument><expr><name>GLFW_CURSOR_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>UWPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_HIDE_MOUSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessageToUWP</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorHidden</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsCursorHidden</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorHidden</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EnableCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetInputMode</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GLFW_CURSOR</name></expr></argument>, <argument><expr><name>GLFW_CURSOR_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorLockRequired</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>UWPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_LOCK_MOUSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessageToUWP</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorHidden</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DisableCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetInputMode</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GLFW_CURSOR</name></expr></argument>, <argument><expr><name>GLFW_CURSOR_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorLockRequired</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>UWPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_UNLOCK_MOUSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessageToUWP</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorHidden</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ClearBackground</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlClearColor</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlClearScreenBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><name>void</name></type> <name>BeginDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>update</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>previous</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlMultMatrixf</name><argument_list>(<argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screenScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_MOUSE_CURSOR_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GIF_RECORDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_RECORD_FRAMERATE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>gifRecording</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gifFramesCounter</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gifFramesCounter</name><operator>%</operator><name>GIF_RECORD_FRAMERATE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>screenData</name> <init>= <expr><call><name>rlReadScreenPixels</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GifWriteFrame</name><argument_list>(<argument><expr><name>screenData</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>screenData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>gifFramesCounter</name><operator>/</operator><literal type="number">15</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"RECORDING"</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SwapBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>PollInputEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>draw</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>previous</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>frame</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>update</name></name> <operator>+</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>draw</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>frame</name></name> <operator>&lt;</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>target</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Wait</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>target</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>frame</name></name><operator>)</operator><operator>*</operator><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>waitTime</name> <init>= <expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>previous</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>frame</name></name> <operator>+=</operator> <name>waitTime</name></expr>;</expr_stmt> 




</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>BeginMode2D</name><parameter_list>(<parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlMultMatrixf</name><argument_list>(<argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><call><name>GetCameraMatrix2D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlMultMatrixf</name><argument_list>(<argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screenScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndMode2D</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlMultMatrixf</name><argument_list>(<argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screenScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><name>void</name></type> <name>BeginMode3D</name><parameter_list>(<parameter><decl><type><name>Camera3D</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>aspect</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_PERSPECTIVE</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>top</name> <init>= <expr><literal type="number">0.01</literal><operator>*</operator><call><name>tan</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name><operator>*</operator><literal type="number">0.5</literal><operator>*</operator><name>DEG2RAD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>right</name> <init>= <expr><name>top</name><operator>*</operator><name>aspect</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlFrustum</name><argument_list>(<argument><expr><operator>-</operator><name>right</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><operator>-</operator><name>top</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_ORTHOGRAPHIC</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>top</name> <init>= <expr><name><name>camera</name><operator>.</operator><name>fovy</name></name><operator>/</operator><literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>right</name> <init>= <expr><name>top</name><operator>*</operator><name>aspect</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlOrtho</name><argument_list>(<argument><expr><operator>-</operator><name>right</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><operator>-</operator><name>top</name></expr></argument>,<argument><expr><name>top</name></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>Matrix</name></type> <name>matView</name> <init>= <expr><call><name>MatrixLookAt</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>up</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rlMultMatrixf</name><argument_list>(<argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name>matView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlEnableDepthTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndMode3D</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlMultMatrixf</name><argument_list>(<argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screenScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlDisableDepthTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><name>void</name></type> <name>BeginTextureMode</name><parameter_list>(<parameter><decl><type><name>RenderTexture2D</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlEnableRenderTexture</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>rlOrtho</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 





<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndTextureMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlDisableRenderTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>SetupViewport</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>BeginScissorMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlEnableScissorTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlScissor</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>height</name><operator>)</operator></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndScissorMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlDisableScissorTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Ray</name></type> <name>GetMouseRay</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>mouse</name></decl></parameter>, <parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Ray</name></type> <name>ray</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name><name>mouse</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name><name>mouse</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>deviceCoords</name> <init>= <expr><block>{ <expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Matrix</name></type> <name>matView</name> <init>= <expr><call><name>MatrixLookAt</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>up</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Matrix</name></type> <name>matProj</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_PERSPECTIVE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>matProj</name> <operator>=</operator> <call><name>MatrixPerspective</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name><operator>*</operator><name>DEG2RAD</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_ORTHOGRAPHIC</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>aspect</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>top</name> <init>= <expr><name><name>camera</name><operator>.</operator><name>fovy</name></name><operator>/</operator><literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>right</name> <init>= <expr><name>top</name><operator>*</operator><name>aspect</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>matProj</name> <operator>=</operator> <call><name>MatrixOrtho</name><argument_list>(<argument><expr><operator>-</operator><name>right</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><operator>-</operator><name>top</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>nearPoint</name> <init>= <macro><name>rlUnproject</name><argument_list>(<argument>(Vector3){ deviceCoords.x</argument>, <argument>deviceCoords.y</argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>matProj</argument>, <argument>matView</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>farPoint</name> <init>= <macro><name>rlUnproject</name><argument_list>(<argument>(Vector3){ deviceCoords.x</argument>, <argument>deviceCoords.y</argument>, <argument><literal type="number">1.0f</literal> }</argument>, <argument>matProj</argument>, <argument>matView</argument>)</argument_list></macro></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Vector3</name></type> <name>cameraPlanePointerPos</name> <init>= <macro><name>rlUnproject</name><argument_list>(<argument>(Vector3){ deviceCoords.x</argument>, <argument>deviceCoords.y</argument>, <argument>-<literal type="number">1.0f</literal> }</argument>, <argument>matProj</argument>, <argument>matView</argument>)</argument_list></macro></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>direction</name> <init>= <expr><call><name>Vector3Normalize</name><argument_list>(<argument><expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>farPoint</name></expr></argument>, <argument><expr><name>nearPoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_PERSPECTIVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ray</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name><name>camera</name><operator>.</operator><name>position</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_ORTHOGRAPHIC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ray</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>cameraPlanePointerPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ray</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <name>direction</name></expr>;</expr_stmt>

<return>return <expr><name>ray</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Matrix</name></type> <name>GetCameraMatrix</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MatrixLookAt</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>up</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Matrix</name></type> <name>GetCameraMatrix2D</name><parameter_list>(<parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matTransform</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>














<decl_stmt><decl><type><name>Matrix</name></type> <name>matOrigin</name> <init>= <expr><call><name>MatrixTranslate</name><argument_list>(<argument><expr><operator>-</operator><name><name>camera</name><operator>.</operator><name>target</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>camera</name><operator>.</operator><name>target</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matRotation</name> <init>= <macro><name>MatrixRotate</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>, <argument>camera.rotation*DEG2RAD</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matScale</name> <init>= <expr><call><name>MatrixScale</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>zoom</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>zoom</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matTranslation</name> <init>= <expr><call><name>MatrixTranslate</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>matTransform</name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>matOrigin</name></expr></argument>, <argument><expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>matScale</name></expr></argument>, <argument><expr><name>matRotation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>matTranslation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>matTransform</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Vector2</name></type> <name>GetWorldToScreen</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>screenPosition</name> <init>= <expr><call><name>GetWorldToScreenEx</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>camera</name></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>screenPosition</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Vector2</name></type> <name>GetWorldToScreenEx</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>Matrix</name></type> <name>matProj</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_PERSPECTIVE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>matProj</name> <operator>=</operator> <call><name>MatrixPerspective</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>*</operator> <name>DEG2RAD</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>width</name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>height</name><operator>)</operator></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_ORTHOGRAPHIC</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>aspect</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>top</name> <init>= <expr><name><name>camera</name><operator>.</operator><name>fovy</name></name><operator>/</operator><literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>right</name> <init>= <expr><name>top</name><operator>*</operator><name>aspect</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>matProj</name> <operator>=</operator> <call><name>MatrixOrtho</name><argument_list>(<argument><expr><operator>-</operator><name>right</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><operator>-</operator><name>top</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>Matrix</name></type> <name>matView</name> <init>= <expr><call><name>MatrixLookAt</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>up</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Quaternion</name></type> <name>worldPos</name> <init>= <expr><block>{ <expr><name><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>z</name></name></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>worldPos</name> <operator>=</operator> <call><name>QuaternionTransform</name><argument_list>(<argument><expr><name>worldPos</name></expr></argument>, <argument><expr><name>matView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>worldPos</name> <operator>=</operator> <call><name>QuaternionTransform</name><argument_list>(<argument><expr><name>worldPos</name></expr></argument>, <argument><expr><name>matProj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>ndcPos</name> <init>= <expr><block>{ <expr><name><name>worldPos</name><operator>.</operator><name>x</name></name><operator>/</operator><name><name>worldPos</name><operator>.</operator><name>w</name></name></expr>, <expr><operator>-</operator><name><name>worldPos</name><operator>.</operator><name>y</name></name><operator>/</operator><name><name>worldPos</name><operator>.</operator><name>w</name></name></expr>, <expr><name><name>worldPos</name><operator>.</operator><name>z</name></name><operator>/</operator><name><name>worldPos</name><operator>.</operator><name>w</name></name></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector2</name></type> <name>screenPosition</name> <init>= <expr><block>{ <expr><operator>(</operator><name><name>ndcPos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><name>width</name></expr>, <expr><operator>(</operator><name><name>ndcPos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>screenPosition</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Vector2</name></type> <name>GetWorldToScreen2D</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matCamera</name> <init>= <expr><call><name>GetCameraMatrix2D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>transform</name> <init>= <macro><name>Vector3Transform</name><argument_list>(<argument>(Vector3){ position.x</argument>, <argument>position.y</argument>, <argument><literal type="number">0</literal> }</argument>, <argument>matCamera</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>transform</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>transform</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</return>
</block_content>}</block></function>


<function><type><name>Vector2</name></type> <name>GetScreenToWorld2D</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>invMatCamera</name> <init>= <expr><call><name>MatrixInvert</name><argument_list>(<argument><expr><call><name>GetCameraMatrix2D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>transform</name> <init>= <macro><name>Vector3Transform</name><argument_list>(<argument>(Vector3){ position.x</argument>, <argument>position.y</argument>, <argument><literal type="number">0</literal> }</argument>, <argument>invMatCamera</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>transform</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>transform</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetTargetFPS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fps</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>target</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>target</name></name> <operator>=</operator> <literal type="number">1.0</literal><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>fps</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TIMER: Target time per frame: %02.03f milliseconds"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>target</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>GetFPS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_CAPTURE_FRAMES_COUNT</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_AVERAGE_TIME_SECONDS</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_STEP</name></cpp:macro> <cpp:value>(FPS_AVERAGE_TIME_SECONDS/FPS_CAPTURE_FRAMES_COUNT)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>history</name><index>[<expr><name>FPS_CAPTURE_FRAMES_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>average</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fpsFrame</name> <init>= <expr><call><name>GetFrameTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fpsFrame</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>last</name><operator>)</operator> <operator>&gt;</operator> <name>FPS_STEP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><name>FPS_CAPTURE_FRAMES_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>average</name> <operator>-=</operator> <name><name>history</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>fpsFrame</name><operator>/</operator><name>FPS_CAPTURE_FRAMES_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>average</name> <operator>+=</operator> <name><name>history</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>roundf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal><operator>/</operator><name>average</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>float</name></type> <name>GetFrameTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>frame</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>double</name></type> <name>GetTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>glfwGetTime</name><argument_list>()</argument_list></call></expr>;</return> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>time</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name><operator>*</operator><literal type="number">1000000000LLU</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>time</name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>base</name></name><operator>)</operator><operator>*</operator><literal type="number">1e-9</literal></expr>;</return> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ColorToInt</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>r</name></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>g</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>Vector4</name></type> <name>ColorNormalize</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector4</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Color</name></type> <name>ColorFromNormalized</name><parameter_list>(<parameter><decl><type><name>Vector4</name></type> <name>normalized</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>normalized</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>normalized</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name><name>normalized</name><operator>.</operator><name>z</name></name><operator>*</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name><name>normalized</name><operator>.</operator><name>w</name></name><operator>*</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Vector3</name></type> <name>ColorToHSV</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>hsv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>rgb</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>rgb</name><operator>.</operator><name>y</name></name></expr>?</condition><then> <expr><name><name>rgb</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><name>min</name> <operator>&lt;</operator> <name><name>rgb</name><operator>.</operator><name>z</name></name></expr>?</condition><then> <expr><name>min</name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>rgb</name><operator>.</operator><name>y</name></name></expr>?</condition><then> <expr><name><name>rgb</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><name>max</name> <operator>&gt;</operator> <name><name>rgb</name><operator>.</operator><name>z</name></name></expr>?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>min</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0.00001f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt> 
<return>return <expr><name>hsv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>delta</name><operator>/</operator><name>max</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt> 
<return>return <expr><name>hsv</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>rgb</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>/</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>+</operator> <operator>(</operator><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>rgb</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">4.0f</literal> <operator>+</operator> <operator>(</operator><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>rgb</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><name>delta</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <literal type="number">60.0f</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">360.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hsv</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>Color</name></type> <name>ColorFromHSV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>hsv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>h</name> <init>= <expr><name><name>hsv</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name><name>hsv</name><operator>.</operator><name>y</name></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>hsv</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>k</name> <init>= <expr><call><name>fmod</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">5.0f</literal> <operator>+</operator> <name>h</name><operator>/</operator><literal type="number">60.0f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">4.0f</literal> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t</name> <operator>&lt;</operator> <name>k</name><operator>)</operator></expr>?</condition><then> <expr><name>t</name></expr> </then><else>: <expr><name>k</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>k</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>k</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name>v</name><operator>*</operator><name>s</name><operator>*</operator><name>k</name><operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">3.0f</literal> <operator>+</operator> <name>h</name><operator>/</operator><literal type="number">60.0f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">4.0f</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t</name> <operator>&lt;</operator> <name>k</name><operator>)</operator></expr>?</condition><then> <expr><name>t</name></expr> </then><else>: <expr><name>k</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>k</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>k</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name>v</name><operator>*</operator><name>s</name><operator>*</operator><name>k</name><operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <name>h</name><operator>/</operator><literal type="number">60.0f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">4.0f</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t</name> <operator>&lt;</operator> <name>k</name><operator>)</operator></expr>?</condition><then> <expr><name>t</name></expr> </then><else>: <expr><name>k</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>k</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>k</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name>v</name><operator>*</operator><name>s</name><operator>*</operator><name>k</name><operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>

<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Color</name></type> <name>GetColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hexValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>hexValue</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>hexValue</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>hexValue</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>hexValue</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetRandomValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>max</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>max</name> <operator>-</operator> <name>min</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>min</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>Color</name></type> <name>Fade</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>Color</name><operator>)</operator><block>{<expr><name><name>color</name><operator>.</operator><name>r</name></name></expr>, <expr><name><name>color</name><operator>.</operator><name>g</name></name></expr>, <expr><name><name>color</name><operator>.</operator><name>b</name></name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name>alpha</name><operator>)</operator></expr>}</block></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetConfigFlags</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_FULLSCREEN_MODE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_WINDOW_ALWAYS_RUN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>alwaysRun</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>TakeScreenshot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>imgData</name> <init>= <expr><call><name>rlReadScreenPixels</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><block>{ <expr><name>imgData</name></expr>, <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>internalDataPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ExportImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>imgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>emscripten_run_script</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"saveFileFromMEMFSToDisk('%s','%s')"</literal></expr></argument>, <argument><expr><call><name>GetFileName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetFileName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM: [%s] Screenshot taken successfully"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>FileExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>_access</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>IsFileExtension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileExt</name> <init>= <expr><call><name>GetExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileExt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>checkExts</name> <init>= <expr><call><name>TextSplit</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>extCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fileExtLower</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fileExtLower</name></expr></argument>, <argument><expr><call><name>TextToLower</name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>extCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TextIsEqual</name><argument_list>(<argument><expr><name>fileExtLower</name></expr></argument>, <argument><expr><call><name>TextToLower</name><argument_list>(<argument><expr><name><name>checkExts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>DirectoryExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>opendir</name><argument_list>(<argument><expr><name>dirPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExtension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dot</name> <operator>||</operator> <name>dot</name> <operator>==</operator> <name>fileName</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>dot</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strprbrk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>latestMatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>s</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>latestMatch</name> <operator>=</operator> <name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> </block_content>}</block></for>
<return>return <expr><name>latestMatch</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filePath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>filePath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name>strprbrk</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>, <argument><expr><literal type="string">"\\/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fileName</name> <operator>||</operator> <operator>(</operator><name>fileName</name> <operator>==</operator> <name>filePath</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>filePath</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>fileName</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFileNameWithoutExt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filePath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FILENAMEWITHOUTEXT_LENGTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>fileName</name><index>[<expr><name>MAX_FILENAMEWITHOUTEXT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_FILENAMEWITHOUTEXT_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filePath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><call><name>GetFileName</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>MAX_FILENAMEWITHOUTEXT_LENGTH</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>fileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>fileName</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDirectoryPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filePath</name></decl></parameter>)</parameter_list>
<block>{<block_content>









<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lastSlash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dirPath</name><index>[<expr><name>MAX_FILEPATH_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dirPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_FILEPATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>filePath</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>dirPath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirPath</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastSlash</name> <operator>=</operator> <call><name>strprbrk</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>, <argument><expr><literal type="string">"\\/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lastSlash</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dirPath</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>filePath</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>filePath</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>lastSlash</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirPath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lastSlash</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>filePath</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dirPath</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPrevDirectoryPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>prevDirPath</name><index>[<expr><name>MAX_FILEPATH_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>prevDirPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_FILEPATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pathLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pathLen</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>prevDirPath</name></expr></argument>, <argument><expr><name>dirPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>pathLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pathLen</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dirPath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dirPath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>prevDirPath</name></expr></argument>, <argument><expr><name>dirPath</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>prevDirPath</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetWorkingDirectory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>currentDir</name><index>[<expr><name>MAX_FILEPATH_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>currentDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_FILEPATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GETCWD</name><argument_list>(<argument><expr><name>currentDir</name></expr></argument>, <argument><expr><name>MAX_FILEPATH_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>currentDir</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetDirectoryFiles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPath</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fileCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DIRECTORY_FILES</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ClearDirectoryFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dirFilesPath</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_DIRECTORY_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_DIRECTORY_FILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dirFilesPath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_FILEPATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>entity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>opendir</name><argument_list>(<argument><expr><name>dirPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>




<while>while <condition>(<expr><operator>(</operator><name>entity</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dirFilesPath</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>entity</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: Failed to open requested directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>dirFilesCount</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fileCount</name> <operator>=</operator> <name>dirFilesCount</name></expr>;</expr_stmt>

<return>return <expr><name>dirFilesPath</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ClearDirectoryFiles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dirFilesCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_DIRECTORY_FILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>dirFilesPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>dirFilesPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dirFilesCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>ChangeDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>CHDIR</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsFileDropped</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetDroppedFiles</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesCount</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesPath</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ClearDroppedFiles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>long</name></type> <name>GetFileModTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>mod</name> <init>= <expr><name><name>result</name><operator>.</operator><name>st_mtime</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>mod</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>CompressData</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataLength</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compDataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESSION_QUALITY_DEFLATE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>compData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_COMPRESSION_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>compData</name> <operator>=</operator> <call><name>stbi_zlib_compress</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLength</name></expr></argument>, <argument><expr><name>compDataLength</name></expr></argument>, <argument><expr><name>COMPRESSION_QUALITY_DEFLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>compData</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>DecompressData</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>compData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compDataLength</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_COMPRESSION_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>stbi_zlib_decode_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compData</name></expr></argument>, <argument><expr><name>compDataLength</name></expr></argument>, <argument><expr><name>dataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SaveStorageValue</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DATA_STORAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>internalDataPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>STORAGE_DATA_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>STORAGE_DATA_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>newDataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileData</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>newFileData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dataSize</name> <operator>&lt;=</operator> <operator>(</operator><name>position</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>newDataSize</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>newFileData</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_REALLOC</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>, <argument><expr><name>newDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newFileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dataPtr</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>newFileData</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dataPtr</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to realloc data (%u), position in bytes (%u) bigger than actual file size"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>position</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>newFileData</name> <operator>=</operator> <name>fileData</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newDataSize</name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>newFileData</name> <operator>=</operator> <name>fileData</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newDataSize</name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dataPtr</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>newFileData</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dataPtr</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SaveFileData</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>newFileData</name></expr></argument>, <argument><expr><name>newDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>newFileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] File not found, creating it"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dataSize</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>fileData</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dataPtr</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>fileData</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dataPtr</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SaveFileData</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fileData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>LoadStorageValue</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DATA_STORAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>internalDataPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>STORAGE_DATA_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>STORAGE_DATA_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileData</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dataSize</name> <operator>&lt;</operator> <operator>(</operator><name>position</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM: Failed to find storage position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dataPtr</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>fileData</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>dataPtr</name><index>[<expr><name>position</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>OpenURL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM: Provided URL is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"explorer %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"xdg-open '%s'"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"open '%s'"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>emscripten_run_script</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"window.open('%s', '_blank')"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>IsKeyPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>previousKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>pressed</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsKeyDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsKeyReleased</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>released</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>previousKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>released</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>released</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>released</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsKeyUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetKeyPressed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetExitKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>exitKey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>IsGamepadAvailable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gamepad</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsGamepadName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>currentName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentName</name> <operator>=</operator> <call><name>GetGamepadName</name><argument_list>(<argument><expr><name>gamepad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>currentName</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>currentName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetGamepadName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>glfwGetJoystickName</name><argument_list>(<argument><expr><name>gamepad</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>streamId</name><index>[<expr><name>gamepad</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>JSIOCGNAME</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>name</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetGamepadAxisCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>axisCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>streamId</name><index>[<expr><name>gamepad</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSIOCGAXES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>axisCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisCount</name></name> <operator>=</operator> <name>axisCount</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisCount</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>float</name></type> <name>GetGamepadAxisMovement</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gamepad</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>axis</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_AXIS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>axis</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsGamepadButtonPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gamepad</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>button</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>!=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>previousState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>pressed</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsGamepadButtonDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gamepad</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>button</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsGamepadButtonReleased</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>released</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gamepad</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>button</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>!=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>previousState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>released</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>released</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsGamepadButtonUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gamepad</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>gamepad</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>button</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>gamepad</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetGamepadButtonPressed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>lastButtonPressed</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsMouseButtonPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>previousTouchState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>pressed</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsMouseButtonDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>down</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>down</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>down</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>down</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsMouseButtonReleased</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>released</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>released</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>previousTouchState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>released</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>released</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsMouseButtonUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMouseX</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>offset</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMouseY</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>offset</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Vector2</name></type> <name>GetMousePosition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GetTouchPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>offset</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>offset</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>position</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetMousePosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>x</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name></expr> }</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>glfwSetCursorPos</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>UWPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>CreateUWPMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UWP_MSG_SET_MOUSE_LOCATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessageToUWP</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetMouseOffset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offsetX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetY</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>offsetY</name></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetMouseScale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scaleX</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scaleY</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>scaleX</name></expr>, <expr><name>scaleY</name></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetMouseWheelMove</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousWheelMove</name></name><operator>/</operator><literal type="number">100</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousWheelMove</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetTouchX</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<return>return <expr><call><name>GetMouseX</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetTouchY</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<return>return <expr><call><name>GetMouseY</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>Vector2</name></type> <name>GetTouchPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>MAX_TOUCH_POINTS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"INPUT: Required touch point out of range (Max touch points: %i)"</literal></expr></argument>, <argument><expr><name>MAX_TOUCH_POINTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>position</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>position</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>position</name><operator>.</operator><name>x</name></name><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>position</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:elif>



<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>position</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>bool</name></type> <name>InitGraphicsDevice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screenScale</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSetErrorCallback</name><argument_list>(<argument><expr><name>ErrorCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwInitHint</name><argument_list>(<argument><expr><name>GLFW_COCOA_CHDIR_RESOURCES</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glfwInit</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to initialize GLFW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GLFWmonitor</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><call><name>glfwGetPrimaryMonitor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>monitor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to get primary monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>glfwGetVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>mode</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>mode</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>glfwDefaultWindowHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HIGH_DPI</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_SCALE_TO_MONITOR</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_WINDOW_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_VISIBLE</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_VISIBLE</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_WINDOW_RESIZABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_RESIZABLE</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_RESIZABLE</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_WINDOW_UNDECORATED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_DECORATED</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_DECORATED</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_TRANSPARENT_FRAMEBUFFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_WINDOW_TRANSPARENT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_TRANSPARENT_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_TRANSPARENT_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_MSAA_4X_HINT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_SAMPLES</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 






<if_stmt><if>if <condition>(<expr><call><name>rlGetVersion</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OPENGL_21</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MAJOR</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MINOR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rlGetVersion</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OPENGL_33</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MAJOR</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MINOR</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_OPENGL_PROFILE</name></expr></argument>, <argument><expr><name>GLFW_OPENGL_CORE_PROFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_OPENGL_FORWARD_COMPAT</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_OPENGL_FORWARD_COMPAT</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rlGetVersion</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OPENGL_ES_20</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MAJOR</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MINOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CLIENT_API</name></expr></argument>, <argument><expr><name>GLFW_OPENGL_ES_API</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_CREATION_API</name></expr></argument>, <argument><expr><name>GLFW_EGL_CONTEXT_API</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_CREATION_API</name></expr></argument>, <argument><expr><name>GLFW_NATIVE_CONTEXT_API</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name> <modifier>*</modifier></type><name>modes</name> <init>= <expr><call><name>glfwGetVideoModes</name><argument_list>(<argument><expr><call><name>glfwGetPrimaryMonitor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>&gt;=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>==</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_AUTO_ICONIFY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM: Closest fullscreen videomode: %i x %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><call><name>SetupFramebuffer</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>glfwCreateWindow</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><call><name>glfwGetPrimaryMonitor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>glfwCreateWindow</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>windowPosX</name> <init>= <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>windowPosY</name> <init>= <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>windowPosX</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>windowPosX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>windowPosY</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>windowPosY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glfwSetWindowPos</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>windowPosX</name></expr></argument>, <argument><expr><name>windowPosY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwTerminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Failed to initialize Window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Device initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Display size: %i x %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Render size: %i x %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Screen size: %i x %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Viewport offsets: %i, %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glfwSetWindowSizeCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>WindowSizeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glfwSetCursorEnterCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CursorEnterCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwSetKeyCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>KeyCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwSetMouseButtonCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>MouseButtonCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwSetCursorPosCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>MouseCursorPosCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glfwSetCharCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CharCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwSetScrollCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ScrollCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwSetWindowIconifyCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>WindowIconifyCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwSetDropCallback</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>WindowDropCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSwapInterval</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>rlLoadExtensions</name><argument_list>(<argument><expr><name>glfwGetProcAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_VSYNC_HINT</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>glfwSwapInterval</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Trying to enable VSYNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bcm_host_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DISPMANX_ELEMENT_HANDLE_T</name></type> <name>dispmanElement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DISPMANX_DISPLAY_HANDLE_T</name></type> <name>dispmanDisplay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DISPMANX_UPDATE_HANDLE_T</name></type> <name>dispmanUpdate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VC_RECT_T</name></type> <name>dstRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VC_RECT_T</name></type> <name>srcRect</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EGLint</name></type> <name>samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLint</name></type> <name>sampleBuffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_MSAA_4X_HINT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sampleBuffer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Trying to enable MSAA x4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>framebufferAttribs</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>EGL_RENDERABLE_TYPE</name></expr>, <expr><name>EGL_OPENGL_ES2_BIT</name></expr>, 

<expr><name>EGL_RED_SIZE</name></expr>, <expr><literal type="number">8</literal></expr>, 
<expr><name>EGL_GREEN_SIZE</name></expr>, <expr><literal type="number">8</literal></expr>, 
<expr><name>EGL_BLUE_SIZE</name></expr>, <expr><literal type="number">8</literal></expr>, 


<expr><name>EGL_DEPTH_SIZE</name></expr>, <expr><literal type="number">16</literal></expr>, 

<expr><name>EGL_SAMPLE_BUFFERS</name></expr>, <expr><name>sampleBuffer</name></expr>, 
<expr><name>EGL_SAMPLES</name></expr>, <expr><name>samples</name></expr>, 
<expr><name>EGL_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>contextAttribs</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>EGL_CONTEXT_CLIENT_VERSION</name></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>EGL_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>surfaceAttributes</name><index>[]</index></name> <init>=
<expr><block>{


<expr><name>EGL_ANGLE_SURFACE_RENDER_TO_BACK_BUFFER</name></expr>, <expr><name>EGL_TRUE</name></expr>,
<expr><name>EGL_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>defaultDisplayAttributes</name><index>[]</index></name> <init>=
<expr><block>{


<expr><name>EGL_PLATFORM_ANGLE_TYPE_ANGLE</name></expr>, <expr><name>EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE</name></expr>,



<expr><name>EGL_ANGLE_DISPLAY_ALLOW_RENDER_TO_BACK_BUFFER</name></expr>, <expr><name>EGL_TRUE</name></expr>,




<expr><name>EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE</name></expr>, <expr><name>EGL_TRUE</name></expr>,
<expr><name>EGL_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>fl9_3DisplayAttributes</name><index>[]</index></name> <init>=
<expr><block>{


<expr><name>EGL_PLATFORM_ANGLE_TYPE_ANGLE</name></expr>, <expr><name>EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE</name></expr>,
<expr><name>EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE</name></expr>, <expr><literal type="number">9</literal></expr>,
<expr><name>EGL_PLATFORM_ANGLE_MAX_VERSION_MINOR_ANGLE</name></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>EGL_ANGLE_DISPLAY_ALLOW_RENDER_TO_BACK_BUFFER</name></expr>, <expr><name>EGL_TRUE</name></expr>,
<expr><name>EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE</name></expr>, <expr><name>EGL_TRUE</name></expr>,
<expr><name>EGL_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>warpDisplayAttributes</name><index>[]</index></name> <init>=
<expr><block>{


<expr><name>EGL_PLATFORM_ANGLE_TYPE_ANGLE</name></expr>, <expr><name>EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE</name></expr>,
<expr><name>EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE</name></expr>, <expr><name>EGL_PLATFORM_ANGLE_DEVICE_TYPE_WARP_ANGLE</name></expr>,
<expr><name>EGL_ANGLE_DISPLAY_ALLOW_RENDER_TO_BACK_BUFFER</name></expr>, <expr><name>EGL_TRUE</name></expr>,
<expr><name>EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE</name></expr>, <expr><name>EGL_TRUE</name></expr>,
<expr><name>EGL_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNEGLGETPLATFORMDISPLAYEXTPROC</name></type> <name>eglGetPlatformDisplayEXT</name> <init>= <expr><operator>(</operator><name>PFNEGLGETPLATFORMDISPLAYEXTPROC</name><operator>)</operator><operator>(</operator><call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"eglGetPlatformDisplayEXT"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eglGetPlatformDisplayEXT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to get function eglGetPlatformDisplayEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>












<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>=</operator> <call><name>eglGetPlatformDisplayEXT</name><argument_list>(<argument><expr><name>EGL_PLATFORM_ANGLE_ANGLE</name></expr></argument>, <argument><expr><name>EGL_DEFAULT_DISPLAY</name></expr></argument>, <argument><expr><name>defaultDisplayAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>==</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to initialize EGL device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eglInitialize</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EGL_FALSE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>=</operator> <call><name>eglGetPlatformDisplayEXT</name><argument_list>(<argument><expr><name>EGL_PLATFORM_ANGLE_ANGLE</name></expr></argument>, <argument><expr><name>EGL_DEFAULT_DISPLAY</name></expr></argument>, <argument><expr><name>fl9_3DisplayAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>==</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to initialize EGL device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eglInitialize</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EGL_FALSE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>=</operator> <call><name>eglGetPlatformDisplayEXT</name><argument_list>(<argument><expr><name>EGL_PLATFORM_ANGLE_ANGLE</name></expr></argument>, <argument><expr><name>EGL_DEFAULT_DISPLAY</name></expr></argument>, <argument><expr><name>warpDisplayAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>==</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to initialize EGL device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eglInitialize</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EGL_FALSE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to initialize EGL device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name>numConfigs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>eglChooseConfig</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>framebufferAttribs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numConfigs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EGL_FALSE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>numConfigs</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to choose first EGL configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
































<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>eglCreateWindowSurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>surfaceAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name> <operator>==</operator> <name>EGL_NO_SURFACE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to create EGL fullscreen surface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name>eglCreateContext</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>, <argument><expr><name>contextAttribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name> <operator>==</operator> <name>EGL_NO_CONTEXT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to create EGL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>eglQuerySurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>EGL_WIDTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eglQuerySurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>EGL_HEIGHT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><name>EGLint</name></type> <name>numConfigs</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>=</operator> <call><name>eglGetDisplay</name><argument_list>(<argument><expr><name>EGL_DEFAULT_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name> <operator>==</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to initialize EGL device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>eglInitialize</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EGL_FALSE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to initialize EGL device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>eglChooseConfig</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>framebufferAttribs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>eglBindAPI</name><argument_list>(<argument><expr><name>EGL_OPENGL_ES_API</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name>eglCreateContext</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>, <argument><expr><name>contextAttribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name> <operator>==</operator> <name>EGL_NO_CONTEXT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to create EGL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EGLint</name></type> <name>displayFormat</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>eglGetConfigAttrib</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>EGL_NATIVE_VISUAL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>displayFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>SetupFramebuffer</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ANativeWindow_setBuffersGeometry</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>displayFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>eglCreateWindowSurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>graphics_get_display_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>SetupFramebuffer</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>




<decl_stmt><decl><type><name>VC_DISPMANX_ALPHA_T</name></type> <name>alpha</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>alpha</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DISPMANX_FLAGS_ALPHA_FIXED_ALL_PIXELS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><operator>.</operator><name>opacity</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>alpha</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dispmanDisplay</name> <operator>=</operator> <call><name>vc_dispmanx_display_open</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>dispmanUpdate</name> <operator>=</operator> <call><name>vc_dispmanx_update_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dispmanElement</name> <operator>=</operator> <call><name>vc_dispmanx_element_add</name><argument_list>(<argument><expr><name>dispmanUpdate</name></expr></argument>, <argument><expr><name>dispmanDisplay</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstRect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>srcRect</name></expr></argument>, <argument><expr><name>DISPMANX_PROTECTION_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpha</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DISPMANX_NO_ROTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name><operator>.</operator><name>element</name></name> <operator>=</operator> <name>dispmanElement</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vc_dispmanx_update_submit_sync</name><argument_list>(<argument><expr><name>dispmanUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>eglCreateWindowSurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<if_stmt><if>if <condition>(<expr><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EGL_FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Failed to attach EGL rendering context to EGL surface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Device initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Display size: %i x %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Render size: %i x %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Screen size: %i x %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Viewport offsets: %i, %i"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<expr_stmt><expr><call><name>rlglInit</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbWidth</name> <init>= <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fbHeight</name> <init>= <expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HIGH_DPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwGetFramebufferSize</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screenScale</name></name> <operator>=</operator> <call><name>MatrixScale</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fbWidth</name><operator>/</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fbHeight</name><operator>/</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetMouseScale</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><name>fbWidth</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><name>fbHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<expr_stmt><expr><call><name>SetupViewport</name><argument_list>(<argument><expr><name>fbWidth</name></expr></argument>, <argument><expr><name>fbHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>ready</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupViewport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>rlOrtho</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupFramebuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Downscaling required: Screen size (%ix%i) is bigger than display size (%ix%i)"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>widthRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>heightRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>widthRatio</name> <operator>&lt;=</operator> <name>heightRatio</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>*</operator><name>widthRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>*</operator><name>heightRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>scaleRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screenScale</name></name> <operator>=</operator> <call><name>MatrixScale</name><argument_list>(<argument><expr><name>scaleRatio</name></expr></argument>, <argument><expr><name>scaleRatio</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Downscale matrix generated, content will be rendered at (%ix%i)"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>&lt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DISPLAY: Upscaling required: Screen size (%ix%i) smaller than display size (%ix%i)"</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>displayRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>screenRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>displayRatio</name> <operator>&lt;=</operator> <name>screenRatio</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><name>displayRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>*</operator><name>displayRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>renderOffset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>InitTimer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_BUSY_WAIT_LOOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>timeBeginPeriod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>now</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name><operator>*</operator><literal type="number">1000000000LLU</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TIMER: Hi-resolution timer not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Wait</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_BUSY_WAIT_LOOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>prevTime</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>nextTime</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>nextTime</name> <operator>-</operator> <name>prevTime</name><operator>)</operator> <operator>&lt;</operator> <name>ms</name><operator>/</operator><literal type="number">1000.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nextTime</name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HALFBUSY_WAIT_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HALFBUSY_WAIT_TIME</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><name>double</name></type> <name>destTime</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ms</name><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&gt;</operator> <name>MAX_HALFBUSY_WAIT_TIME</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ms</name> <operator>-=</operator> <name>MAX_HALFBUSY_WAIT_TIME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>req</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ms</name><operator>/</operator><literal type="number">1000.0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ms</name> <operator>-=</operator> <operator>(</operator><name>sec</name><operator>*</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>ms</name><operator>*</operator><literal type="number">1000000L</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></while>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>ms</name><operator>*</operator><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HALFBUSY_WAIT_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><call><name>GetTime</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>destTime</name></expr>)</condition> <block>{<block_content> </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>GetGamepadButton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>btn</name> <init>= <expr><name>GAMEPAD_BUTTON_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>button</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_Y</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_B</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_A</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_X</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GLFW_GAMEPAD_BUTTON_LEFT_BUMPER</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_TRIGGER_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_TRIGGER_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GLFW_GAMEPAD_BUTTON_BACK</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_MIDDLE_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_GUIDE</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_MIDDLE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_START</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_MIDDLE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GLFW_GAMEPAD_BUTTON_DPAD_UP</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_DPAD_RIGHT</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_DPAD_DOWN</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_DPAD_LEFT</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GLFW_GAMEPAD_BUTTON_LEFT_THUMB</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_THUMB</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_BUTTON_RIGHT_THUMB</name></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_THUMB</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>btn</name> <operator>=</operator> <name>button</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<switch>switch <condition>(<expr><name>button</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_FACE_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_TRIGGER_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_TRIGGER_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_TRIGGER_2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_TRIGGER_2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_MIDDLE_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_MIDDLE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_THUMB</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_RIGHT_THUMB</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>btn</name> <operator>=</operator> <name>GAMEPAD_BUTTON_LEFT_FACE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>btn</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>GetGamepadAxis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>axs</name> <init>= <expr><name>GAMEPAD_AXIS_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>axis</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GLFW_GAMEPAD_AXIS_LEFT_X</name></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_LEFT_X</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_AXIS_LEFT_Y</name></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_LEFT_Y</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_AXIS_RIGHT_X</name></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_RIGHT_X</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_AXIS_RIGHT_Y</name></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_RIGHT_Y</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_AXIS_LEFT_TRIGGER</name></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_LEFT_TRIGGER</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER</name></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_RIGHT_TRIGGER</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>axs</name> <operator>=</operator> <name>axis</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<switch>switch <condition>(<expr><name>axis</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_LEFT_X</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_LEFT_Y</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_RIGHT_X</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>axs</name> <operator>=</operator> <name>GAMEPAD_AXIS_RIGHT_X</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>axs</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>PollInputEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>UpdateGestures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>lastButtonPressed</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>previousKeyState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>head</name></name> <operator>!=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>tail</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>contents</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>tail</name></name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>tail</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousWheelMove</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousButtonState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonStateEvdev</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>previousKeyState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>previousState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousWheelMove</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousButtonState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<while>while <condition>(<expr><call><name>HasMessageFromUWP</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UWPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>GetMessageFromUWP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UWP_MSG_REGISTER_KEY</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>actualKey</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x08</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_BACKSPACE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x20</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_SPACE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1B</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_ESCAPE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0D</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_ENTER</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x2E</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_DELETE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x27</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x25</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x28</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x26</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x70</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x71</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x72</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F3</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x73</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x74</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F5</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x75</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F6</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x76</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F7</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x77</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F8</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x78</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F9</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x79</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F10</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x7A</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F11</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x7B</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F12</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xA0</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_LEFT_SHIFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xA2</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_LEFT_CONTROL</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xA4</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_LEFT_ALT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xA1</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_RIGHT_SHIFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xA3</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_RIGHT_CONTROL</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xA5</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_RIGHT_ALT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x30</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_ZERO</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x31</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_ONE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x32</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_TWO</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x33</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_THREE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x34</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_FOUR</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x35</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_FIVE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x36</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_SIX</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x37</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_SEVEN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x38</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_EIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x39</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_NINE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x41</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_A</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x42</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_B</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x43</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_C</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x44</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_D</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x45</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_E</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x46</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_F</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x47</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_G</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x48</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_H</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x49</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_I</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x4A</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_J</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x4B</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_K</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x4C</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_L</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x4D</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_M</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x4E</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_N</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x4F</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_O</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x50</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_P</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x51</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_Q</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x52</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_R</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x53</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_S</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x54</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_T</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x55</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_U</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x56</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_V</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x57</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_W</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x58</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_X</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x59</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_Y</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x5A</literal></expr>:</case> <expr_stmt><expr><name>actualKey</name> <operator>=</operator> <name>KEY_Z</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>actualKey</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>actualKey</name></expr>]</index></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramChar0</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UWP_MSG_REGISTER_CLICK</name></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramChar0</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UWP_MSG_SCROLL_WHEEL_UPDATE</name></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name> <operator>+=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UWP_MSG_UPDATE_MOUSE_LOCATION</name></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UWP_MSG_SET_GAMEPAD_ACTIVE</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramBool0</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><name>UWP_MSG_SET_GAMEPAD_BUTTON</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>paramInt1</name></name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt1</name></name></expr>]</index></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramChar0</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UWP_MSG_SET_GAMEPAD_AXIS</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>paramInt1</name></name> <operator>&lt;</operator> <name>MAX_GAMEPAD_AXIS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt1</name></name></expr>]</index></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramFloat0</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index><index>[<expr><name>GAMEPAD_BUTTON_LEFT_TRIGGER_2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index><index>[<expr><name>GAMEPAD_AXIS_LEFT_TRIGGER</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index><index>[<expr><name>GAMEPAD_BUTTON_RIGHT_TRIGGER_2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>paramInt0</name></name></expr>]</index><index>[<expr><name>GAMEPAD_AXIS_RIGHT_TRIGGER</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UWP_MSG_SET_DISPLAY_DIMS</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramVector0</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>UWP_MSG_HANDLE_RESIZE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>eglQuerySurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>EGL_WIDTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eglQuerySurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>EGL_HEIGHT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlOrtho</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlClearScreenBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 




<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>resized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>UWP_MSG_SET_GAME_TIME</name></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Time</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>paramDouble0</name></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>DeleteUWPMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>previousKeyState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousButtonState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousWheelMove</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TOUCH_POINTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>previousTouchState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>glfwJoystickPresent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> 
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>previousState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>




<decl_stmt><decl><type><name>GLFWgamepadstate</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glfwGetGamepadState</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buttons</name> <init>= <expr><name><name>state</name><operator>.</operator><name>buttons</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>buttons</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <name>GLFW_GAMEPAD_BUTTON_DPAD_LEFT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name><operator>)</operator></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GamepadButton</name></type> <name>button</name> <init>= <expr><call><name>GetGamepadButton</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buttons</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>lastButtonPressed</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>axes</name> <init>= <expr><name><name>state</name><operator>.</operator><name>axes</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>axes</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <name>GLFW_GAMEPAD_AXIS_LAST</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_AXIS</name><operator>)</operator></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>axis</name> <init>= <expr><call><name>GetGamepadAxis</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>axis</name></expr>]</index></name> <operator>=</operator> <name><name>axes</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>GAMEPAD_BUTTON_LEFT_TRIGGER_2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>GAMEPAD_AXIS_LEFT_TRIGGER</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>GAMEPAD_BUTTON_RIGHT_TRIGGER_2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>GAMEPAD_AXIS_RIGHT_TRIGGER</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisCount</name></name> <operator>=</operator> <name>GLFW_GAMEPAD_AXIS_LAST</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>resized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_EVENTS_WAITING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwWaitEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>glfwPollEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>numGamepads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>emscripten_sample_gamepad_data</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EMSCRIPTEN_RESULT_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>numGamepads</name> <operator>=</operator> <call><name>emscripten_get_num_gamepads</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>numGamepads</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>previousState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>EmscriptenGamepadEvent</name></type> <name>gamepadState</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>emscripten_get_gamepad_status</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gamepadState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>EMSCRIPTEN_RESULT_SUCCESS</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>gamepadState</name><operator>.</operator><name>numButtons</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GamepadButton</name></type> <name>button</name> <init>= <expr><call><name>GetGamepadButton</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gamepadState</name><operator>.</operator><name>digitalButton</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>lastButtonPressed</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>gamepadState</name><operator>.</operator><name>numAxes</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name>MAX_GAMEPAD_AXIS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>axis</name> <init>= <expr><call><name>GetGamepadAxis</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>axis</name></expr>]</index></name> <operator>=</operator> <name><name>gamepadState</name><operator>.</operator><name>axis</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisCount</name></name> <operator>=</operator> <name><name>gamepadState</name><operator>.</operator><name>numAxes</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">260</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>previousKeyState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><name>int</name></type> <name>pollResult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pollEvents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<while>while <condition>(<expr><operator>(</operator><name>pollResult</name> <operator>=</operator> <call><name>ALooper_pollAll</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>appEnabled</name></name></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pollEvents</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name><operator>-&gt;</operator><name>process</name></name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>destroyRequested</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SSH_KEYBOARD_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>ProcessKeyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>SwapBuffers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glfwSwapBuffers</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>eglSwapBuffers</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ErrorCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLFW: Error: %i Description: %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ScrollCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>yoffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>yoffset</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>KeyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>exitKey</name></name> <operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwSetWindowShouldClose</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>GLFW_KEY_F12</name> <operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GIF_RECORDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mods</name> <operator>==</operator> <name>GLFW_MOD_CONTROL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gifRecording</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GifEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gifRecording</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>emscripten_run_script</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"saveFileFromMEMFSToDisk('%s','%s')"</literal></expr></argument>, <argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"screenrec%03i.gif"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"screenrec%03i.gif"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM: Finish animated GIF recording"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>gifRecording</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gifFramesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>internalDataPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"./screenrec%03i.gif"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"./screenrec%03i.gif"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>GifBegin</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>GetFrameTime</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">10.0f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screenshotCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM: Start animated GIF recording: %s"</literal></expr></argument>, <argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"screenrec%03i.gif"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SCREEN_CAPTURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<expr_stmt><expr><call><name>TakeScreenshot</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"screenshot%03i.png"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screenshotCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if>
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_RELEASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>MouseButtonCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_MOUSE_GESTURES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GestureEvent</name></type> <name>gestureEvent</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_DOWN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>previousButtonState</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_UP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ProcessGestureEvent</name><argument_list>(<argument><expr><name>gestureEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>MouseCursorPosCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_MOUSE_GESTURES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GestureEvent</name></type> <name>gestureEvent</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_MOVE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ProcessGestureEvent</name><argument_list>(<argument><expr><name>gestureEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CharCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name> <operator>&lt;</operator> <name>MAX_CHARS_QUEUE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CursorEnterCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enter</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorOnScreen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorOnScreen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>WindowSizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetupViewport</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>currentFbo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>resized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>WindowIconifyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iconified</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iconified</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>minimized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>minimized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>WindowDropCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ClearDroppedFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesPath</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesPath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_FILEPATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>dropFilesCount</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AndroidCommandCallback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name> <modifier>*</modifier></type><name>app</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>APP_CMD_START</name></expr>:</case>
<block>{<block_content>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>APP_CMD_RESUME</name></expr>:</case> <break>break;</break>
<case>case <expr><name>APP_CMD_INIT_WINDOW</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>app</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>contextRebindRequired</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>EGLint</name></type> <name>displayFormat</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eglGetConfigAttrib</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>EGL_NATIVE_VISUAL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>displayFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ANativeWindow_setBuffersGeometry</name><argument_list>(<argument><expr><name><name>app</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>render</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>displayFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>eglCreateWindowSurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>app</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>contextRebindRequired</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>ANativeWindow_getWidth</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>ANativeWindow_getHeight</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>app</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitGraphicsDevice</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>LoadFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name> <init>= <expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call><operator>.</operator><name><name>recs</name><index>[<expr><literal type="number">95</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<macro><name>SetShapesTexture</name><argument_list>(<argument>GetFontDefault().texture</argument>, <argument>(Rectangle){ rec.x + <literal type="number">1</literal></argument>, <argument>rec.y + <literal type="number">1</literal></argument>, <argument>rec.width - <literal type="number">2</literal></argument>, <argument>rec.height - <literal type="number">2</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>APP_CMD_GAINED_FOCUS</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>appEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>APP_CMD_PAUSE</name></expr>:</case> <break>break;</break>
<case>case <expr><name>APP_CMD_LOST_FOCUS</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>appEnabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>APP_CMD_TERM_WINDOW</name></expr>:</case>
<block>{<block_content>



<expr_stmt><expr><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>, <argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eglDestroySurface</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Android</name><operator>.</operator><name>contextRebindRequired</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>APP_CMD_SAVE_STATE</name></expr>:</case> <break>break;</break>
<case>case <expr><name>APP_CMD_STOP</name></expr>:</case> <break>break;</break>
<case>case <expr><name>APP_CMD_DESTROY</name></expr>:</case>
<block>{<block_content>


</block_content>}</block> <break>break;</break>
<case>case <expr><name>APP_CMD_CONFIG_CHANGED</name></expr>:</case>
<block>{<block_content>




</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>AndroidInputCallback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name> <modifier>*</modifier></type><name>app</name></decl></parameter>, <parameter><decl><type><name>AInputEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>AInputEvent_getType</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>source</name> <init>= <expr><call><name>AInputEvent_getSource</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AINPUT_EVENT_TYPE_MOTION</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>source</name> <operator>&amp;</operator> <name>AINPUT_SOURCE_JOYSTICK</name><operator>)</operator> <operator>==</operator> <name>AINPUT_SOURCE_JOYSTICK</name> <operator>||</operator> <operator>(</operator><name>source</name> <operator>&amp;</operator> <name>AINPUT_SOURCE_GAMEPAD</name><operator>)</operator> <operator>==</operator> <name>AINPUT_SOURCE_GAMEPAD</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>AMotionEvent_getX</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>AMotionEvent_getY</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>AMotionEvent_getX</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>AMotionEvent_getY</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>keycode</name> <init>= <expr><call><name>AKeyEvent_getKeyCode</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AKeyEvent_getAction</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AKEY_EVENT_ACTION_DOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>keycode</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>keycode</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AINPUT_EVENT_TYPE_KEY</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>keycode</name> <init>= <expr><call><name>AKeyEvent_getKeyCode</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>AKeyEvent_getAction</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AKEY_EVENT_ACTION_DOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>keycode</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>keycode</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>keycode</name> <operator>==</operator> <name>AKEYCODE_POWER</name></expr>)</condition>
<block>{<block_content>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>keycode</name> <operator>==</operator> <name>AKEYCODE_BACK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>keycode</name> <operator>==</operator> <name>AKEYCODE_MENU</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>keycode</name> <operator>==</operator> <name>AKEYCODE_VOLUME_UP</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>keycode</name> <operator>==</operator> <name>AKEYCODE_VOLUME_DOWN</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>AMotionEvent_getX</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>AMotionEvent_getY</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>action</name> <init>= <expr><call><name>AMotionEvent_getAction</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><name>action</name> <operator>&amp;</operator> <name>AMOTION_EVENT_ACTION_MASK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>AMOTION_EVENT_ACTION_DOWN</name> <operator>||</operator> <name>flags</name> <operator>==</operator> <name>AMOTION_EVENT_ACTION_MOVE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>MOUSE_LEFT_BUTTON</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>AMOTION_EVENT_ACTION_UP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>MOUSE_LEFT_BUTTON</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GestureEvent</name></type> <name>gestureEvent</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>AMOTION_EVENT_ACTION_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_DOWN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>AMOTION_EVENT_ACTION_UP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_UP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>AMOTION_EVENT_ACTION_MOVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_MOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <call><name>AMotionEvent_getPointerCount</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AMotionEvent_getPointerId</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AMotionEvent_getPointerId</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>AMotionEvent_getX</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>AMotionEvent_getY</name><argument_list>(<argument>event</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>AMotionEvent_getX</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <macro><name>AMotionEvent_getY</name><argument_list>(<argument>event</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ProcessGestureEvent</name><argument_list>(<argument><expr><name>gestureEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenFullscreenChangeCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenFullscreenChangeEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>isFullscreen</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WEB: Canvas scaled to fullscreen. ElementSize: (%ix%i), ScreenSize(%ix%i)"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>elementWidth</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>elementHeight</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>screenWidth</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>screenHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"WEB: Canvas scaled to windowed. ElementSize: (%ix%i), ScreenSize(%ix%i)"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>elementWidth</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>elementHeight</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>screenWidth</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>screenHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenKeyboardCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenKeyboardEvent</name> <modifier>*</modifier></type><name>keyEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_KEYPRESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>keyEvent</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="string">"Escape"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emscripten_exit_pointerlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenMouseCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenMouseEvent</name> <modifier>*</modifier></type><name>mouseEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_CLICK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorLockRequired</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>EmscriptenPointerlockChangeEvent</name></type> <name>plce</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>emscripten_get_pointerlock_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>plce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plce</name><operator>.</operator><name>isActive</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>emscripten_request_pointerlock</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>emscripten_exit_pointerlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emscripten_get_pointerlock_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>plce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>cursorLockRequired</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenTouchCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenTouchEvent</name> <modifier>*</modifier></type><name>touchEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>touchEvent</name><operator>-&gt;</operator><name>numTouches</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_TOUCHSTART</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_TOUCHEND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>currentTouchState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GestureEvent</name></type> <name>gestureEvent</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_TOUCHSTART</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_DOWN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_TOUCHEND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_UP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_TOUCHMOVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>TOUCH_MOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <name><name>touchEvent</name><operator>-&gt;</operator><name>numTouches</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>identifier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>identifier</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targetX</name></expr>, <expr><name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targetY</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>targetX</name></expr>, <expr><name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>targetY</name></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>canvasWidth</name></decl>, <decl><type ref="prev"/><name>canvasHeight</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>emscripten_get_element_css_size</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>canvasWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>canvasHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>*=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>canvasWidth</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>*=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>canvasHeight</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>*=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>canvasWidth</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>*=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>canvasHeight</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ProcessGestureEvent</name><argument_list>(<argument><expr><name>gestureEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>eventType</name> <operator>==</operator> <name>EMSCRIPTEN_EVENT_TOUCHSTART</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targetX</name></expr>, <expr><name><name>touchEvent</name><operator>-&gt;</operator><name>touches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targetY</name></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>canvasWidth</name></decl>, <decl><type ref="prev"/><name>canvasHeight</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emscripten_get_element_css_size</name><argument_list>(<argument><expr><literal type="string">"#canvas"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>canvasWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>canvasHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>*=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>canvasWidth</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>*=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>canvasHeight</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>EM_BOOL</name></type> <name>EmscriptenGamepadCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EmscriptenGamepadEvent</name> <modifier>*</modifier></type><name>gamepadEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>
<block>{<block_content>









<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gamepadEvent</name><operator>-&gt;</operator><name>connected</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gamepadEvent</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name><name>gamepadEvent</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name><name>gamepadEvent</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SSH_KEYBOARD_RPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitKeyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>keyboardNewSettings</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultSettings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>keyboardNewSettings</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultSettings</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>keyboardNewSettings</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ICANON</name> <operator>|</operator> <name>ECHO</name> <operator>|</operator> <name>ISIG</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyboardNewSettings</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keyboardNewSettings</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyboardNewSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>KDGKBMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultMode</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to change keyboard mode (SSH keyboard?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>





<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>KDSKBMODE</name></expr></argument>, <argument><expr><name>K_XLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>RestoreKeyboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ProcessKeyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEYBUFFER_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 


<decl_stmt><decl><type><name>int</name></type> <name>bufferByteCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>keysBuffer</name><index>[<expr><name>MAX_KEYBUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 


<expr_stmt><expr><name>bufferByteCount</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>keysBuffer</name></expr></argument>, <argument><expr><name>MAX_KEYBUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>





<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bufferByteCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bufferByteCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>exitKey</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x5b</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x5b</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x32</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x41</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">290</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x42</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">291</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x43</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">292</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x44</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">293</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x45</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">294</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x37</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">295</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x38</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">296</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x39</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">297</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x30</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">298</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x31</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">299</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x33</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">300</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x34</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">301</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x5b</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x32</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>keysBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x41</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">265</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x42</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">264</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x43</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">262</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x44</literal></expr>:</case> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">263</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> 
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>


</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">257</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">257</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">259</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">257</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">97</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">122</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <name><name>keysBuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>exitKey</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SCREEN_CAPTURE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">301</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TakeScreenshot</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"screenshot%03i.png"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screenshotCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>RestoreKeyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultSettings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>KDSKBMODE</name></expr></argument>, <argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>defaultMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<function><type><specifier>static</specifier> <name>void</name></type> <name>InitEvdevInput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_FILEPATH_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>entity</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TOUCH_POINTS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>lastKeyPressed</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>directory</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>DEFAULT_EVDEV_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>directory</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>entity</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"event"</literal></expr></argument>, <argument><expr><name><name>entity</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"event"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>DEFAULT_EVDEV_PATH</name></expr></argument>, <argument><expr><name><name>entity</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EventThreadSpawn</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to open linux event directory: %s"</literal></expr></argument>, <argument><expr><name>DEFAULT_EVDEV_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>EventThreadSpawn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_PER_LONG</name></cpp:macro> <cpp:value>(sizeof(long)*8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBITS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x) - 1)/BITS_PER_LONG) + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)%BITS_PER_LONG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1UL&lt;&lt;OFF(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)/BITS_PER_LONG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BIT</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((array[LONG(bit)] &gt;&gt; OFF(bit)) &amp; 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>input_absinfo</name></name></type> <name>absinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>evBits</name><index>[<expr><call><name>NBITS</name><argument_list>(<argument><expr><name>EV_MAX</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>absBits</name><index>[<expr><call><name>NBITS</name><argument_list>(<argument><expr><name>ABS_MAX</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>relBits</name><index>[<expr><call><name>NBITS</name><argument_list>(<argument><expr><name>REL_MAX</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>keyBits</name><index>[<expr><call><name>NBITS</name><argument_list>(<argument><expr><name>KEY_MAX</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasAbs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasRel</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasAbsMulti</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>freeWorkerId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputEventWorker</name> <modifier>*</modifier></type><name>worker</name></decl>;</decl_stmt>




<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>InputEventWorker</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>freeWorkerId</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>freeWorkerId</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>worker</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>freeWorkerId</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InputEventWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to create input device thread for %s, out of worker slots"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to open input device (error: %d)"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>devNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptrDevName</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>eventNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptrDevName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>ptrDevName</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>devNum</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>eventNum</name></name> <operator>=</operator> <name>devNum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evBits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>evBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>evBits</name></expr></argument>, <argument><expr><name>EV_ABS</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_ABS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>absBits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>absBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>absBits</name></expr></argument>, <argument><expr><name>ABS_X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TEST_BIT</name><argument_list>(<argument><expr><name>absBits</name></expr></argument>, <argument><expr><name>ABS_Y</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hasAbs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>ABS_X</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>maximum</name></name> <operator>-</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>ABS_Y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>maximum</name></name> <operator>-</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>absBits</name></expr></argument>, <argument><expr><name>ABS_MT_POSITION_X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TEST_BIT</name><argument_list>(<argument><expr><name>absBits</name></expr></argument>, <argument><expr><name>ABS_MT_POSITION_Y</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hasAbsMulti</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>ABS_X</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>maximum</name></name> <operator>-</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>ABS_Y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>absinfo</name><operator>.</operator><name>maximum</name></name> <operator>-</operator> <name><name>absinfo</name><operator>.</operator><name>minimum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>evBits</name></expr></argument>, <argument><expr><name>EV_REL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_REL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>relBits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>relBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>relBits</name></expr></argument>, <argument><expr><name>REL_X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TEST_BIT</name><argument_list>(<argument><expr><name>relBits</name></expr></argument>, <argument><expr><name>REL_Y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hasRel</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>evBits</name></expr></argument>, <argument><expr><name>EV_KEY</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyBits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAbs</name> <operator>||</operator> <name>hasAbsMulti</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_TOUCH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isTouch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_TOOL_FINGER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isTouch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_TOOL_PEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isTouch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_STYLUS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isTouch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>isTouch</name></name> <operator>||</operator> <name>hasAbsMulti</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isMultitouch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasRel</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isMouse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isMouse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_A</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isGamepad</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_TRIGGER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isGamepad</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_START</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isGamepad</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_TL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isGamepad</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>BTN_TL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isGamepad</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>keyBits</name></expr></argument>, <argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>isKeyboard</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>isTouch</name></name> <operator>||</operator> <name><name>worker</name><operator>-&gt;</operator><name>isMouse</name></name> <operator>||</operator> <name><name>worker</name><operator>-&gt;</operator><name>isKeyboard</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RPI: Opening input device: %s (%s%s%s%s%s)"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>worker</name><operator>-&gt;</operator><name>isMouse</name></name></expr>?</condition><then> <expr><literal type="string">"mouse "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>worker</name><operator>-&gt;</operator><name>isMultitouch</name></name></expr>?</condition><then> <expr><literal type="string">"multitouch "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>worker</name><operator>-&gt;</operator><name>isTouch</name></name></expr>?</condition><then> <expr><literal type="string">"touchscreen "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>worker</name><operator>-&gt;</operator><name>isGamepad</name></name></expr>?</condition><then> <expr><literal type="string">"gamepad "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>worker</name><operator>-&gt;</operator><name>isKeyboard</name></name></expr>?</condition><then> <expr><literal type="string">"keyboard "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EventThread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>worker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to create input device thread: %s (error: %d)"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>threadId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LAST_TOUCH_DEVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>maxTouchNumber</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>InputEventWorker</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isTouch</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eventNum</name> <operator>&gt;</operator> <name>maxTouchNumber</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxTouchNumber</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eventNum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>InputEventWorker</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isTouch</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eventNum</name> <operator>&lt;</operator> <name>maxTouchNumber</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Found duplicate touchscreen, killing touchscreen on event: %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>eventWorker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>EventThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>keymap_US</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">256</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">259</literal></expr>,<expr><literal type="number">258</literal></expr>,<expr><literal type="number">81</literal></expr>,<expr><literal type="number">87</literal></expr>,<expr><literal type="number">69</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">84</literal></expr>,
<expr><literal type="number">89</literal></expr>,<expr><literal type="number">85</literal></expr>,<expr><literal type="number">73</literal></expr>,<expr><literal type="number">79</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">91</literal></expr>,<expr><literal type="number">93</literal></expr>,<expr><literal type="number">257</literal></expr>,<expr><literal type="number">341</literal></expr>,<expr><literal type="number">65</literal></expr>,<expr><literal type="number">83</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">70</literal></expr>,<expr><literal type="number">71</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">74</literal></expr>,<expr><literal type="number">75</literal></expr>,<expr><literal type="number">76</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">96</literal></expr>,
<expr><literal type="number">340</literal></expr>,<expr><literal type="number">92</literal></expr>,<expr><literal type="number">90</literal></expr>,<expr><literal type="number">88</literal></expr>,<expr><literal type="number">67</literal></expr>,<expr><literal type="number">86</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">78</literal></expr>,<expr><literal type="number">77</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">344</literal></expr>,<expr><literal type="number">332</literal></expr>,<expr><literal type="number">342</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">280</literal></expr>,<expr><literal type="number">290</literal></expr>,<expr><literal type="number">291</literal></expr>,
<expr><literal type="number">292</literal></expr>,<expr><literal type="number">293</literal></expr>,<expr><literal type="number">294</literal></expr>,<expr><literal type="number">295</literal></expr>,<expr><literal type="number">296</literal></expr>,<expr><literal type="number">297</literal></expr>,<expr><literal type="number">298</literal></expr>,<expr><literal type="number">299</literal></expr>,<expr><literal type="number">282</literal></expr>,<expr><literal type="number">281</literal></expr>,<expr><literal type="number">327</literal></expr>,<expr><literal type="number">328</literal></expr>,<expr><literal type="number">329</literal></expr>,<expr><literal type="number">333</literal></expr>,<expr><literal type="number">324</literal></expr>,<expr><literal type="number">325</literal></expr>,
<expr><literal type="number">326</literal></expr>,<expr><literal type="number">334</literal></expr>,<expr><literal type="number">321</literal></expr>,<expr><literal type="number">322</literal></expr>,<expr><literal type="number">323</literal></expr>,<expr><literal type="number">320</literal></expr>,<expr><literal type="number">330</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">85</literal></expr>,<expr><literal type="number">86</literal></expr>,<expr><literal type="number">300</literal></expr>,<expr><literal type="number">301</literal></expr>,<expr><literal type="number">89</literal></expr>,<expr><literal type="number">90</literal></expr>,<expr><literal type="number">91</literal></expr>,<expr><literal type="number">92</literal></expr>,<expr><literal type="number">93</literal></expr>,<expr><literal type="number">94</literal></expr>,<expr><literal type="number">95</literal></expr>,
<expr><literal type="number">335</literal></expr>,<expr><literal type="number">345</literal></expr>,<expr><literal type="number">331</literal></expr>,<expr><literal type="number">283</literal></expr>,<expr><literal type="number">346</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">268</literal></expr>,<expr><literal type="number">265</literal></expr>,<expr><literal type="number">266</literal></expr>,<expr><literal type="number">263</literal></expr>,<expr><literal type="number">262</literal></expr>,<expr><literal type="number">269</literal></expr>,<expr><literal type="number">264</literal></expr>,<expr><literal type="number">267</literal></expr>,<expr><literal type="number">260</literal></expr>,<expr><literal type="number">261</literal></expr>,
<expr><literal type="number">112</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">114</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">118</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">122</literal></expr>,<expr><literal type="number">123</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">125</literal></expr>,<expr><literal type="number">347</literal></expr>,<expr><literal type="number">127</literal></expr>,
<expr><literal type="number">128</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">130</literal></expr>,<expr><literal type="number">131</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">133</literal></expr>,<expr><literal type="number">134</literal></expr>,<expr><literal type="number">135</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">137</literal></expr>,<expr><literal type="number">138</literal></expr>,<expr><literal type="number">139</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">142</literal></expr>,<expr><literal type="number">143</literal></expr>,
<expr><literal type="number">144</literal></expr>,<expr><literal type="number">145</literal></expr>,<expr><literal type="number">146</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">149</literal></expr>,<expr><literal type="number">150</literal></expr>,<expr><literal type="number">151</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">153</literal></expr>,<expr><literal type="number">154</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">158</literal></expr>,<expr><literal type="number">159</literal></expr>,
<expr><literal type="number">160</literal></expr>,<expr><literal type="number">161</literal></expr>,<expr><literal type="number">162</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">165</literal></expr>,<expr><literal type="number">166</literal></expr>,<expr><literal type="number">167</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">169</literal></expr>,<expr><literal type="number">170</literal></expr>,<expr><literal type="number">171</literal></expr>,<expr><literal type="number">172</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">174</literal></expr>,<expr><literal type="number">175</literal></expr>,
<expr><literal type="number">176</literal></expr>,<expr><literal type="number">177</literal></expr>,<expr><literal type="number">178</literal></expr>,<expr><literal type="number">179</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">182</literal></expr>,<expr><literal type="number">183</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">186</literal></expr>,<expr><literal type="number">187</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">189</literal></expr>,<expr><literal type="number">190</literal></expr>,<expr><literal type="number">191</literal></expr>,
<expr><literal type="number">192</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">194</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><literal type="number">201</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">203</literal></expr>,<expr><literal type="number">204</literal></expr>,<expr><literal type="number">205</literal></expr>,<expr><literal type="number">206</literal></expr>,<expr><literal type="number">207</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">209</literal></expr>,<expr><literal type="number">210</literal></expr>,
<expr><literal type="number">211</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">213</literal></expr>,<expr><literal type="number">214</literal></expr>,<expr><literal type="number">215</literal></expr>,<expr><literal type="number">216</literal></expr>,<expr><literal type="number">217</literal></expr>,<expr><literal type="number">218</literal></expr>,<expr><literal type="number">219</literal></expr>,<expr><literal type="number">220</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="number">223</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">225</literal></expr>,<expr><literal type="number">226</literal></expr>,
<expr><literal type="number">227</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">229</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">231</literal></expr>,<expr><literal type="number">232</literal></expr>,<expr><literal type="number">233</literal></expr>,<expr><literal type="number">234</literal></expr>,<expr><literal type="number">235</literal></expr>,<expr><literal type="number">236</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">238</literal></expr>,<expr><literal type="number">239</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">241</literal></expr>,<expr><literal type="number">242</literal></expr>,
<expr><literal type="number">243</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><literal type="number">245</literal></expr>,<expr><literal type="number">246</literal></expr>,<expr><literal type="number">247</literal></expr>,<expr><literal type="number">248</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InputEventWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><operator>(</operator><name>InputEventWorker</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>touchAction</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gestureUpdate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keycode</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>EV_REL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>REL_X</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>touchAction</name> <operator>=</operator> <name>TOUCH_MOVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gestureUpdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>REL_Y</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>touchAction</name> <operator>=</operator> <name>TOUCH_MOVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gestureUpdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>REL_WHEEL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentWheelMove</name></name> <operator>+=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>EV_ABS</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>ABS_X</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>value</name></name> <operator>-</operator> <name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>touchAction</name> <operator>=</operator> <name>TOUCH_MOVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gestureUpdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>ABS_Y</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>value</name></name> <operator>-</operator> <name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>touchAction</name> <operator>=</operator> <name>TOUCH_MOVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gestureUpdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>ABS_MT_SLOT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>ABS_MT_POSITION_X</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name> <operator>&lt;</operator> <name>MAX_TOUCH_POINTS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>value</name></name> <operator>-</operator> <name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>ABS_MT_POSITION_Y</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name> <operator>&lt;</operator> <name>MAX_TOUCH_POINTS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>value</name></name> <operator>-</operator> <name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><name><name>worker</name><operator>-&gt;</operator><name>absRange</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>ABS_MT_TRACKING_ID</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>.</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name> <operator>&lt;</operator> <name>MAX_TOUCH_POINTS</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><name><name>worker</name><operator>-&gt;</operator><name>touchSlot</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>EV_KEY</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>BTN_TOUCH</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>BTN_LEFT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonStateEvdev</name><index>[<expr><name>MOUSE_LEFT_BUTTON</name></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>touchAction</name> <operator>=</operator> <name>TOUCH_DOWN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>touchAction</name> <operator>=</operator> <name>TOUCH_UP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>gestureUpdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>BTN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonStateEvdev</name><index>[<expr><name>MOUSE_RIGHT_BUTTON</name></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>BTN_MIDDLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>currentButtonStateEvdev</name><index>[<expr><name>MOUSE_MIDDLE_BUTTON</name></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>.</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>code</name></name> <operator>&lt;=</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>keycode</name> <operator>=</operator> <name><name>keymap_US</name><index>[<expr><name><name>event</name><operator>.</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keycode</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>keycode</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition>
<block>{<block_content>












<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name>keycode</name></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>value</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueue</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name></expr>]</index></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>keyPressedQueueCount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_SCREEN_CAPTURE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><literal type="number">301</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TakeScreenshot</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"screenshot%03i.png"</literal></expr></argument>, <argument><expr><name>screenshotCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screenshotCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>currentKeyState</name><index>[<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Keyboard</name><operator>.</operator><name>exitKey</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"RPI: KEY_%s ScanCode: %4i KeyCode: %4i"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>event</name><operator>.</operator><name>value</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"UP"</literal></expr></then><else>:<expr><literal type="string">"DOWN"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>width</name></name><operator>/</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>screen</name><operator>.</operator><name>height</name></name><operator>/</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Mouse</name><operator>.</operator><name>scale</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>gestureUpdate</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_GESTURES_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GestureEvent</name></type> <name>gestureEvent</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>touchAction</name></name> <operator>=</operator> <name>touchAction</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointCount</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gestureEvent</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Touch</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ProcessGestureEvent</name><argument_list>(<argument><expr><name>gestureEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>InitGamepad</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>gamepadDev</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>gamepadDev</name></expr></argument>, <argument><expr><literal type="string">"%s%i"</literal></expr></argument>, <argument><expr><name>DEFAULT_GAMEPAD_DEV</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>streamId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>gamepadDev</name></expr></argument>, <argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to open Gamepad device, no gamepad available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>ready</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>threadId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GamepadThread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RPI: Failed to create gamepad input event thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RPI: Gamepad device initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GamepadThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_EVENT_BUTTON</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_EVENT_AXIS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_EVENT_INIT</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<struct>struct <name>js_event</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>number</name></decl>;</decl_stmt> 
}</block>;</struct>


<decl_stmt><decl><type><name><name>struct</name> <name>js_event</name></name></type> <name>gamepadEvent</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>CORE</name><operator>.</operator><name>Window</name><operator>.</operator><name>shouldClose</name></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_GAMEPADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>streamId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gamepadEvent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>js_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>js_event</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gamepadEvent</name><operator>.</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JS_EVENT_INIT</name></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>gamepadEvent</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>JS_EVENT_BUTTON</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"RPI: Gamepad button: %i, value: %i"</literal></expr></argument>, <argument><expr><name><name>gamepadEvent</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><name><name>gamepadEvent</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gamepadEvent</name><operator>.</operator><name>number</name></name> <operator>&lt;</operator> <name>MAX_GAMEPAD_BUTTONS</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>currentState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>gamepadEvent</name><operator>.</operator><name>number</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>gamepadEvent</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>gamepadEvent</name><operator>.</operator><name>value</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>lastButtonPressed</name></name> <operator>=</operator> <name><name>gamepadEvent</name><operator>.</operator><name>number</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>lastButtonPressed</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>gamepadEvent</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>JS_EVENT_AXIS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"RPI: Gamepad axis: %i, value: %i"</literal></expr></argument>, <argument><expr><name><name>gamepadEvent</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><name><name>gamepadEvent</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gamepadEvent</name><operator>.</operator><name>number</name></name> <operator>&lt;</operator> <name>MAX_GAMEPAD_AXIS</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>CORE</name><operator>.</operator><name>Input</name><operator>.</operator><name>Gamepad</name><operator>.</operator><name>axisState</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>gamepadEvent</name><operator>.</operator><name>number</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>gamepadEvent</name><operator>.</operator><name>value</name></name><operator>/</operator><literal type="number">32768</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
