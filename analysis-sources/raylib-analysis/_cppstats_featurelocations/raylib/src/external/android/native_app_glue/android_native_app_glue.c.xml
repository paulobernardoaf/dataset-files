<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\android\native_app_glue\android_native_app_glue.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"android_native_app_glue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/log.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGI</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)__android_log_print(ANDROID_LOG_INFO, "threaded_app", __VA_ARGS__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGE</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)__android_log_print(ANDROID_LOG_ERROR, "threaded_app", __VA_ARGS__))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGV</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)__android_log_print(ANDROID_LOG_VERBOSE, "threaded_app", __VA_ARGS__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGV</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_saved_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedStateSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>android_app_read_cmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>msgread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>APP_CMD_SAVE_STATE</name></expr>:</case>
<expr_stmt><expr><call><name>free_saved_state</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"No data on command pipe!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_cur_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>lang</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>country</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AConfiguration_getLanguage</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AConfiguration_getCountry</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>country</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Config: mcc=%d mnc=%d lang=%c%c cnt=%c%c orien=%d touch=%d dens=%d "</literal>
<literal type="string">"keys=%d nav=%d keysHid=%d navHid=%d sdk=%d size=%d long=%d "</literal>
<literal type="string">"modetype=%d modenight=%d"</literal></expr></argument>,
<argument><expr><call><name>AConfiguration_getMcc</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getMnc</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>country</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>country</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>AConfiguration_getOrientation</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getTouchscreen</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getDensity</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getKeyboard</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getNavigation</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getKeysHidden</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getNavHidden</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getSdkVersion</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getScreenSize</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getScreenLong</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getUiModeType</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AConfiguration_getUiModeNight</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>android_app_pre_exec_cmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>APP_CMD_INPUT_CHANGED</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"APP_CMD_INPUT_CHANGED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AInputQueue_detachLooper</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>=</operator> <name><name>android_app</name><operator>-&gt;</operator><name>pendingInputQueue</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Attaching input queue to looper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AInputQueue_attachLooper</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>,
<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>looper</name></name></expr></argument>, <argument><expr><name>LOOPER_ID_INPUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>inputPollSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>APP_CMD_INIT_WINDOW</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"APP_CMD_INIT_WINDOW\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name><name>android_app</name><operator>-&gt;</operator><name>pendingWindow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>APP_CMD_TERM_WINDOW</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"APP_CMD_TERM_WINDOW\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>APP_CMD_RESUME</name></expr>:</case>
<case>case <expr><name>APP_CMD_START</name></expr>:</case>
<case>case <expr><name>APP_CMD_PAUSE</name></expr>:</case>
<case>case <expr><name>APP_CMD_STOP</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"activityState=%d\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>activityState</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>APP_CMD_CONFIG_CHANGED</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"APP_CMD_CONFIG_CHANGED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AConfiguration_fromAssetManager</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,
<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>activity</name><operator>-&gt;</operator><name>assetManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_cur_config</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>APP_CMD_DESTROY</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"APP_CMD_DESTROY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>destroyRequested</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>android_app_post_exec_cmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>APP_CMD_TERM_WINDOW</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"APP_CMD_TERM_WINDOW\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>APP_CMD_SAVE_STATE</name></expr>:</case>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"APP_CMD_SAVE_STATE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>stateSaved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>APP_CMD_RESUME</name></expr>:</case>
<expr_stmt><expr><call><name>free_saved_state</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>app_dummy</name><parameter_list>()</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_app_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"android_app_destroy!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_saved_state</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AInputQueue_detachLooper</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AConfiguration_delete</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>destroyed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>app</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>android_poll_source</name></name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AInputEvent</name><modifier>*</modifier></type> <name>event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>AInputQueue_getEvent</name><argument_list>(<argument><expr><name><name>app</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"New input event: type=%d\n"</literal></expr></argument>, <argument><expr><call><name>AInputEvent_getType</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AInputQueue_preDispatchEvent</name><argument_list>(<argument><expr><name><name>app</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>handled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>app</name><operator>-&gt;</operator><name>onInputEvent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>handled</name> <operator>=</operator> <call><name><name>app</name><operator>-&gt;</operator><name>onInputEvent</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>AInputQueue_finishEvent</name><argument_list>(<argument><expr><name><name>app</name><operator>-&gt;</operator><name>inputQueue</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>handled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_cmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>app</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>android_poll_source</name></name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name></type> <name>cmd</name> <init>= <expr><call><name>android_app_read_cmd</name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>android_app_pre_exec_cmd</name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>app</name><operator>-&gt;</operator><name>onAppCmd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>app</name><operator>-&gt;</operator><name>onAppCmd</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>android_app_post_exec_cmd</name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>android_app_entry</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name> <init>= <expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <call><name>AConfiguration_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AConfiguration_fromAssetManager</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>activity</name><operator>-&gt;</operator><name>assetManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_cur_config</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>cmdPollSource</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>LOOPER_ID_MAIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>cmdPollSource</name><operator>.</operator><name>app</name></name> <operator>=</operator> <name>android_app</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>cmdPollSource</name><operator>.</operator><name>process</name></name> <operator>=</operator> <name>process_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>inputPollSource</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>LOOPER_ID_INPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>inputPollSource</name><operator>.</operator><name>app</name></name> <operator>=</operator> <name>android_app</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>inputPollSource</name><operator>.</operator><name>process</name></name> <operator>=</operator> <name>process_input</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALooper</name><modifier>*</modifier></type> <name>looper</name> <init>= <expr><call><name>ALooper_prepare</name><argument_list>(<argument><expr><name>ALOOPER_PREPARE_ALLOW_NON_CALLBACKS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALooper_addFd</name><argument_list>(<argument><expr><name>looper</name></expr></argument>, <argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>msgread</name></name></expr></argument>, <argument><expr><name>LOOPER_ID_MAIN</name></expr></argument>, <argument><expr><name>ALOOPER_EVENT_INPUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cmdPollSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>looper</name></name> <operator>=</operator> <name>looper</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>android_main</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>android_app_destroy</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app_create</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>savedState</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>savedStateSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name> <init>= <expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>android_app</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>android_app</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>savedState</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>savedStateSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedStateSize</name></name> <operator>=</operator> <name>savedStateSize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name></expr></argument>, <argument><expr><name>savedState</name></expr></argument>, <argument><expr><name>savedStateSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>msgpipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>msgpipe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"could not create pipe: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>msgread</name></name> <operator>=</operator> <name><name>msgpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>msgwrite</name></name> <operator>=</operator> <name><name>msgpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>android_app_entry</name></expr></argument>, <argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>android_app</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>android_app</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_app_write_cmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>msgwrite</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"Failure writing android_app cmd: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_app_set_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>, <parameter><decl><type><name>AInputQueue</name><modifier>*</modifier></type> <name>inputQueue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>pendingInputQueue</name></name> <operator>=</operator> <name>inputQueue</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>APP_CMD_INPUT_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>!=</operator> <name><name>android_app</name><operator>-&gt;</operator><name>pendingInputQueue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_app_set_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>, <parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>pendingWindow</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>APP_CMD_TERM_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>pendingWindow</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>APP_CMD_INIT_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <name><name>android_app</name><operator>-&gt;</operator><name>pendingWindow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_app_set_activity_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>activityState</name></name> <operator>!=</operator> <name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_app_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>APP_CMD_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>android_app</name><operator>-&gt;</operator><name>destroyed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>msgread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>android_app</name><operator>-&gt;</operator><name>msgwrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onDestroy</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Destroy: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_free</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onStart</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Start: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_activity_state</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>APP_CMD_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onResume</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Resume: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_activity_state</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>APP_CMD_RESUME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>outLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name> <init>= <expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>savedState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"SaveInstanceState: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>stateSaved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>APP_CMD_SAVE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>android_app</name><operator>-&gt;</operator><name>stateSaved</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>savedState</name> <operator>=</operator> <name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outLen</name> <operator>=</operator> <name><name>android_app</name><operator>-&gt;</operator><name>savedStateSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>android_app</name><operator>-&gt;</operator><name>savedStateSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>android_app</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>savedState</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onPause</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Pause: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_activity_state</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>APP_CMD_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onStop</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Stop: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_activity_state</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>APP_CMD_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onConfigurationChanged</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name> <init>= <expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"ConfigurationChanged: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>APP_CMD_CONFIG_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onLowMemory</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>android_app</name></name><modifier>*</modifier></type> <name>android_app</name> <init>= <expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"LowMemory: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><name>android_app</name></expr></argument>, <argument><expr><name>APP_CMD_LOW_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onWindowFocusChanged</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>focused</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"WindowFocusChanged: %p -- %d\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>focused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_write_cmd</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>focused</name></expr> ?</condition><then> <expr><name>APP_CMD_GAINED_FOCUS</name></expr> </then><else>: <expr><name>APP_CMD_LOST_FOCUS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onNativeWindowCreated</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"NativeWindowCreated: %p -- %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_window</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onNativeWindowDestroyed</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"NativeWindowDestroyed: %p -- %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_window</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onInputQueueCreated</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>AInputQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"InputQueueCreated: %p -- %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_input</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onInputQueueDestroyed</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>AInputQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"InputQueueDestroyed: %p -- %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>android_app_set_input</name><argument_list>(<argument><expr><operator>(</operator>struct <name>android_app</name><operator>*</operator><operator>)</operator><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name>
<name>void</name></type> <name>ANativeActivity_onCreate</name><parameter_list>(<parameter><decl><type><name>ANativeActivity</name><modifier>*</modifier></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>savedState</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>savedStateSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LOGV</name><argument_list>(<argument><expr><literal type="string">"Creating: %p\n"</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onDestroy</name></name> <operator>=</operator> <name>onDestroy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onStart</name></name> <operator>=</operator> <name>onStart</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onResume</name></name> <operator>=</operator> <name>onResume</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onSaveInstanceState</name></name> <operator>=</operator> <name>onSaveInstanceState</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onPause</name></name> <operator>=</operator> <name>onPause</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onStop</name></name> <operator>=</operator> <name>onStop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onConfigurationChanged</name></name> <operator>=</operator> <name>onConfigurationChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onLowMemory</name></name> <operator>=</operator> <name>onLowMemory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onWindowFocusChanged</name></name> <operator>=</operator> <name>onWindowFocusChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onNativeWindowCreated</name></name> <operator>=</operator> <name>onNativeWindowCreated</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onNativeWindowDestroyed</name></name> <operator>=</operator> <name>onNativeWindowDestroyed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onInputQueueCreated</name></name> <operator>=</operator> <name>onInputQueueCreated</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>onInputQueueDestroyed</name></name> <operator>=</operator> <name>onInputQueueDestroyed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>activity</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <call><name>android_app_create</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>savedState</name></expr></argument>, <argument><expr><name>savedStateSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
