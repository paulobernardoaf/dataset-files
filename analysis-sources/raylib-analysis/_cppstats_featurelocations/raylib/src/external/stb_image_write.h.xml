<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\stb_image_write.h">




















































































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_STB_IMAGE_WRITE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_STB_IMAGE_WRITE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIWDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_WRITE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIWDEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIWDEF</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIWDEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_WRITE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>stbi_write_tga_with_rle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>stbi_write_png_compression_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>stbi_write_force_png_filter</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_png</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_in_bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_bmp</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_tga</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_hdr</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_jpg</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WINDOWS_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbiw_convert_wchar_to_utf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> <name>stbi_write_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_png_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_in_bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_bmp_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_tga_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_hdr_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_jpg_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBIWDEF</name> <name>void</name></type> <name>stbi_flip_vertically_on_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flip_boolean</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_WRITE_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CRT_SECURE_NO_WARNINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CRT_NONSTDC_NO_DEPRECATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_NONSTDC_NO_DEPRECATE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_MALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBIW_FREE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_REALLOC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBIW_REALLOC_SIZED</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_MALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_FREE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_REALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_REALLOC_SIZED</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Must define all or none of STBIW_MALLOC, STBIW_FREE, and STBIW_REALLOC (or STBIW_REALLOC_SIZED)."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_REALLOC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>newsz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(p,newsz)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_REALLOC_SIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_REALLOC_SIZED</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>oldsz</name></type></parameter>,<parameter><type><name>newsz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STBIW_REALLOC(p,newsz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_MEMMOVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_MEMMOVE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memmove(a,b,sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_ASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_UCHAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned char) ((x) &amp; 0xff)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_IMAGE_WRITE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi_write_png_compression_level</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi_write_tga_with_rle</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi_write_force_png_filter</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>stbi_write_png_compression_level</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stbi_write_tga_with_rle</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stbi_write_force_png_filter</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stbi__flip_vertically_on_write</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>STBIWDEF</name> <name>void</name></type> <name>stbi_flip_vertically_on_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>stbi__flip_vertically_on_write</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbi__write_context</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__start_write_callbacks</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__stdio_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator> <name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_WINDOWS_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_EXTERN</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBIW_EXTERN</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>STBIW_EXTERN</name></type> <name>__declspec</name><argument_list>(<argument><expr><name>dllimport</name></expr></argument>)</argument_list> <name>int</name> <name>__stdcall</name> <name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>cp</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>int</name> <name>cbmb</name></expr></argument>, <argument><expr><name>wchar_t</name> <operator>*</operator><name>widestr</name></expr></argument>, <argument><expr><name>int</name> <name>cchwide</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STBIW_EXTERN</name></type> <name>__declspec</name><argument_list>(<argument><expr><name>dllimport</name></expr></argument>)</argument_list> <name>int</name> <name>__stdcall</name> <name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>cp</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><name>widestr</name></expr></argument>, <argument><expr><name>int</name> <name>cchwide</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>int</name> <name>cbmb</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>defchar</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>used_default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbiw_convert_wchar_to_utf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><literal type="number">65001</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>bufferlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>stbiw__fopen</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STBI_WINDOWS_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wMode</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wFilename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><literal type="number">65001</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wFilename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wFilename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><literal type="number">65001</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wMode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wMode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>_wfopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>wFilename</name></expr></argument>, <argument><expr><name>wMode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>_wfopen</name><argument_list>(<argument><expr><name>wFilename</name></expr></argument>, <argument><expr><name>wMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>fopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi__start_write_file</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>stbiw__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__start_write_callbacks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stbi__stdio_write</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbi__end_write_file</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>stbiw_uint32</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name><name>stb_image_write_test</name><index>[<expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbiw_uint32</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__writefv</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <block>{<block_content> <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name> <init>= <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break> </block_content>}</block>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break> </block_content>}</block>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <block>{<block_content> <decl_stmt><decl><type><name>stbiw_uint32</name></type> <name>x</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break> </block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>STBIW_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__writef</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__writefv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__putc</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__write3</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__write_pixel</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rgb_dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expand_mono</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>px</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>write_alpha</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><name>comp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>comp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>expand_mono</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbiw__write3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>write_alpha</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>px</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>bg</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>d</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>bg</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>stbiw__write3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>px</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>rgb_dir</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>px</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>px</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>rgb_dir</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>stbiw__write3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>rgb_dir</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>rgb_dir</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>write_alpha</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><name>comp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__write_pixels</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rgb_dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vdir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scanline_pad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expand_mono</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbiw_uint32</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>j_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stbi__flip_vertically_on_write</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vdir</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vdir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j_end</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>!=</operator> <name>j_end</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>vdir</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <operator>(</operator><name>j</name><operator>*</operator><name>x</name><operator>+</operator><name>i</name><operator>)</operator><operator>*</operator><name>comp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbiw__write_pixel</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rgb_dir</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>write_alpha</name></expr></argument>, <argument><expr><name>expand_mono</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>scanline_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbiw__outfile</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rgb_dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vdir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expand_mono</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__writefv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__write_pixels</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>rgb_dir</name></expr></argument>,<argument><expr><name>vdir</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>expand_mono</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi_write_bmp_core</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><operator>(</operator><operator>-</operator><name>x</name><operator>*</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>stbiw__outfile</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>pad</name></expr></argument>,
<argument><expr><literal type="string">"11 4 22 4"</literal> <literal type="string">"4 44 22 444444"</literal></expr></argument>,
<argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="number">14</literal><operator>+</operator><literal type="number">40</literal><operator>+</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>pad</name><operator>)</operator><operator>*</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal><operator>+</operator><literal type="number">40</literal></expr></argument>, 
<argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_bmp_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__start_write_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbi_write_bmp_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_bmp</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbi__start_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi_write_bmp_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__end_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi_write_tga_core</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name> <init>= <expr><operator>(</operator><name>comp</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>comp</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colorbytes</name> <init>= <expr><ternary><condition><expr><name>has_alpha</name></expr> ?</condition><then> <expr><name>comp</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>comp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><ternary><condition><expr><name>colorbytes</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stbi_write_tga_with_rle</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>stbiw__outfile</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"111 221 2222 11"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>colorbytes</name> <operator>+</operator> <name>has_alpha</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>has_alpha</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jend</name></decl>, <decl><type ref="prev"/><name>jdir</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbiw__writef</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"111 221 2222 11"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>format</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>colorbytes</name> <operator>+</operator> <name>has_alpha</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>has_alpha</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stbi__flip_vertically_on_write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jend</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jdir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jend</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jdir</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>!=</operator> <name>jend</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>jdir</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>comp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>len</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><name>row</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>comp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>comp</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>begin</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>comp</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name>comp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>comp</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>header</name> <init>= <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__write_pixel</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>begin</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>header</name> <init>= <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">129</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__write_pixel</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_tga_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__start_write_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbi_write_tga_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_tga</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbi__start_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi_write_tga_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__end_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__linear_to_rgbe</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rgbe</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>linear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exponent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxcomp</name> <init>= <expr><call><name>stbiw__max</name><argument_list>(<argument><expr><name><name>linear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>stbiw__max</name><argument_list>(<argument><expr><name><name>linear</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linear</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>maxcomp</name> <operator>&lt;</operator> <literal type="number">1e-32f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>normalize</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>frexp</name><argument_list>(<argument><expr><name>maxcomp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exponent</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">256.0f</literal><operator>/</operator><name>maxcomp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>linear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>normalize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>linear</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>normalize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>linear</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>normalize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgbe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>exponent</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__write_run_data</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>databyte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>lengthbyte</name> <init>= <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>length</name><operator>+</operator><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBIW_ASSERT</name><argument_list>(<argument><expr><name>length</name><operator>+</operator><literal type="number">128</literal> <operator>&lt;=</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lengthbyte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>databyte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__write_dump_data</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>lengthbyte</name> <init>= <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBIW_ASSERT</name><argument_list>(<argument><expr><name>length</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lengthbyte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__write_hdr_scanline</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ncomp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scratch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scanline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scanlineheader</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rgbe</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>linear</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>scanlineheader</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>width</name><operator>&amp;</operator><literal type="number">0xff00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scanlineheader</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>width</name><operator>&amp;</operator><literal type="number">0x00ff</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>width</name> <operator>&gt;=</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>ncomp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>linear</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>linear</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>stbiw__linear_to_rgbe</name><argument_list>(<argument><expr><name>rgbe</name></expr></argument>, <argument><expr><name>linear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>rgbe</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name>ncomp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>linear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>linear</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>linear</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>x</name><operator>*</operator><name>ncomp</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>stbiw__linear_to_rgbe</name><argument_list>(<argument><expr><name>rgbe</name></expr></argument>, <argument><expr><name>linear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scratch</name><index>[<expr><name>x</name> <operator>+</operator> <name>width</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scratch</name><index>[<expr><name>x</name> <operator>+</operator> <name>width</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scratch</name><index>[<expr><name>x</name> <operator>+</operator> <name>width</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scratch</name><index>[<expr><name>x</name> <operator>+</operator> <name>width</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>scanlineheader</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><operator>&amp;</operator><name><name>scratch</name><index>[<expr><name>width</name><operator>*</operator><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>r</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>comp</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>comp</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>comp</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>comp</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>r</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>r</name><operator>+</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>r</name><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbiw__write_dump_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>comp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>r</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content> 

<while>while <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>width</name> <operator>&amp;&amp;</operator> <name><name>comp</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>comp</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>r</name></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>r</name><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbiw__write_run_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>comp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi_write_hdr_core</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scratch</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBIW_MALLOC</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>header</name><index>[]</index></name> <init>= <expr><literal type="string">"#?RADIANCE\n#Written by stb_image_write.h\nFORMAT=32-bit_rle_rgbe\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_WANT_SECURE_LIB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf_s</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"EXPOSURE= 1.0000000000000\n\n-Y %d +X %d\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"EXPOSURE= 1.0000000000000\n\n-Y %d +X %d\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbiw__write_hdr_scanline</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>comp</name><operator>*</operator><name>x</name><operator>*</operator><operator>(</operator><ternary><condition><expr><name>stbi__flip_vertically_on_write</name></expr> ?</condition><then> <expr><name>y</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_hdr_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__start_write_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbi_write_hdr_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_hdr</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbi__start_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi_write_hdr_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__end_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_ZLIB_COMPRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbraw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int *) (void *) (a) - 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__sbraw(a)[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__sbraw(a)[1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbneedgrow</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)==0 || stbiw__sbn(a)+n &gt;= stbiw__sbm(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbmaybegrow</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stbiw__sbneedgrow(a,(n)) ? stbiw__sbgrow(a,n) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbgrow</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__sbgrowf((void **) &amp;(a), (n), sizeof(*(a)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbpush</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stbiw__sbmaybegrow(a,1), (a)[stbiw__sbn(a)++] = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbcount</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) ? stbiw__sbn(a) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__sbfree</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) ? STBIW_FREE(stbiw__sbraw(a)),0 : 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbiw__sbgrowf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>increment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>itemsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>arr</name></expr> ?</condition><then> <expr><literal type="number">2</literal><operator>*</operator><call><name>stbiw__sbm</name><argument_list>(<argument><expr><operator>*</operator><name>arr</name></expr></argument>)</argument_list></call><operator>+</operator><name>increment</name></expr> </then><else>: <expr><name>increment</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>STBIW_REALLOC_SIZED</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>arr</name></expr> ?</condition><then> <expr><call><name>stbiw__sbraw</name><argument_list>(<argument><expr><operator>*</operator><name>arr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>arr</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>stbiw__sbm</name><argument_list>(<argument><expr><operator>*</operator><name>arr</name></expr></argument>)</argument_list></call><operator>*</operator><name>itemsize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>itemsize</name> <operator>*</operator> <name>m</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBIW_ASSERT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>arr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>arr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__sbm</name><argument_list>(<argument><expr><operator>*</operator><name>arr</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>*</operator><name>arr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbiw__zlib_flushf</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>bitbuffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>bitcount</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>bitbuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bitbuffer</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bitcount</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbiw__zlib_bitrev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codebits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>codebits</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>stbiw__zlib_countm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">258</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>stbiw__zhash</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbiw_uint32</name></type> <name>hash</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>+=</operator> <name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>+=</operator> <name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>+=</operator> <name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_flush</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(out = stbiw__zlib_flushf(out, &amp;bitbuf, &amp;bitcount))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_add</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>codebits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bitbuf |= (code) &lt;&lt; bitcount, bitcount += (codebits), stbiw__zlib_flush())</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_huffa</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__zlib_add(stbiw__zlib_bitrev(b,c),c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_huff1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__zlib_huffa(0x30 + (n), 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_huff2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__zlib_huffa(0x190 + (n)-144, 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_huff3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__zlib_huffa(0 + (n)-256,7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_huff4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__zlib_huffa(0xc0 + (n)-280,8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_huff</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt;= 143 ? stbiw__zlib_huff1(n) : (n) &lt;= 255 ? stbiw__zlib_huff2(n) : (n) &lt;= 279 ? stbiw__zlib_huff3(n) : stbiw__zlib_huff4(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__zlib_huffb</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt;= 143 ? stbiw__zlib_huff1(n) : stbiw__zlib_huff2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__ZHASH</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBIWDEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>stbi_zlib_compress</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_ZLIB_COMPRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>STBIW_ZLIB_COMPRESS</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name><name>lengthc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">67</literal></expr>,<expr><literal type="number">83</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">131</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">258</literal></expr>, <expr><literal type="number">259</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>lengtheb</name><index>[]</index></name><init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name><name>distc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">65</literal></expr>,<expr><literal type="number">97</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">257</literal></expr>,<expr><literal type="number">385</literal></expr>,<expr><literal type="number">513</literal></expr>,<expr><literal type="number">769</literal></expr>,<expr><literal type="number">1025</literal></expr>,<expr><literal type="number">1537</literal></expr>,<expr><literal type="number">2049</literal></expr>,<expr><literal type="number">3073</literal></expr>,<expr><literal type="number">4097</literal></expr>,<expr><literal type="number">6145</literal></expr>,<expr><literal type="number">8193</literal></expr>,<expr><literal type="number">12289</literal></expr>,<expr><literal type="number">16385</literal></expr>,<expr><literal type="number">24577</literal></expr>, <expr><literal type="number">32768</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>disteb</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitbuf</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>bitcount</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>hash_table</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>STBIW_MALLOC</name><argument_list>(<argument><expr><name>stbiw__ZHASH</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quality</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>quality</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0x5e</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>stbiw__zlib_add</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>stbiw__zlib_add</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stbiw__ZHASH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>data_len</name><operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>stbiw__zhash</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call><operator>&amp;</operator><operator>(</operator><name>stbiw__ZHASH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>best</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bestloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hlist</name> <init>= <expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>stbiw__sbcount</name><argument_list>(<argument><expr><name>hlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hlist</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name>data</name> <operator>&gt;</operator> <name>i</name><operator>-</operator><literal type="number">32768</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>stbiw__zlib_countm</name><argument_list>(<argument><expr><name><name>hlist</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>data_len</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <name>best</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>best</name><operator>=</operator><name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>bestloc</name><operator>=</operator><name><name>hlist</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>stbiw__sbn</name><argument_list>(<argument><expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>*</operator><name>quality</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STBIW_MEMMOVE</name><argument_list>(<argument><expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name><operator>+</operator><name>quality</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__sbn</name><argument_list>(<argument><expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>quality</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>,<argument><expr><name>data</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bestloc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>stbiw__zhash</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&amp;</operator><operator>(</operator><name>stbiw__ZHASH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hlist</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>stbiw__sbcount</name><argument_list>(<argument><expr><name>hlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hlist</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name>data</name> <operator>&gt;</operator> <name>i</name><operator>-</operator><literal type="number">32767</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>stbiw__zlib_countm</name><argument_list>(<argument><expr><name><name>hlist</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>data_len</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <name>best</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>bestloc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bestloc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>data</name><operator>+</operator><name>i</name> <operator>-</operator> <name>bestloc</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>STBIW_ASSERT</name><argument_list>(<argument><expr><name>d</name> <operator>&lt;=</operator> <literal type="number">32767</literal> <operator>&amp;&amp;</operator> <name>best</name> <operator>&lt;=</operator> <literal type="number">258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>best</name> <operator>&gt;</operator> <name><name>lengthc</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>stbiw__zlib_huff</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">257</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lengtheb</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbiw__zlib_add</name><argument_list>(<argument><expr><name>best</name> <operator>-</operator> <name><name>lengthc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengtheb</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&gt;</operator> <name><name>distc</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>stbiw__zlib_add</name><argument_list>(<argument><expr><call><name>stbiw__zlib_bitrev</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>disteb</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbiw__zlib_add</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name><name>distc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>disteb</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>best</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__zlib_huffb</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<for>for <control>(<init>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>data_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbiw__zlib_huffb</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>stbiw__zlib_huff</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>bitcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbiw__zlib_add</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stbiw__ZHASH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>stbiw__sbfree</name><argument_list>(<argument><expr><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>hash_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>s2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocklen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>data_len</name> <operator>%</operator> <literal type="number">5552</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>data_len</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocklen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt> </block_content>}</block></for>
<expr_stmt><expr><name>s1</name> <operator>%=</operator> <literal type="number">65521</literal></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>%=</operator> <literal type="number">65521</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>blocklen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocklen</name> <operator>=</operator> <literal type="number">5552</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>s2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>s1</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__sbpush</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <call><name>stbiw__sbn</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIW_MEMMOVE</name><argument_list>(<argument><expr><call><name>stbiw__sbraw</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>*</operator><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>stbiw__sbraw</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>stbiw__crc32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBIW_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>STBIW_CRC32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name><name>crc_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x77073096</literal></expr>, <expr><literal type="number">0xEE0E612C</literal></expr>, <expr><literal type="number">0x990951BA</literal></expr>, <expr><literal type="number">0x076DC419</literal></expr>, <expr><literal type="number">0x706AF48F</literal></expr>, <expr><literal type="number">0xE963A535</literal></expr>, <expr><literal type="number">0x9E6495A3</literal></expr>,
<expr><literal type="number">0x0eDB8832</literal></expr>, <expr><literal type="number">0x79DCB8A4</literal></expr>, <expr><literal type="number">0xE0D5E91E</literal></expr>, <expr><literal type="number">0x97D2D988</literal></expr>, <expr><literal type="number">0x09B64C2B</literal></expr>, <expr><literal type="number">0x7EB17CBD</literal></expr>, <expr><literal type="number">0xE7B82D07</literal></expr>, <expr><literal type="number">0x90BF1D91</literal></expr>,
<expr><literal type="number">0x1DB71064</literal></expr>, <expr><literal type="number">0x6AB020F2</literal></expr>, <expr><literal type="number">0xF3B97148</literal></expr>, <expr><literal type="number">0x84BE41DE</literal></expr>, <expr><literal type="number">0x1ADAD47D</literal></expr>, <expr><literal type="number">0x6DDDE4EB</literal></expr>, <expr><literal type="number">0xF4D4B551</literal></expr>, <expr><literal type="number">0x83D385C7</literal></expr>,
<expr><literal type="number">0x136C9856</literal></expr>, <expr><literal type="number">0x646BA8C0</literal></expr>, <expr><literal type="number">0xFD62F97A</literal></expr>, <expr><literal type="number">0x8A65C9EC</literal></expr>, <expr><literal type="number">0x14015C4F</literal></expr>, <expr><literal type="number">0x63066CD9</literal></expr>, <expr><literal type="number">0xFA0F3D63</literal></expr>, <expr><literal type="number">0x8D080DF5</literal></expr>,
<expr><literal type="number">0x3B6E20C8</literal></expr>, <expr><literal type="number">0x4C69105E</literal></expr>, <expr><literal type="number">0xD56041E4</literal></expr>, <expr><literal type="number">0xA2677172</literal></expr>, <expr><literal type="number">0x3C03E4D1</literal></expr>, <expr><literal type="number">0x4B04D447</literal></expr>, <expr><literal type="number">0xD20D85FD</literal></expr>, <expr><literal type="number">0xA50AB56B</literal></expr>,
<expr><literal type="number">0x35B5A8FA</literal></expr>, <expr><literal type="number">0x42B2986C</literal></expr>, <expr><literal type="number">0xDBBBC9D6</literal></expr>, <expr><literal type="number">0xACBCF940</literal></expr>, <expr><literal type="number">0x32D86CE3</literal></expr>, <expr><literal type="number">0x45DF5C75</literal></expr>, <expr><literal type="number">0xDCD60DCF</literal></expr>, <expr><literal type="number">0xABD13D59</literal></expr>,
<expr><literal type="number">0x26D930AC</literal></expr>, <expr><literal type="number">0x51DE003A</literal></expr>, <expr><literal type="number">0xC8D75180</literal></expr>, <expr><literal type="number">0xBFD06116</literal></expr>, <expr><literal type="number">0x21B4F4B5</literal></expr>, <expr><literal type="number">0x56B3C423</literal></expr>, <expr><literal type="number">0xCFBA9599</literal></expr>, <expr><literal type="number">0xB8BDA50F</literal></expr>,
<expr><literal type="number">0x2802B89E</literal></expr>, <expr><literal type="number">0x5F058808</literal></expr>, <expr><literal type="number">0xC60CD9B2</literal></expr>, <expr><literal type="number">0xB10BE924</literal></expr>, <expr><literal type="number">0x2F6F7C87</literal></expr>, <expr><literal type="number">0x58684C11</literal></expr>, <expr><literal type="number">0xC1611DAB</literal></expr>, <expr><literal type="number">0xB6662D3D</literal></expr>,
<expr><literal type="number">0x76DC4190</literal></expr>, <expr><literal type="number">0x01DB7106</literal></expr>, <expr><literal type="number">0x98D220BC</literal></expr>, <expr><literal type="number">0xEFD5102A</literal></expr>, <expr><literal type="number">0x71B18589</literal></expr>, <expr><literal type="number">0x06B6B51F</literal></expr>, <expr><literal type="number">0x9FBFE4A5</literal></expr>, <expr><literal type="number">0xE8B8D433</literal></expr>,
<expr><literal type="number">0x7807C9A2</literal></expr>, <expr><literal type="number">0x0F00F934</literal></expr>, <expr><literal type="number">0x9609A88E</literal></expr>, <expr><literal type="number">0xE10E9818</literal></expr>, <expr><literal type="number">0x7F6A0DBB</literal></expr>, <expr><literal type="number">0x086D3D2D</literal></expr>, <expr><literal type="number">0x91646C97</literal></expr>, <expr><literal type="number">0xE6635C01</literal></expr>,
<expr><literal type="number">0x6B6B51F4</literal></expr>, <expr><literal type="number">0x1C6C6162</literal></expr>, <expr><literal type="number">0x856530D8</literal></expr>, <expr><literal type="number">0xF262004E</literal></expr>, <expr><literal type="number">0x6C0695ED</literal></expr>, <expr><literal type="number">0x1B01A57B</literal></expr>, <expr><literal type="number">0x8208F4C1</literal></expr>, <expr><literal type="number">0xF50FC457</literal></expr>,
<expr><literal type="number">0x65B0D9C6</literal></expr>, <expr><literal type="number">0x12B7E950</literal></expr>, <expr><literal type="number">0x8BBEB8EA</literal></expr>, <expr><literal type="number">0xFCB9887C</literal></expr>, <expr><literal type="number">0x62DD1DDF</literal></expr>, <expr><literal type="number">0x15DA2D49</literal></expr>, <expr><literal type="number">0x8CD37CF3</literal></expr>, <expr><literal type="number">0xFBD44C65</literal></expr>,
<expr><literal type="number">0x4DB26158</literal></expr>, <expr><literal type="number">0x3AB551CE</literal></expr>, <expr><literal type="number">0xA3BC0074</literal></expr>, <expr><literal type="number">0xD4BB30E2</literal></expr>, <expr><literal type="number">0x4ADFA541</literal></expr>, <expr><literal type="number">0x3DD895D7</literal></expr>, <expr><literal type="number">0xA4D1C46D</literal></expr>, <expr><literal type="number">0xD3D6F4FB</literal></expr>,
<expr><literal type="number">0x4369E96A</literal></expr>, <expr><literal type="number">0x346ED9FC</literal></expr>, <expr><literal type="number">0xAD678846</literal></expr>, <expr><literal type="number">0xDA60B8D0</literal></expr>, <expr><literal type="number">0x44042D73</literal></expr>, <expr><literal type="number">0x33031DE5</literal></expr>, <expr><literal type="number">0xAA0A4C5F</literal></expr>, <expr><literal type="number">0xDD0D7CC9</literal></expr>,
<expr><literal type="number">0x5005713C</literal></expr>, <expr><literal type="number">0x270241AA</literal></expr>, <expr><literal type="number">0xBE0B1010</literal></expr>, <expr><literal type="number">0xC90C2086</literal></expr>, <expr><literal type="number">0x5768B525</literal></expr>, <expr><literal type="number">0x206F85B3</literal></expr>, <expr><literal type="number">0xB966D409</literal></expr>, <expr><literal type="number">0xCE61E49F</literal></expr>,
<expr><literal type="number">0x5EDEF90E</literal></expr>, <expr><literal type="number">0x29D9C998</literal></expr>, <expr><literal type="number">0xB0D09822</literal></expr>, <expr><literal type="number">0xC7D7A8B4</literal></expr>, <expr><literal type="number">0x59B33D17</literal></expr>, <expr><literal type="number">0x2EB40D81</literal></expr>, <expr><literal type="number">0xB7BD5C3B</literal></expr>, <expr><literal type="number">0xC0BA6CAD</literal></expr>,
<expr><literal type="number">0xEDB88320</literal></expr>, <expr><literal type="number">0x9ABFB3B6</literal></expr>, <expr><literal type="number">0x03B6E20C</literal></expr>, <expr><literal type="number">0x74B1D29A</literal></expr>, <expr><literal type="number">0xEAD54739</literal></expr>, <expr><literal type="number">0x9DD277AF</literal></expr>, <expr><literal type="number">0x04DB2615</literal></expr>, <expr><literal type="number">0x73DC1683</literal></expr>,
<expr><literal type="number">0xE3630B12</literal></expr>, <expr><literal type="number">0x94643B84</literal></expr>, <expr><literal type="number">0x0D6D6A3E</literal></expr>, <expr><literal type="number">0x7A6A5AA8</literal></expr>, <expr><literal type="number">0xE40ECF0B</literal></expr>, <expr><literal type="number">0x9309FF9D</literal></expr>, <expr><literal type="number">0x0A00AE27</literal></expr>, <expr><literal type="number">0x7D079EB1</literal></expr>,
<expr><literal type="number">0xF00F9344</literal></expr>, <expr><literal type="number">0x8708A3D2</literal></expr>, <expr><literal type="number">0x1E01F268</literal></expr>, <expr><literal type="number">0x6906C2FE</literal></expr>, <expr><literal type="number">0xF762575D</literal></expr>, <expr><literal type="number">0x806567CB</literal></expr>, <expr><literal type="number">0x196C3671</literal></expr>, <expr><literal type="number">0x6E6B06E7</literal></expr>,
<expr><literal type="number">0xFED41B76</literal></expr>, <expr><literal type="number">0x89D32BE0</literal></expr>, <expr><literal type="number">0x10DA7A5A</literal></expr>, <expr><literal type="number">0x67DD4ACC</literal></expr>, <expr><literal type="number">0xF9B9DF6F</literal></expr>, <expr><literal type="number">0x8EBEEFF9</literal></expr>, <expr><literal type="number">0x17B7BE43</literal></expr>, <expr><literal type="number">0x60B08ED5</literal></expr>,
<expr><literal type="number">0xD6D6A3E8</literal></expr>, <expr><literal type="number">0xA1D1937E</literal></expr>, <expr><literal type="number">0x38D8C2C4</literal></expr>, <expr><literal type="number">0x4FDFF252</literal></expr>, <expr><literal type="number">0xD1BB67F1</literal></expr>, <expr><literal type="number">0xA6BC5767</literal></expr>, <expr><literal type="number">0x3FB506DD</literal></expr>, <expr><literal type="number">0x48B2364B</literal></expr>,
<expr><literal type="number">0xD80D2BDA</literal></expr>, <expr><literal type="number">0xAF0A1B4C</literal></expr>, <expr><literal type="number">0x36034AF6</literal></expr>, <expr><literal type="number">0x41047A60</literal></expr>, <expr><literal type="number">0xDF60EFC3</literal></expr>, <expr><literal type="number">0xA867DF55</literal></expr>, <expr><literal type="number">0x316E8EEF</literal></expr>, <expr><literal type="number">0x4669BE79</literal></expr>,
<expr><literal type="number">0xCB61B38C</literal></expr>, <expr><literal type="number">0xBC66831A</literal></expr>, <expr><literal type="number">0x256FD2A0</literal></expr>, <expr><literal type="number">0x5268E236</literal></expr>, <expr><literal type="number">0xCC0C7795</literal></expr>, <expr><literal type="number">0xBB0B4703</literal></expr>, <expr><literal type="number">0x220216B9</literal></expr>, <expr><literal type="number">0x5505262F</literal></expr>,
<expr><literal type="number">0xC5BA3BBE</literal></expr>, <expr><literal type="number">0xB2BD0B28</literal></expr>, <expr><literal type="number">0x2BB45A92</literal></expr>, <expr><literal type="number">0x5CB36A04</literal></expr>, <expr><literal type="number">0xC2D7FFA7</literal></expr>, <expr><literal type="number">0xB5D0CF31</literal></expr>, <expr><literal type="number">0x2CD99E8B</literal></expr>, <expr><literal type="number">0x5BDEAE1D</literal></expr>,
<expr><literal type="number">0x9B64C2B0</literal></expr>, <expr><literal type="number">0xEC63F226</literal></expr>, <expr><literal type="number">0x756AA39C</literal></expr>, <expr><literal type="number">0x026D930A</literal></expr>, <expr><literal type="number">0x9C0906A9</literal></expr>, <expr><literal type="number">0xEB0E363F</literal></expr>, <expr><literal type="number">0x72076785</literal></expr>, <expr><literal type="number">0x05005713</literal></expr>,
<expr><literal type="number">0x95BF4A82</literal></expr>, <expr><literal type="number">0xE2B87A14</literal></expr>, <expr><literal type="number">0x7BB12BAE</literal></expr>, <expr><literal type="number">0x0CB61B38</literal></expr>, <expr><literal type="number">0x92D28E9B</literal></expr>, <expr><literal type="number">0xE5D5BE0D</literal></expr>, <expr><literal type="number">0x7CDCEFB7</literal></expr>, <expr><literal type="number">0x0BDBDF21</literal></expr>,
<expr><literal type="number">0x86D3D2D4</literal></expr>, <expr><literal type="number">0xF1D4E242</literal></expr>, <expr><literal type="number">0x68DDB3F8</literal></expr>, <expr><literal type="number">0x1FDA836E</literal></expr>, <expr><literal type="number">0x81BE16CD</literal></expr>, <expr><literal type="number">0xF6B9265B</literal></expr>, <expr><literal type="number">0x6FB077E1</literal></expr>, <expr><literal type="number">0x18B74777</literal></expr>,
<expr><literal type="number">0x88085AE6</literal></expr>, <expr><literal type="number">0xFF0F6A70</literal></expr>, <expr><literal type="number">0x66063BCA</literal></expr>, <expr><literal type="number">0x11010B5C</literal></expr>, <expr><literal type="number">0x8F659EFF</literal></expr>, <expr><literal type="number">0xF862AE69</literal></expr>, <expr><literal type="number">0x616BFFD3</literal></expr>, <expr><literal type="number">0x166CCF45</literal></expr>,
<expr><literal type="number">0xA00AE278</literal></expr>, <expr><literal type="number">0xD70DD2EE</literal></expr>, <expr><literal type="number">0x4E048354</literal></expr>, <expr><literal type="number">0x3903B3C2</literal></expr>, <expr><literal type="number">0xA7672661</literal></expr>, <expr><literal type="number">0xD06016F7</literal></expr>, <expr><literal type="number">0x4969474D</literal></expr>, <expr><literal type="number">0x3E6E77DB</literal></expr>,
<expr><literal type="number">0xAED16A4A</literal></expr>, <expr><literal type="number">0xD9D65ADC</literal></expr>, <expr><literal type="number">0x40DF0B66</literal></expr>, <expr><literal type="number">0x37D83BF0</literal></expr>, <expr><literal type="number">0xA9BCAE53</literal></expr>, <expr><literal type="number">0xDEBB9EC5</literal></expr>, <expr><literal type="number">0x47B2CF7F</literal></expr>, <expr><literal type="number">0x30B5FFE9</literal></expr>,
<expr><literal type="number">0xBDBDF21C</literal></expr>, <expr><literal type="number">0xCABAC28A</literal></expr>, <expr><literal type="number">0x53B39330</literal></expr>, <expr><literal type="number">0x24B4A3A6</literal></expr>, <expr><literal type="number">0xBAD03605</literal></expr>, <expr><literal type="number">0xCDD70693</literal></expr>, <expr><literal type="number">0x54DE5729</literal></expr>, <expr><literal type="number">0x23D967BF</literal></expr>,
<expr><literal type="number">0xB3667A2E</literal></expr>, <expr><literal type="number">0xC4614AB8</literal></expr>, <expr><literal type="number">0x5D681B02</literal></expr>, <expr><literal type="number">0x2A6F2B94</literal></expr>, <expr><literal type="number">0xB40BBE37</literal></expr>, <expr><literal type="number">0xC30C8EA1</literal></expr>, <expr><literal type="number">0x5A05DF1B</literal></expr>, <expr><literal type="number">0x2D02EF8D</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crc</name> <init>= <expr><operator>~</operator><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name><name>crc_table</name><index>[<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><operator>~</operator><name>crc</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__wpng4</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((o)[0]=STBIW_UCHAR(a),(o)[1]=STBIW_UCHAR(b),(o)[2]=STBIW_UCHAR(c),(o)[3]=STBIW_UCHAR(d),(o)+=4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__wp32</name><parameter_list>(<parameter><type><name>data</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__wpng4(data, (v)&gt;&gt;24,(v)&gt;&gt;16,(v)&gt;&gt;8,(v));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbiw__wptag</name><parameter_list>(<parameter><type><name>data</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbiw__wpng4(data, s[0],s[1],s[2],s[3])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__wpcrc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crc</name> <init>= <expr><call><name>stbiw__crc32</name><argument_list>(<argument><expr><operator>*</operator><name>data</name> <operator>-</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbiw__wp32</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>stbiw__paeth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name></expr></init></decl>, <decl><type ref="prev"/><name>pa</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pb</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pc</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pb</name> <operator>&amp;&amp;</operator> <name>pa</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__encode_png_line</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_type</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>line_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>mapping</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>firstmap</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>mymap</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>mapping</name></expr> </then><else>: <expr><name>firstmap</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>mymap</name><index>[<expr><name>filter_type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>pixels</name> <operator>+</operator> <name>stride_bytes</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>stbi__flip_vertically_on_write</name></expr> ?</condition><then> <expr><name>height</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>y</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signed_stride</name> <init>= <expr><ternary><condition><expr><name>stbi__flip_vertically_on_write</name></expr> ?</condition><then> <expr><operator>-</operator><name>stride_bytes</name></expr> </then><else>: <expr><name>stride_bytes</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>line_buffer</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>width</name><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>signed_stride</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>signed_stride</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>stbiw__paeth</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>signed_stride</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>signed_stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>signed_stride</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>stbiw__paeth</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>signed_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>signed_stride</name><operator>-</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>stbiw__paeth</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>STBIWDEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbi_write_png_to_mem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force_filter</name> <init>= <expr><name>stbi_write_force_png_filter</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ctype</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sig</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">137</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">78</literal></expr>,<expr><literal type="number">71</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>o</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zlib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>line_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>,<decl><type ref="prev"/><name>zlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stride_bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stride_bytes</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force_filter</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>force_filter</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filt</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBIW_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line_buffer</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBIW_MALLOC</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>line_buffer</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>filt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>filter_type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>force_filter</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter_type</name> <operator>=</operator> <name>force_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__encode_png_line</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pixels</name><operator>)</operator></expr></argument>, <argument><expr><name>stride_bytes</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>force_filter</name></expr></argument>, <argument><expr><name>line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>best_filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>best_filter_val</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>, <decl><type ref="prev"/><name>est</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>filter_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>filter_type</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>filter_type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__encode_png_line</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pixels</name><operator>)</operator></expr></argument>, <argument><expr><name>stride_bytes</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>filter_type</name></expr></argument>, <argument><expr><name>line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>est</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>est</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator> <name><name>line_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>est</name> <operator>&lt;</operator> <name>best_filter_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_filter_val</name> <operator>=</operator> <name>est</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_filter</name> <operator>=</operator> <name>filter_type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>filter_type</name> <operator>!=</operator> <name>best_filter</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbiw__encode_png_line</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pixels</name><operator>)</operator></expr></argument>, <argument><expr><name>stride_bytes</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>best_filter</name></expr></argument>, <argument><expr><name>line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filter_type</name> <operator>=</operator> <name>best_filter</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>filt</name><index>[<expr><name>j</name><operator>*</operator><operator>(</operator><name>x</name><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>filter_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBIW_MEMMOVE</name><argument_list>(<argument><expr><name>filt</name><operator>+</operator><name>j</name><operator>*</operator><operator>(</operator><name>x</name><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>line_buffer</name></expr></argument>, <argument><expr><name>x</name><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zlib</name> <operator>=</operator> <call><name>stbi_zlib_compress</name><argument_list>(<argument><expr><name>filt</name></expr></argument>, <argument><expr><name>y</name><operator>*</operator><operator>(</operator> <name>x</name><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>zlen</name></expr></argument>, <argument><expr><name>stbi_write_png_compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>filt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zlib</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBIW_MALLOC</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">12</literal><operator>+</operator><literal type="number">13</literal> <operator>+</operator> <literal type="number">12</literal><operator>+</operator><name>zlen</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">12</literal><operator>+</operator><literal type="number">13</literal> <operator>+</operator> <literal type="number">12</literal><operator>+</operator><name>zlen</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name><operator>=</operator><name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBIW_MEMMOVE</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>sig</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>o</name><operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wp32</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>stbiw__wptag</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"IHDR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wp32</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wp32</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name><operator>++</operator> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name><operator>++</operator> <operator>=</operator> <call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name><name>ctype</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wpcrc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbiw__wp32</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wptag</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"IDAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBIW_MEMMOVE</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>zlib</name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <name>zlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>zlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wpcrc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbiw__wp32</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wptag</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"IEND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__wpcrc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBIW_ASSERT</name><argument_list>(<argument><expr><name>o</name> <operator>==</operator> <name>out</name> <operator>+</operator> <operator>*</operator><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_png</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>png</name> <init>= <expr><call><name>stbi_write_png_to_mem</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>stride_bytes</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>png</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>stbiw__fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>png</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>png</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>png</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_png_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>png</name> <init>= <expr><call><name>stbi_write_png_to_mem</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>stride_bytes</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>png</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>png</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBIW_FREE</name><argument_list>(<argument><expr><name>png</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>










<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>stbiw__jpg_ZigZag</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">18</literal></expr>,
<expr><literal type="number">24</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">63</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__jpg_writeBits</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitBufP</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitCntP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bitBuf</name> <init>= <expr><operator>*</operator><name>bitBufP</name></expr></init></decl>, <decl><type ref="prev"/><name>bitCnt</name> <init>= <expr><operator>*</operator><name>bitCntP</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bitCnt</name> <operator>+=</operator> <name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bitBuf</name> <operator>|=</operator> <name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>bitCnt</name><operator>)</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>bitCnt</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>bitBuf</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bitBuf</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitCnt</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>bitBufP</name> <operator>=</operator> <name>bitBuf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bitCntP</name> <operator>=</operator> <name>bitCnt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__jpg_DCT</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d0p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d1p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d2p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d3p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d4p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d5p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d6p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>d7p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>d0</name> <init>= <expr><operator>*</operator><name>d0p</name></expr></init></decl>, <decl><type ref="prev"/><name>d1</name> <init>= <expr><operator>*</operator><name>d1p</name></expr></init></decl>, <decl><type ref="prev"/><name>d2</name> <init>= <expr><operator>*</operator><name>d2p</name></expr></init></decl>, <decl><type ref="prev"/><name>d3</name> <init>= <expr><operator>*</operator><name>d3p</name></expr></init></decl>, <decl><type ref="prev"/><name>d4</name> <init>= <expr><operator>*</operator><name>d4p</name></expr></init></decl>, <decl><type ref="prev"/><name>d5</name> <init>= <expr><operator>*</operator><name>d5p</name></expr></init></decl>, <decl><type ref="prev"/><name>d6</name> <init>= <expr><operator>*</operator><name>d6p</name></expr></init></decl>, <decl><type ref="prev"/><name>d7</name> <init>= <expr><operator>*</operator><name>d7p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>, <decl><type ref="prev"/><name>z4</name></decl>, <decl><type ref="prev"/><name>z5</name></decl>, <decl><type ref="prev"/><name>z11</name></decl>, <decl><type ref="prev"/><name>z13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp0</name> <init>= <expr><name>d0</name> <operator>+</operator> <name>d7</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp7</name> <init>= <expr><name>d0</name> <operator>-</operator> <name>d7</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp1</name> <init>= <expr><name>d1</name> <operator>+</operator> <name>d6</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp6</name> <init>= <expr><name>d1</name> <operator>-</operator> <name>d6</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp2</name> <init>= <expr><name>d2</name> <operator>+</operator> <name>d5</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp5</name> <init>= <expr><name>d2</name> <operator>-</operator> <name>d5</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp3</name> <init>= <expr><name>d3</name> <operator>+</operator> <name>d4</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp4</name> <init>= <expr><name>d3</name> <operator>-</operator> <name>d4</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>tmp10</name> <init>= <expr><name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>tmp13</name> <init>= <expr><name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp11</name> <init>= <expr><name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp12</name> <init>= <expr><name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>d4</name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <operator>(</operator><name>tmp12</name> <operator>+</operator> <name>tmp13</name><operator>)</operator> <operator>*</operator> <literal type="number">0.707106781f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>tmp13</name> <operator>+</operator> <name>z1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name>tmp13</name> <operator>-</operator> <name>z1</name></expr>;</expr_stmt>


<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp6</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>


<expr_stmt><expr><name>z5</name> <operator>=</operator> <operator>(</operator><name>tmp10</name> <operator>-</operator> <name>tmp12</name><operator>)</operator> <operator>*</operator> <literal type="number">0.382683433f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>tmp10</name> <operator>*</operator> <literal type="number">0.541196100f</literal> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>tmp12</name> <operator>*</operator> <literal type="number">1.306562965f</literal> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>tmp11</name> <operator>*</operator> <literal type="number">0.707106781f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>z11</name> <operator>=</operator> <name>tmp7</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z13</name> <operator>=</operator> <name>tmp7</name> <operator>-</operator> <name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d5p</name> <operator>=</operator> <name>z13</name> <operator>+</operator> <name>z2</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>d3p</name> <operator>=</operator> <name>z13</name> <operator>-</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d1p</name> <operator>=</operator> <name>z11</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d7p</name> <operator>=</operator> <name>z11</name> <operator>-</operator> <name>z4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d0p</name> <operator>=</operator> <name>d0</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>d2p</name> <operator>=</operator> <name>d2</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>d4p</name> <operator>=</operator> <name>d4</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>d6p</name> <operator>=</operator> <name>d6</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbiw__jpg_calcBits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp1</name> <init>= <expr><ternary><condition><expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>val</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>val</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>tmp1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbiw__jpg_processDU</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitCnt</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>CDU</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>du_stride</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fdtbl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>DC</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>HTDC</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>HTAC</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>EOB</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>HTAC</name><index>[<expr><literal type="number">0x00</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>HTAC</name><index>[<expr><literal type="number">0x00</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>M16zeroes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>HTAC</name><index>[<expr><literal type="number">0xF0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>HTAC</name><index>[<expr><literal type="number">0xF0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dataOff</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>end0pos</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>DU</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>dataOff</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>n</name><operator>=</operator><name>du_stride</name><operator>*</operator><literal type="number">8</literal></expr>;</init> <condition><expr><name>dataOff</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>dataOff</name><operator>+=</operator><name>du_stride</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__jpg_DCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>dataOff</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>dataOff</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>dataOff</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__jpg_DCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><name>du_stride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><name>du_stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><name>du_stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><name>du_stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><name>du_stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><name>du_stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CDU</name><index>[<expr><name>dataOff</name><operator>+</operator><name>du_stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr><operator>,</operator><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>y</name><operator>*</operator><name>du_stride</name><operator>+</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>CDU</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>fdtbl</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>DU</name><index>[<expr><name><name>stbiw__jpg_ZigZag</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>v</name> <operator>-</operator> <literal type="number">0.5f</literal></expr> </then><else>: <expr><name>v</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>DU</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>DC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name><name>HTDC</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbiw__jpg_calcBits</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name><name>HTDC</name><index>[<expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>end0pos</name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>end0pos</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>DU</name><index>[<expr><name>end0pos</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>end0pos</name></expr></incr>)</control> <block>{<block_content>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>end0pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name>EOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>DU</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end0pos</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>startpos</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrzeroes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>DU</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;=</operator><name>end0pos</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
</block_content>}</block></for>
<expr_stmt><expr><name>nrzeroes</name> <operator>=</operator> <name>i</name><operator>-</operator><name>startpos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>nrzeroes</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lng</name> <init>= <expr><name>nrzeroes</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrmarker</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>nrmarker</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>nrmarker</name> <operator>&lt;=</operator> <name>lng</name></expr>;</condition> <incr><expr><operator>++</operator><name>nrmarker</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name>M16zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>nrzeroes</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stbiw__jpg_calcBits</name><argument_list>(<argument><expr><name><name>DU</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name><name>HTAC</name><index>[<expr><operator>(</operator><name>nrzeroes</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>+</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>end0pos</name> <operator>!=</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bitBuf</name></expr></argument>, <argument><expr><name>bitCnt</name></expr></argument>, <argument><expr><name>EOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>DU</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbi_write_jpg_core</name><parameter_list>(<parameter><decl><type><name>stbi__write_context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_dc_luminance_nrcodes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_dc_luminance_values</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_ac_luminance_nrcodes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0x7d</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_ac_luminance_values</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0xa1</literal></expr>,<expr><literal type="number">0x08</literal></expr>,
<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0xb1</literal></expr>,<expr><literal type="number">0xc1</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xd1</literal></expr>,<expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x1a</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x28</literal></expr>,
<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x2a</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x3a</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x4a</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x59</literal></expr>,
<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x6a</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x89</literal></expr>,
<expr><literal type="number">0x8a</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x9a</literal></expr>,<expr><literal type="number">0xa2</literal></expr>,<expr><literal type="number">0xa3</literal></expr>,<expr><literal type="number">0xa4</literal></expr>,<expr><literal type="number">0xa5</literal></expr>,<expr><literal type="number">0xa6</literal></expr>,<expr><literal type="number">0xa7</literal></expr>,<expr><literal type="number">0xa8</literal></expr>,<expr><literal type="number">0xa9</literal></expr>,<expr><literal type="number">0xaa</literal></expr>,<expr><literal type="number">0xb2</literal></expr>,<expr><literal type="number">0xb3</literal></expr>,<expr><literal type="number">0xb4</literal></expr>,<expr><literal type="number">0xb5</literal></expr>,<expr><literal type="number">0xb6</literal></expr>,
<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0xb8</literal></expr>,<expr><literal type="number">0xb9</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xc2</literal></expr>,<expr><literal type="number">0xc3</literal></expr>,<expr><literal type="number">0xc4</literal></expr>,<expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0xc6</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0xc8</literal></expr>,<expr><literal type="number">0xc9</literal></expr>,<expr><literal type="number">0xca</literal></expr>,<expr><literal type="number">0xd2</literal></expr>,<expr><literal type="number">0xd3</literal></expr>,<expr><literal type="number">0xd4</literal></expr>,<expr><literal type="number">0xd5</literal></expr>,<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">0xd7</literal></expr>,<expr><literal type="number">0xd8</literal></expr>,<expr><literal type="number">0xd9</literal></expr>,<expr><literal type="number">0xda</literal></expr>,<expr><literal type="number">0xe1</literal></expr>,<expr><literal type="number">0xe2</literal></expr>,
<expr><literal type="number">0xe3</literal></expr>,<expr><literal type="number">0xe4</literal></expr>,<expr><literal type="number">0xe5</literal></expr>,<expr><literal type="number">0xe6</literal></expr>,<expr><literal type="number">0xe7</literal></expr>,<expr><literal type="number">0xe8</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0xea</literal></expr>,<expr><literal type="number">0xf1</literal></expr>,<expr><literal type="number">0xf2</literal></expr>,<expr><literal type="number">0xf3</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0xf5</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">0xf7</literal></expr>,<expr><literal type="number">0xf8</literal></expr>,<expr><literal type="number">0xf9</literal></expr>,<expr><literal type="number">0xfa</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_dc_chrominance_nrcodes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_dc_chrominance_values</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_ac_chrominance_nrcodes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0x77</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>std_ac_chrominance_values</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x91</literal></expr>,
<expr><literal type="number">0xa1</literal></expr>,<expr><literal type="number">0xb1</literal></expr>,<expr><literal type="number">0xc1</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0xd1</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0xe1</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0xf1</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x1a</literal></expr>,<expr><literal type="number">0x26</literal></expr>,
<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x2a</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x3a</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x4a</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x58</literal></expr>,
<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x6a</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x87</literal></expr>,
<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x8a</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x9a</literal></expr>,<expr><literal type="number">0xa2</literal></expr>,<expr><literal type="number">0xa3</literal></expr>,<expr><literal type="number">0xa4</literal></expr>,<expr><literal type="number">0xa5</literal></expr>,<expr><literal type="number">0xa6</literal></expr>,<expr><literal type="number">0xa7</literal></expr>,<expr><literal type="number">0xa8</literal></expr>,<expr><literal type="number">0xa9</literal></expr>,<expr><literal type="number">0xaa</literal></expr>,<expr><literal type="number">0xb2</literal></expr>,<expr><literal type="number">0xb3</literal></expr>,<expr><literal type="number">0xb4</literal></expr>,
<expr><literal type="number">0xb5</literal></expr>,<expr><literal type="number">0xb6</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0xb8</literal></expr>,<expr><literal type="number">0xb9</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xc2</literal></expr>,<expr><literal type="number">0xc3</literal></expr>,<expr><literal type="number">0xc4</literal></expr>,<expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0xc6</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0xc8</literal></expr>,<expr><literal type="number">0xc9</literal></expr>,<expr><literal type="number">0xca</literal></expr>,<expr><literal type="number">0xd2</literal></expr>,<expr><literal type="number">0xd3</literal></expr>,<expr><literal type="number">0xd4</literal></expr>,<expr><literal type="number">0xd5</literal></expr>,<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">0xd7</literal></expr>,<expr><literal type="number">0xd8</literal></expr>,<expr><literal type="number">0xd9</literal></expr>,<expr><literal type="number">0xda</literal></expr>,
<expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0xe3</literal></expr>,<expr><literal type="number">0xe4</literal></expr>,<expr><literal type="number">0xe5</literal></expr>,<expr><literal type="number">0xe6</literal></expr>,<expr><literal type="number">0xe7</literal></expr>,<expr><literal type="number">0xe8</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0xea</literal></expr>,<expr><literal type="number">0xf2</literal></expr>,<expr><literal type="number">0xf3</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0xf5</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">0xf7</literal></expr>,<expr><literal type="number">0xf8</literal></expr>,<expr><literal type="number">0xf9</literal></expr>,<expr><literal type="number">0xfa</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>YDC_HT</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">30</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">62</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">126</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">254</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">510</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>UVDC_HT</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">30</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">62</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">126</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">254</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">510</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1022</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2046</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>YAC_HT</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">120</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">248</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1014</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65410</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65411</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">27</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">121</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">502</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2038</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65412</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65413</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65414</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65415</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65416</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">28</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">249</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1015</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4084</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65417</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65418</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65419</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65420</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65421</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65422</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">58</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">503</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4085</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65423</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65424</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65425</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65426</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65427</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65428</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65429</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">59</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1016</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65430</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65431</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65432</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65433</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65434</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65435</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65436</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65437</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">122</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2039</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65438</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65439</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65440</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65441</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65442</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65443</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65444</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65445</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">123</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4086</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65446</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65447</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65448</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65449</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65450</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65451</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65452</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65453</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">250</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4087</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65454</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65455</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65456</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65457</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65458</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65459</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65460</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65461</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">504</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">32704</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65462</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65463</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65464</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65465</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65466</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65467</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65468</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65469</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">505</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65470</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65471</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65472</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65473</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65474</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65475</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65476</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65477</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65478</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">506</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65479</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65480</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65481</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65482</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65483</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65484</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65485</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65486</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65487</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1017</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65488</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65489</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65490</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65491</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65492</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65493</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65494</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65495</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65496</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1018</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65497</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65498</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65499</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65500</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65501</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65502</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65503</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65504</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65505</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">2040</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65506</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65507</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65508</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65509</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65510</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65511</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65512</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65513</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65514</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">65515</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65516</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65517</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65518</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65519</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65520</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65521</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65522</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65523</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65524</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">2041</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65525</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65526</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65527</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65528</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65529</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65530</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65531</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65532</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65533</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65534</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>UVAC_HT</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">24</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">56</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">120</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">500</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1014</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4084</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">57</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">246</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">501</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2038</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4085</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65416</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65417</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65418</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65419</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">247</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1015</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4086</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">32706</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65420</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65421</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65422</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65423</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65424</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">27</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">248</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1016</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4087</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65425</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65426</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65427</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65428</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65429</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65430</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">58</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">502</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65431</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65432</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65433</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65434</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65435</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65436</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65437</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65438</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">59</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1017</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65439</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65440</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65441</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65442</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65443</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65444</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65445</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65446</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">121</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2039</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65447</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65448</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65449</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65450</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65451</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65452</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65453</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65454</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">122</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2040</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65455</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65456</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65457</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65458</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65459</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65460</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65461</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65462</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">249</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65463</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65464</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65465</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65466</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65467</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65468</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65469</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65470</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65471</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">503</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65472</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65473</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65474</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65475</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65476</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65477</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65478</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65479</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65480</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">504</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65481</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65482</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65483</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65484</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65485</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65486</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65487</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65488</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65489</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">505</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65490</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65491</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65492</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65493</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65494</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65495</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65496</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65497</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65498</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">506</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65499</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65500</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65501</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65502</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65503</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65504</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65505</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65506</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65507</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">2041</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65508</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65509</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65510</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65511</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65512</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65513</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65514</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65515</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65516</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">16352</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65517</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65518</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65519</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65520</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65521</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65522</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65523</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65524</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65525</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1018</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">32707</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65526</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65527</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65528</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65529</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65530</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65531</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65532</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65533</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">65534</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>YQT</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">16</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">69</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><literal type="number">87</literal></expr>,<expr><literal type="number">80</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">22</literal></expr>,
<expr><literal type="number">37</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">68</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">77</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">81</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">92</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">78</literal></expr>,<expr><literal type="number">87</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">92</literal></expr>,<expr><literal type="number">95</literal></expr>,<expr><literal type="number">98</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">99</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>UVQT</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">66</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">99</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>aasf</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr>, <expr><literal type="number">1.387039845f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr>, <expr><literal type="number">1.306562965f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr>, <expr><literal type="number">1.175875602f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr>,
<expr><literal type="number">1.0f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr>, <expr><literal type="number">0.785694958f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr>, <expr><literal type="number">0.541196100f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr>, <expr><literal type="number">0.275899379f</literal> <operator>*</operator> <literal type="number">2.828427125f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>subsample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>fdtbl_Y</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>fdtbl_UV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>YTable</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>UVTable</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>width</name> <operator>||</operator> <operator>!</operator><name>height</name> <operator>||</operator> <name>comp</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>comp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>quality</name> <operator>=</operator> <ternary><condition><expr><name>quality</name></expr> ?</condition><then> <expr><name>quality</name></expr> </then><else>: <expr><literal type="number">90</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>subsample</name> <operator>=</operator> <ternary><condition><expr><name>quality</name> <operator>&lt;=</operator> <literal type="number">90</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>quality</name> <operator>=</operator> <ternary><condition><expr><name>quality</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>quality</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><name>quality</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>quality</name> <operator>=</operator> <ternary><condition><expr><name>quality</name> <operator>&lt;</operator> <literal type="number">50</literal></expr> ?</condition><then> <expr><literal type="number">5000</literal> <operator>/</operator> <name>quality</name></expr> </then><else>: <expr><literal type="number">200</literal> <operator>-</operator> <name>quality</name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>uvti</name></decl>, <decl><type ref="prev"/><name>yti</name> <init>= <expr><operator>(</operator><name><name>YQT</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>quality</name><operator>+</operator><literal type="number">50</literal><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>YTable</name><index>[<expr><name><name>stbiw__jpg_ZigZag</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>yti</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>yti</name> <operator>&gt;</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>yti</name></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uvti</name> <operator>=</operator> <operator>(</operator><name><name>UVQT</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>quality</name><operator>+</operator><literal type="number">50</literal><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>UVTable</name><index>[<expr><name><name>stbiw__jpg_ZigZag</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>uvti</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>uvti</name> <operator>&gt;</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>uvti</name></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr><operator>,</operator> <expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fdtbl_Y</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name><name>YTable</name> <index>[<expr><name><name>stbiw__jpg_ZigZag</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name><name>aasf</name><index>[<expr><name>row</name></expr>]</index></name> <operator>*</operator> <name><name>aasf</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdtbl_UV</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name><name>UVTable</name><index>[<expr><name><name>stbiw__jpg_ZigZag</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name><name>aasf</name><index>[<expr><name>row</name></expr>]</index></name> <operator>*</operator> <name><name>aasf</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>head0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="char">'J'</literal></expr>,<expr><literal type="char">'F'</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="char">'F'</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>head2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0xC</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>head1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>height</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>,<expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>,<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>width</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>,<expr><call><name>STBIW_UCHAR</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>subsample</name><operator>?</operator><literal type="number">0x22</literal><operator>:</operator><literal type="number">0x11</literal><operator>)</operator></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>head0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>YTable</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>YTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>UVTable</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UVTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>head1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>std_dc_luminance_nrcodes</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_dc_luminance_nrcodes</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>std_dc_luminance_values</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_dc_luminance_values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>std_ac_luminance_nrcodes</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_ac_luminance_nrcodes</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>std_ac_luminance_values</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_ac_luminance_values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>std_dc_chrominance_nrcodes</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_dc_chrominance_nrcodes</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>std_dc_chrominance_values</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_dc_chrominance_values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>std_ac_chrominance_nrcodes</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_ac_chrominance_nrcodes</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>std_ac_chrominance_values</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_ac_chrominance_values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>head2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>fillBits</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>DCY</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>DCU</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>DCV</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitBuf</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bitCnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ofsG</name> <init>= <expr><ternary><condition><expr><name>comp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>ofsB</name> <init>= <expr><ternary><condition><expr><name>comp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataR</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataG</name> <init>= <expr><name>dataR</name> <operator>+</operator> <name>ofsG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataB</name> <init>= <expr><name>dataR</name> <operator>+</operator> <name>ofsB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>subsample</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>Y</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>U</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>V</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name>y</name></expr><operator>,</operator> <expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>y</name><operator>+</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>clamped_row</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>row</name> <operator>&lt;</operator> <name>height</name><operator>)</operator></expr> ?</condition><then> <expr><name>row</name></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base_p</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>stbi__flip_vertically_on_write</name></expr> ?</condition><then> <expr><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>clamped_row</name><operator>)</operator></expr> </then><else>: <expr><name>clamped_row</name></expr></else></ternary><operator>)</operator><operator>*</operator><name>width</name><operator>*</operator><name>comp</name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <name>x</name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>x</name><operator>+</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr><operator>,</operator> <expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>base_p</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name>width</name><operator>)</operator></expr> ?</condition><then> <expr><name>col</name></expr> </then><else>: <expr><operator>(</operator><name>width</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator><operator>*</operator><name>comp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><name><name>dataR</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><name><name>dataG</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>dataB</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Y</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator> <operator>+</operator><literal type="number">0.29900f</literal><operator>*</operator><name>r</name> <operator>+</operator> <literal type="number">0.58700f</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">0.11400f</literal><operator>*</operator><name>b</name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator> <operator>-</operator><literal type="number">0.16874f</literal><operator>*</operator><name>r</name> <operator>-</operator> <literal type="number">0.33126f</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">0.50000f</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator> <operator>+</operator><literal type="number">0.50000f</literal><operator>*</operator><name>r</name> <operator>-</operator> <literal type="number">0.41869f</literal><operator>*</operator><name>g</name> <operator>-</operator> <literal type="number">0.08131f</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>DCY</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>Y</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>fdtbl_Y</name></expr></argument>, <argument><expr><name>DCY</name></expr></argument>, <argument><expr><name>YDC_HT</name></expr></argument>, <argument><expr><name>YAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DCY</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>Y</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>fdtbl_Y</name></expr></argument>, <argument><expr><name>DCY</name></expr></argument>, <argument><expr><name>YDC_HT</name></expr></argument>, <argument><expr><name>YAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DCY</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>Y</name><operator>+</operator><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>fdtbl_Y</name></expr></argument>, <argument><expr><name>DCY</name></expr></argument>, <argument><expr><name>YDC_HT</name></expr></argument>, <argument><expr><name>YAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DCY</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>Y</name><operator>+</operator><literal type="number">136</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>fdtbl_Y</name></expr></argument>, <argument><expr><name>DCY</name></expr></argument>, <argument><expr><name>YDC_HT</name></expr></argument>, <argument><expr><name>YAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>subU</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>subV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yy</name></decl>, <decl><type ref="prev"/><name>xx</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>yy</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>yy</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>yy</name></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>xx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xx</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>xx</name></expr><operator>,</operator> <expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>yy</name><operator>*</operator><literal type="number">32</literal><operator>+</operator><name>xx</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>subU</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>U</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>U</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>U</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name><name>U</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">17</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subV</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>V</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>V</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>V</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name><name>V</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">17</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>DCU</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>subU</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>fdtbl_UV</name></expr></argument>, <argument><expr><name>DCU</name></expr></argument>, <argument><expr><name>UVDC_HT</name></expr></argument>, <argument><expr><name>UVAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DCV</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>subV</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>fdtbl_UV</name></expr></argument>, <argument><expr><name>DCV</name></expr></argument>, <argument><expr><name>UVDC_HT</name></expr></argument>, <argument><expr><name>UVAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>Y</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>U</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>V</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name>y</name></expr><operator>,</operator> <expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>y</name><operator>+</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>clamped_row</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>row</name> <operator>&lt;</operator> <name>height</name><operator>)</operator></expr> ?</condition><then> <expr><name>row</name></expr> </then><else>: <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base_p</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>stbi__flip_vertically_on_write</name></expr> ?</condition><then> <expr><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>clamped_row</name><operator>)</operator></expr> </then><else>: <expr><name>clamped_row</name></expr></else></ternary><operator>)</operator><operator>*</operator><name>width</name><operator>*</operator><name>comp</name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <name>x</name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>x</name><operator>+</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr><operator>,</operator> <expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>base_p</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name>width</name><operator>)</operator></expr> ?</condition><then> <expr><name>col</name></expr> </then><else>: <expr><operator>(</operator><name>width</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator><operator>*</operator><name>comp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><name><name>dataR</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><name><name>dataG</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>dataB</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Y</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator> <operator>+</operator><literal type="number">0.29900f</literal><operator>*</operator><name>r</name> <operator>+</operator> <literal type="number">0.58700f</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">0.11400f</literal><operator>*</operator><name>b</name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator> <operator>-</operator><literal type="number">0.16874f</literal><operator>*</operator><name>r</name> <operator>-</operator> <literal type="number">0.33126f</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">0.50000f</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator> <operator>+</operator><literal type="number">0.50000f</literal><operator>*</operator><name>r</name> <operator>-</operator> <literal type="number">0.41869f</literal><operator>*</operator><name>g</name> <operator>-</operator> <literal type="number">0.08131f</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>DCY</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>fdtbl_Y</name></expr></argument>, <argument><expr><name>DCY</name></expr></argument>, <argument><expr><name>YDC_HT</name></expr></argument>, <argument><expr><name>YAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DCU</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>fdtbl_UV</name></expr></argument>, <argument><expr><name>DCU</name></expr></argument>, <argument><expr><name>UVDC_HT</name></expr></argument>, <argument><expr><name>UVAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DCV</name> <operator>=</operator> <call><name>stbiw__jpg_processDU</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>fdtbl_UV</name></expr></argument>, <argument><expr><name>DCV</name></expr></argument>, <argument><expr><name>UVDC_HT</name></expr></argument>, <argument><expr><name>UVAC_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>stbiw__jpg_writeBits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitCnt</name></expr></argument>, <argument><expr><name>fillBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbiw__putc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0xD9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_jpg_to_func</name><parameter_list>(<parameter><decl><type><name>stbi_write_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__start_write_callbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbi_write_jpg_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBI_WRITE_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBIWDEF</name> <name>int</name></type> <name>stbi_write_jpg</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbi__write_context</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbi__start_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbi_write_jpg_core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbi__end_write_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




























































































</unit>
