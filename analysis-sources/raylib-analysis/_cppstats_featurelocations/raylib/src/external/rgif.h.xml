<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\rgif.h">















































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGIF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RGIF_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIFDEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIFDEF</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIFDEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><name>RGIFDEF</name> <name>bool</name></type> <name>GifBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitDepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dither</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RGIFDEF</name> <name>bool</name></type> <name>GifWriteFrame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dither</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RGIFDEF</name> <name>bool</name></type> <name>GifEnd</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RGIF_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGIF_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIF_MALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGIF_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(ptr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIFMIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&lt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIFMAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIFABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;0?-(x):(x))</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct <name>GifPalette</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bitDepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>r</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>g</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>treeSplitElt</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>treeSplit</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>GifPalette</name>;</typedef>




<typedef>typedef <type><struct>struct <name>GifBitStatus</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bitIndex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunkIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>chunk</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>GifBitStatus</name>;</typedef>



<typedef>typedef <type><struct>struct <name>GifLzwNode</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>m_next</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>GifLzwNode</name>;</typedef>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gifTransparentIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>gifFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gifFrame</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifGetClosestPaletteColor</name><parameter_list>(<parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bestInd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bestDiff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>treeRoot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifSwapPixels</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixA</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixB</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GifPartition</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pivotIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifPartitionByMedian</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>com</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>neededCenter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifSplitPalette</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numPixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstElt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastElt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>splitElt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>splitDist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>treeNode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>buildForDither</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GifPickChangedPixels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numPixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifMakePalette</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nextFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>buildForDither</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifDitherImage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nextFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifThresholdImage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nextFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteBit</name><parameter_list>(<parameter><decl><type><name>GifBitStatus</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteChunk</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>GifBitStatus</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifWritePalette</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteCode</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>GifBitStatus</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteLzwImage</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><name>RGIFDEF</name> <name>bool</name></type> <name>GifBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitDepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dither</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
<expr_stmt><expr><name>gifFile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gifFile</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>gifFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gifFile</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>gifFrame</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RGIF_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"GIF89a"</literal></expr></argument>,<argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>width</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>height</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0xf0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"NETSCAPE2.0"</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>RGIFDEF</name> <name>bool</name></type> <name>GifWriteFrame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dither</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gifFile</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oldImage</name> <init>= <expr><name>gifFrame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GifPalette</name></type> <name>pal</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GifMakePalette</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>dither</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>oldImage</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bitDepth</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dither</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GifDitherImage</name><argument_list>(<argument><expr><name>oldImage</name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>gifFrame</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>GifThresholdImage</name><argument_list>(<argument><expr><name>oldImage</name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>gifFrame</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GifWriteLzwImage</name><argument_list>(<argument><expr><name>gifFile</name></expr></argument>, <argument><expr><name>gifFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>RGIFDEF</name> <name>bool</name></type> <name>GifEnd</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gifFile</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>, <argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>gifFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RGIF_FREE</name><argument_list>(<argument><expr><name>gifFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gifFile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gifFrame</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>GifGetClosestPaletteColor</name><parameter_list>(<parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bestInd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bestDiff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>treeRoot</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>treeRoot</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>pPal</name><operator>-&gt;</operator><name>bitDepth</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name>treeRoot</name><operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>pPal</name><operator>-&gt;</operator><name>bitDepth</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ind</name> <operator>==</operator> <name>gifTransparentIndex</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>r_err</name> <init>= <expr><name>r</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pPal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g_err</name> <init>= <expr><name>g</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pPal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_err</name> <init>= <expr><name>b</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pPal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>GIFABS</name><argument_list>(<argument><expr><name>r_err</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>GIFABS</name><argument_list>(<argument><expr><name>g_err</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>GIFABS</name><argument_list>(<argument><expr><name>b_err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <operator>*</operator><name>bestDiff</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bestInd</name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bestDiff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>comps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><name><name>comps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>comps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>comps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>splitComp</name> <init>= <expr><name><name>comps</name><index>[<expr><name><name>pPal</name><operator>-&gt;</operator><name>treeSplitElt</name><index>[<expr><name>treeRoot</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>splitPos</name> <init>= <expr><name><name>pPal</name><operator>-&gt;</operator><name>treeSplit</name><index>[<expr><name>treeRoot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>splitPos</name> <operator>&gt;</operator> <name>splitComp</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>GifGetClosestPaletteColor</name><argument_list>(<argument><expr><name>pPal</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bestInd</name></expr></argument>, <argument><expr><name>bestDiff</name></expr></argument>, <argument><expr><name>treeRoot</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bestDiff</name> <operator>&gt;</operator> <operator>(</operator><name>splitPos</name> <operator>-</operator> <name>splitComp</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>GifGetClosestPaletteColor</name><argument_list>(<argument><expr><name>pPal</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bestInd</name></expr></argument>, <argument><expr><name>bestDiff</name></expr></argument>, <argument><expr><name>treeRoot</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>GifGetClosestPaletteColor</name><argument_list>(<argument><expr><name>pPal</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bestInd</name></expr></argument>, <argument><expr><name>bestDiff</name></expr></argument>, <argument><expr><name>treeRoot</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bestDiff</name> <operator>&gt;</operator> <name>splitComp</name> <operator>-</operator> <name>splitPos</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GifGetClosestPaletteColor</name><argument_list>(<argument><expr><name>pPal</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bestInd</name></expr></argument>, <argument><expr><name>bestDiff</name></expr></argument>, <argument><expr><name>treeRoot</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GifSwapPixels</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixA</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rA</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>gA</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bA</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>aA</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rB</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixB</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>gB</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixB</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bB</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixB</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>aB</name> <init>= <expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>rB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixA</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>aB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixB</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>rA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixB</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixB</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>pixB</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>aA</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>GifPartition</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pivotIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pivotValue</name> <init>= <expr><name><name>image</name><index>[<expr><operator>(</operator><name>pivotIndex</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>+</operator><name>elt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GifSwapPixels</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>pivotIndex</name></expr></argument>, <argument><expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>storeIndex</name> <init>= <expr><name>left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>split</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><name>left</name></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>right</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>arrayVal</name> <init>= <expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><name>elt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>arrayVal</name> <operator>&lt;</operator> <name>pivotValue</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GifSwapPixels</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>storeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>storeIndex</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>arrayVal</name> <operator>==</operator> <name>pivotValue</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>split</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GifSwapPixels</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>storeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>storeIndex</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>split</name> <operator>=</operator> <operator>!</operator><name>split</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>GifSwapPixels</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>storeIndex</name></expr></argument>, <argument><expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>storeIndex</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GifPartitionByMedian</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>com</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>neededCenter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>right</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pivotIndex</name> <init>= <expr><name>left</name> <operator>+</operator> <operator>(</operator><name>right</name><operator>-</operator><name>left</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pivotIndex</name> <operator>=</operator> <call><name>GifPartition</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>com</name></expr></argument>, <argument><expr><name>pivotIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pivotIndex</name> <operator>&gt;</operator> <name>neededCenter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GifPartitionByMedian</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>pivotIndex</name></expr></argument>, <argument><expr><name>com</name></expr></argument>, <argument><expr><name>neededCenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pivotIndex</name> <operator>&lt;</operator> <name>neededCenter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GifPartitionByMedian</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>pivotIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>com</name></expr></argument>, <argument><expr><name>neededCenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GifSplitPalette</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numPixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstElt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastElt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>splitElt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>splitDist</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>treeNode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>buildForDither</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lastElt</name> <operator>&lt;=</operator> <name>firstElt</name> <operator>||</operator> <name>numPixels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>lastElt</name> <operator>==</operator> <name>firstElt</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buildForDither</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>firstElt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name><init>=<expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name><init>=<expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GIFMIN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>GIFMIN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GIFMIN</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>firstElt</name> <operator>==</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pal</name><operator>-&gt;</operator><name>bitDepth</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>+=</operator> <name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>numPixels</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>g</name> <operator>+=</operator> <name>numPixels</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>numPixels</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>/=</operator> <name>numPixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>/=</operator> <name>numPixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>/=</operator> <name>numPixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>firstElt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>b</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>minR</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minG</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minB</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxB</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>image</name><index>[<expr><name>ii</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>maxR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxR</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>minR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minR</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&gt;</operator> <name>maxG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxG</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <name>minG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minG</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>maxB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxB</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>minB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minB</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>rRange</name> <init>= <expr><name>maxR</name> <operator>-</operator> <name>minR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gRange</name> <init>= <expr><name>maxG</name> <operator>-</operator> <name>minG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bRange</name> <init>= <expr><name>maxB</name> <operator>-</operator> <name>minB</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>splitCom</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bRange</name> <operator>&gt;</operator> <name>gRange</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>splitCom</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rRange</name> <operator>&gt;</operator> <name>bRange</name> <operator>&amp;&amp;</operator> <name>rRange</name> <operator>&gt;</operator> <name>gRange</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>splitCom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subPixelsA</name> <init>= <expr><name>numPixels</name> <operator>*</operator><operator>(</operator><name>splitElt</name> <operator>-</operator> <name>firstElt</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>lastElt</name> <operator>-</operator> <name>firstElt</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subPixelsB</name> <init>= <expr><name>numPixels</name><operator>-</operator><name>subPixelsA</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GifPartitionByMedian</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numPixels</name></expr></argument>, <argument><expr><name>splitCom</name></expr></argument>, <argument><expr><name>subPixelsA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>treeSplitElt</name><index>[<expr><name>treeNode</name></expr>]</index></name> <operator>=</operator> <name>splitCom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>-&gt;</operator><name>treeSplit</name><index>[<expr><name>treeNode</name></expr>]</index></name> <operator>=</operator> <name><name>image</name><index>[<expr><name>subPixelsA</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><name>splitCom</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GifSplitPalette</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>subPixelsA</name></expr></argument>, <argument><expr><name>firstElt</name></expr></argument>, <argument><expr><name>splitElt</name></expr></argument>, <argument><expr><name>splitElt</name><operator>-</operator><name>splitDist</name></expr></argument>, <argument><expr><name>splitDist</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>treeNode</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>buildForDither</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GifSplitPalette</name><argument_list>(<argument><expr><name>image</name><operator>+</operator><name>subPixelsA</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>subPixelsB</name></expr></argument>, <argument><expr><name>splitElt</name></expr></argument>, <argument><expr><name>lastElt</name></expr></argument>, <argument><expr><name>splitElt</name><operator>+</operator><name>splitDist</name></expr></argument>, <argument><expr><name>splitDist</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>treeNode</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buildForDither</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>GifPickChangedPixels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numPixels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numChanged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>writeIter</name> <init>= <expr><name>frame</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lastFrame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>
<name><name>lastFrame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>
<name><name>lastFrame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name><name>frame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>writeIter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>writeIter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>writeIter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>numChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name>writeIter</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lastFrame</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>numChanged</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>GifMakePalette</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nextFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>buildForDither</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pPal</name><operator>-&gt;</operator><name>bitDepth</name></name> <operator>=</operator> <name>bitDepth</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>imageSize</name> <init>= <expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><literal type="number">4</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destroyableImage</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>RGIF_MALLOC</name><argument_list>(<argument><expr><name>imageSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>destroyableImage</name></expr></argument>, <argument><expr><name>nextFrame</name></expr></argument>, <argument><expr><name>imageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numPixels</name> <init>= <expr><name>width</name><operator>*</operator><name>height</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lastFrame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>numPixels</name> <operator>=</operator> <call><name>GifPickChangedPixels</name><argument_list>(<argument><expr><name>lastFrame</name></expr></argument>, <argument><expr><name>destroyableImage</name></expr></argument>, <argument><expr><name>numPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lastElt</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bitDepth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>splitElt</name> <init>= <expr><name>lastElt</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>splitDist</name> <init>= <expr><name>splitElt</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GifSplitPalette</name><argument_list>(<argument><expr><name>destroyableImage</name></expr></argument>, <argument><expr><name>numPixels</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lastElt</name></expr></argument>, <argument><expr><name>splitElt</name></expr></argument>, <argument><expr><name>splitDist</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buildForDither</name></expr></argument>, <argument><expr><name>pPal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RGIF_FREE</name><argument_list>(<argument><expr><name>destroyableImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pPal</name><operator>-&gt;</operator><name>treeSplit</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bitDepth</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPal</name><operator>-&gt;</operator><name>treeSplitElt</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bitDepth</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pPal</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GifDitherImage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nextFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numPixels</name> <init>= <expr><name>width</name><operator>*</operator><name>height</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>quantPixels</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>RGIF_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numPixels</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>pix</name> <init>= <expr><name><name>nextFrame</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pix16</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>pix</name><operator>*</operator><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>quantPixels</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name>pix16</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>yy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>yy</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>yy</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>xx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>xx</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>xx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nextPix</name> <init>= <expr><name>quantPixels</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>yy</name><operator>*</operator><name>width</name><operator>+</operator><name>xx</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastPix</name> <init>= <expr><ternary><condition><expr><name>lastFrame</name></expr>?</condition><then> <expr><name>lastFrame</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>yy</name><operator>*</operator><name>width</name><operator>+</operator><name>xx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>rr</name> <init>= <expr><operator>(</operator><name><name>nextPix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">127</literal><operator>)</operator> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gg</name> <init>= <expr><operator>(</operator><name><name>nextPix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">127</literal><operator>)</operator> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bb</name> <init>= <expr><operator>(</operator><name><name>nextPix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">127</literal><operator>)</operator> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>lastFrame</name> <operator>&amp;&amp;</operator>
<name><name>lastPix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>rr</name> <operator>&amp;&amp;</operator>
<name><name>lastPix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>gg</name> <operator>&amp;&amp;</operator>
<name><name>lastPix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>bb</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>gifTransparentIndex</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bestDiff</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bestInd</name> <init>= <expr><name>gifTransparentIndex</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>GifGetClosestPaletteColor</name><argument_list>(<argument><expr><name>pPal</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><name>gg</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bestInd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bestDiff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>r_err</name> <init>= <expr><name><name>nextPix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pPal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>bestInd</name></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g_err</name> <init>= <expr><name><name>nextPix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pPal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>bestInd</name></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_err</name> <init>= <expr><name><name>nextPix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pPal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>bestInd</name></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>bestInd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>bestInd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>bestInd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextPix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>bestInd</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>quantloc_7</name> <init>= <expr><operator>(</operator><name>yy</name><operator>*</operator><name>width</name><operator>+</operator><name>xx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quantloc_3</name> <init>= <expr><operator>(</operator><name>yy</name><operator>*</operator><name>width</name><operator>+</operator><name>width</name><operator>+</operator><name>xx</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quantloc_5</name> <init>= <expr><operator>(</operator><name>yy</name><operator>*</operator><name>width</name><operator>+</operator><name>width</name><operator>+</operator><name>xx</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quantloc_1</name> <init>= <expr><operator>(</operator><name>yy</name><operator>*</operator><name>width</name><operator>+</operator><name>width</name><operator>+</operator><name>xx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>quantloc_7</name> <operator>&lt;</operator> <name>numPixels</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pix7</name> <init>= <expr><name>quantPixels</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>quantloc_7</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pix7</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix7</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>r_err</name><operator>*</operator><literal type="number">7</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix7</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix7</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>g_err</name><operator>*</operator><literal type="number">7</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix7</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix7</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_err</name><operator>*</operator><literal type="number">7</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quantloc_3</name> <operator>&lt;</operator> <name>numPixels</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pix3</name> <init>= <expr><name>quantPixels</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>quantloc_3</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pix3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>r_err</name><operator>*</operator><literal type="number">3</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>g_err</name><operator>*</operator><literal type="number">3</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_err</name><operator>*</operator><literal type="number">3</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quantloc_5</name> <operator>&lt;</operator> <name>numPixels</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pix5</name> <init>= <expr><name>quantPixels</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>quantloc_5</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pix5</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix5</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>r_err</name><operator>*</operator><literal type="number">5</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix5</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix5</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>g_err</name><operator>*</operator><literal type="number">5</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_err</name><operator>*</operator><literal type="number">5</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quantloc_1</name> <operator>&lt;</operator> <name>numPixels</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pix1</name> <init>= <expr><name>quantPixels</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>quantloc_1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>r_err</name> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>g_err</name> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>GIFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_err</name> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name><name>quantPixels</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RGIF_FREE</name><argument_list>(<argument><expr><name>quantPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GifThresholdImage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastFrame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nextFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outFrame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numPixels</name> <init>= <expr><name>width</name><operator>*</operator><name>height</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>numPixels</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>lastFrame</name> <operator>&amp;&amp;</operator>
<name><name>lastFrame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>nextFrame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>lastFrame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>nextFrame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>lastFrame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>nextFrame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lastFrame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lastFrame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lastFrame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>gifTransparentIndex</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bestDiff</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bestInd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GifGetClosestPaletteColor</name><argument_list>(<argument><expr><name>pPal</name></expr></argument>, <argument><expr><name><name>nextFrame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextFrame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nextFrame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bestInd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bestDiff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>bestInd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>bestInd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pPal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>bestInd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outFrame</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>bestInd</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastFrame</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lastFrame</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>outFrame</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nextFrame</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteBit</name><parameter_list>(<parameter><decl><type><name>GifBitStatus</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>bit</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>bit</name> <operator>&lt;&lt;</operator> <name><name>stat</name><operator>-&gt;</operator><name>bitIndex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>byte</name></name> <operator>|=</operator> <name>bit</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>stat</name><operator>-&gt;</operator><name>bitIndex</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>-&gt;</operator><name>bitIndex</name></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>stat</name><operator>-&gt;</operator><name>chunkIndex</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>stat</name><operator>-&gt;</operator><name>byte</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>bitIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>byte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteChunk</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>GifBitStatus</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>chunkIndex</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>chunkIndex</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>bitIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>byte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>chunkIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteCode</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>GifBitStatus</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>GifWriteBit</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>-&gt;</operator><name>chunkIndex</name></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GifWriteChunk</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GifWritePalette</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pPal</name><operator>-&gt;</operator><name>bitDepth</name></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name> <init>= <expr><name><name>pPal</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g</name> <init>= <expr><name><name>pPal</name><operator>-&gt;</operator><name>g</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name> <init>= <expr><name><name>pPal</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GifWriteLzwImage</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>GifPalette</name> <modifier>*</modifier></type><name>pPal</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>delay</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>delay</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>gifTransparentIndex</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x2c</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>left</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>top</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>top</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>width</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>height</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0x80</literal> <operator>+</operator> <name><name>pPal</name><operator>-&gt;</operator><name>bitDepth</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>GifWritePalette</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pPal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>minCodeSize</name> <init>= <expr><name><name>pPal</name><operator>-&gt;</operator><name>bitDepth</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>clearCode</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pPal</name><operator>-&gt;</operator><name>bitDepth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>minCodeSize</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>GifLzwNode</name> <modifier>*</modifier></type><name>codetree</name> <init>= <expr><operator>(</operator><name>GifLzwNode</name> <operator>*</operator><operator>)</operator><call><name>RGIF_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GifLzwNode</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>codetree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GifLzwNode</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curCode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>codeSize</name> <init>= <expr><name>minCodeSize</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxCode</name> <init>= <expr><name>clearCode</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GifBitStatus</name></type> <name>stat</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stat</name><operator>.</operator><name>byte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>.</operator><name>bitIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>.</operator><name>chunkIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GifWriteCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>clearCode</name></expr></argument>, <argument><expr><name>codeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>yy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>yy</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>yy</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>xx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>xx</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>xx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>nextValue</name> <init>= <expr><name><name>image</name><index>[<expr><operator>(</operator><name>yy</name><operator>*</operator><name>width</name><operator>+</operator><name>xx</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>curCode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>curCode</name> <operator>=</operator> <name>nextValue</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>codetree</name><index>[<expr><name>curCode</name></expr>]</index></name><operator>.</operator><name><name>m_next</name><index>[<expr><name>nextValue</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>curCode</name> <operator>=</operator> <name><name>codetree</name><index>[<expr><name>curCode</name></expr>]</index></name><operator>.</operator><name><name>m_next</name><index>[<expr><name>nextValue</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>GifWriteCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>curCode</name></expr></argument>, <argument><expr><name>codeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>codetree</name><index>[<expr><name>curCode</name></expr>]</index></name><operator>.</operator><name><name>m_next</name><index>[<expr><name>nextValue</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>maxCode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxCode</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <name>codeSize</name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>codeSize</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>maxCode</name> <operator>==</operator> <literal type="number">4095</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>GifWriteCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>clearCode</name></expr></argument>, <argument><expr><name>codeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>codetree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GifLzwNode</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codeSize</name> <operator>=</operator> <name>minCodeSize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxCode</name> <operator>=</operator> <name>clearCode</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curCode</name> <operator>=</operator> <name>nextValue</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>GifWriteCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>curCode</name></expr></argument>, <argument><expr><name>codeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GifWriteCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>clearCode</name></expr></argument>, <argument><expr><name>codeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GifWriteCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>clearCode</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>minCodeSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name><name>stat</name><operator>.</operator><name>bitIndex</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GifWriteBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>.</operator><name>chunkIndex</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GifWriteChunk</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>RGIF_FREE</name><argument_list>(<argument><expr><name>codetree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
