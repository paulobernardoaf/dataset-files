<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\jar_xm.h">

















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_JAR_XM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_JAR_XM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAR_XM_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAR_XM_LINEAR_INTERPOLATION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAR_XM_DEFENSIVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAR_XM_RAMPING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JARXM_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARXM_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JARXM_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARXM_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct_decl>struct <name>jar_xm_context_s</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_context_s</name></name></type> <name>jar_xm_context_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















<function_decl><type><name>int</name></type> <name>jar_xm_create_context_from_file</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>jar_xm_create_context</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>moddata</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rate</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> <name>jar_xm_create_context_safe</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>moddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>moddata_length</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rate</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>jar_xm_free_context</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>jar_xm_generate_samples</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numsamples</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>jar_xm_generate_samples_16bit</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numsamples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>musicBuffer</name> <init>= <expr><call><name>JARXM_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>numsamples</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>jar_xm_generate_samples</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>musicBuffer</name></expr></argument>, <argument><expr><name>numsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>output</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>x</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>numsamples</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>musicBuffer</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>SHRT_MAX</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JARXM_FREE</name><argument_list>(<argument><expr><name>musicBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>jar_xm_generate_samples_8bit</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numsamples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>musicBuffer</name> <init>= <expr><call><name>JARXM_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>numsamples</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>jar_xm_generate_samples</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>musicBuffer</name></expr></argument>, <argument><expr><name>numsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>output</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>x</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>numsamples</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>musicBuffer</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>CHAR_MAX</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JARXM_FREE</name><argument_list>(<argument><expr><name>musicBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function_decl><type><name>void</name></type> <name>jar_xm_set_max_loop_count</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>loopcnt</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>uint8_t</name></type> <name>jar_xm_get_loop_count</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>bool</name></type> <name>jar_xm_mute_channel</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>bool</name></type> <name>jar_xm_mute_instrument</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jar_xm_get_module_name</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jar_xm_get_tracker_name</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_channels</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint16_t</name></type> <name>jar_xm_get_module_length</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_patterns</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_rows</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_instruments</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_samples</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>jar_xm_get_playing_speed</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>bpm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>tempo</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>jar_xm_get_position</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pattern_index</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>samples</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>uint64_t</name></type> <name>jar_xm_get_latest_trigger_of_instrument</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>uint64_t</name></type> <name>jar_xm_get_latest_trigger_of_sample</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint64_t</name></type> <name>jar_xm_get_latest_trigger_of_channel</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint64_t</name></type> <name>jar_xm_get_remaining_samples</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JAR_XM_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_DEBUG</name></expr></cpp:if> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, "%s(): " fmt "\n", __func__, __VA_ARGS__); fflush(stderr); } while(0)</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>jar_xm_BIG_ENDIAN</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Big endian platforms are not yet supported, sorry"</cpp:literal></cpp:error>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name><name>__fail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_NAME_LENGTH</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTRUMENT_NAME_LENGTH</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_NAME_LENGTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACKER_NAME_LENGTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATTERN_ORDER_TABLE_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_NOTES</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ENVELOPE_POINTS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NUM_ROWS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_SAMPLE_RAMPING_POINTS</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<enum>enum <name>jar_xm_waveform_type_e</name> <block>{
<decl><name>jar_xm_SINE_WAVEFORM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>jar_xm_RAMP_DOWN_WAVEFORM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>jar_xm_SQUARE_WAVEFORM</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>jar_xm_RANDOM_WAVEFORM</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>jar_xm_RAMP_UP_WAVEFORM</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>jar_xm_waveform_type_e</name></name></type> <name>jar_xm_waveform_type_t</name>;</typedef>

<enum>enum <name>jar_xm_loop_type_e</name> <block>{
<decl><name>jar_xm_NO_LOOP</name></decl>,
<decl><name>jar_xm_FORWARD_LOOP</name></decl>,
<decl><name>jar_xm_PING_PONG_LOOP</name></decl>,
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>jar_xm_loop_type_e</name></name></type> <name>jar_xm_loop_type_t</name>;</typedef>

<enum>enum <name>jar_xm_frequency_type_e</name> <block>{
<decl><name>jar_xm_LINEAR_FREQUENCIES</name></decl>,
<decl><name>jar_xm_AMIGA_FREQUENCIES</name></decl>,
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>jar_xm_frequency_type_e</name></name></type> <name>jar_xm_frequency_type_t</name>;</typedef>

<struct>struct <name>jar_xm_envelope_point_s</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_envelope_point_s</name></name></type> <name>jar_xm_envelope_point_t</name>;</typedef>

<struct>struct <name>jar_xm_envelope_s</name> <block>{
<decl_stmt><decl><type><name>jar_xm_envelope_point_t</name></type> <name><name>points</name><index>[<expr><name>NUM_ENVELOPE_POINTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_points</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sustain_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_start_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_end_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sustain_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop_enabled</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_envelope_s</name></name></type> <name>jar_xm_envelope_t</name>;</typedef>

<struct>struct <name>jar_xm_sample_s</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>SAMPLE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>loop_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>loop_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>loop_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>finetune</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_loop_type_t</name></type> <name>loop_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>panning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>relative_note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>latest_trigger</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_sample_s</name></name></type> <name>jar_xm_sample_t</name>;</typedef>

<struct>struct <name>jar_xm_instrument_s</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>INSTRUMENT_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sample_of_notes</name><index>[<expr><name>NUM_NOTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_envelope_t</name></type> <name>volume_envelope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_envelope_t</name></type> <name>panning_envelope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_waveform_type_t</name></type> <name>vibrato_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vibrato_sweep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vibrato_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vibrato_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>volume_fadeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>latest_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>muted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jar_xm_sample_t</name><modifier>*</modifier></type> <name>samples</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_instrument_s</name></name></type> <name>jar_xm_instrument_t</name>;</typedef>

<struct>struct <name>jar_xm_pattern_slot_s</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>note</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>instrument</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>volume_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>effect_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>effect_param</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_pattern_slot_s</name></name></type> <name>jar_xm_pattern_slot_t</name>;</typedef>

<struct>struct <name>jar_xm_pattern_s</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_pattern_slot_t</name><modifier>*</modifier></type> <name>slots</name></decl>;</decl_stmt> 
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_pattern_s</name></name></type> <name>jar_xm_pattern_t</name>;</typedef>

<struct>struct <name>jar_xm_module_s</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MODULE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>trackername</name><index>[<expr><name>TRACKER_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>restart_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_patterns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_instruments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_frequency_type_t</name></type> <name>frequency_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pattern_table</name><index>[<expr><name>PATTERN_ORDER_TABLE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jar_xm_pattern_t</name><modifier>*</modifier></type> <name>patterns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_instrument_t</name><modifier>*</modifier></type> <name>instruments</name></decl>;</decl_stmt> 

}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_module_s</name></name></type> <name>jar_xm_module_t</name>;</typedef>

<struct>struct <name>jar_xm_channel_context_s</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>orig_note</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>jar_xm_instrument_t</name><modifier>*</modifier></type> <name>instrument</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>jar_xm_sample_t</name><modifier>*</modifier></type> <name>sample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>jar_xm_pattern_slot_t</name><modifier>*</modifier></type> <name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sample_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>frequency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ping</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>volume</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>panning</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>autovibrato_ticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sustained</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fadeout_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>volume_envelope_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>panning_envelope_panning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>volume_envelope_frame_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>panning_envelope_frame_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>autovibrato_note_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>arp_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>arp_note_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>volume_slide_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fine_volume_slide_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>global_volume_slide_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>panning_slide_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>portamento_up_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>portamento_down_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fine_portamento_up_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fine_portamento_down_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>extra_fine_portamento_up_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>extra_fine_portamento_down_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tone_portamento_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tone_portamento_target_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>multi_retrig_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>note_delay_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pattern_loop_origin</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pattern_loop_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>vibrato_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_waveform_type_t</name></type> <name>vibrato_waveform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>vibrato_waveform_retrigger</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vibrato_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>vibrato_ticks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>vibrato_note_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_waveform_type_t</name></type> <name>tremolo_waveform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tremolo_waveform_retrigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tremolo_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tremolo_ticks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tremolo_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tremor_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tremor_on</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>latest_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>muted</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>


<decl_stmt><decl><type><name>float</name></type> <name>target_panning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>target_volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>frame_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>end_of_previous_sample</name><index>[<expr><name>jar_xm_SAMPLE_RAMPING_POINTS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>actual_panning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>actual_volume</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>jar_xm_channel_context_s</name></name></type> <name>jar_xm_channel_context_t</name>;</typedef>

<struct>struct <name>jar_xm_context_s</name> <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>allocated_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_module_t</name></type> <name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tempo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bpm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>global_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>amplification</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>



<decl_stmt><decl><type><name>float</name></type> <name>volume_ramp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>panning_ramp</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>current_table_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>current_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>current_tick</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>remaining_samples_in_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>generated_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>position_jump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pattern_break</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>jump_dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>jump_row</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint16_t</name></type> <name>extra_ticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>row_loop_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_loop_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>channels</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_DEFENSIVE</name></expr></cpp:if>





<function_decl><type><name>int</name></type> <name>jar_xm_check_sanity_preload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>jar_xm_check_sanity_postload</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function_decl><type><name>size_t</name></type> <name>jar_xm_get_memory_needed_for_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>char</name><modifier>*</modifier></type> <name>jar_xm_load_module</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>jar_xm_create_context</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctxp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>moddata</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>jar_xm_create_context_safe</name><argument_list>(<argument><expr><name>ctxp</name></expr></argument>, <argument><expr><name>moddata</name></expr></argument>, <argument><expr><name>SIZE_MAX</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + ((b) - 1)) &amp; ~((b) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void*)(((uintptr_t)(x) + ((b) - 1)) &amp; ~((b) - 1))</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>jar_xm_create_context_safe</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctxp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>moddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>moddata_length</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_DEFENSIVE</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>mempool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_DEFENSIVE</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jar_xm_check_sanity_preload</name><argument_list>(<argument><expr><name>moddata</name></expr></argument>, <argument><expr><name>moddata_length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"jar_xm_check_sanity_preload() returned %i, module is not safe to load"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bytes_needed</name> <operator>=</operator> <call><name>jar_xm_get_memory_needed_for_context</name><argument_list>(<argument><expr><name>moddata</name></expr></argument>, <argument><expr><name>moddata_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>JARXM_MALLOC</name><argument_list>(<argument><expr><name>bytes_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>mempool</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bytes_needed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"call to JARXM_MALLOC() failed, returned %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>mempool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ctxp</name> <operator>=</operator> <operator>(</operator><name>jar_xm_context_t</name> <operator>*</operator><operator>)</operator><name>mempool</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>allocated_memory</name></name> <operator>=</operator> <name>mempool</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_context_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>jar_xm_load_module</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>moddata</name></expr></argument>, <argument><expr><name>moddata_length</name></expr></argument>, <argument><expr><name>mempool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>ALIGN_PTR</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name>jar_xm_channel_context_t</name><operator>*</operator><operator>)</operator><name>mempool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_channel_context_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>ALIGN_PTR</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_volume</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>amplification</name></name> <operator>=</operator> <literal type="number">.25f</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>volume_ramp</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>/</operator> <literal type="number">128.f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>panning_ramp</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>/</operator> <literal type="number">128.f</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_waveform</name></name> <operator>=</operator> <name>jar_xm_SINE_WAVEFORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_waveform_retrigger</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_waveform</name></name> <operator>=</operator> <name>jar_xm_SINE_WAVEFORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_waveform_retrigger</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>volume_envelope_volume</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>fadeout_volume</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>panning_envelope_panning</name></name> <operator>=</operator> <literal type="number">.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>actual_volume</name></name> <operator>=</operator> <literal type="number">.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>actual_panning</name></name> <operator>=</operator> <literal type="number">.5f</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>ALIGN_PTR</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>row_loop_count</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>mempool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name>MAX_NUM_ROWS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_DEFENSIVE</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jar_xm_check_sanity_postload</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"jar_xm_check_sanity_postload() returned %i, module is not safe to play"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_free_context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jar_xm_free_context</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>JARXM_FREE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>allocated_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jar_xm_set_max_loop_count</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>loopcnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_loop_count</name></name> <operator>=</operator> <name>loopcnt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>jar_xm_get_loop_count</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>loop_count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jar_xm_mute_channel</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>old</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>muted</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>muted</name> <operator>=</operator> <name>mute</name></expr>;</expr_stmt>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jar_xm_mute_instrument</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>old</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>instruments</name><index>[<expr><name>instr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>muted</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>instruments</name><index>[<expr><name>instr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>muted</name> <operator>=</operator> <name>mute</name></expr>;</expr_stmt>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jar_xm_get_module_name</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jar_xm_get_tracker_name</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>trackername</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_channels</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_channels</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>jar_xm_get_module_length</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>length</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_patterns</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_patterns</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_rows</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>patterns</name><index>[<expr><name>pattern</name></expr>]</index></name><operator>.</operator><name>num_rows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_instruments</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_instruments</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>jar_xm_get_number_of_samples</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>instrument</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>instruments</name><index>[<expr><name>instrument</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num_samples</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>jar_xm_get_playing_speed</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>bpm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>tempo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>bpm</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bpm</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tempo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tempo</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tempo</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jar_xm_get_position</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pattern_index</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>samples</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pattern_index</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pattern_index</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>pattern</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>pattern_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>row</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>samples</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>generated_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jar_xm_get_latest_trigger_of_instrument</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>instruments</name><index>[<expr><name>instr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>latest_trigger</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jar_xm_get_latest_trigger_of_sample</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>instruments</name><index>[<expr><name>instr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>samples</name><index>[<expr><name>sample</name></expr>]</index></name><operator>.</operator><name>latest_trigger</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jar_xm_get_latest_trigger_of_channel</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>chn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>chn</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>latest_trigger</name></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_U8</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((offset) &lt; moddata_length) ? (*(uint8_t*)(moddata + (offset))) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_U16</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t)READ_U8(offset) | ((uint16_t)READ_U8((offset) + 1) &lt;&lt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_U32</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)READ_U16(offset) | ((uint32_t)READ_U16((offset) + 2) &lt;&lt; 16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_MEMCPY</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy_pad(ptr, length, moddata, moddata_length, offset)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memcpy_pad</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst_c</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src_c</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>copy_bytes</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>src_len</name> <operator>&gt;=</operator> <name>offset</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>src_len</name> <operator>-</operator> <name>offset</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>copy_bytes</name> <operator>=</operator> <ternary><condition><expr><name>copy_bytes</name> <operator>&gt;</operator> <name>dst_len</name></expr> ?</condition><then> <expr><name>dst_len</name></expr> </then><else>: <expr><name>copy_bytes</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_c</name></expr></argument>, <argument><expr><name>src_c</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>copy_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_c</name> <operator>+</operator> <name>copy_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst_len</name> <operator>-</operator> <name>copy_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_DEFENSIVE</name></expr></cpp:if>

<function><type><name>int</name></type> <name>jar_xm_check_sanity_preload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>module_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>module_length</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"Extended Module: "</literal></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>module</name><index>[<expr><literal type="number">37</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x1A</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>module</name><index>[<expr><literal type="number">59</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01</literal> <operator>||</operator> <name><name>module</name><index>[<expr><literal type="number">58</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x04</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jar_xm_check_sanity_postload</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>



<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>pattern_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_patterns</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"trimming invalid POT at pos %X"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"module has invalid POT, pos %X references nonexistent pattern %X"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>pattern_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>jar_xm_get_memory_needed_for_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>moddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>moddata_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>memory_needed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_patterns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_instruments</name></decl>;</decl_stmt>


<expr_stmt><expr><name>num_channels</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_patterns</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>num_patterns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_pattern_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_needed</name> <operator>=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>memory_needed</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_instruments</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>num_instruments</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_instrument_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_needed</name> <operator>=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>memory_needed</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>MAX_NUM_ROWS</name> <operator>*</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> 


<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_patterns</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_rows</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_rows</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>num_rows</name> <operator>*</operator> <name>num_channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_pattern_slot_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>memory_needed</name> <operator>=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>memory_needed</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_instruments</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sample_header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sample_size_aggregate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_samples</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>num_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_sample_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>num_samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sample_header_size</name> <operator>=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sample_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample_size</name> <operator>=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_size_aggregate</name> <operator>+=</operator> <name>sample_size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>sample_size</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>sample_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>sample_header_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>sample_size_aggregate</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <name>num_channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_channel_context_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_needed</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_context_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><name>memory_needed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>jar_xm_load_module</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>moddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>moddata_length</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>mempool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_module_t</name><modifier>*</modifier></type> <name>mod</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>module</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>READ_MEMCPY</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><name>MODULE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MEMCPY</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>trackername</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">38</literal></expr></argument>, <argument><expr><name>TRACKER_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_size</name> <init>= <expr><call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>restart_position</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>num_patterns</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>num_instruments</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patterns</name></name> <operator>=</operator> <operator>(</operator><name>jar_xm_pattern_t</name><operator>*</operator><operator>)</operator><name>mempool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name><name>mod</name><operator>-&gt;</operator><name>num_patterns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_pattern_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>ALIGN_PTR</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>instruments</name></name> <operator>=</operator> <operator>(</operator><name>jar_xm_instrument_t</name><operator>*</operator><operator>)</operator><name>mempool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name><name>mod</name><operator>-&gt;</operator><name>num_instruments</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_instrument_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>ALIGN_PTR</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name> <init>= <expr><call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>frequency_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>jar_xm_LINEAR_FREQUENCIES</name></expr> </then><else>: <expr><name>jar_xm_AMIGA_FREQUENCIES</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tempo</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bpm</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ_MEMCPY</name><argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>pattern_table</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>PATTERN_ORDER_TABLE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>header_size</name></expr>;</expr_stmt>


<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mod</name><operator>-&gt;</operator><name>num_patterns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>packed_patterndata_size</name> <init>= <expr><call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_pattern_t</name><modifier>*</modifier></type> <name>pat</name> <init>= <expr><name><name>mod</name><operator>-&gt;</operator><name>patterns</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>num_rows</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <operator>(</operator><name>jar_xm_pattern_slot_t</name><operator>*</operator><operator>)</operator><name>mempool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name><name>mod</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>*</operator> <name><name>pat</name><operator>-&gt;</operator><name>num_rows</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_pattern_slot_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>packed_patterndata_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_pattern_slot_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pat</name><operator>-&gt;</operator><name>num_rows</name></name> <operator>*</operator> <name><name>mod</name><operator>-&gt;</operator><name>num_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>packed_patterndata_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>note</name> <init>= <expr><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_pattern_slot_t</name><modifier>*</modifier></type> <name>slot</name> <init>= <expr><name><name>pat</name><operator>-&gt;</operator><name>slots</name></name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>note</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>note</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>note</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>note</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>note</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>instrument</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>instrument</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>note</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>note</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>effect_type</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>effect_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>note</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>note</name></name> <operator>=</operator> <name>note</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>instrument</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>effect_type</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>packed_patterndata_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>mempool</name> <operator>=</operator> <call><name>ALIGN_PTR</name><argument_list>(<argument><expr><name>mempool</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_instruments</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sample_header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_instrument_t</name><modifier>*</modifier></type> <name>instr</name> <init>= <expr><name><name>mod</name><operator>-&gt;</operator><name>instruments</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>READ_MEMCPY</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>INSTRUMENT_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>num_samples</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>num_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sample_header_size</name> <operator>=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MEMCPY</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>sample_of_notes</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>, <argument><expr><name>NUM_NOTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>num_points</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">225</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>num_points</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">226</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>num_points</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">129</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">129</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>num_points</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">177</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">177</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>sustain_point</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">227</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>loop_start_point</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">228</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>loop_end_point</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">229</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>sustain_point</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">230</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>loop_start_point</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">231</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>loop_end_point</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">232</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">233</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>sustain_enabled</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>loop_enabled</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>sustain_enabled</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>loop_enabled</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_type</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">235</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_type</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_sweep</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">236</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_depth</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">237</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_rate</name></name> <operator>=</operator> <call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">238</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>volume_fadeout</name></name> <operator>=</operator> <call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">239</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <operator>(</operator><name>jar_xm_sample_t</name><operator>*</operator><operator>)</operator><name>mempool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name><name>instr</name><operator>-&gt;</operator><name>num_samples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jar_xm_sample_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>num_samples</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>jar_xm_sample_t</name><modifier>*</modifier></type> <name>sample</name> <init>= <expr><name><name>instr</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_length</name></name> <operator>=</operator> <call><name>READ_U32</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name><name>sample</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>+</operator> <name><name>sample</name><operator>-&gt;</operator><name>loop_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>finetune</name></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_type</name></name> <operator>=</operator> <name>jar_xm_NO_LOOP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_type</name></name> <operator>=</operator> <name>jar_xm_FORWARD_LOOP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_type</name></name> <operator>=</operator> <name>jar_xm_PING_PONG_LOOP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>panning</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>relative_note</name></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MEMCPY</name><argument_list>(<argument><expr><name><name>sample</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>SAMPLE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>mempool</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sample</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name><name>sample</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_length</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mempool</name> <operator>+=</operator> <name><name>sample</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>sample_header_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>num_samples</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>jar_xm_sample_t</name><modifier>*</modifier></type> <name>sample</name> <init>= <expr><name><name>instr</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>sample</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sample</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>+</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>READ_U16</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>v</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>sample</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>+</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><call><name>READ_U8</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>v</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>sample</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>mempool</name></expr>;</return>
</block_content>}</block></function>







<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_waveform</name><parameter_list>(<parameter><decl><type><name>jar_xm_waveform_type_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_autovibrato</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_vibrato</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_tremolo</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_arpeggio</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_tone_portamento</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_pitch_slide</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_panning_slide</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_volume_slide</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_envelope_lerp</name><parameter_list>(<parameter><decl><type><name>jar_xm_envelope_point_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_envelope_point_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_envelope_tick</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_envelope_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_envelopes</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_linear_period</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_linear_frequency</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_amiga_period</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_amiga_frequency</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_period</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_frequency</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_update_frequency</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_handle_note_and_instrument</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_pattern_slot_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_trigger_note</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_cut_note</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_key_off</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_post_pattern_change</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_row</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_tick</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_next_of_sample</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_sample</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_TRIGGER_KEEP_VOLUME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_TRIGGER_KEEP_PERIOD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_TRIGGER_KEEP_SAMPLE_POSITION</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>amiga_frequencies</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1712</literal></expr>, <expr><literal type="number">1616</literal></expr>, <expr><literal type="number">1525</literal></expr>, <expr><literal type="number">1440</literal></expr>, 
<expr><literal type="number">1357</literal></expr>, <expr><literal type="number">1281</literal></expr>, <expr><literal type="number">1209</literal></expr>, <expr><literal type="number">1141</literal></expr>, 
<expr><literal type="number">1077</literal></expr>, <expr><literal type="number">1017</literal></expr>, <expr><literal type="number">961</literal></expr>, <expr><literal type="number">907</literal></expr>, 
<expr><literal type="number">856</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>multi_retrig_add</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><literal type="number">2.f</literal></expr>, <expr><operator>-</operator><literal type="number">4.f</literal></expr>, 
<expr><operator>-</operator><literal type="number">8.f</literal></expr>, <expr><operator>-</operator><literal type="number">16.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, 
<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">2.f</literal></expr>, <expr><literal type="number">4.f</literal></expr>, 
<expr><literal type="number">8.f</literal></expr>, <expr><literal type="number">16.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>multi_retrig_multiply</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, 
<expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">.6666667f</literal></expr>, <expr><literal type="number">.5f</literal></expr>, 
<expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, 
<expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.5f</literal></expr>, <expr><literal type="number">2.f</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_CLAMP_UP1F</name><parameter_list>(<parameter><type><name>vol</name></type></parameter>, <parameter><type><name>limit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if((vol) &gt; (limit)) (vol) = (limit); } while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_CLAMP_UP</name><parameter_list>(<parameter><type><name>vol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>jar_xm_CLAMP_UP1F((vol), 1.f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_CLAMP_DOWN1F</name><parameter_list>(<parameter><type><name>vol</name></type></parameter>, <parameter><type><name>limit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if((vol) &lt; (limit)) (vol) = (limit); } while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_CLAMP_DOWN</name><parameter_list>(<parameter><type><name>vol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>jar_xm_CLAMP_DOWN1F((vol), .0f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_CLAMP2F</name><parameter_list>(<parameter><type><name>vol</name></type></parameter>, <parameter><type><name>up</name></type></parameter>, <parameter><type><name>down</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if((vol) &gt; (up)) (vol) = (up); else if((vol) &lt; (down)) (vol) = (down); } while(0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_CLAMP</name><parameter_list>(<parameter><type><name>vol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>jar_xm_CLAMP2F((vol), 1.f, .0f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_SLIDE_TOWARDS</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>goal</name></type></parameter>, <parameter><type><name>incr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if((val) &gt; (goal)) { (val) -= (incr); jar_xm_CLAMP_DOWN1F((val), (goal)); } else if((val) &lt; (goal)) { (val) += (incr); jar_xm_CLAMP_UP1F((val), (goal)); } } while(0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_LERP</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((u) + (t) * ((v) - (u)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jar_xm_INVERSE_LERP</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>lerp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((lerp) - (u)) / ((v) - (u)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_TONE_PORTAMENTO</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;effect_type == 3 || (s)-&gt;effect_type == 5 || ((s)-&gt;volume_column &gt;&gt; 4) == 0xF)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ARPEGGIO</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;effect_type == 0 &amp;&amp; (s)-&gt;effect_param != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_VIBRATO</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;effect_type == 4 || (s)-&gt;effect_param == 6 || ((s)-&gt;volume_column &gt;&gt; 4) == 0xB)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTE_IS_VALID</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &gt; 0 &amp;&amp; (n) &lt; 97)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_waveform</name><parameter_list>(<parameter><decl><type><name>jar_xm_waveform_type_t</name></type> <name>waveform</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>next_rand</name> <init>= <expr><literal type="number">24492</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>step</name> <operator>%=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>waveform</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>jar_xm_SINE_WAVEFORM</name></expr>:</case>


<return>return <expr><operator>-</operator><call><name>sinf</name><argument_list>(<argument><expr><literal type="number">2.f</literal> <operator>*</operator> <literal type="number">3.141592f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>step</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>jar_xm_RAMP_DOWN_WAVEFORM</name></expr>:</case>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">0x20</literal> <operator>-</operator> <name>step</name><operator>)</operator> <operator>/</operator> <literal type="number">0x20</literal></expr>;</return>

<case>case <expr><name>jar_xm_SQUARE_WAVEFORM</name></expr>:</case>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>step</name> <operator>&gt;=</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.f</literal></expr></else></ternary></expr>;</return>

<case>case <expr><name>jar_xm_RANDOM_WAVEFORM</name></expr>:</case>


<expr_stmt><expr><name>next_rand</name> <operator>=</operator> <name>next_rand</name> <operator>*</operator> <literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>next_rand</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x4000</literal> <operator>-</operator> <literal type="number">1.f</literal></expr>;</return>

<case>case <expr><name>jar_xm_RAMP_UP_WAVEFORM</name></expr>:</case>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>step</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>/</operator> <literal type="number">0x20</literal></expr>;</return>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">.0f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_autovibrato</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>vibrato_depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>jar_xm_instrument_t</name><modifier>*</modifier></type> <name>instr</name> <init>= <expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sweep</name> <init>= <expr><literal type="number">1.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>autovibrato_ticks</name></name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>vibrato_sweep</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sweep</name> <operator>=</operator> <call><name>jar_xm_LERP</name><argument_list>(<argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>autovibrato_ticks</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>instr</name><operator>-&gt;</operator><name>vibrato_sweep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>autovibrato_ticks</name></name><operator>++</operator><operator>)</operator> <operator>*</operator> <name><name>instr</name><operator>-&gt;</operator><name>vibrato_rate</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>autovibrato_note_offset</name></name> <operator>=</operator> <literal type="number">.25f</literal> <operator>*</operator> <call><name>jar_xm_waveform</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>vibrato_type</name></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call>
<operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>instr</name><operator>-&gt;</operator><name>vibrato_depth</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xF</literal> <operator>*</operator> <name>sweep</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_vibrato</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>step</name> <init>= <expr><name>pos</name> <operator>*</operator> <operator>(</operator><name>param</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_note_offset</name></name> <operator>=</operator>
<literal type="number">2.f</literal>
<operator>*</operator> <call><name>jar_xm_waveform</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_waveform</name></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call>
<operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>param</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xF</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_tremolo</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>step</name> <init>= <expr><name>pos</name> <operator>*</operator> <operator>(</operator><name>param</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_volume</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal> <operator>*</operator> <call><name>jar_xm_waveform</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_waveform</name></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call>
<operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>param</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_arpeggio</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>tick</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>tick</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_in_progress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_in_progress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name> <operator>=</operator> <name>param</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_in_progress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name> <operator>=</operator> <name>param</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_tone_portamento</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>tone_portamento_target_period</name></name> <operator>==</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>period</name></name> <operator>!=</operator> <name><name>ch</name><operator>-&gt;</operator><name>tone_portamento_target_period</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_SLIDE_TOWARDS</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>period</name></name></expr></argument>,
<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>tone_portamento_target_period</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>frequency_type</name></name> <operator>==</operator> <name>jar_xm_LINEAR_FREQUENCIES</name></expr> ?</condition><then>
<expr><literal type="number">4.f</literal></expr> </then><else>: <expr><literal type="number">1.f</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>tone_portamento_param</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_pitch_slide</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>period_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>frequency_type</name></name> <operator>==</operator> <name>jar_xm_LINEAR_FREQUENCIES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_offset</name> <operator>*=</operator> <literal type="number">4.f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>period</name></name> <operator>+=</operator> <name>period_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_DOWN</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_panning_slide</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>rawval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rawval</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rawval</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rawval</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>rawval</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_UP</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>rawval</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>-=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_DOWN</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_volume_slide</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>rawval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rawval</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rawval</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rawval</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>rawval</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_UP</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>rawval</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>-=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_DOWN</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_envelope_lerp</name><parameter_list>(<parameter><decl><type><name>jar_xm_envelope_point_t</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>jar_xm_envelope_point_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>value</name></name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>b</name><operator>-&gt;</operator><name>value</name></name></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>frame</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>frame</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>frame</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <name>p</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_post_pattern_change</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>restart_position</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_linear_period</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">7680.f</literal> <operator>-</operator> <name>note</name> <operator>*</operator> <literal type="number">64.f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_linear_frequency</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>period</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">8363.f</literal> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.f</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4608.f</literal> <operator>-</operator> <name>period</name><operator>)</operator> <operator>/</operator> <literal type="number">768.f</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_amiga_period</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>intnote</name> <init>= <expr><name>note</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>a</name> <init>= <expr><name>intnote</name> <operator>%</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>octave</name> <init>= <expr><name>note</name> <operator>/</operator> <literal type="number">12.f</literal> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>p1</name> <init>= <expr><name><name>amiga_frequencies</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>p2</name> <init>= <expr><name><name>amiga_frequencies</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>octave</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>&gt;&gt;=</operator> <name>octave</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>&gt;&gt;=</operator> <name>octave</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>octave</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>-</operator><name>octave</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>-</operator><name>octave</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>jar_xm_LERP</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>note</name> <operator>-</operator> <name>intnote</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_amiga_frequency</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>period</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>period</name> <operator>==</operator> <literal type="number">.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">.0f</literal></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><literal type="number">7093789.2f</literal> <operator>/</operator> <operator>(</operator><name>period</name> <operator>*</operator> <literal type="number">2.f</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_period</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>frequency_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>jar_xm_LINEAR_FREQUENCIES</name></expr>:</case>
<return>return <expr><call><name>jar_xm_linear_period</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>jar_xm_AMIGA_FREQUENCIES</name></expr>:</case>
<return>return <expr><call><name>jar_xm_amiga_period</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">.0f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_frequency</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>note_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>octave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>frequency_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>jar_xm_LINEAR_FREQUENCIES</name></expr>:</case>
<return>return <expr><call><name>jar_xm_linear_frequency</name><argument_list>(<argument><expr><name>period</name> <operator>-</operator> <literal type="number">64.f</literal> <operator>*</operator> <name>note_offset</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>jar_xm_AMIGA_FREQUENCIES</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>note_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>jar_xm_amiga_frequency</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <name>octave</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>period</name> <operator>&gt;</operator> <name><name>amiga_frequencies</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>octave</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>period</name> <operator>&gt;</operator> <operator>(</operator><name><name>amiga_frequencies</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name>octave</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>octave</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>period</name> <operator>&lt;</operator> <name><name>amiga_frequencies</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>octave</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>period</name> <operator>&lt;</operator> <operator>(</operator><name><name>amiga_frequencies</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>octave</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>octave</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>amiga_frequencies</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>p2</name> <operator>=</operator> <name><name>amiga_frequencies</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>octave</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>&gt;&gt;=</operator> <name>octave</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>&gt;&gt;=</operator> <name>octave</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>octave</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>-</operator><name>octave</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>-</operator><name>octave</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p2</name> <operator>&lt;=</operator> <name>period</name> <operator>&amp;&amp;</operator> <name>period</name> <operator>&lt;=</operator> <name>p1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>JAR_XM_DEBUG</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p1</name> <argument_list type="generic">&lt; <argument><expr><name>period</name> <operator>||</operator> <name>p2</name></expr></argument> &gt;</argument_list></name> <name>period</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"%i &lt;= %f &lt;= %i should hold but doesn't, this is a bug"</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>note</name> <operator>=</operator> <literal type="number">12.f</literal> <operator>*</operator> <operator>(</operator><name>octave</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>a</name> <operator>+</operator> <call><name>jar_xm_INVERSE_LERP</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>jar_xm_amiga_frequency</name><argument_list>(<argument><expr><call><name>jar_xm_amiga_period</name><argument_list>(<argument><expr><name>note</name> <operator>+</operator> <name>note_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">.0f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_update_frequency</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <call><name>jar_xm_frequency</name><argument_list>(
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>period</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name></expr> </then><else>: <expr><operator>(</operator>
<name><name>ch</name><operator>-&gt;</operator><name>vibrato_note_offset</name></name> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>autovibrato_note_offset</name></name>
<operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>frequency</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_handle_note_and_instrument</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>,
<parameter><decl><type><name>jar_xm_pattern_slot_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>instrument</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>HAS_TONE_PORTAMENTO</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>jar_xm_TRIGGER_KEEP_PERIOD</name> <operator>|</operator> <name>jar_xm_TRIGGER_KEEP_SAMPLE_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>instrument</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_instruments</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jar_xm_cut_note</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>instruments</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>instrument</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>note</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>jar_xm_TRIGGER_KEEP_SAMPLE_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>NOTE_IS_VALID</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>jar_xm_instrument_t</name><modifier>*</modifier></type> <name>instr</name> <init>= <expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>HAS_TONE_PORTAMENTO</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>instr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>note</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>note</name></name> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>relative_note</name></name> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>finetune</name></name> <operator>/</operator> <literal type="number">128.f</literal> <operator>-</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tone_portamento_target_period</name></name> <operator>=</operator> <call><name>jar_xm_period</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>instr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>num_samples</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jar_xm_cut_note</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>sample_of_notes</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>note</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>num_samples</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>
<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>jar_xm_SAMPLE_RAMPING_POINTS</name></expr>;</condition> <incr><expr><operator>++</operator><name>z</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>end_of_previous_sample</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <call><name>jar_xm_next_of_sample</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name><name>instr</name><operator>-&gt;</operator><name>sample_of_notes</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>note</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>orig_note</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>note</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>note</name></name> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>relative_note</name></name>
<operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>finetune</name></name> <operator>/</operator> <literal type="number">128.f</literal> <operator>-</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>instrument</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>jar_xm_TRIGGER_KEEP_VOLUME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>jar_xm_cut_note</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>note</name></name> <operator>==</operator> <literal type="number">97</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jar_xm_key_off</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x5</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&gt;</operator> <literal type="number">0x50</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">0x1</literal></expr>:</case>
<case>case <expr><literal type="number">0x2</literal></expr>:</case>
<case>case <expr><literal type="number">0x3</literal></expr>:</case>
<case>case <expr><literal type="number">0x4</literal></expr>:</case>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>-</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x9</literal></expr>:</case> 
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xA</literal></expr>:</case> 
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name> <operator>=</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xC</literal></expr>:</case> 
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator>
<operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xF</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tone_portamento_param</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>portamento_up_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>portamento_down_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tone_portamento_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name> <operator>=</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_slide_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_slide_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_param</name></name> <operator>=</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>tremolo_param</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_param</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>tremolo_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> 
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>NOTE_IS_VALID</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>final_offset</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>final_offset</name> <operator>&gt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>=</operator> <name>final_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xA</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_slide_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xB</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>position_jump</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_dest</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xC</literal></expr>:</case> 
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr></else></ternary><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xD</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pattern_break</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xE</literal></expr>:</case> 
<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>fine_portamento_up_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_pitch_slide</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>-</operator><name><name>ch</name><operator>-&gt;</operator><name>fine_portamento_up_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>fine_portamento_down_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_pitch_slide</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fine_portamento_down_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_waveform</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_waveform_retrigger</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><call><name>NOTE_IS_VALID</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>note</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>note</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>note</name></name> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>relative_note</name></name> <operator>+</operator>
<operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">128.f</literal> <operator>-</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <call><name>jar_xm_period</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>pattern_loop_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>pattern_loop_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>pattern_loop_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>position_jump</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>pattern_loop_origin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_dest</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>pattern_loop_origin</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>pattern_loop_origin</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_waveform</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_waveform_retrigger</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xA</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>fine_volume_slide_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fine_volume_slide_param</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xB</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>fine_volume_slide_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fine_volume_slide_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xD</literal></expr>:</case> 




<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>note</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>instrument</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><name>jar_xm_TRIGGER_KEEP_VOLUME</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>note</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>orig_note</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>,
<argument><expr><name>flags</name>
<operator>|</operator> <name>jar_xm_TRIGGER_KEEP_PERIOD</name>
<operator>|</operator> <name>jar_xm_TRIGGER_KEEP_SAMPLE_POSITION</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xE</literal></expr>:</case> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extra_ticks</name></name> <operator>=</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tempo</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="number">0xF</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&lt;=</operator> <literal type="number">0x1F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tempo</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bpm</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_volume</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr></else></ternary><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>global_volume_slide_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">21</literal></expr>:</case> 
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_envelope_frame_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning_envelope_frame_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning_slide_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">27</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>multi_retrig_param</name></name> <operator>=</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>multi_retrig_param</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>multi_retrig_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">29</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremor_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">33</literal></expr>:</case> 
<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>extra_fine_portamento_up_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_pitch_slide</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>extra_fine_portamento_up_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>extra_fine_portamento_down_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_pitch_slide</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>extra_fine_portamento_down_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_trigger_note</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>jar_xm_TRIGGER_KEEP_SAMPLE_POSITION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>jar_xm_TRIGGER_KEEP_VOLUME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>volume</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>panning</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sustained</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>fadeout_volume</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>volume_envelope_volume</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>panning_envelope_panning</name></name> <operator>=</operator> <literal type="number">.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_envelope_frame_count</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>panning_envelope_frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_note_offset</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_volume</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremor_on</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>autovibrato_ticks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_waveform_retrigger</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_ticks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_waveform_retrigger</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_ticks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>jar_xm_TRIGGER_KEEP_PERIOD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <call><name>jar_xm_period</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>latest_trigger</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>generated_samples</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>latest_trigger</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>generated_samples</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>latest_trigger</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>generated_samples</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_cut_note</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_key_off</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sustained</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_cut_note</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_row</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>position_jump</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jump_dest</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>position_jump</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pattern_break</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_post_pattern_change</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pattern_break</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pattern_break</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_post_pattern_change</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>jar_xm_pattern_t</name><modifier>*</modifier></type> <name>cur</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>patterns</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>pattern_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_a_loop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>jar_xm_pattern_slot_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>slots</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_channels</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>effect_type</name></name> <operator>!=</operator> <literal type="number">0xE</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0xD</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_handle_note_and_instrument</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>note_delay_param</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_a_loop</name> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>pattern_loop_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_a_loop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_a_loop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>loop_count</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>row_loop_count</name><index>[<expr><name>MAX_NUM_ROWS</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name></expr>]</index></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name><operator>++</operator></expr>;</expr_stmt> 



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>position_jump</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pattern_break</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>num_rows</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jump_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_post_pattern_change</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_envelope_tick</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>,
<parameter><decl><type><name>jar_xm_envelope_t</name><modifier>*</modifier></type> <name>env</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>counter</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>outval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>num_points</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>num_points</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outval</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>env</name><operator>-&gt;</operator><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>outval</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>loop_enabled</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>loop_start</name> <init>= <expr><name><name>env</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>env</name><operator>-&gt;</operator><name>loop_start_point</name></name></expr>]</index></name><operator>.</operator><name>frame</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>loop_end</name> <init>= <expr><name><name>env</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>env</name><operator>-&gt;</operator><name>loop_end_point</name></name></expr>]</index></name><operator>.</operator><name>frame</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>loop_length</name> <init>= <expr><name>loop_end</name> <operator>-</operator> <name>loop_start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>counter</name> <operator>&gt;=</operator> <name>loop_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>counter</name> <operator>-=</operator> <name>loop_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>num_points</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>&lt;=</operator> <operator>*</operator><name>counter</name> <operator>&amp;&amp;</operator>
<name><name>env</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>frame</name> <operator>&gt;=</operator> <operator>*</operator><name>counter</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>outval</name> <operator>=</operator> <call><name>jar_xm_envelope_lerp</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>counter</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>sustained</name></name> <operator>||</operator> <operator>!</operator><name><name>env</name><operator>-&gt;</operator><name>sustain_enabled</name></name> <operator>||</operator>
<operator>*</operator><name>counter</name> <operator>!=</operator> <name><name>env</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>env</name><operator>-&gt;</operator><name>sustain_point</name></name></expr>]</index></name><operator>.</operator><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>counter</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_envelopes</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>volume_envelope</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>sustained</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>fadeout_volume</name></name> <operator>-=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>volume_fadeout</name></name> <operator>/</operator> <literal type="number">65536.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_DOWN</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>fadeout_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jar_xm_envelope_tick</name><argument_list>(<argument><expr><name>ch</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>volume_envelope</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>volume_envelope_frame_count</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>volume_envelope_volume</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>panning_envelope</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_envelope_tick</name><argument_list>(<argument><expr><name>ch</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>panning_envelope</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>panning_envelope_frame_count</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>panning_envelope_panning</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_tick</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_row</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jar_xm_envelopes</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_autovibrato</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>arp_in_progress</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_ARPEGGIO</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_in_progress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_in_progress</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_VIBRATO</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_in_progress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_note_offset</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x6</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x7</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xB</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_in_progress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_vibrato</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_ticks</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xD</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_panning_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xE</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_panning_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>volume_column</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xF</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_tone_portamento</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>arp_offset</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>tempo</name></name> <operator>%</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>arp_offset</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_in_progress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_in_progress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>arp_note_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_update_frequency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><call><name>jar_xm_arpeggio</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>-</operator> <name>arp_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_pitch_slide</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>-</operator><name><name>ch</name><operator>-&gt;</operator><name>portamento_up_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_pitch_slide</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>portamento_down_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_tone_portamento</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_in_progress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_vibrato</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_ticks</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_tone_portamento</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_slide_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_in_progress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_vibrato</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_param</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>vibrato_ticks</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_slide_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_tremolo</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_param</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>tremolo_ticks</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xA</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_volume_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>volume_slide_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xE</literal></expr>:</case> 
<switch>switch<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x9</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>%</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_envelopes</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xC</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_cut_note</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xD</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>note_delay_param</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_handle_note_and_instrument</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_envelopes</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>global_volume_slide_param</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>global_volume_slide_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>global_volume_slide_param</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>global_volume_slide_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_volume</name></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_UP</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>global_volume_slide_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_volume</name></name> <operator>-=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP_DOWN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">20</literal></expr>:</case> 


<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>effect_param</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_key_off</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jar_xm_panning_slide</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>panning_slide_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">27</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>multi_retrig_param</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>%</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>multi_retrig_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>*</operator> <name><name>multi_retrig_multiply</name><index>[<expr><name><name>ch</name><operator>-&gt;</operator><name>multi_retrig_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name>
<operator>+</operator> <name><name>multi_retrig_add</name><index>[<expr><name><name>ch</name><operator>-&gt;</operator><name>multi_retrig_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_trigger_note</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">29</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>tremor_on</name></name> <operator>=</operator> <operator>(</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>tremor_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>tremor_param</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>)</operator>
<operator>&gt;</operator>
<operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>tremor_param</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>float</name></type> <name>panning</name></decl>, <decl><type ref="prev"/><name>volume</name></decl>;</decl_stmt>

<expr_stmt><expr><name>panning</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>+</operator>
<operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>panning_envelope_panning</name></name> <operator>-</operator> <literal type="number">.5f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">.5f</literal> <operator>-</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>panning</name></name> <operator>-</operator> <literal type="number">.5f</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>tremor_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>volume</name> <operator>=</operator> <literal type="number">.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>volume</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>volume</name></name> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>tremolo_volume</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_CLAMP</name><argument_list>(<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>volume</name> <operator>*=</operator> <name><name>ch</name><operator>-&gt;</operator><name>fadeout_volume</name></name> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>volume_envelope_volume</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>target_panning</name></name> <operator>=</operator> <name>panning</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>target_volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>actual_panning</name></name> <operator>=</operator> <name>panning</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>actual_volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tempo</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>extra_ticks</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extra_ticks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>remaining_samples_in_tick</name></name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>rate</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>bpm</name></name> <operator>*</operator> <literal type="number">0.4f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>jar_xm_next_of_sample</name><parameter_list>(<parameter><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>&lt;</operator> <name>jar_xm_SAMPLE_RAMPING_POINTS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>jar_xm_LERP</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>end_of_previous_sample</name><index>[<expr><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>jar_xm_SAMPLE_RAMPING_POINTS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">.0f</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">.0f</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name></expr>;</expr_stmt> 



<if_stmt><if>if<condition>(<expr><name>JAR_XM_LINEAR_INTERPOLATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>-</operator> <name>a</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>jar_xm_NO_LOOP</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>JAR_XM_LINEAR_INTERPOLATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>b</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">.0f</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>+=</operator> <name><name>ch</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&gt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>jar_xm_FORWARD_LOOP</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>JAR_XM_LINEAR_INTERPOLATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>data</name><index>[
<expr><ternary><condition><expr><operator>(</operator><name>b</name> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_end</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_start</name></name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>
]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>+=</operator> <name><name>ch</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&gt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>-=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_length</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>jar_xm_PING_PONG_LOOP</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>+=</operator> <name><name>ch</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>-=</operator> <name><name>ch</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>JAR_XM_LINEAR_INTERPOLATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>&gt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_end</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>a</name></expr>]</index></name></expr> </then><else>: <expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>b</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&gt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>=</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&gt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>-=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>JAR_XM_LINEAR_INTERPOLATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>b</name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_start</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>a</name></expr>]</index></name></expr> </then><else>: <expr><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>b</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&lt;=</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>=</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>sample</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&lt;=</operator> <literal type="number">.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>=</operator> <literal type="number">.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">.0f</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>float</name></type> <name>endval</name> <init>= <expr><ternary><condition><expr><name>JAR_XM_LINEAR_INTERPOLATION</name></expr> ?</condition><then> <expr><call><name>jar_xm_LERP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>u</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>&lt;</operator> <name>jar_xm_SAMPLE_RAMPING_POINTS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>jar_xm_LERP</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>end_of_previous_sample</name><index>[<expr><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>endval</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>jar_xm_SAMPLE_RAMPING_POINTS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>endval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jar_xm_sample</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>remaining_samples_in_tick</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_tick</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>remaining_samples_in_tick</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>max_loop_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>loop_count</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_loop_count</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>module</name><operator>.</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>jar_xm_channel_context_t</name><modifier>*</modifier></type> <name>ch</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>instrument</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ch</name><operator>-&gt;</operator><name>sample_position</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fval</name> <init>= <expr><call><name>jar_xm_next_of_sample</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>muted</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>instrument</name><operator>-&gt;</operator><name>muted</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>+=</operator> <name>fval</name> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>actual_volume</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name><name>ch</name><operator>-&gt;</operator><name>actual_panning</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>+=</operator> <name>fval</name> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>actual_volume</name></name> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>actual_panning</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_RAMPING</name></expr></cpp:if>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>frame_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_SLIDE_TOWARDS</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>actual_volume</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>target_volume</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>volume_ramp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_SLIDE_TOWARDS</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>actual_panning</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>target_panning</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>panning_ramp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fgvol</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>global_volume</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>amplification</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>*=</operator> <name>fgvol</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>*=</operator> <name>fgvol</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JAR_XM_DEBUG</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><operator>*</operator><name>left</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><operator>*</operator><name>right</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"clipping frame: %f %f, this is a bad module or a libxm bug"</literal></expr></argument>, <argument><expr><operator>*</operator><name>left</name></expr></argument>, <argument><expr><operator>*</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jar_xm_generate_samples</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numsamples</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>&amp;&amp;</operator> <name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>generated_samples</name></name> <operator>+=</operator> <name>numsamples</name></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numsamples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_sample</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>output</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jar_xm_get_remaining_samples</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>currentLoopCount</name> <init>= <expr><call><name>jar_xm_get_loop_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>jar_xm_set_max_loop_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>jar_xm_get_loop_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>currentLoopCount</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>remaining_samples_in_tick</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>remaining_samples_in_tick</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_xm_tick</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>loop_count</name></name> <operator>=</operator> <name>currentLoopCount</name></expr>;</expr_stmt>
<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, __VA_ARGS__); fflush(stderr); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_ERR</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, __VA_ARGS__); fflush(stderr); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FATAL</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, __VA_ARGS__); fflush(stderr); exit(1); } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FATAL_ERR</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, __VA_ARGS__); fflush(stderr); exit(1); } while(0)</cpp:value></cpp:define>






<function><type><name>int</name></type> <name>jar_xm_create_context_from_file</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>xmf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xmf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>xmf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG_ERR</name><argument_list>(<argument><expr><literal type="string">"Could not open input file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>xmf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>xmf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>xmf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>xmf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG_ERR</name><argument_list>(<argument><expr><literal type="string">"fseek() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>JARXM_MALLOC</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>xmf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>xmf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG_ERR</name><argument_list>(<argument><expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><literal type="string">"fread() failed"</literal></expr> </then><else>: <expr><literal type="string">"JARXM_MALLOC() failed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JARXM_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>xmf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jar_xm_create_context_safe</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JARXM_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"could not create context: module is not sane\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>FATAL</name><argument_list>(<argument><expr><literal type="string">"could not create context: malloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>FATAL</name><argument_list>(<argument><expr><literal type="string">"could not create context: unknown error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>jar_xm_reset</name><parameter_list>(<parameter><decl><type><name>jar_xm_context_t</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>jar_xm_get_number_of_channels</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>jar_xm_cut_note</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_table_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_tick</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
