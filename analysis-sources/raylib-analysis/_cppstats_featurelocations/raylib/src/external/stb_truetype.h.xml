<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\stb_truetype.h">

















































































































































































































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_TRUETYPE_IMPLEMENTATION</name></cpp:macro></cpp:define> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stb_truetype.h"</cpp:file></cpp:include>

unsigned char ttf_buffer[1&lt;&lt;20];
unsigned char temp_bitmap[512*512];

stbtt_bakedchar cdata[96]; 
GLuint ftex;

void my_stbtt_initfont(void)
{
fread(ttf_buffer, 1, 1&lt;&lt;20, fopen("c:/windows/fonts/times.ttf", "rb"));
stbtt_BakeFontBitmap(ttf_buffer,0, 32.0, temp_bitmap,512,512, 32,96, cdata); 

glGenTextures(1, &amp;ftex);
glBindTexture(GL_TEXTURE_2D, ftex);
glTexImage2D(GL_TEXTURE_2D, 0, GL_ALPHA, 512,512, 0, GL_ALPHA, GL_UNSIGNED_BYTE, temp_bitmap);

glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
}

void my_stbtt_print(float x, float y, char *text)
{

glEnable(GL_TEXTURE_2D);
glBindTexture(GL_TEXTURE_2D, ftex);
glBegin(GL_QUADS);
while (*text) {
if (*text &gt;= 32 &amp;&amp; *text &lt; 128) {
stbtt_aligned_quad q;
stbtt_GetBakedQuad(cdata, 512,512, *text-32, &amp;x,&amp;y,&amp;q,1);
glTexCoord2f(q.s0,q.t1); glVertex2f(q.x0,q.y0);
glTexCoord2f(q.s1,q.t1); glVertex2f(q.x1,q.y0);
glTexCoord2f(q.s1,q.t0); glVertex2f(q.x1,q.y1);
glTexCoord2f(q.s0,q.t0); glVertex2f(q.x0,q.y1);
}
++text;
}
glEnd();
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_TRUETYPE_IMPLEMENTATION</name></cpp:macro></cpp:define> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stb_truetype.h"</cpp:file></cpp:include>

char ttf_buffer[1&lt;&lt;25];

int main(int argc, char **argv)
{
stbtt_fontinfo font;
unsigned char *bitmap;
int w,h,i,j,c = (argc &gt; 1 ? atoi(argv[1]) : 'a'), s = (argc &gt; 2 ? atoi(argv[2]) : 20);

fread(ttf_buffer, 1, 1&lt;&lt;25, fopen(argc &gt; 3 ? argv[3] : "c:/windows/fonts/arialbd.ttf", "rb"));

stbtt_InitFont(&amp;font, ttf_buffer, stbtt_GetFontOffsetForIndex(ttf_buffer,0));
bitmap = stbtt_GetCodepointBitmap(&amp;font, 0,stbtt_ScaleForPixelHeight(&amp;font, s), c, &amp;w, &amp;h, 0,0);

for (j=0; j &lt; h; ++j) {
for (i=0; i &lt; w; ++i)
putchar(" .:ioVM@"[bitmap[j*w+i]&gt;&gt;5]);
putchar('\n');
}
return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
char buffer[24&lt;&lt;20];
unsigned char screen[20][79];

int main(int arg, char **argv)
{
stbtt_fontinfo font;
int i,j,ascent,baseline,ch=0;
float scale, xpos=2; 
char *text = "Heljo World!"; 

fread(buffer, 1, 1000000, fopen("c:/windows/fonts/arialbd.ttf", "rb"));
stbtt_InitFont(&amp;font, buffer, 0);

scale = stbtt_ScaleForPixelHeight(&amp;font, 15);
stbtt_GetFontVMetrics(&amp;font, &amp;ascent,0,0);
baseline = (int) (ascent*scale);

while (text[ch]) {
int advance,lsb,x0,y0,x1,y1;
float x_shift = xpos - (float) floor(xpos);
stbtt_GetCodepointHMetrics(&amp;font, text[ch], &amp;advance, &amp;lsb);
stbtt_GetCodepointBitmapBoxSubpixel(&amp;font, text[ch], scale,scale,x_shift,0, &amp;x0,&amp;y0,&amp;x1,&amp;y1);
stbtt_MakeCodepointBitmapSubpixel(&amp;font, &amp;screen[baseline + y0][(int) xpos + x0], x1-x0,y1-y0, 79, scale,scale,x_shift,0, text[ch]);




xpos += (advance * scale);
if (text[ch+1])
xpos += scale*stbtt_GetCodepointKernAdvance(&amp;font, text[ch],text[ch+1]);
++ch;
}

for (j=0; j &lt; 20; ++j) {
for (i=0; i &lt; 78; ++i)
putchar(" .:ioVM@"[screen[j][i]&gt;&gt;5]);
putchar('\n');
}

return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_TRUETYPE_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>stbtt_uint8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>stbtt_uint8</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>stbtt_int8</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>stbtt_uint16</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>stbtt_int16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>stbtt_uint32</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>stbtt_int32</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>char</name></type> <name><name>stbtt__check_size32</name><index>[<expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbtt_int32</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name><name>stbtt__check_size16</name><index>[<expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbtt_int16</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_ifloor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_ifloor</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) floor(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_iceil</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) ceil(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_sqrt</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_sqrt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sqrt(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_pow</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pow(x,y)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_fmod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_fmod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fmod(x,y)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_cos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_cos</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cos(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_acos</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>acos(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_fabs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_fabs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fabs(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_malloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_malloc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(u),malloc(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_free</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(u),free(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_assert</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_assert</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_strlen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_strlen</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_memcpy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_memcpy</name></cpp:macro> <cpp:value>memcpy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_memset</name></cpp:macro> <cpp:value>memset</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STB_INCLUDE_STB_TRUETYPE_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STB_INCLUDE_STB_TRUETYPE_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_DEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_DEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbtt__buf</name>;</typedef>








<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x0</name></decl>,<name>y0</name>,<name>x1</name>,<name>y1</name>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>xoff</name></decl>,<name>yoff</name>,<name>xadvance</name>;</decl_stmt>
}</block></struct></type> <name>stbtt_bakedchar</name>;</typedef>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_BakeFontBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, 
<parameter><decl><type><name>float</name></type> <name>pixel_height</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>first_char</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_chars</name></decl></parameter>, 
<parameter><decl><type><name>stbtt_bakedchar</name> <modifier>*</modifier></type><name>chardata</name></decl></parameter>)</parameter_list>;</function_decl> 





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x0</name></decl>,<name>y0</name>,<name>s0</name>,<name>t0</name>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>x1</name></decl>,<name>y1</name>,<name>s1</name>,<name>t1</name>;</decl_stmt> 
}</block></struct></type> <name>stbtt_aligned_quad</name>;</typedef>

<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetBakedQuad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_bakedchar</name> <modifier>*</modifier></type><name>chardata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>char_index</name></decl></parameter>, 
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>xpos</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>ypos</name></decl></parameter>, 
<parameter><decl><type><name>stbtt_aligned_quad</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>opengl_fillrule</name></decl></parameter>)</parameter_list>;</function_decl> 










<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetScaledFontVMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>ascent</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>descent</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lineGap</name></decl></parameter>)</parameter_list>;</function_decl>










<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x0</name></decl>,<name>y0</name>,<name>x1</name>,<name>y1</name>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>xoff</name></decl>,<name>yoff</name>,<name>xadvance</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xoff2</name></decl>,<name>yoff2</name>;</decl_stmt>
}</block></struct></type> <name>stbtt_packedchar</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>stbtt_pack_context</name></name></type> <name>stbtt_pack_context</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>stbtt_fontinfo</name></name></type> <name>stbtt_fontinfo</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_RECT_PACK_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>stbrp_rect</name></name></type> <name>stbrp_rect</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackBegin</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_in_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackEnd</name> <parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_POINT_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(x))</cpp:value></cpp:define>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRange</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>font_index</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>font_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>first_unicode_char_in_range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_chars_in_range</name></decl></parameter>, <parameter><decl><type><name>stbtt_packedchar</name> <modifier>*</modifier></type><name>chardata_for_range</name></decl></parameter>)</parameter_list>;</function_decl>













<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>font_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_unicode_codepoint_in_range</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>array_of_unicode_codepoints</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_chars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_packedchar</name> <modifier>*</modifier></type><name>chardata_for_range</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>h_oversample</name></decl>, <name>v_oversample</name>;</decl_stmt> 
}</block></struct></type> <name>stbtt_pack_range</name>;</typedef>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRanges</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>font_index</name></decl></parameter>, <parameter><decl><type><name>stbtt_pack_range</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ranges</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackSetOversampling</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h_oversample</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v_oversample</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackSetSkipMissingCodepoints</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetPackedQuad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_packedchar</name> <modifier>*</modifier></type><name>chardata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>char_index</name></decl></parameter>, 
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>xpos</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>ypos</name></decl></parameter>, 
<parameter><decl><type><name>stbtt_aligned_quad</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>align_to_integer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRangesGatherRects</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_pack_range</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ranges</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackFontRangesPackRects</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rects</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRangesRenderIntoRects</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_pack_range</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ranges</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>;</function_decl>












<struct>struct <name>stbtt_pack_context</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_allocator_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pack_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride_in_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_missing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h_oversample</name></decl>, <decl><type ref="prev"/><name>v_oversample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
}</block>;</struct>







<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetNumberOfFonts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetFontOffsetForIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>








<struct>struct <name>stbtt_fontinfo</name>
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>userdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fontstart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>numGlyphs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>loca</name></decl>,<decl><type ref="prev"/><name>head</name></decl>,<decl><type ref="prev"/><name>glyf</name></decl>,<decl><type ref="prev"/><name>hhea</name></decl>,<decl><type ref="prev"/><name>hmtx</name></decl>,<decl><type ref="prev"/><name>kern</name></decl>,<decl><type ref="prev"/><name>gpos</name></decl>,<decl><type ref="prev"/><name>svg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>index_map</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>indexToLocFormat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>cff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>charstrings</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>gsubrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>subrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>fontdicts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>fdselect</name></decl>;</decl_stmt> 
}</block>;</struct>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_InitFont</name><parameter_list>(<parameter><decl><type><name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_FindGlyphIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode_codepoint</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>STBTT_DEF</name> <name>float</name></type> <name>stbtt_ScaleForPixelHeight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>STBTT_DEF</name> <name>float</name></type> <name>stbtt_ScaleForMappingEmToPixels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetFontVMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ascent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>descent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lineGap</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetFontVMetricsOS2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>typoAscent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>typoDescent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>typoLineGap</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetFontBoundingBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetCodepointHMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>advanceWidth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>leftSideBearing</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointKernAdvance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetGlyphHMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>advanceWidth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>leftSideBearing</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphKernAdvance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <name>stbtt_kerningentry</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>glyph1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>glyph2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbtt_kerningentry</name>;</typedef>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetKerningTableLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetKerningTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_kerningentry</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_length</name></decl></parameter>)</parameter_list>;</function_decl>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_vmove</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <block>{
<decl><name>STBTT_vmove</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>STBTT_vline</name></decl>,
<decl><name>STBTT_vcurve</name></decl>,
<decl><name>STBTT_vcubic</name></decl>
}</block>;</enum>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>stbtt_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbtt_vertex_type</name></cpp:macro> <cpp:value>short</cpp:value></cpp:define> 
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbtt_vertex_type</name></type> <name>x</name></decl>,<name>y</name>,<name>cx</name>,<name>cy</name>,<name>cx1</name>,<name>cy1</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>,<name>padding</name>;</decl_stmt>
}</block></struct></type> <name>stbtt_vertex</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_IsGlyphEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointShape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode_codepoint</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier><modifier>*</modifier></type><name>vertices</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphShape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier><modifier>*</modifier></type><name>vertices</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_FreeShape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointSVG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode_codepoint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>svg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphSVG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>svg</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_FreeBitmap</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetCodepointBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetCodepointBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeCodepointBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeCodepointBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeCodepointBitmapSubpixelPrefilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oversample_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oversample_y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetCodepointBitmapBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetCodepointBitmapBoxSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetGlyphBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetGlyphBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeGlyphBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeGlyphBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeGlyphBitmapSubpixelPrefilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oversample_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oversample_y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetGlyphBitmapBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetGlyphBitmapBoxSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>,<parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<name>h</name>,<name>stride</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbtt__bitmap</name>;</typedef>


<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_Rasterize</name><parameter_list>(<parameter><decl><type><name>stbtt__bitmap</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, 
<parameter><decl><type><name>float</name></type> <name>flatness_in_pixels</name></decl></parameter>, 
<parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>num_verts</name></decl></parameter>, 
<parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, 
<parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>x_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_off</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>invert</name></decl></parameter>, 
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl> 





<function_decl><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_FreeSDF</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>stbtt_GetGlyphSDF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>onedge_value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pixel_dist_scale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>stbtt_GetCodepointSDF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>onedge_value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pixel_dist_scale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>;</function_decl>







































































<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_FindMatchingFont</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_MACSTYLE_DONTCARE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_MACSTYLE_BOLD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_MACSTYLE_ITALIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_MACSTYLE_UNDERSCORE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_MACSTYLE_NONE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<function_decl><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_CompareUTF8toUTF16_bigendian</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>STBTT_DEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetFontNameString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>platformID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encodingID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>languageID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameID</name></decl></parameter>)</parameter_list>;</function_decl>







<enum>enum <block>{ 
<decl><name>STBTT_PLATFORM_ID_UNICODE</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STBTT_PLATFORM_ID_MAC</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>STBTT_PLATFORM_ID_ISO</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>STBTT_PLATFORM_ID_MICROSOFT</name> <init>=<expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{ 
<decl><name>STBTT_UNICODE_EID_UNICODE_1_0</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STBTT_UNICODE_EID_UNICODE_1_1</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>STBTT_UNICODE_EID_ISO_10646</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>STBTT_UNICODE_EID_UNICODE_2_0_BMP</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>STBTT_UNICODE_EID_UNICODE_2_0_FULL</name><init>=<expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{ 
<decl><name>STBTT_MS_EID_SYMBOL</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STBTT_MS_EID_UNICODE_BMP</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>STBTT_MS_EID_SHIFTJIS</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>STBTT_MS_EID_UNICODE_FULL</name> <init>=<expr><literal type="number">10</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{ 
<decl><name>STBTT_MAC_EID_ROMAN</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><name>STBTT_MAC_EID_ARABIC</name> <init>=<expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>STBTT_MAC_EID_JAPANESE</name> <init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><name>STBTT_MAC_EID_HEBREW</name> <init>=<expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>STBTT_MAC_EID_CHINESE_TRAD</name> <init>=<expr><literal type="number">2</literal></expr></init></decl>, <decl><name>STBTT_MAC_EID_GREEK</name> <init>=<expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>STBTT_MAC_EID_KOREAN</name> <init>=<expr><literal type="number">3</literal></expr></init></decl>, <decl><name>STBTT_MAC_EID_RUSSIAN</name> <init>=<expr><literal type="number">7</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{ 

<decl><name>STBTT_MS_LANG_ENGLISH</name> <init>=<expr><literal type="number">0x0409</literal></expr></init></decl>, <decl><name>STBTT_MS_LANG_ITALIAN</name> <init>=<expr><literal type="number">0x0410</literal></expr></init></decl>,
<decl><name>STBTT_MS_LANG_CHINESE</name> <init>=<expr><literal type="number">0x0804</literal></expr></init></decl>, <decl><name>STBTT_MS_LANG_JAPANESE</name> <init>=<expr><literal type="number">0x0411</literal></expr></init></decl>,
<decl><name>STBTT_MS_LANG_DUTCH</name> <init>=<expr><literal type="number">0x0413</literal></expr></init></decl>, <decl><name>STBTT_MS_LANG_KOREAN</name> <init>=<expr><literal type="number">0x0412</literal></expr></init></decl>,
<decl><name>STBTT_MS_LANG_FRENCH</name> <init>=<expr><literal type="number">0x040c</literal></expr></init></decl>, <decl><name>STBTT_MS_LANG_RUSSIAN</name> <init>=<expr><literal type="number">0x0419</literal></expr></init></decl>,
<decl><name>STBTT_MS_LANG_GERMAN</name> <init>=<expr><literal type="number">0x0407</literal></expr></init></decl>, <decl><name>STBTT_MS_LANG_SPANISH</name> <init>=<expr><literal type="number">0x0409</literal></expr></init></decl>,
<decl><name>STBTT_MS_LANG_HEBREW</name> <init>=<expr><literal type="number">0x040d</literal></expr></init></decl>, <decl><name>STBTT_MS_LANG_SWEDISH</name> <init>=<expr><literal type="number">0x041D</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{ 
<decl><name>STBTT_MAC_LANG_ENGLISH</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> , <decl><name>STBTT_MAC_LANG_JAPANESE</name> <init>=<expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>STBTT_MAC_LANG_ARABIC</name> <init>=<expr><literal type="number">12</literal></expr></init></decl>, <decl><name>STBTT_MAC_LANG_KOREAN</name> <init>=<expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>STBTT_MAC_LANG_DUTCH</name> <init>=<expr><literal type="number">4</literal></expr></init></decl> , <decl><name>STBTT_MAC_LANG_RUSSIAN</name> <init>=<expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>STBTT_MAC_LANG_FRENCH</name> <init>=<expr><literal type="number">1</literal></expr></init></decl> , <decl><name>STBTT_MAC_LANG_SPANISH</name> <init>=<expr><literal type="number">6</literal></expr></init></decl> ,
<decl><name>STBTT_MAC_LANG_GERMAN</name> <init>=<expr><literal type="number">2</literal></expr></init></decl> , <decl><name>STBTT_MAC_LANG_SWEDISH</name> <init>=<expr><literal type="number">5</literal></expr></init></decl> ,
<decl><name>STBTT_MAC_LANG_HEBREW</name> <init>=<expr><literal type="number">10</literal></expr></init></decl>, <decl><name>STBTT_MAC_LANG_CHINESE_SIMPLIFIED</name> <init>=<expr><literal type="number">33</literal></expr></init></decl>,
<decl><name>STBTT_MAC_LANG_ITALIAN</name> <init>=<expr><literal type="number">3</literal></expr></init></decl> , <decl><name>STBTT_MAC_LANG_CHINESE_TRAD</name> <init>=<expr><literal type="number">19</literal></expr></init></decl>
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_TRUETYPE_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_MAX_OVERSAMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_MAX_OVERSAMPLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STBTT_MAX_OVERSAMPLE</name> <operator>&gt;</operator> <literal type="number">255</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"STBTT_MAX_OVERSAMPLE cannot be &gt; 255"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int</name></type> <name><name>stbtt__test_oversample_pow2</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>STBTT_MAX_OVERSAMPLE</name> <operator>&amp;</operator> <operator>(</operator><name>STBTT_MAX_OVERSAMPLE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STBTT_RASTERIZER_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_RASTERIZER_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT__NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(v)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT__NOTUSED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)sizeof(v)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>stbtt_uint8</name></type> <name>stbtt__buf_get8</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt_uint8</name></type> <name>stbtt__buf_peek8</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__buf_seek</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>o</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>o</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>o</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>o</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name>o</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__buf_skip</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt_uint32</name></type> <name>stbtt__buf_get</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__new_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_uint8</name><operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbtt__buf_get16</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbtt__buf_get((b), 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbtt__buf_get32</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbtt__buf_get((b), 4)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__buf_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>r</name> <init>= <expr><call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>s</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>o</name></expr></argument> &gt;</argument_list></name> <name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>s</name></expr></argument> &gt;</argument_list></name> <name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__cff_get_index</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>offsize</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>stbtt__buf_get16</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offsize</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>offsize</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>offsize</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offsize</name> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>stbtt__buf_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offsize</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>stbtt__buf_range</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt_uint32</name></type> <name>stbtt__cff_int</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b0</name> <init>= <expr><call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>b0</name> <operator>&lt;=</operator> <literal type="number">246</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b0</name> <operator>-</operator> <literal type="number">139</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b0</name> <operator>&gt;=</operator> <literal type="number">247</literal> <operator>&amp;&amp;</operator> <name>b0</name> <operator>&lt;=</operator> <literal type="number">250</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>b0</name> <operator>-</operator> <literal type="number">247</literal><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">108</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b0</name> <operator>&gt;=</operator> <literal type="number">251</literal> <operator>&amp;&amp;</operator> <name>b0</name> <operator>&lt;=</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><operator>(</operator><name>b0</name> <operator>-</operator> <literal type="number">251</literal><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>-</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">108</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b0</name> <operator>==</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbtt__buf_get16</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b0</name> <operator>==</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbtt__buf_get32</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__cff_skip_operand</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>b0</name> <init>= <expr><call><name>stbtt__buf_peek8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>b0</name> <operator>&gt;=</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF</literal> <operator>||</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__cff_int</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__dict_get</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>op</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>stbtt__buf_peek8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__cff_skip_operand</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbtt__buf_range</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>stbtt__buf_range</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__dict_get_ints</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outcount</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>operands</name> <init>= <expr><call><name>stbtt__dict_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>outcount</name> <operator>&amp;&amp;</operator> <name><name>operands</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>operands</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbtt__cff_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>operands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__cff_index_count</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbtt__buf_get16</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__cff_index_get</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>offsize</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>stbtt__buf_get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offsize</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>offsize</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>offsize</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>offsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>stbtt__buf_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>offsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>stbtt__buf_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>offsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbtt__buf_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><operator>(</operator><name>count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>offsize</name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttBYTE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(* (stbtt_uint8 *) (p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttCHAR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(* (stbtt_int8 *) (p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttFixed</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ttLONG(p)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>stbtt_uint16</name></type> <name>ttUSHORT</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>stbtt_int16</name></type> <name>ttSHORT</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>stbtt_uint32</name></type> <name>ttULONG</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>stbtt_int32</name></type> <name>ttLONG</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbtt_tag4</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c0</name></type></parameter>,<parameter><type><name>c1</name></type></parameter>,<parameter><type><name>c2</name></type></parameter>,<parameter><type><name>c3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)[0] == (c0) &amp;&amp; (p)[1] == (c1) &amp;&amp; (p)[2] == (c2) &amp;&amp; (p)[3] == (c3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbtt_tag</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbtt_tag4(p,str[0],str[1],str[2],str[3])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__isfont</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>font</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag4</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"typ1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"OTTO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag4</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>stbtt_uint32</name></type> <name>stbtt__find_table</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint32</name></type> <name>fontstart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>num_tables</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>fontstart</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>tabledir</name> <init>= <expr><name>fontstart</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tables</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>loc</name> <init>= <expr><name>tabledir</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt_GetFontOffsetForIndex_internal</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>font_collection</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbtt__isfont</name><argument_list>(<argument><expr><name>font_collection</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag</name><argument_list>(<argument><expr><name>font_collection</name></expr></argument>, <argument><expr><literal type="string">"ttcf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>font_collection</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x00010000</literal> <operator>||</operator> <call><name>ttULONG</name><argument_list>(<argument><expr><name>font_collection</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x00020000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>n</name> <init>= <expr><call><name>ttLONG</name><argument_list>(<argument><expr><name>font_collection</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>font_collection</name><operator>+</operator><literal type="number">12</literal><operator>+</operator><name>index</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt_GetNumberOfFonts_internal</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>font_collection</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbtt__isfont</name><argument_list>(<argument><expr><name>font_collection</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stbtt_tag</name><argument_list>(<argument><expr><name>font_collection</name></expr></argument>, <argument><expr><literal type="string">"ttcf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>font_collection</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x00010000</literal> <operator>||</operator> <call><name>ttULONG</name><argument_list>(<argument><expr><name>font_collection</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x00020000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ttLONG</name><argument_list>(<argument><expr><name>font_collection</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__get_subrs</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name></type> <name>cff</name></decl></parameter>, <parameter><decl><type><name>stbtt__buf</name></type> <name>fontdict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>subrsoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>private_loc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>pdict</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbtt__dict_get_ints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontdict</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>private_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>private_loc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>private_loc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pdict</name> <operator>=</operator> <call><name>stbtt__buf_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cff</name></expr></argument>, <argument><expr><name><name>private_loc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>private_loc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__dict_get_ints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdict</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>subrsoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subrsoff</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cff</name></expr></argument>, <argument><expr><name><name>private_loc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>subrsoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbtt__cff_get_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__get_svg</name><parameter_list>(<parameter><decl><type><name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>svg</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fontstart</name></name></expr></argument>, <argument><expr><literal type="string">"SVG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>offset</name> <init>= <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>svg</name></name> <operator>=</operator> <name>t</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>svg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>svg</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt_InitFont_internal</name><parameter_list>(<parameter><decl><type><name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>cmap</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>numTables</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fontstart</name></name> <operator>=</operator> <name>fontstart</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cff</name></name> <operator>=</operator> <call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmap</name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>loca</name></name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"loca"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"head"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>glyf</name></name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"glyf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"hhea"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>hmtx</name></name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"hmtx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>kern</name></name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"kern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>gpos</name></name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"GPOS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmap</name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>hmtx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>glyf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>loca</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>topdict</name></decl>, <decl><type ref="prev"/><name>topdictidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>cstype</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>charstrings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fdarrayoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fdselectoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>cff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cff</name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"CFF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cff</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fontdicts</name></name> <operator>=</operator> <call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fdselect</name></name> <operator>=</operator> <call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cff</name></name> <operator>=</operator> <call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>cff</name></expr></argument>, <argument><expr><literal type="number">512</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>cff</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>stbtt__cff_get_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>topdictidx</name> <operator>=</operator> <call><name>stbtt__cff_get_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>topdict</name> <operator>=</operator> <call><name>stbtt__cff_index_get</name><argument_list>(<argument><expr><name>topdictidx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__cff_get_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>gsubrs</name></name> <operator>=</operator> <call><name>stbtt__cff_get_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbtt__dict_get_ints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topdict</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>charstrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__dict_get_ints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topdict</name></expr></argument>, <argument><expr><literal type="number">0x100</literal> <operator>|</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cstype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__dict_get_ints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topdict</name></expr></argument>, <argument><expr><literal type="number">0x100</literal> <operator>|</operator> <literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdarrayoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__dict_get_ints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topdict</name></expr></argument>, <argument><expr><literal type="number">0x100</literal> <operator>|</operator> <literal type="number">37</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdselectoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subrs</name></name> <operator>=</operator> <call><name>stbtt__get_subrs</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>topdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cstype</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>charstrings</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fdarrayoff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fdselectoff</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>fdarrayoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fontdicts</name></name> <operator>=</operator> <call><name>stbtt__cff_get_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fdselect</name></name> <operator>=</operator> <call><name>stbtt__buf_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>fdselectoff</name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>size</name></name><operator>-</operator><name>fdselectoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>charstrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>charstrings</name></name> <operator>=</operator> <call><name>stbtt__cff_get_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fontstart</name></expr></argument>, <argument><expr><literal type="string">"maxp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>numGlyphs</name></name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>t</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>numGlyphs</name></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>svg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>numTables</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>cmap</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>index_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numTables</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>encoding_record</name> <init>= <expr><name>cmap</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>encoding_record</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STBTT_PLATFORM_ID_MICROSOFT</name></expr>:</case>
<switch>switch <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>encoding_record</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STBTT_MS_EID_UNICODE_BMP</name></expr>:</case>
<case>case <expr><name>STBTT_MS_EID_UNICODE_FULL</name></expr>:</case>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>index_map</name></name> <operator>=</operator> <name>cmap</name> <operator>+</operator> <call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>encoding_record</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>STBTT_PLATFORM_ID_UNICODE</name></expr>:</case>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>index_map</name></name> <operator>=</operator> <name>cmap</name> <operator>+</operator> <call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>encoding_record</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>index_map</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>indexToLocFormat</name></name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_FindGlyphIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode_codepoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>index_map</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>index_map</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>format</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>bytes</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>unicode_codepoint</name> <operator>&lt;</operator> <name>bytes</name><operator>-</operator><literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ttBYTE</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>unicode_codepoint</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>first</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>count</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stbtt_uint32</name><operator>)</operator> <name>unicode_codepoint</name> <operator>&gt;=</operator> <name>first</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>stbtt_uint32</name><operator>)</operator> <name>unicode_codepoint</name> <operator>&lt;</operator> <name>first</name><operator>+</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>unicode_codepoint</name> <operator>-</operator> <name>first</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>segcount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>searchRange</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>entrySelector</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>rangeShift</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>endCount</name> <init>= <expr><name>index_map</name> <operator>+</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>search</name> <init>= <expr><name>endCount</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unicode_codepoint</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>unicode_codepoint</name> <operator>&gt;=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>search</name> <operator>+</operator> <name>rangeShift</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search</name> <operator>+=</operator> <name>rangeShift</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>search</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>entrySelector</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>searchRange</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>search</name> <operator>+</operator> <name>searchRange</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>unicode_codepoint</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search</name> <operator>+=</operator> <name>searchRange</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>entrySelector</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>search</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>item</name> <init>= <expr><operator>(</operator><name>stbtt_uint16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>search</name> <operator>-</operator> <name>endCount</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>unicode_codepoint</name> <operator>&lt;=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>endCount</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">14</literal> <operator>+</operator> <name>segcount</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>unicode_codepoint</name> <operator>&lt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">14</literal> <operator>+</operator> <name>segcount</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>stbtt_uint16</name><operator>)</operator> <operator>(</operator><name>unicode_codepoint</name> <operator>+</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">14</literal> <operator>+</operator> <name>segcount</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>item</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <operator>(</operator><name>unicode_codepoint</name><operator>-</operator><name>start</name><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name>index_map</name> <operator>+</operator> <literal type="number">14</literal> <operator>+</operator> <name>segcount</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">12</literal> <operator>||</operator> <name>format</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>ngroups</name> <init>= <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>low</name></decl>,<decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>
<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><name>stbtt_int32</name><operator>)</operator><name>ngroups</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>low</name> <operator>&lt;</operator> <name>high</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>mid</name> <init>= <expr><name>low</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>high</name><operator>-</operator><name>low</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>start_char</name> <init>= <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">16</literal><operator>+</operator><name>mid</name><operator>*</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>end_char</name> <init>= <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">16</literal><operator>+</operator><name>mid</name><operator>*</operator><literal type="number">12</literal><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stbtt_uint32</name><operator>)</operator> <name>unicode_codepoint</name> <operator>&lt;</operator> <name>start_char</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>stbtt_uint32</name><operator>)</operator> <name>unicode_codepoint</name> <operator>&gt;</operator> <name>end_char</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>start_glyph</name> <init>= <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>index_map</name><operator>+</operator><literal type="number">16</literal><operator>+</operator><name>mid</name><operator>*</operator><literal type="number">12</literal><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>start_glyph</name> <operator>+</operator> <name>unicode_codepoint</name><operator>-</operator><name>start_char</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<return>return <expr><name>start_glyph</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointShape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode_codepoint</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier><modifier>*</modifier></type><name>vertices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetGlyphShape</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unicode_codepoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vertices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt_setvertex</name><parameter_list>(<parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__GetGlyfOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g1</name></decl>,<decl><type ref="prev"/><name>g2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>cff</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>glyph_index</name> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>numGlyphs</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>indexToLocFormat</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>indexToLocFormat</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g1</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>glyf</name></name> <operator>+</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>loca</name></name> <operator>+</operator> <name>glyph_index</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g2</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>glyf</name></name> <operator>+</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>loca</name></name> <operator>+</operator> <name>glyph_index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>g1</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>glyf</name></name> <operator>+</operator> <call><name>ttULONG</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>loca</name></name> <operator>+</operator> <name>glyph_index</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g2</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>glyf</name></name> <operator>+</operator> <call><name>ttULONG</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>loca</name></name> <operator>+</operator> <name>glyph_index</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><name>g1</name><operator>==</operator><name>g2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>g1</name></expr></else></ternary></expr>;</return> 
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__GetGlyphInfoT2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>cff</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__GetGlyphInfoT2</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>stbtt__GetGlyfOffset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x0</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y0</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x1</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y1</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetGlyphBox</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_IsGlyphEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int16</name></type> <name>numberOfContours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>cff</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbtt__GetGlyphInfoT2</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>stbtt__GetGlyfOffset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>numberOfContours</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>numberOfContours</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__close_shape</name><parameter_list>(<parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>was_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_off</name></decl></parameter>,
<parameter><decl><type><name>stbtt_int32</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>scx</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>scy</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start_off</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>was_off</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vcurve</name></expr></argument>, <argument><expr><operator>(</operator><name>cx</name><operator>+</operator><name>scx</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>cy</name><operator>+</operator><name>scy</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cx</name></expr></argument>,<argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vcurve</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><name>scx</name></expr></argument>,<argument><expr><name>scy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>was_off</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vcurve</name></expr></argument>,<argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><name>cx</name></expr></argument>,<argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vline</name></expr></argument>,<argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>num_vertices</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__GetGlyphShapeTT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvertices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int16</name></type> <name>numberOfContours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>endPtsOfContours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_vertices</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>stbtt__GetGlyfOffset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pvertices</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>numberOfContours</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>numberOfContours</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name></type> <name>flags</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>flagcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>ins</name></decl>, <decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>next_move</name></decl>, <decl><type ref="prev"/><name>was_off</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name></decl>, <decl><type ref="prev"/><name>start_off</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>cx</name></decl>,<decl><type ref="prev"/><name>cy</name></decl>,<decl><type ref="prev"/><name>sx</name></decl>,<decl><type ref="prev"/><name>sy</name></decl>, <decl><type ref="prev"/><name>scx</name></decl>,<decl><type ref="prev"/><name>scy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>points</name></decl>;</decl_stmt>
<expr_stmt><expr><name>endPtsOfContours</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <name>numberOfContours</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <name>numberOfContours</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ins</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>endPtsOfContours</name> <operator>+</operator> <name>numberOfContours</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>numberOfContours</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>vertices</name> <operator>=</operator> <operator>(</operator><name>stbtt_vertex</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>vertices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vertices</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_move</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flagcount</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>off</name> <operator>=</operator> <name>m</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt> 



<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flagcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>*</operator><name>points</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flagcount</name> <operator>=</operator> <operator>*</operator><name>points</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>flagcount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int16</name></type> <name>dx</name> <init>= <expr><operator>*</operator><name>points</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><name>dx</name></expr> </then><else>: <expr><operator>-</operator><name>dx</name></expr></else></ternary></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <operator>(</operator><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int16</name></type> <name>dy</name> <init>= <expr><operator>*</operator><name>points</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">32</literal><operator>)</operator></expr> ?</condition><then> <expr><name>dy</name></expr> </then><else>: <expr><operator>-</operator><name>dy</name></expr></else></ternary></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <operator>(</operator><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>num_vertices</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>sy</name> <operator>=</operator> <name>cx</name> <operator>=</operator> <name>cy</name> <operator>=</operator> <name>scx</name> <operator>=</operator> <name>scy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_move</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_vertices</name> <operator>=</operator> <call><name>stbtt__close_shape</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>num_vertices</name></expr></argument>, <argument><expr><name>was_off</name></expr></argument>, <argument><expr><name>start_off</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><name>scx</name></expr></argument>,<argument><expr><name>scy</name></expr></argument>,<argument><expr><name>cx</name></expr></argument>,<argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>start_off</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_off</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>scx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>stbtt_int32</name><operator>)</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <operator>(</operator><name>stbtt_int32</name><operator>)</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name>stbtt_int32</name><operator>)</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <operator>(</operator><name>stbtt_int32</name><operator>)</operator> <name><name>vertices</name><index>[<expr><name>off</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vmove</name></expr></argument>,<argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>was_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>next_move</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>endPtsOfContours</name><operator>+</operator><name>j</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>was_off</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vcurve</name></expr></argument>, <argument><expr><operator>(</operator><name>cx</name><operator>+</operator><name>x</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>cy</name><operator>+</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>was_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>was_off</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vcurve</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>num_vertices</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>STBTT_vline</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>was_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num_vertices</name> <operator>=</operator> <call><name>stbtt__close_shape</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>num_vertices</name></expr></argument>, <argument><expr><name>was_off</name></expr></argument>, <argument><expr><name>start_off</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><name>scx</name></expr></argument>,<argument><expr><name>scy</name></expr></argument>,<argument><expr><name>cx</name></expr></argument>,<argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numberOfContours</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>more</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name>data</name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num_vertices</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vertices</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>more</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>gidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comp_num_verts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>comp_verts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>mtx</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gidx</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>ttCHAR</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>ttCHAR</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>comp</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name><name>mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>mtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name><name>mtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>mtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name><name>mtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>comp_num_verts</name> <operator>=</operator> <call><name>stbtt_GetGlyphShape</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>gidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comp_num_verts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>comp_num_verts</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_vertex</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>&amp;</operator><name><name>comp_verts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_vertex_type</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name><operator>=</operator><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_vertex_type</name><operator>)</operator><operator>(</operator><name>m</name> <operator>*</operator> <operator>(</operator><name><name>mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>x</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>y</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_vertex_type</name><operator>)</operator><operator>(</operator><name>n</name> <operator>*</operator> <operator>(</operator><name><name>mtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>x</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>y</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name><operator>=</operator><name><name>v</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><name><name>v</name><operator>-&gt;</operator><name>cy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_vertex_type</name><operator>)</operator><operator>(</operator><name>m</name> <operator>*</operator> <operator>(</operator><name><name>mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>x</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>y</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_vertex_type</name><operator>)</operator><operator>(</operator><name>n</name> <operator>*</operator> <operator>(</operator><name><name>mtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>x</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>y</name> <operator>+</operator> <name><name>mtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>stbtt_vertex</name><operator>*</operator><operator>)</operator><call><name>STBTT_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_vertices</name><operator>+</operator><name>comp_num_verts</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>stbtt_vertex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vertices</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>comp_verts</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>comp_verts</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_vertices</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>STBTT_memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>num_vertices</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>stbtt_vertex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_memcpy</name><argument_list>(<argument><expr><name>tmp</name><operator>+</operator><name>num_vertices</name></expr></argument>, <argument><expr><name>comp_verts</name></expr></argument>, <argument><expr><name>comp_num_verts</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>stbtt_vertex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vertices</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vertices</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>comp_verts</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_vertices</name> <operator>+=</operator> <name>comp_num_verts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>more</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pvertices</name> <operator>=</operator> <name>vertices</name></expr>;</expr_stmt>
<return>return <expr><name>num_vertices</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>bounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>first_x</name></decl>, <name>first_y</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>min_x</name></decl>, <name>max_x</name>, <name>min_y</name>, <name>max_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>pvertices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_vertices</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbtt__csctx</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT__CSCTX_INIT</name><parameter_list>(<parameter><type><name>bounds</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{bounds,0, 0,0, 0,0, 0,0,0,0, NULL, 0}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__track_vertex</name><parameter_list>(<parameter><decl><type><name>stbtt__csctx</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>max_x</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>max_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>max_y</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>max_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>min_x</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>min_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>min_y</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>min_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__csctx_v</name><parameter_list>(<parameter><decl><type><name>stbtt__csctx</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cx1</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>cy1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bounds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__track_vertex</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STBTT_vcubic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__track_vertex</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__track_vertex</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cx1</name></expr></argument>, <argument><expr><name>cy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt_setvertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pvertices</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>num_vertices</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pvertices</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>num_vertices</name></name></expr>]</index></name><operator>.</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>cx1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pvertices</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>num_vertices</name></name></expr>]</index></name><operator>.</operator><name>cy1</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>cy1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>num_vertices</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__csctx_close_shape</name><parameter_list>(<parameter><decl><type><name>stbtt__csctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>first_x</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>x</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>first_y</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__csctx_v</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>STBTT_vline</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>first_x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>first_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__csctx_rmove_to</name><parameter_list>(<parameter><decl><type><name>stbtt__csctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt__csctx_close_shape</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_x</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_y</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_v</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>STBTT_vmove</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__csctx_rline_to</name><parameter_list>(<parameter><decl><type><name>stbtt__csctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_v</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>STBTT_vline</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__csctx_rccurve_to</name><parameter_list>(<parameter><decl><type><name>stbtt__csctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dx1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dx2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dx3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>cx1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>dx1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cy1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>dy1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cx2</name> <init>= <expr><name>cx1</name> <operator>+</operator> <name>dx2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cy2</name> <init>= <expr><name>cy1</name> <operator>+</operator> <name>dy2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>cx2</name> <operator>+</operator> <name>dx3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>cy2</name> <operator>+</operator> <name>dy3</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_v</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>STBTT_vcubic</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cx1</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cy1</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cx2</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__get_subr</name><parameter_list>(<parameter><decl><type><name>stbtt__buf</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>stbtt__cff_index_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bias</name> <init>= <expr><literal type="number">107</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">33900</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">1240</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <literal type="number">1131</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>bias</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>stbtt__cff_index_get</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt__buf</name></type> <name>stbtt__cid_get_glyph_subrs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name>fdselect</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>fdselect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nranges</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>fmt</name></decl>, <decl><type ref="prev"/><name>fdselector</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbtt__buf_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fdselector</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nranges</name> <operator>=</operator> <call><name>stbtt__buf_get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>stbtt__buf_get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nranges</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>stbtt__buf_get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>glyph_index</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>glyph_index</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fdselector</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fdselector</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbtt__new_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>stbtt__get_subrs</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>cff</name></name></expr></argument>, <argument><expr><call><name>stbtt__cff_index_get</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fontdicts</name></name></expr></argument>, <argument><expr><name>fdselector</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__run_charstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>stbtt__csctx</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in_header</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maskbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>subr_stack_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_subrs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>clear_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>s</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__buf</name></type> <name><name>subr_stack</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>subrs</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>subrs</name></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT__CSERR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>


<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>stbtt__cff_index_get</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>charstrings</name></name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>b</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_stack</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>b0</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 
<case>case <expr><literal type="number">0x14</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>in_header</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maskbits</name> <operator>+=</operator> <operator>(</operator><name>sp</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>maskbits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 
<case>case <expr><literal type="number">0x03</literal></expr>:</case> 
<case>case <expr><literal type="number">0x12</literal></expr>:</case> 
<case>case <expr><literal type="number">0x17</literal></expr>:</case> 
<expr_stmt><expr><name>maskbits</name> <operator>+=</operator> <operator>(</operator><name>sp</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 
<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"rmoveto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rmove_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>sp</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>sp</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x04</literal></expr>:</case> 
<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"vmoveto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rmove_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>sp</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x16</literal></expr>:</case> 
<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"hmoveto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rmove_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>sp</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"rlineto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>sp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__csctx_rline_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>




<case>case <expr><literal type="number">0x07</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"vlineto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>vlineto</name>;</goto>
<case>case <expr><literal type="number">0x06</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"hlineto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rline_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<label><name>vlineto</name>:</label>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rline_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">0x1F</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"hvcurveto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>hvcurveto</name>;</goto>
<case>case <expr><literal type="number">0x1E</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"vhcurveto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>sp</name> <operator>-</operator> <name>i</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<label><name>hvcurveto</name>:</label>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>sp</name> <operator>-</operator> <name>i</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"rcurveline stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name>sp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"rcurveline stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name>sp</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"rcurveline stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rline_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x19</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"rlinecurve stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>sp</name> <operator>-</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__csctx_rline_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"rlinecurve stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x1A</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1B</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"(vv|hh)curveto stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>sp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <literal type="number">0x1B</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">0x0A</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_subrs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>fdselect</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subrs</name> <operator>=</operator> <call><name>stbtt__cid_get_glyph_subrs</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>has_subrs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">0x1D</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"call(g|)subr stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><index>[<expr><operator>--</operator><name>sp</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subr_stack_height</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"recursion limit"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>subr_stack</name><index>[<expr><name>subr_stack_height</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>stbtt__get_subr</name><argument_list>(<argument><expr><ternary><condition><expr><name>b0</name> <operator>==</operator> <literal type="number">0x0A</literal></expr> ?</condition><then> <expr><name>subrs</name></expr> </then><else>: <expr><name><name>info</name><operator>-&gt;</operator><name>gsubrs</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"subr not found"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_stack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x0B</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>subr_stack_height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"return outside subr"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>subr_stack</name><index>[<expr><operator>--</operator><name>subr_stack_height</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_stack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x0E</literal></expr>:</case> 
<expr_stmt><expr><call><name>stbtt__csctx_close_shape</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">0x0C</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>float</name></type> <name>dx1</name></decl>, <decl><type ref="prev"/><name>dx2</name></decl>, <decl><type ref="prev"/><name>dx3</name></decl>, <decl><type ref="prev"/><name>dx4</name></decl>, <decl><type ref="prev"/><name>dx5</name></decl>, <decl><type ref="prev"/><name>dx6</name></decl>, <decl><type ref="prev"/><name>dy1</name></decl>, <decl><type ref="prev"/><name>dy2</name></decl>, <decl><type ref="prev"/><name>dy3</name></decl>, <decl><type ref="prev"/><name>dy4</name></decl>, <decl><type ref="prev"/><name>dy5</name></decl>, <decl><type ref="prev"/><name>dy6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><call><name>stbtt__buf_get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>b1</name></expr>)</condition> <block>{<block_content>


<case>case <expr><literal type="number">0x22</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"hflex stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dx1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx4</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx5</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx6</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dx2</name></expr></argument>, <argument><expr><name>dy2</name></expr></argument>, <argument><expr><name>dx3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dx5</name></expr></argument>, <argument><expr><operator>-</operator><name>dy2</name></expr></argument>, <argument><expr><name>dx6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x23</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"flex stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dx1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx4</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy4</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx5</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy5</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx6</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy6</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx1</name></expr></argument>, <argument><expr><name>dy1</name></expr></argument>, <argument><expr><name>dx2</name></expr></argument>, <argument><expr><name>dy2</name></expr></argument>, <argument><expr><name>dx3</name></expr></argument>, <argument><expr><name>dy3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx4</name></expr></argument>, <argument><expr><name>dy4</name></expr></argument>, <argument><expr><name>dx5</name></expr></argument>, <argument><expr><name>dy5</name></expr></argument>, <argument><expr><name>dx6</name></expr></argument>, <argument><expr><name>dy6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x24</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"hflex1 stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dx1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx4</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx5</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy5</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx6</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx1</name></expr></argument>, <argument><expr><name>dy1</name></expr></argument>, <argument><expr><name>dx2</name></expr></argument>, <argument><expr><name>dy2</name></expr></argument>, <argument><expr><name>dx3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dx5</name></expr></argument>, <argument><expr><name>dy5</name></expr></argument>, <argument><expr><name>dx6</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>dy1</name><operator>+</operator><name>dy2</name><operator>+</operator><name>dy5</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x25</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"flex1 stack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dx1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx4</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy4</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx5</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy5</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx6</name> <operator>=</operator> <name>dy6</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>dx1</name><operator>+</operator><name>dx2</name><operator>+</operator><name>dx3</name><operator>+</operator><name>dx4</name><operator>+</operator><name>dx5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>dy1</name><operator>+</operator><name>dy2</name><operator>+</operator><name>dy3</name><operator>+</operator><name>dy4</name><operator>+</operator><name>dy5</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STBTT_fabs</name><argument_list>(<argument><expr><name>dx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>STBTT_fabs</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dy6</name> <operator>=</operator> <operator>-</operator><name>dy</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dx6</name> <operator>=</operator> <operator>-</operator><name>dx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx1</name></expr></argument>, <argument><expr><name>dy1</name></expr></argument>, <argument><expr><name>dx2</name></expr></argument>, <argument><expr><name>dy2</name></expr></argument>, <argument><expr><name>dx3</name></expr></argument>, <argument><expr><name>dy3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__csctx_rccurve_to</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dx4</name></expr></argument>, <argument><expr><name>dy4</name></expr></argument>, <argument><expr><name>dx5</name></expr></argument>, <argument><expr><name>dy5</name></expr></argument>, <argument><expr><name>dx6</name></expr></argument>, <argument><expr><name>dy6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block> <break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>!=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>b0</name> <operator>!=</operator> <literal type="number">28</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b0</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">32</literal> <operator>||</operator> <name>b0</name></expr></argument> &gt;</argument_list></name> <literal type="number">254</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"reserved operator"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>stbtt_int32</name><operator>)</operator><call><name>stbtt__buf_get32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__buf_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>stbtt_int16</name><operator>)</operator><call><name>stbtt__cff_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&gt;=</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"push stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>sp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_stack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>clear_stack</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>STBTT__CSERR</name><argument_list>(<argument><expr><literal type="string">"no endchar"</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STBTT__CSERR</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__GetGlyphShapeT2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvertices</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>stbtt__csctx</name></type> <name>count_ctx</name> <init>= <expr><call><name>STBTT__CSCTX_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__csctx</name></type> <name>output_ctx</name> <init>= <expr><call><name>STBTT__CSCTX_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__run_charstring</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pvertices</name> <operator>=</operator> <operator>(</operator><name>stbtt_vertex</name><operator>*</operator><operator>)</operator><call><name>STBTT_malloc</name><argument_list>(<argument><expr><name><name>count_ctx</name><operator>.</operator><name>num_vertices</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>stbtt_vertex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_ctx</name><operator>.</operator><name>pvertices</name></name> <operator>=</operator> <operator>*</operator><name>pvertices</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__run_charstring</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>output_ctx</name><operator>.</operator><name>num_vertices</name></name> <operator>==</operator> <name><name>count_ctx</name><operator>.</operator><name>num_vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>output_ctx</name><operator>.</operator><name>num_vertices</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pvertices</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__GetGlyphInfoT2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__csctx</name></type> <name>c</name> <init>= <expr><call><name>STBTT__CSCTX_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stbtt__run_charstring</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x0</name> <operator>=</operator> <ternary><condition><expr><name>r</name></expr> ?</condition><then> <expr><name><name>c</name><operator>.</operator><name>min_x</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y0</name> <operator>=</operator> <ternary><condition><expr><name>r</name></expr> ?</condition><then> <expr><name><name>c</name><operator>.</operator><name>min_y</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x1</name> <operator>=</operator> <ternary><condition><expr><name>r</name></expr> ?</condition><then> <expr><name><name>c</name><operator>.</operator><name>max_x</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y1</name> <operator>=</operator> <ternary><condition><expr><name>r</name></expr> ?</condition><then> <expr><name><name>c</name><operator>.</operator><name>max_y</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>r</name></expr> ?</condition><then> <expr><name><name>c</name><operator>.</operator><name>num_vertices</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphShape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvertices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>cff</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbtt__GetGlyphShapeTT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><name>pvertices</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>stbtt__GetGlyphShapeT2</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph_index</name></expr></argument>, <argument><expr><name>pvertices</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetGlyphHMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>advanceWidth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>leftSideBearing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>numOfLongHorMetrics</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>+</operator> <literal type="number">34</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>glyph_index</name> <operator>&lt;</operator> <name>numOfLongHorMetrics</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>advanceWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>advanceWidth</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>hmtx</name></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>glyph_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>leftSideBearing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>leftSideBearing</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>hmtx</name></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>glyph_index</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>advanceWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>advanceWidth</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>hmtx</name></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>numOfLongHorMetrics</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>leftSideBearing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>leftSideBearing</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>hmtx</name></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>numOfLongHorMetrics</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>glyph_index</name> <operator>-</operator> <name>numOfLongHorMetrics</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetKerningTableLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>kern</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>kern</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetKerningTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_kerningentry</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>kern</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>kern</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>table_length</name> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>table_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>glyph1</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">18</literal><operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>glyph2</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">20</literal><operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>advance</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">22</literal><operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__GetGlyphKernInfoAdvance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>kern</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>needle</name></decl>, <decl><type ref="prev"/><name>straw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>kern</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>needle</name> <operator>=</operator> <name>glyph1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>glyph2</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>straw</name> <operator>=</operator> <call><name>ttULONG</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">18</literal><operator>+</operator><operator>(</operator><name>m</name><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&lt;</operator> <name>straw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>needle</name> <operator>&gt;</operator> <name>straw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>ttSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">22</literal><operator>+</operator><operator>(</operator><name>m</name><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt_int32</name></type> <name>stbtt__GetCoverageIndex</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>coverageTable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>coverageFormat</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>coverageTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>coverageFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>glyphCount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>coverageTable</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name><init>=<expr><name>glyphCount</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>straw</name></decl>, <decl><type ref="prev"/><name>needle</name><init>=<expr><name>glyph</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>glyphArray</name> <init>= <expr><name>coverageTable</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>glyphID</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>glyphID</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>glyphArray</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>straw</name> <operator>=</operator> <name>glyphID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&lt;</operator> <name>straw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>needle</name> <operator>&gt;</operator> <name>straw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>rangeCount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>coverageTable</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>rangeArray</name> <init>= <expr><name>coverageTable</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name><init>=<expr><name>rangeCount</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strawStart</name></decl>, <decl><type ref="prev"/><name>strawEnd</name></decl>, <decl><type ref="prev"/><name>needle</name><init>=<expr><name>glyph</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>rangeRecord</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rangeRecord</name> <operator>=</operator> <name>rangeArray</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>strawStart</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>rangeRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strawEnd</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>rangeRecord</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&lt;</operator> <name>strawStart</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>needle</name> <operator>&gt;</operator> <name>strawEnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>startCoverageIndex</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>rangeRecord</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>startCoverageIndex</name> <operator>+</operator> <name>glyph</name> <operator>-</operator> <name>strawStart</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> <break>break;</break>

<default>default:</default> <block>{<block_content>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbtt_int32</name></type> <name>stbtt__GetGlyphClass</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>classDefTable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>classDefFormat</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classDefTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>classDefFormat</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>startGlyphID</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classDefTable</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>glyphCount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classDefTable</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>classDef1ValueArray</name> <init>= <expr><name>classDefTable</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>glyph</name> <operator>&gt;=</operator> <name>startGlyphID</name> <operator>&amp;&amp;</operator> <name>glyph</name> <operator>&lt;</operator> <name>startGlyphID</name> <operator>+</operator> <name>glyphCount</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>stbtt_int32</name><operator>)</operator><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classDef1ValueArray</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>glyph</name> <operator>-</operator> <name>startGlyphID</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>classDefTable</name> <operator>=</operator> <name>classDef1ValueArray</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>glyphCount</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>classRangeCount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classDefTable</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>classRangeRecords</name> <init>= <expr><name>classDefTable</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name><init>=<expr><name>classRangeCount</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strawStart</name></decl>, <decl><type ref="prev"/><name>strawEnd</name></decl>, <decl><type ref="prev"/><name>needle</name><init>=<expr><name>glyph</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>classRangeRecord</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>classRangeRecord</name> <operator>=</operator> <name>classRangeRecords</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>strawStart</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classRangeRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strawEnd</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classRangeRecord</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&lt;</operator> <name>strawStart</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>needle</name> <operator>&gt;</operator> <name>strawEnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>stbtt_int32</name><operator>)</operator><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>classRangeRecord</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>classDefTable</name> <operator>=</operator> <name>classRangeRecords</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>classRangeCount</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>

<default>default:</default> <block>{<block_content>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_GPOS_TODO_assert</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <name>stbtt_int32</name></type> <name>stbtt__GetGlyphGPOSInfoAdvance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>lookupListOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>lookupList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>lookupCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>gpos</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>gpos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>lookupListOffset</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lookupList</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>lookupListOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lookupCount</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>lookupList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>lookupCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>lookupOffset</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>lookupList</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>lookupTable</name> <init>= <expr><name>lookupList</name> <operator>+</operator> <name>lookupOffset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>lookupType</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>lookupTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>subTableCount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>lookupTable</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>subTableOffsets</name> <init>= <expr><name>lookupTable</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>lookupType</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>sti</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>sti</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>sti</name><operator>&lt;</operator><name>subTableCount</name></expr>;</condition> <incr><expr><name>sti</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>subtableOffset</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>subTableOffsets</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>sti</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>lookupTable</name> <operator>+</operator> <name>subtableOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>posFormat</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>coverageOffset</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>coverageIndex</name> <init>= <expr><call><name>stbtt__GetCoverageIndex</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <name>coverageOffset</name></expr></argument>, <argument><expr><name>glyph1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>coverageIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>posFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>straw</name></decl>, <decl><type ref="prev"/><name>needle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>valueFormat1</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>valueFormat2</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>valueRecordPairSizeInBytes</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>pairSetCount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>pairPosOffset</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>coverageIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>pairValueTable</name> <init>= <expr><name>table</name> <operator>+</operator> <name>pairPosOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>pairValueCount</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>pairValueTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>pairValueArray</name> <init>= <expr><name>pairValueTable</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBTT_GPOS_TODO_assert</name><argument_list>(<argument><expr><name>valueFormat1</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>valueFormat1</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_GPOS_TODO_assert</name><argument_list>(<argument><expr><name>valueFormat2</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>valueFormat2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>coverageIndex</name> <operator>&lt;</operator> <name>pairSetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT__NOTUSED</name><argument_list>(<argument><expr><name>pairSetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>needle</name><operator>=</operator><name>glyph2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name><operator>=</operator><name>pairValueCount</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>secondGlyph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>pairValue</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pairValue</name> <operator>=</operator> <name>pairValueArray</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>valueRecordPairSizeInBytes</name><operator>)</operator> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>secondGlyph</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>pairValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>straw</name> <operator>=</operator> <name>secondGlyph</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&lt;</operator> <name>straw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>needle</name> <operator>&gt;</operator> <name>straw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int16</name></type> <name>xAdvance</name> <init>= <expr><call><name>ttSHORT</name><argument_list>(<argument><expr><name>pairValue</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>xAdvance</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>valueFormat1</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>valueFormat2</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>classDef1Offset</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>classDef2Offset</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>glyph1class</name> <init>= <expr><call><name>stbtt__GetGlyphClass</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <name>classDef1Offset</name></expr></argument>, <argument><expr><name>glyph1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>glyph2class</name> <init>= <expr><call><name>stbtt__GetGlyphClass</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <name>classDef2Offset</name></expr></argument>, <argument><expr><name>glyph2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>class1Count</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>class2Count</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>glyph1class</name> <operator>&lt;</operator> <name>class1Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>glyph2class</name> <operator>&lt;</operator> <name>class2Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>STBTT_GPOS_TODO_assert</name><argument_list>(<argument><expr><name>valueFormat1</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>valueFormat1</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_GPOS_TODO_assert</name><argument_list>(<argument><expr><name>valueFormat2</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>valueFormat2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>glyph1class</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>glyph1class</name> <operator>&lt;</operator> <name>class1Count</name> <operator>&amp;&amp;</operator> <name>glyph2class</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>glyph2class</name> <operator>&lt;</operator> <name>class2Count</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>class1Records</name> <init>= <expr><name>table</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>class2Records</name> <init>= <expr><name>class1Records</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>glyph1class</name> <operator>*</operator> <name>class2Count</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int16</name></type> <name>xAdvance</name> <init>= <expr><call><name>ttSHORT</name><argument_list>(<argument><expr><name>class2Records</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>glyph2class</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>xAdvance</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>

<default>default:</default> <block>{<block_content>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block><empty_stmt>;</empty_stmt>

<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphKernAdvance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xAdvance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>gpos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xAdvance</name> <operator>+=</operator> <call><name>stbtt__GetGlyphGPOSInfoAdvance</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>kern</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xAdvance</name> <operator>+=</operator> <call><name>stbtt__GetGlyphKernInfoAdvance</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>xAdvance</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointKernAdvance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>kern</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>gpos</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>stbtt_GetGlyphKernAdvance</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>ch1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetCodepointHMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>advanceWidth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>leftSideBearing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_GetGlyphHMetrics</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>advanceWidth</name></expr></argument>, <argument><expr><name>leftSideBearing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetFontVMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ascent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>descent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lineGap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ascent</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ascent</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>descent</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>descent</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lineGap</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>lineGap</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetFontVMetricsOS2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>typoAscent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>typoDescent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>typoLineGap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tab</name> <init>= <expr><call><name>stbtt__find_table</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fontstart</name></name></expr></argument>, <argument><expr><literal type="string">"OS/2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>typoAscent</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>typoAscent</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>tab</name> <operator>+</operator> <literal type="number">68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>typoDescent</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>typoDescent</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>tab</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>typoLineGap</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>typoLineGap</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>tab</name> <operator>+</operator> <literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetFontBoundingBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x0</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y0</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x1</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y1</name> <operator>=</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>float</name></type> <name>stbtt_ScaleForPixelHeight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fheight</name> <init>= <expr><call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ttSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>hhea</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <name>height</name> <operator>/</operator> <name>fheight</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>float</name></type> <name>stbtt_ScaleForMappingEmToPixels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pixels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>unitsPerEm</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>pixels</name> <operator>/</operator> <name>unitsPerEm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_FreeShape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>stbtt_uint8</name> <modifier>*</modifier></type><name>stbtt_FindSVGDoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>svg_doc_list</name> <init>= <expr><name>data</name> <operator>+</operator> <call><name>stbtt__get_svg</name><argument_list>(<argument><expr><operator>(</operator><name>stbtt_fontinfo</name> <operator>*</operator><operator>)</operator> <name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numEntries</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>svg_doc_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>svg_docs</name> <init>= <expr><name>svg_doc_list</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>numEntries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>svg_doc</name> <init>= <expr><name>svg_docs</name> <operator>+</operator> <operator>(</operator><literal type="number">12</literal> <operator>*</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gl</name> <operator>&gt;=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>svg_doc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>gl</name> <operator>&lt;=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>svg_doc</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>svg_doc</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetGlyphSVG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>svg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>svg_doc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>svg</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>svg_doc</name> <operator>=</operator> <call><name>stbtt_FindSVGDoc</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>svg_doc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>svg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>svg</name></name> <operator>+</operator> <call><name>ttULONG</name><argument_list>(<argument><expr><name>svg_doc</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ttULONG</name><argument_list>(<argument><expr><name>svg_doc</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetCodepointSVG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode_codepoint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>svg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetGlyphSVG</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unicode_codepoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>svg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetGlyphBitmapBoxSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>,<parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y0</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbtt_GetGlyphBox</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ix0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ix0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iy0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>iy0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ix1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ix1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iy1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>iy1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ix0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ix0</name> <operator>=</operator> <call><name>STBTT_ifloor</name><argument_list>( <argument><expr><name>x0</name> <operator>*</operator> <name>scale_x</name> <operator>+</operator> <name>shift_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iy0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>iy0</name> <operator>=</operator> <call><name>STBTT_ifloor</name><argument_list>(<argument><expr><operator>-</operator><name>y1</name> <operator>*</operator> <name>scale_y</name> <operator>+</operator> <name>shift_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ix1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ix1</name> <operator>=</operator> <call><name>STBTT_iceil</name> <argument_list>( <argument><expr><name>x1</name> <operator>*</operator> <name>scale_x</name> <operator>+</operator> <name>shift_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iy1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>iy1</name> <operator>=</operator> <call><name>STBTT_iceil</name> <argument_list>(<argument><expr><operator>-</operator><name>y0</name> <operator>*</operator> <name>scale_y</name> <operator>+</operator> <name>shift_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetGlyphBitmapBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBoxSubpixel</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>ix0</name></expr></argument>, <argument><expr><name>iy0</name></expr></argument>, <argument><expr><name>ix1</name></expr></argument>, <argument><expr><name>iy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetCodepointBitmapBoxSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBoxSubpixel</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>,<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>,<argument><expr><name>shift_x</name></expr></argument>,<argument><expr><name>shift_y</name></expr></argument>, <argument><expr><name>ix0</name></expr></argument>,<argument><expr><name>iy0</name></expr></argument>,<argument><expr><name>ix1</name></expr></argument>,<argument><expr><name>iy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetCodepointBitmapBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ix1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iy1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_GetCodepointBitmapBoxSubpixel</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>ix0</name></expr></argument>,<argument><expr><name>iy0</name></expr></argument>,<argument><expr><name>ix1</name></expr></argument>,<argument><expr><name>iy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<typedef>typedef <type><struct>struct <name>stbtt__hheap_chunk</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>stbtt__hheap_chunk</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbtt__hheap_chunk</name>;</typedef>

<typedef>typedef <type><struct>struct <name>stbtt__hheap</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>stbtt__hheap_chunk</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>first_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_remaining_in_head_chunk</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbtt__hheap</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbtt__hheap_alloc</name><parameter_list>(<parameter><decl><type><name>stbtt__hheap</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>first_free</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hh</name><operator>-&gt;</operator><name>first_free</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>first_free</name></name> <operator>=</operator> <operator>*</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>num_remaining_in_head_chunk</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">2000</literal></expr> </then><else>: <expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">800</literal></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__hheap_chunk</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>stbtt__hheap_chunk</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbtt__hheap_chunk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name> <operator>*</operator> <name>count</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hh</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>num_remaining_in_head_chunk</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>hh</name><operator>-&gt;</operator><name>num_remaining_in_head_chunk</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>hh</name><operator>-&gt;</operator><name>head</name></name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stbtt__hheap_chunk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name> <operator>*</operator> <name><name>hh</name><operator>-&gt;</operator><name>num_remaining_in_head_chunk</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__hheap_free</name><parameter_list>(<parameter><decl><type><name>stbtt__hheap</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>p</name> <operator>=</operator> <name><name>hh</name><operator>-&gt;</operator><name>first_free</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>first_free</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__hheap_cleanup</name><parameter_list>(<parameter><decl><type><name>stbtt__hheap</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__hheap_chunk</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>hh</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__hheap_chunk</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>stbtt__edge</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x0</name></decl>,<name>y0</name>, <name>x1</name>,<name>y1</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invert</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbtt__edge</name>;</typedef>


<typedef>typedef <type><struct>struct <name>stbtt__active_edge</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>stbtt__active_edge</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name><operator>==</operator><literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<name>dx</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direction</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name><operator>==</operator><literal type="number">2</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>float</name></type> <name>fx</name></decl>,<name>fdx</name>,<name>fdy</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ey</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unrecognized value of STBTT_RASTERIZER_VERSION"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>stbtt__active_edge</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_FIXSHIFT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_FIX</name></cpp:macro> <cpp:value>(1 &lt;&lt; STBTT_FIXSHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_FIXMASK</name></cpp:macro> <cpp:value>(STBTT_FIX-1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>stbtt__active_edge</name> <modifier>*</modifier></type><name>stbtt__new_active</name><parameter_list>(<parameter><decl><type><name>stbtt__hheap</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_point</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>stbtt__active_edge</name> <operator>*</operator><operator>)</operator> <call><name>stbtt__hheap_alloc</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dxdy</name> <init>= <expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>x0</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>y0</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>z</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>z</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>z</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dxdy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <operator>-</operator><call><name>STBTT_ifloor</name><argument_list>(<argument><expr><name>STBTT_FIX</name> <operator>*</operator> <operator>-</operator><name>dxdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <call><name>STBTT_ifloor</name><argument_list>(<argument><expr><name>STBTT_FIX</name> <operator>*</operator> <name>dxdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>STBTT_ifloor</name><argument_list>(<argument><expr><name>STBTT_FIX</name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>x0</name></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>dx</name></name> <operator>*</operator> <operator>(</operator><name>start_point</name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>y0</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>x</name></name> <operator>-=</operator> <name>off_x</name> <operator>*</operator> <name>STBTT_FIX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ey</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>invert</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>stbtt__active_edge</name> <modifier>*</modifier></type><name>stbtt__new_active</name><parameter_list>(<parameter><decl><type><name>stbtt__hheap</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_point</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>stbtt__active_edge</name> <operator>*</operator><operator>)</operator> <call><name>stbtt__hheap_alloc</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dxdy</name> <init>= <expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>x0</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>y0</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>z</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>z</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>z</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>fdx</name></name> <operator>=</operator> <name>dxdy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>fdy</name></name> <operator>=</operator> <ternary><condition><expr><name>dxdy</name> <operator>!=</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><name>dxdy</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>fx</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>x0</name></name> <operator>+</operator> <name>dxdy</name> <operator>*</operator> <operator>(</operator><name>start_point</name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>y0</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>fx</name></name> <operator>-=</operator> <name>off_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>invert</name></name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>sy</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>y0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ey</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>y1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unrecognized value of STBTT_RASTERIZER_VERSION"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__fill_active_edges</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scanline</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_weight</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x0</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>w</name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>direction</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>w</name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>direction</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>x0</name> <operator>&gt;&gt;</operator> <name>STBTT_FIXSHIFT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>x1</name> <operator>&gt;&gt;</operator> <name>STBTT_FIXSHIFT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>stbtt_uint8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>x1</name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>*</operator> <name>max_weight</name> <operator>&gt;&gt;</operator> <name>STBTT_FIXSHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>stbtt_uint8</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>STBTT_FIX</name> <operator>-</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <name>STBTT_FIXMASK</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>max_weight</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>STBTT_FIXSHIFT</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>stbtt_uint8</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>STBTT_FIXMASK</name><operator>)</operator> <operator>*</operator> <name>max_weight</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>STBTT_FIXSHIFT</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>stbtt_uint8</name><operator>)</operator> <name>max_weight</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__rasterize_sorted_edges</name><parameter_list>(<parameter><decl><type><name>stbtt__bitmap</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vsubsample</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_y</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__hheap</name></type> <name>hh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>active</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_weight</name> <init>= <expr><operator>(</operator><literal type="number">255</literal> <operator>/</operator> <name>vsubsample</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scanline_data</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scanline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scanline</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scanline</name> <operator>=</operator> <name>scanline_data</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>off_y</name> <operator>*</operator> <name>vsubsample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y0</name> <operator>=</operator> <operator>(</operator><name>off_y</name> <operator>+</operator> <name><name>result</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>vsubsample</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>vsubsample</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>scan_y</name> <init>= <expr><name>y</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier><modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name>active</name></expr></init></decl>;</decl_stmt>



<while>while <condition>(<expr><operator>*</operator><name>step</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type> <name>z</name> <init>= <expr><operator>*</operator><name>step</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>ey</name></name> <operator>&lt;=</operator> <name>scan_y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>direction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__hheap_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>z</name><operator>-&gt;</operator><name>dx</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>step</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>&amp;</operator><name>active</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>step</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>step</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>step</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>step</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>x</name></name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>*</operator><name>step</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>step</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<while>while <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>y0</name></name> <operator>&lt;=</operator> <name>scan_y</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>y1</name></name> <operator>&gt;</operator> <name>scan_y</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>stbtt__new_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>off_x</name></expr></argument>, <argument><expr><name>scan_y</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>active</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>active</name><operator>-&gt;</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
<expr_stmt><expr><name>active</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>active</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>e</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__fill_active_edges</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>active</name></expr></argument>, <argument><expr><name>max_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STBTT_memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>pixels</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>result</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>scanline</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>stbtt__hheap_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scanline</name> <operator>!=</operator> <name>scanline_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:elif>



<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__handle_clipped_edge</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scanline</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>==</operator> <name>y1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>y0</name> <operator>&lt;</operator> <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sy</name></name> <operator>&lt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>ey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>&gt;</operator> <name><name>e</name><operator>-&gt;</operator><name>ey</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y1</name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>sy</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>sy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x0</name> <operator>+=</operator> <operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>sy</name></name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y1</name> <operator>&gt;</operator> <name><name>e</name><operator>-&gt;</operator><name>ey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>+=</operator> <operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ey</name></name> <operator>-</operator> <name>y1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>ey</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>==</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x1</name> <operator>&lt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x0</name> <operator>==</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x1</name> <operator>&gt;=</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x0</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x1</name> <operator>&lt;=</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x0</name> <operator>&gt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x1</name> <operator>&gt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x1</name> <operator>&gt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>direction</name></name> <operator>*</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x0</name> <operator>&gt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&gt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x0</name> <operator>&gt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x0</name> <operator>&lt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&gt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>direction</name></name> <operator>*</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>x0</name><operator>-</operator><name>x</name><operator>)</operator><operator>+</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__fill_active_edges_new</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scanline</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>scanline_fill</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>y_bottom</name> <init>= <expr><name>y_top</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ey</name></name> <operator>&gt;=</operator> <name>y_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>fdx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>fx</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>x0</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y_top</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y_bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline_fill</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>x0</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y_top</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y_bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline_fill</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y_top</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y_bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>fx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>fdx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xb</name> <init>= <expr><name>x0</name> <operator>+</operator> <name>dx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x_top</name></decl>, <decl><type ref="prev"/><name>x_bottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sy0</name></decl>,<decl><type ref="prev"/><name>sy1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>fdy</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sy</name></name> <operator>&lt;=</operator> <name>y_bottom</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>ey</name></name> <operator>&gt;=</operator> <name>y_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>sy</name></name> <operator>&gt;</operator> <name>y_top</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x_top</name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>dx</name> <operator>*</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>sy</name></name> <operator>-</operator> <name>y_top</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sy0</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x_top</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sy0</name> <operator>=</operator> <name>y_top</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>ey</name></name> <operator>&lt;</operator> <name>y_bottom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x_bottom</name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>dx</name> <operator>*</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>ey</name></name> <operator>-</operator> <name>y_top</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sy1</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>ey</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x_bottom</name> <operator>=</operator> <name>xb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sy1</name> <operator>=</operator> <name>y_bottom</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_top</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x_bottom</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x_top</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>x_bottom</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>x_top</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>x_bottom</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>x_top</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>sy1</name> <operator>-</operator> <name>sy0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>direction</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>x_top</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x_bottom</name><operator>-</operator><name>x</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scanline_fill</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>direction</name></name> <operator>*</operator> <name>height</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y_crossing</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>area</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x_top</name> <operator>&gt;</operator> <name>x_bottom</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sy0</name> <operator>=</operator> <name>y_bottom</name> <operator>-</operator> <operator>(</operator><name>sy0</name> <operator>-</operator> <name>y_top</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sy1</name> <operator>=</operator> <name>y_bottom</name> <operator>-</operator> <operator>(</operator><name>sy1</name> <operator>-</operator> <name>y_top</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>sy0</name></expr><operator>,</operator> <expr><name>sy0</name> <operator>=</operator> <name>sy1</name></expr><operator>,</operator> <expr><name>sy1</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>x_bottom</name></expr><operator>,</operator> <expr><name>x_bottom</name> <operator>=</operator> <name>x_top</name></expr><operator>,</operator> <expr><name>x_top</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <operator>-</operator><name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <operator>-</operator><name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>x0</name></expr><operator>,</operator> <expr><name>x0</name> <operator>=</operator> <name>xb</name></expr><operator>,</operator> <expr><name>xb</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>x_top</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>x_bottom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_crossing</name> <operator>=</operator> <operator>(</operator><name>x1</name><operator>+</operator><literal type="number">1</literal> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>*</operator> <name>dy</name> <operator>+</operator> <name>y_top</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>direction</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>area</name> <operator>=</operator> <name>sign</name> <operator>*</operator> <operator>(</operator><name>y_crossing</name><operator>-</operator><name>sy0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>x1</name></expr>]</index></name> <operator>+=</operator> <name>area</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>x_top</name> <operator>-</operator> <name>x1</name><operator>)</operator><operator>+</operator><operator>(</operator><name>x1</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>x1</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>sign</name> <operator>*</operator> <name>dy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>x1</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>x2</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name>area</name> <operator>+</operator> <name>step</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>area</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>y_crossing</name> <operator>+=</operator> <name>dy</name> <operator>*</operator> <operator>(</operator><name>x2</name> <operator>-</operator> <operator>(</operator><name>x1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><call><name>STBTT_fabs</name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1.01f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanline</name><index>[<expr><name>x2</name></expr>]</index></name> <operator>+=</operator> <name>area</name> <operator>+</operator> <name>sign</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>x2</name><operator>-</operator><name>x2</name><operator>)</operator><operator>+</operator><operator>(</operator><name>x_bottom</name><operator>-</operator><name>x2</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>sy1</name><operator>-</operator><name>y_crossing</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanline_fill</name><index>[<expr><name>x2</name></expr>]</index></name> <operator>+=</operator> <name>sign</name> <operator>*</operator> <operator>(</operator><name>sy1</name><operator>-</operator><name>sy0</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>














<decl_stmt><decl><type><name>float</name></type> <name>y0</name> <init>= <expr><name>y_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x3</name> <init>= <expr><name>xb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y3</name> <init>= <expr><name>y_bottom</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>float</name></type> <name>y1</name> <init>= <expr><operator>(</operator><name>x</name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>/</operator> <name>dx</name> <operator>+</operator> <name>y_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y2</name> <init>= <expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>/</operator> <name>dx</name> <operator>+</operator> <name>y_top</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x0</name> <argument_list type="generic">&lt; <argument><expr><name>x1</name> <operator>&amp;&amp;</operator> <name>x3</name></expr></argument> &gt;</argument_list></name> <name>x2</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>x3</name> <argument_list type="generic">&lt; <argument><expr><name>x1</name> <operator>&amp;&amp;</operator> <name>x0</name></expr></argument> &gt;</argument_list></name> <name>x2</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>x0</name> <argument_list type="generic">&lt; <argument><expr><name>x1</name> <operator>&amp;&amp;</operator> <name>x3</name></expr></argument> &gt;</argument_list></name> <name>x1</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>x3</name> <argument_list type="generic">&lt; <argument><expr><name>x1</name> <operator>&amp;&amp;</operator> <name>x0</name></expr></argument> &gt;</argument_list></name> <name>x1</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>x0</name> <argument_list type="generic">&lt; <argument><expr><name>x2</name> <operator>&amp;&amp;</operator> <name>x3</name></expr></argument> &gt;</argument_list></name> <name>x2</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>x3</name> <argument_list type="generic">&lt; <argument><expr><name>x2</name> <operator>&amp;&amp;</operator> <name>x0</name></expr></argument> &gt;</argument_list></name> <name>x2</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__handle_clipped_edge</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__rasterize_sorted_edges</name><parameter_list>(<parameter><decl><type><name>stbtt__bitmap</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vsubsample</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_y</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__hheap</name></type> <name>hh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>active</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>scanline_data</name><index>[<expr><literal type="number">129</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scanline</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scanline2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBTT__NOTUSED</name><argument_list>(<argument><expr><name>vsubsample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scanline</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scanline</name> <operator>=</operator> <name>scanline_data</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>scanline2</name> <operator>=</operator> <name>scanline</name> <operator>+</operator> <name><name>result</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>off_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>off_y</name> <operator>+</operator> <name><name>result</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>scan_y_top</name> <init>= <expr><name>y</name> <operator>+</operator> <literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scan_y_bottom</name> <init>= <expr><name>y</name> <operator>+</operator> <literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier><modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name>active</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>scanline</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>scanline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>scanline2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>w</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>scanline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><operator>*</operator><name>step</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type> <name>z</name> <init>= <expr><operator>*</operator><name>step</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>ey</name></name> <operator>&lt;=</operator> <name>scan_y_top</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>direction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__hheap_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>step</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>y0</name></name> <operator>&lt;=</operator> <name>scan_y_bottom</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>y0</name></name> <operator>!=</operator> <name><name>e</name><operator>-&gt;</operator><name>y1</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>stbtt__new_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>off_x</name></expr></argument>, <argument><expr><name>scan_y_top</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>off_y</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>ey</name></name> <operator>&lt;</operator> <name>scan_y_top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ey</name></name> <operator>=</operator> <name>scan_y_top</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>ey</name></name> <operator>&gt;=</operator> <name>scan_y_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
<expr_stmt><expr><name>active</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>e</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__fill_active_edges_new</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>, <argument><expr><name>scanline2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>active</name></expr></argument>, <argument><expr><name>scan_y_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>scanline2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>scanline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_fabs</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>j</name><operator>*</operator><name><name>result</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>

<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>&amp;</operator><name>active</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>step</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__active_edge</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>*</operator><name>step</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>fx</name></name> <operator>+=</operator> <name><name>z</name><operator>-&gt;</operator><name>fdx</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>step</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></while>

<expr_stmt><expr><operator>++</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>stbtt__hheap_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scanline</name> <operator>!=</operator> <name>scanline_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>scanline</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unrecognized value of STBTT_RASTERIZER_VERSION"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT__COMPARE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;y0 &lt; (b)-&gt;y0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__sort_edges_ins_sort</name><parameter_list>(<parameter><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__edge</name></type> <name>t</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name>t</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>STBTT__COMPARE</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__sort_edges_quicksort</name><parameter_list>(<parameter><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__edge</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c01</name></decl>,<decl><type ref="prev"/><name>c12</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>


<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c01</name> <operator>=</operator> <call><name>STBTT__COMPARE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c12</name> <operator>=</operator> <call><name>STBTT__COMPARE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c01</name> <operator>!=</operator> <name>c12</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>STBTT__COMPARE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <name>c12</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>


<for>for <control>(<init>;</init><condition>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STBTT__COMPARE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init><condition>;</condition><incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STBTT__COMPARE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__sort_edges_quicksort</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name><operator>+</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__sort_edges_quicksort</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__sort_edges</name><parameter_list>(<parameter><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt__sort_edges_quicksort</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__sort_edges_ins_sort</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>,<name>y</name>;</decl_stmt>
}</block></struct></type> <name>stbtt__point</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__rasterize</name><parameter_list>(<parameter><decl><type><name>stbtt__bitmap</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>stbtt__point</name> <modifier>*</modifier></type><name>pts</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>wcount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>windings</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invert</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>y_scale_inv</name> <init>= <expr><ternary><condition><expr><name>invert</name></expr> ?</condition><then> <expr><operator>-</operator><name>scale_y</name></expr> </then><else>: <expr><name>scale_y</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__edge</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>vsubsample</name> <init>= <expr><ternary><condition><expr><name><name>result</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>STBTT_RASTERIZER_VERSION</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>vsubsample</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unrecognized value of STBTT_RASTERIZER_VERSION"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>windings</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>wcount</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>stbtt__edge</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>windings</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt__point</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pts</name> <operator>+</operator> <name>m</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <name><name>wcount</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>wcount</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>wcount</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>=</operator><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name>k</name></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>invert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>invert</name></expr> ?</condition><then> <expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr> </then><else>: <expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x0</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator> <name>scale_x</name> <operator>+</operator> <name>shift_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y0</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>*</operator> <name>y_scale_inv</name> <operator>+</operator> <name>shift_y</name><operator>)</operator> <operator>*</operator> <name>vsubsample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator> <name>scale_x</name> <operator>+</operator> <name>shift_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>*</operator> <name>y_scale_inv</name> <operator>+</operator> <name>shift_y</name><operator>)</operator> <operator>*</operator> <name>vsubsample</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<expr_stmt><expr><call><name>stbtt__sort_edges</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stbtt__rasterize_sorted_edges</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>vsubsample</name></expr></argument>, <argument><expr><name>off_x</name></expr></argument>, <argument><expr><name>off_y</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__add_point</name><parameter_list>(<parameter><decl><type><name>stbtt__point</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>points</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>points</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>points</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__tesselate_curve</name><parameter_list>(<parameter><decl><type><name>stbtt__point</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_points</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>objspace_flatness_squared</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x1</name> <operator>+</operator> <name>x2</name><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>my</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>y1</name> <operator>+</operator> <name>y2</name><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>x0</name><operator>+</operator><name>x2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>mx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><operator>(</operator><name>y0</name><operator>+</operator><name>y2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>my</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dx</name><operator>*</operator><name>dx</name><operator>+</operator><name>dy</name><operator>*</operator><name>dy</name> <operator>&gt;</operator> <name>objspace_flatness_squared</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stbtt__tesselate_curve</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>num_points</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><operator>(</operator><name>x0</name><operator>+</operator><name>x1</name><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr></argument>,<argument><expr><operator>(</operator><name>y0</name><operator>+</operator><name>y1</name><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>,<argument><expr><name>my</name></expr></argument>, <argument><expr><name>objspace_flatness_squared</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__tesselate_curve</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>num_points</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>,<argument><expr><name>my</name></expr></argument>, <argument><expr><operator>(</operator><name>x1</name><operator>+</operator><name>x2</name><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr></argument>,<argument><expr><operator>(</operator><name>y1</name><operator>+</operator><name>y2</name><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>objspace_flatness_squared</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__add_point</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><operator>*</operator><name>num_points</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_points</name> <operator>=</operator> <operator>*</operator><name>num_points</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__tesselate_cubic</name><parameter_list>(<parameter><decl><type><name>stbtt__point</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_points</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>objspace_flatness_squared</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>dx0</name> <init>= <expr><name>x1</name><operator>-</operator><name>x0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy0</name> <init>= <expr><name>y1</name><operator>-</operator><name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dx1</name> <init>= <expr><name>x2</name><operator>-</operator><name>x1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy1</name> <init>= <expr><name>y2</name><operator>-</operator><name>y1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dx2</name> <init>= <expr><name>x3</name><operator>-</operator><name>x2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy2</name> <init>= <expr><name>y3</name><operator>-</operator><name>y2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name>x3</name><operator>-</operator><name>x0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name>y3</name><operator>-</operator><name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>longlen</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dx0</name><operator>*</operator><name>dx0</name><operator>+</operator><name>dy0</name><operator>*</operator><name>dy0</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dx1</name><operator>*</operator><name>dx1</name><operator>+</operator><name>dy1</name><operator>*</operator><name>dy1</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dx2</name><operator>*</operator><name>dx2</name><operator>+</operator><name>dy2</name><operator>*</operator><name>dy2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>shortlen</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name><operator>+</operator><name>dy</name><operator>*</operator><name>dy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>flatness_squared</name> <init>= <expr><name>longlen</name><operator>*</operator><name>longlen</name><operator>-</operator><name>shortlen</name><operator>*</operator><name>shortlen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flatness_squared</name> <operator>&gt;</operator> <name>objspace_flatness_squared</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x01</name> <init>= <expr><operator>(</operator><name>x0</name><operator>+</operator><name>x1</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y01</name> <init>= <expr><operator>(</operator><name>y0</name><operator>+</operator><name>y1</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x12</name> <init>= <expr><operator>(</operator><name>x1</name><operator>+</operator><name>x2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y12</name> <init>= <expr><operator>(</operator><name>y1</name><operator>+</operator><name>y2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x23</name> <init>= <expr><operator>(</operator><name>x2</name><operator>+</operator><name>x3</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y23</name> <init>= <expr><operator>(</operator><name>y2</name><operator>+</operator><name>y3</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xa</name> <init>= <expr><operator>(</operator><name>x01</name><operator>+</operator><name>x12</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ya</name> <init>= <expr><operator>(</operator><name>y01</name><operator>+</operator><name>y12</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xb</name> <init>= <expr><operator>(</operator><name>x12</name><operator>+</operator><name>x23</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>yb</name> <init>= <expr><operator>(</operator><name>y12</name><operator>+</operator><name>y23</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name>xa</name><operator>+</operator><name>xb</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>my</name> <init>= <expr><operator>(</operator><name>ya</name><operator>+</operator><name>yb</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbtt__tesselate_cubic</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>num_points</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x01</name></expr></argument>,<argument><expr><name>y01</name></expr></argument>, <argument><expr><name>xa</name></expr></argument>,<argument><expr><name>ya</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>,<argument><expr><name>my</name></expr></argument>, <argument><expr><name>objspace_flatness_squared</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__tesselate_cubic</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>num_points</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>,<argument><expr><name>my</name></expr></argument>, <argument><expr><name>xb</name></expr></argument>,<argument><expr><name>yb</name></expr></argument>, <argument><expr><name>x23</name></expr></argument>,<argument><expr><name>y23</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>, <argument><expr><name>objspace_flatness_squared</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__add_point</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><operator>*</operator><name>num_points</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_points</name> <operator>=</operator> <operator>*</operator><name>num_points</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>stbtt__point</name> <modifier>*</modifier></type><name>stbtt_FlattenCurves</name><parameter_list>(<parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_verts</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>objspace_flatness</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>contour_lengths</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_contours</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt__point</name> <modifier>*</modifier></type><name>points</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_points</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>objspace_flatness_squared</name> <init>= <expr><name>objspace_flatness</name> <operator>*</operator> <name>objspace_flatness</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>start</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_verts</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>STBTT_vmove</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>num_contours</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>contour_lengths</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>contour_lengths</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>contour_lengths</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num_contours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>pass</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>pass</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>points</name> <operator>=</operator> <operator>(</operator><name>stbtt__point</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><name>num_points</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>points</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_points</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_verts</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STBTT_vmove</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>contour_lengths</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index> <operator>=</operator> <name>num_points</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>num_points</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__add_point</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>num_points</name><operator>++</operator></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STBTT_vline</name></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt__add_point</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>num_points</name><operator>++</operator></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STBTT_vcurve</name></expr>:</case>
<expr_stmt><expr><call><name>stbtt__tesselate_curve</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_points</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,
<argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cx</name></expr></argument>, <argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cy</name></expr></argument>,
<argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,
<argument><expr><name>objspace_flatness_squared</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STBTT_vcubic</name></expr>:</case>
<expr_stmt><expr><call><name>stbtt__tesselate_cubic</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_points</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,
<argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cx</name></expr></argument>, <argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cy</name></expr></argument>,
<argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cx1</name></expr></argument>, <argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cy1</name></expr></argument>,
<argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,
<argument><expr><name>objspace_flatness_squared</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>contour_lengths</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index> <operator>=</operator> <name>num_points</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>points</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><operator>*</operator><name>contour_lengths</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>contour_lengths</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_contours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_Rasterize</name><parameter_list>(<parameter><decl><type><name>stbtt__bitmap</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>flatness_in_pixels</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_verts</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invert</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><name>scale_x</name> <operator>&gt;</operator> <name>scale_y</name></expr> ?</condition><then> <expr><name>scale_y</name></expr> </then><else>: <expr><name>scale_x</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>winding_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>winding_lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__point</name> <modifier>*</modifier></type><name>windings</name> <init>= <expr><call><name>stbtt_FlattenCurves</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>, <argument><expr><name>flatness_in_pixels</name> <operator>/</operator> <name>scale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winding_lengths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winding_count</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>windings</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbtt__rasterize</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>windings</name></expr></argument>, <argument><expr><name>winding_lengths</name></expr></argument>, <argument><expr><name>winding_count</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><name>shift_x</name></expr></argument>, <argument><expr><name>shift_y</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>winding_lengths</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>windings</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_FreeBitmap</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetGlyphBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ix0</name></decl>,<decl><type ref="prev"/><name>iy0</name></decl>,<decl><type ref="prev"/><name>ix1</name></decl>,<decl><type ref="prev"/><name>iy1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__bitmap</name></type> <name>gbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_verts</name> <init>= <expr><call><name>stbtt_GetGlyphShape</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vertices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scale_x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale_x</name> <operator>=</operator> <name>scale_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scale_y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scale_x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>scale_y</name> <operator>=</operator> <name>scale_x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBoxSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><name>shift_x</name></expr></argument>, <argument><expr><name>shift_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ix0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iy0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ix1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name>ix1</name> <operator>-</operator> <name>ix0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name>iy1</name> <operator>-</operator> <name>iy0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>pixels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>width</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>gbm</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>gbm</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xoff</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>xoff</name> <operator>=</operator> <name>ix0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yoff</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>yoff</name> <operator>=</operator> <name>iy0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gbm</name><operator>.</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name><name>gbm</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>pixels</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><name><name>gbm</name><operator>.</operator><name>w</name></name> <operator>*</operator> <name><name>gbm</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gbm</name><operator>.</operator><name>pixels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>stride</name></name> <operator>=</operator> <name><name>gbm</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbtt_Rasterize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbm</name></expr></argument>, <argument><expr><literal type="number">0.35f</literal></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><name>shift_x</name></expr></argument>, <argument><expr><name>shift_y</name></expr></argument>, <argument><expr><name>ix0</name></expr></argument>, <argument><expr><name>iy0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>gbm</name><operator>.</operator><name>pixels</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetGlyphBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetGlyphBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeGlyphBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ix0</name></decl>,<decl><type ref="prev"/><name>iy0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>vertices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_verts</name> <init>= <expr><call><name>stbtt_GetGlyphShape</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vertices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt__bitmap</name></type> <name>gbm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBoxSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><name>shift_x</name></expr></argument>, <argument><expr><name>shift_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ix0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iy0</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>pixels</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>out_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>out_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbm</name><operator>.</operator><name>stride</name></name> <operator>=</operator> <name>out_stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gbm</name><operator>.</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name><name>gbm</name><operator>.</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt_Rasterize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbm</name></expr></argument>, <argument><expr><literal type="number">0.35f</literal></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><name>shift_x</name></expr></argument>, <argument><expr><name>shift_y</name></expr></argument>, <argument><expr><name>ix0</name></expr></argument>,<argument><expr><name>iy0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeGlyphBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_MakeGlyphBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_w</name></expr></argument>, <argument><expr><name>out_h</name></expr></argument>, <argument><expr><name>out_stride</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetCodepointBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetGlyphBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>,<argument><expr><name>shift_x</name></expr></argument>,<argument><expr><name>shift_y</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>,<argument><expr><name>height</name></expr></argument>,<argument><expr><name>xoff</name></expr></argument>,<argument><expr><name>yoff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeCodepointBitmapSubpixelPrefilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oversample_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oversample_y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_MakeGlyphBitmapSubpixelPrefilter</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_w</name></expr></argument>, <argument><expr><name>out_h</name></expr></argument>, <argument><expr><name>out_stride</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><name>shift_x</name></expr></argument>, <argument><expr><name>shift_y</name></expr></argument>, <argument><expr><name>oversample_x</name></expr></argument>, <argument><expr><name>oversample_y</name></expr></argument>, <argument><expr><name>sub_x</name></expr></argument>, <argument><expr><name>sub_y</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeCodepointBitmapSubpixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_MakeGlyphBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_w</name></expr></argument>, <argument><expr><name>out_h</name></expr></argument>, <argument><expr><name>out_stride</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><name>shift_x</name></expr></argument>, <argument><expr><name>shift_y</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetCodepointBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetCodepointBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,<argument><expr><name>height</name></expr></argument>,<argument><expr><name>xoff</name></expr></argument>,<argument><expr><name>yoff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeCodepointBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_MakeCodepointBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_w</name></expr></argument>, <argument><expr><name>out_h</name></expr></argument>, <argument><expr><name>out_stride</name></expr></argument>, <argument><expr><name>scale_x</name></expr></argument>, <argument><expr><name>scale_y</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt_BakeFontBitmap_internal</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, 
<parameter><decl><type><name>float</name></type> <name>pixel_height</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>first_char</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_chars</name></decl></parameter>, 
<parameter><decl><type><name>stbtt_bakedchar</name> <modifier>*</modifier></type><name>chardata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>bottom_y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_fontinfo</name></type> <name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>.</operator><name>userdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbtt_InitFont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pw</name><operator>*</operator><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>x</name><operator>=</operator><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>stbtt_ScaleForPixelHeight</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>pixel_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_chars</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>, <decl><type ref="prev"/><name>lsb</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>,<decl><type ref="prev"/><name>y0</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>,<decl><type ref="prev"/><name>gw</name></decl>,<decl><type ref="prev"/><name>gh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>first_char</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbtt_GetGlyphHMetrics</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>advance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>,<argument><expr><name>scale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gw</name> <operator>=</operator> <name>x1</name><operator>-</operator><name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gh</name> <operator>=</operator> <name>y1</name><operator>-</operator><name>y0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>gw</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>pw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>bottom_y</name></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>gh</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>ph</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><name>i</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>gw</name> <operator>&lt;</operator> <name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name>gh</name> <operator>&lt;</operator> <name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt_MakeGlyphBitmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>pixels</name><operator>+</operator><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>pw</name></expr></argument>, <argument><expr><name>gw</name></expr></argument>,<argument><expr><name>gh</name></expr></argument>,<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>,<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chardata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x0</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chardata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y0</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chardata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>gw</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chardata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>gh</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chardata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xadvance</name> <operator>=</operator> <name>scale</name> <operator>*</operator> <name>advance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chardata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xoff</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chardata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>yoff</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>y0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>gw</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name><operator>+</operator><name>gh</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>bottom_y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bottom_y</name> <operator>=</operator> <name>y</name><operator>+</operator><name>gh</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>bottom_y</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetBakedQuad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_bakedchar</name> <modifier>*</modifier></type><name>chardata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>char_index</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>xpos</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>ypos</name></decl></parameter>, <parameter><decl><type><name>stbtt_aligned_quad</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opengl_fillrule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>d3d_bias</name> <init>= <expr><ternary><condition><expr><name>opengl_fillrule</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">0.5f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ipw</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>pw</name></expr></init></decl>, <decl><type ref="prev"/><name>iph</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>ph</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>stbtt_bakedchar</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>chardata</name> <operator>+</operator> <name>char_index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round_x</name> <init>= <expr><call><name>STBTT_ifloor</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>xpos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>xoff</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round_y</name> <init>= <expr><call><name>STBTT_ifloor</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ypos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>yoff</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>x0</name></name> <operator>=</operator> <name>round_x</name> <operator>+</operator> <name>d3d_bias</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>y0</name></name> <operator>=</operator> <name>round_y</name> <operator>+</operator> <name>d3d_bias</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name>round_x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>x0</name></name> <operator>+</operator> <name>d3d_bias</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name>round_y</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>y0</name></name> <operator>+</operator> <name>d3d_bias</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>s0</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x0</name></name> <operator>*</operator> <name>ipw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>t0</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>y0</name></name> <operator>*</operator> <name>iph</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>s1</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x1</name></name> <operator>*</operator> <name>ipw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>t1</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>y1</name></name> <operator>*</operator> <name>iph</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>xadvance</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_RECT_PACK_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>int</name></type> <name>stbrp_coord</name>;</typedef>












<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>,<name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<name>y</name>,<name>bottom_y</name>;</decl_stmt>
}</block></struct></type> <name>stbrp_context</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>
}</block></struct></type> <name>stbrp_node</name>;</typedef>

<struct>struct <name>stbrp_rect</name>
<block>{
<decl_stmt><decl><type><name>stbrp_coord</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>was_packed</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbrp_init_target</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>pw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>ph</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bottom_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT__NOTUSED</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT__NOTUSED</name><argument_list>(<argument><expr><name>num_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbrp_pack_rects</name><parameter_list>(<parameter><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rects</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rects</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>bottom_y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>was_packed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>bottom_y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bottom_y</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rects</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>was_packed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackBegin</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_in_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><operator>(</operator><name>stbrp_context</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument> ,<argument><expr><name>alloc_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_nodes</name> <init>= <expr><name>pw</name> <operator>-</operator> <name>padding</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>nodes</name> <init>= <expr><operator>(</operator><name>stbrp_node</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nodes</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>num_nodes</name></expr></argument>,<argument><expr><name>alloc_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nodes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>alloc_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nodes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument> , <argument><expr><name>alloc_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>user_allocator_context</name></name> <operator>=</operator> <name>alloc_context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>pw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>ph</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>pixels</name></name> <operator>=</operator> <name>pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>pack_info</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <name>nodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>stride_in_bytes</name></name> <operator>=</operator> <ternary><condition><expr><name>stride_in_bytes</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>stride_in_bytes</name></expr> </then><else>: <expr><name>pw</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>skip_missing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbrp_init_target</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>pw</name><operator>-</operator><name>padding</name></expr></argument>, <argument><expr><name>ph</name><operator>-</operator><name>padding</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>num_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixels</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pw</name><operator>*</operator><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackEnd</name> <parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument> , <argument><expr><name><name>spc</name><operator>-&gt;</operator><name>user_allocator_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>pack_info</name></name></expr></argument>, <argument><expr><name><name>spc</name><operator>-&gt;</operator><name>user_allocator_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackSetOversampling</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h_oversample</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v_oversample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>h_oversample</name> <operator>&lt;=</operator> <name>STBTT_MAX_OVERSAMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>v_oversample</name> <operator>&lt;=</operator> <name>STBTT_MAX_OVERSAMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h_oversample</name> <operator>&lt;=</operator> <name>STBTT_MAX_OVERSAMPLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name> <operator>=</operator> <name>h_oversample</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v_oversample</name> <operator>&lt;=</operator> <name>STBTT_MAX_OVERSAMPLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name> <operator>=</operator> <name>v_oversample</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackSetSkipMissingCodepoints</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>skip_missing</name></name> <operator>=</operator> <name>skip</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT__OVER_MASK</name></cpp:macro> <cpp:value>(STBTT_MAX_OVERSAMPLE-1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__h_prefilter</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_in_bytes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>kernel_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>STBTT_MAX_OVERSAMPLE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>safe_w</name> <init>= <expr><name>w</name> <operator>-</operator> <name>kernel_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>STBTT_MAX_OVERSAMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kernel_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>kernel_width</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <name>kernel_width</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>-=</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <name>kernel_width</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>stride_in_bytes</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbtt__v_prefilter</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_in_bytes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>kernel_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>STBTT_MAX_OVERSAMPLE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>safe_h</name> <init>= <expr><name>h</name> <operator>-</operator> <name>kernel_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>STBTT_MAX_OVERSAMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kernel_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>kernel_width</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>safe_h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><name>kernel_width</name><operator>)</operator> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <name>kernel_width</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>-=</operator> <name><name>buffer</name><index>[<expr><name>i</name> <operator>&amp;</operator> <name>STBTT__OVER_MASK</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name><operator>*</operator><name>stride_in_bytes</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>total</name> <operator>/</operator> <name>kernel_width</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbtt__oversample_shift</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oversample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oversample</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0f</literal></expr>;</return></block_content></block></if></if_stmt>





<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>-</operator><operator>(</operator><name>oversample</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>oversample</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRangesGatherRects</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_pack_range</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ranges</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>missing_glyph_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ranges</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>fh</name> <init>= <expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>font_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><name>fh</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>stbtt_ScaleForPixelHeight</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stbtt_ScaleForMappingEmToPixels</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>-</operator><name>fh</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h_oversample</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v_oversample</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_chars</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name></decl>,<decl><type ref="prev"/><name>y0</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codepoint</name> <init>= <expr><ternary><condition><expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>array_of_unicode_codepoints</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_unicode_codepoint_in_range</name> <operator>+</operator> <name>j</name></expr> </then><else>: <expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>array_of_unicode_codepoints</name><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>glyph</name> <init>= <expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>glyph</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>spc</name><operator>-&gt;</operator><name>skip_missing</name></name> <operator>||</operator> <name>missing_glyph_added</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBoxSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>glyph</name></expr></argument>,
<argument><expr><name>scale</name> <operator>*</operator> <name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr></argument>,
<argument><expr><name>scale</name> <operator>*</operator> <name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <operator>(</operator><name>x1</name><operator>-</operator><name>x0</name> <operator>+</operator> <name><name>spc</name><operator>-&gt;</operator><name>padding</name></name> <operator>+</operator> <name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <operator>(</operator><name>stbrp_coord</name><operator>)</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y0</name> <operator>+</operator> <name><name>spc</name><operator>-&gt;</operator><name>padding</name></name> <operator>+</operator> <name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>glyph</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>missing_glyph_added</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_MakeGlyphBitmapSubpixelPrefilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_stride</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>shift_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefilter_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefilter_y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbtt_MakeGlyphBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><name>output</name></expr></argument>,
<argument><expr><name>out_w</name> <operator>-</operator> <operator>(</operator><name>prefilter_x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name>out_h</name> <operator>-</operator> <operator>(</operator><name>prefilter_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name>out_stride</name></expr></argument>,
<argument><expr><name>scale_x</name></expr></argument>,
<argument><expr><name>scale_y</name></expr></argument>,
<argument><expr><name>shift_x</name></expr></argument>,
<argument><expr><name>shift_y</name></expr></argument>,
<argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefilter_x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__h_prefilter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_w</name></expr></argument>, <argument><expr><name>out_h</name></expr></argument>, <argument><expr><name>out_stride</name></expr></argument>, <argument><expr><name>prefilter_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prefilter_y</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__v_prefilter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_w</name></expr></argument>, <argument><expr><name>out_h</name></expr></argument>, <argument><expr><name>out_stride</name></expr></argument>, <argument><expr><name>prefilter_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sub_x</name> <operator>=</operator> <call><name>stbtt__oversample_shift</name><argument_list>(<argument><expr><name>prefilter_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sub_y</name> <operator>=</operator> <call><name>stbtt__oversample_shift</name><argument_list>(<argument><expr><name>prefilter_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRangesRenderIntoRects</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>stbtt_pack_range</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ranges</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>missing_glyph</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>return_value</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>old_h_over</name> <init>= <expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_v_over</name> <init>= <expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ranges</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>fh</name> <init>= <expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>font_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><name>fh</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>stbtt_ScaleForPixelHeight</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stbtt_ScaleForMappingEmToPixels</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>-</operator><name>fh</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>recip_h</name></decl>,<decl><type ref="prev"/><name>recip_v</name></decl>,<decl><type ref="prev"/><name>sub_x</name></decl>,<decl><type ref="prev"/><name>sub_y</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name> <operator>=</operator> <name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h_oversample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name> <operator>=</operator> <name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v_oversample</name></expr>;</expr_stmt>
<expr_stmt><expr><name>recip_h</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>recip_v</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sub_x</name> <operator>=</operator> <call><name>stbtt__oversample_shift</name><argument_list>(<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sub_y</name> <operator>=</operator> <call><name>stbtt__oversample_shift</name><argument_list>(<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_chars</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>rects</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>was_packed</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_packedchar</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><operator>&amp;</operator><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chardata_for_range</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>, <decl><type ref="prev"/><name>lsb</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>,<decl><type ref="prev"/><name>y0</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codepoint</name> <init>= <expr><ternary><condition><expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>array_of_unicode_codepoints</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_unicode_codepoint_in_range</name> <operator>+</operator> <name>j</name></expr> </then><else>: <expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>array_of_unicode_codepoints</name><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>glyph</name> <init>= <expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbrp_coord</name></type> <name>pad</name> <init>= <expr><operator>(</operator><name>stbrp_coord</name><operator>)</operator> <name><name>spc</name><operator>-&gt;</operator><name>padding</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>w</name></name> <operator>-=</operator> <name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>h</name></name> <operator>-=</operator> <name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt_GetGlyphHMetrics</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>advance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBox</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>,
<argument><expr><name>scale</name> <operator>*</operator> <name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr></argument>,
<argument><expr><name>scale</name> <operator>*</operator> <name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt_MakeGlyphBitmapSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>pixels</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>y</name></name><operator>*</operator><name><name>spc</name><operator>-&gt;</operator><name>stride_in_bytes</name></name></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>stride_in_bytes</name></name></expr></argument>,
<argument><expr><name>scale</name> <operator>*</operator> <name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr></argument>,
<argument><expr><name>scale</name> <operator>*</operator> <name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__h_prefilter</name><argument_list>(<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>pixels</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>y</name></name><operator>*</operator><name><name>spc</name><operator>-&gt;</operator><name>stride_in_bytes</name></name></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>spc</name><operator>-&gt;</operator><name>stride_in_bytes</name></name></expr></argument>,
<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbtt__v_prefilter</name><argument_list>(<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>pixels</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>y</name></name><operator>*</operator><name><name>spc</name><operator>-&gt;</operator><name>stride_in_bytes</name></name></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>spc</name><operator>-&gt;</operator><name>stride_in_bytes</name></name></expr></argument>,
<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>x0</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>y0</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <operator>(</operator><name>stbtt_int16</name><operator>)</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>xadvance</name></name> <operator>=</operator> <name>scale</name> <operator>*</operator> <name>advance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>xoff</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>x0</name> <operator>*</operator> <name>recip_h</name> <operator>+</operator> <name>sub_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>yoff</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>y0</name> <operator>*</operator> <name>recip_v</name> <operator>+</operator> <name>sub_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>xoff2</name></name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>*</operator> <name>recip_h</name> <operator>+</operator> <name>sub_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc</name><operator>-&gt;</operator><name>yoff2</name></name> <operator>=</operator> <operator>(</operator><name>y0</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>*</operator> <name>recip_v</name> <operator>+</operator> <name>sub_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>glyph</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>missing_glyph</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>spc</name><operator>-&gt;</operator><name>skip_missing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>return_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>was_packed</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>w</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>missing_glyph</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chardata_for_range</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chardata_for_range</name><index>[<expr><name>missing_glyph</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>return_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>h_oversample</name></name> <operator>=</operator> <name>old_h_over</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>v_oversample</name></name> <operator>=</operator> <name>old_v_over</name></expr>;</expr_stmt>

<return>return <expr><name>return_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_PackFontRangesPackRects</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rects</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stbrp_pack_rects</name><argument_list>(<argument><expr><operator>(</operator><name>stbrp_context</name> <operator>*</operator><operator>)</operator> <name><name>spc</name><operator>-&gt;</operator><name>pack_info</name></name></expr></argument>, <argument><expr><name>rects</name></expr></argument>, <argument><expr><name>num_rects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRanges</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>font_index</name></decl></parameter>, <parameter><decl><type><name>stbtt_pack_range</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ranges</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_fontinfo</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>return_value</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ranges</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_chars</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chardata_for_range</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x0</name> <operator>=</operator>
<name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chardata_for_range</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y0</name> <operator>=</operator>
<name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chardata_for_range</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>=</operator>
<name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chardata_for_range</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ranges</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_chars</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>rects</name> <operator>=</operator> <operator>(</operator><name>stbrp_rect</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rects</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><name><name>spc</name><operator>-&gt;</operator><name>user_allocator_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rects</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>userdata</name></name> <operator>=</operator> <name><name>spc</name><operator>-&gt;</operator><name>user_allocator_context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt_InitFont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>fontdata</name></expr></argument>, <argument><expr><call><name>stbtt_GetFontOffsetForIndex</name><argument_list>(<argument><expr><name>fontdata</name></expr></argument>,<argument><expr><name>font_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>stbtt_PackFontRangesGatherRects</name><argument_list>(<argument><expr><name>spc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>num_ranges</name></expr></argument>, <argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbtt_PackFontRangesPackRects</name><argument_list>(<argument><expr><name>spc</name></expr></argument>, <argument><expr><name>rects</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <call><name>stbtt_PackFontRangesRenderIntoRects</name><argument_list>(<argument><expr><name>spc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>num_ranges</name></expr></argument>, <argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>rects</name></expr></argument>, <argument><expr><name><name>spc</name><operator>-&gt;</operator><name>user_allocator_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>return_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_PackFontRange</name><parameter_list>(<parameter><decl><type><name>stbtt_pack_context</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>font_index</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>font_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>first_unicode_codepoint_in_range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_chars_in_range</name></decl></parameter>, <parameter><decl><type><name>stbtt_packedchar</name> <modifier>*</modifier></type><name>chardata_for_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_pack_range</name></type> <name>range</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name><operator>.</operator><name>first_unicode_codepoint_in_range</name></name> <operator>=</operator> <name>first_unicode_codepoint_in_range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>.</operator><name>array_of_unicode_codepoints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>.</operator><name>num_chars</name></name> <operator>=</operator> <name>num_chars_in_range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>.</operator><name>chardata_for_range</name></name> <operator>=</operator> <name>chardata_for_range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>.</operator><name>font_size</name></name> <operator>=</operator> <name>font_size</name></expr>;</expr_stmt>
<return>return <expr><call><name>stbtt_PackFontRanges</name><argument_list>(<argument><expr><name>spc</name></expr></argument>, <argument><expr><name>fontdata</name></expr></argument>, <argument><expr><name>font_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetScaledFontVMetrics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>ascent</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>descent</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lineGap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ascent</name></decl>, <decl><type ref="prev"/><name>i_descent</name></decl>, <decl><type ref="prev"/><name>i_lineGap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_fontinfo</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbtt_InitFont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>fontdata</name></expr></argument>, <argument><expr><call><name>stbtt_GetFontOffsetForIndex</name><argument_list>(<argument><expr><name>fontdata</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>stbtt_ScaleForPixelHeight</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stbtt_ScaleForMappingEmToPixels</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>-</operator><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbtt_GetFontVMetrics</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_ascent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_descent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_lineGap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ascent</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_ascent</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>descent</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_descent</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lineGap</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_lineGap</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_GetPackedQuad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_packedchar</name> <modifier>*</modifier></type><name>chardata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>char_index</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>xpos</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>ypos</name></decl></parameter>, <parameter><decl><type><name>stbtt_aligned_quad</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align_to_integer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ipw</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>pw</name></expr></init></decl>, <decl><type ref="prev"/><name>iph</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>ph</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>stbtt_packedchar</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>chardata</name> <operator>+</operator> <name>char_index</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>align_to_integer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_ifloor</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>xpos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>xoff</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_ifloor</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ypos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>yoff</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>x0</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>y0</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>xoff2</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>xoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>yoff2</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>yoff</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>x0</name></name> <operator>=</operator> <operator>*</operator><name>xpos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>xoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>y0</name></name> <operator>=</operator> <operator>*</operator><name>ypos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>yoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <operator>*</operator><name>xpos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>xoff2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <operator>*</operator><name>ypos</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>yoff2</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>s0</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x0</name></name> <operator>*</operator> <name>ipw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>t0</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>y0</name></name> <operator>*</operator> <name>iph</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>s1</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x1</name></name> <operator>*</operator> <name>ipw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>t1</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>y1</name></name> <operator>*</operator> <name>iph</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>xadvance</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (b) : (a))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__ray_intersect_bezier</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>orig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>ray</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>q0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>q1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>q2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>hits</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>q0perp</name> <init>= <expr><name><name>q0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q1perp</name> <init>= <expr><name><name>q1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q2perp</name> <init>= <expr><name><name>q2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>q2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>roperp</name> <init>= <expr><name><name>orig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>orig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name>q0perp</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>q1perp</name> <operator>+</operator> <name>q2perp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><name>q1perp</name> <operator>-</operator> <name>q0perp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><name>q0perp</name> <operator>-</operator> <name>roperp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s0</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>discr</name> <init>= <expr><name>b</name><operator>*</operator><name>b</name> <operator>-</operator> <name>a</name><operator>*</operator><name>c</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>discr</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rcpna</name> <init>= <expr><operator>-</operator><literal type="number">1</literal> <operator>/</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>discr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <operator>(</operator><name>b</name><operator>+</operator><name>d</name><operator>)</operator> <operator>*</operator> <name>rcpna</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>b</name><operator>-</operator><name>d</name><operator>)</operator> <operator>*</operator> <name>rcpna</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s0</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>s0</name> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>num_s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>c</name> <operator>/</operator> <operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s0</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>s0</name> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rcp_len2</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name><name>ray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>ray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rayn_x</name> <init>= <expr><name><name>ray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>rcp_len2</name></expr></init></decl>, <decl><type ref="prev"/><name>rayn_y</name> <init>= <expr><name><name>ray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>rcp_len2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>q0d</name> <init>= <expr><name><name>q0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>rayn_x</name> <operator>+</operator> <name><name>q0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>rayn_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q1d</name> <init>= <expr><name><name>q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>rayn_x</name> <operator>+</operator> <name><name>q1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>rayn_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q2d</name> <init>= <expr><name><name>q2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>rayn_x</name> <operator>+</operator> <name><name>q2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>rayn_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rod</name> <init>= <expr><name><name>orig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>rayn_x</name> <operator>+</operator> <name><name>orig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>rayn_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>q10d</name> <init>= <expr><name>q1d</name> <operator>-</operator> <name>q0d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q20d</name> <init>= <expr><name>q2d</name> <operator>-</operator> <name>q0d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q0rd</name> <init>= <expr><name>q0d</name> <operator>-</operator> <name>rod</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hits</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>q0rd</name> <operator>+</operator> <name>s0</name><operator>*</operator><operator>(</operator><literal type="number">2.0f</literal> <operator>-</operator> <literal type="number">2.0f</literal><operator>*</operator><name>s0</name><operator>)</operator><operator>*</operator><name>q10d</name> <operator>+</operator> <name>s0</name><operator>*</operator><name>s0</name><operator>*</operator><name>q20d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hits</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name><operator>*</operator><name>s0</name><operator>+</operator><name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_s</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hits</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>q0rd</name> <operator>+</operator> <name>s1</name><operator>*</operator><operator>(</operator><literal type="number">2.0f</literal> <operator>-</operator> <literal type="number">2.0f</literal><operator>*</operator><name>s1</name><operator>)</operator><operator>*</operator><name>q10d</name> <operator>+</operator> <name>s1</name><operator>*</operator><name>s1</name><operator>*</operator><name>q20d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hits</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name><operator>*</operator><name>s1</name><operator>+</operator><name>b</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>equal</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__compute_crossings_x</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nverts</name></decl></parameter>, <parameter><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>verts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>orig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ray</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y_frac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>winding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>orig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>orig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>


<expr_stmt><expr><name>y_frac</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_fmod</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y_frac</name> <operator>&lt;</operator> <literal type="number">0.01f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>y_frac</name> <operator>&gt;</operator> <literal type="number">0.99f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>orig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nverts</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>STBTT_vline</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>y0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <call><name>STBTT_min</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name>STBTT_max</name><operator>(</operator><name>y0</name>,<name>y1</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <call><name>STBTT_min</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x_inter</name> <init>= <expr><operator>(</operator><name>y</name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator> <operator>+</operator> <name>x0</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x_inter</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>winding</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>y0</name> <operator>&lt;</operator> <name>y1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>STBTT_vcurve</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl> , <decl><type ref="prev"/><name>y0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>cx</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>cy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>x</name></expr></init></decl> , <decl><type ref="prev"/><name>y2</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>y</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ax</name> <init>= <expr><call><name>STBTT_min</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,<argument><expr><call><name>STBTT_min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ay</name> <init>= <expr><call><name>STBTT_min</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><call><name>STBTT_min</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>by</name> <init>= <expr><call><name>STBTT_max</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><call><name>STBTT_max</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>ay</name> <operator>&amp;&amp;</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name>by</name> <operator>&amp;&amp;</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>ax</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>q0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>hits</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name>q0</name></expr></argument>,<argument><expr><name>q1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>equal</name><argument_list>(<argument><expr><name>q1</name></expr></argument>,<argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x0</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <call><name>STBTT_min</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name>STBTT_max</name><operator>(</operator><name>y0</name>,<name>y1</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <call><name>STBTT_min</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x_inter</name> <init>= <expr><operator>(</operator><name>y</name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator> <operator>+</operator> <name>x0</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x_inter</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>winding</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>y0</name> <operator>&lt;</operator> <name>y1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_hits</name> <init>= <expr><call><name>stbtt__ray_intersect_bezier</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>ray</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_hits</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>hits</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>winding</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>hits</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_hits</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>hits</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>winding</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>hits</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>winding</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbtt__cuberoot</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_pow</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>,<argument><expr><literal type="number">1.0f</literal><operator>/</operator><literal type="number">3.0f</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_pow</name><argument_list>( <argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">1.0f</literal><operator>/</operator><literal type="number">3.0f</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__solve_cubic</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>-</operator><name>a</name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><name>b</name> <operator>-</operator> <name>a</name><operator>*</operator><name>a</name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q</name> <init>= <expr><name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>a</name><operator>*</operator><name>a</name> <operator>-</operator> <literal type="number">9</literal><operator>*</operator><name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">27</literal> <operator>+</operator> <name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>p3</name> <init>= <expr><name>p</name><operator>*</operator><name>p</name><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name>q</name><operator>*</operator><name>q</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>p3</name> <operator>/</operator> <literal type="number">27</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><operator>(</operator><operator>-</operator><name>q</name> <operator>+</operator> <name>z</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>-</operator><name>q</name> <operator>-</operator> <name>z</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>stbtt__cuberoot</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>stbtt__cuberoot</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>u</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><operator>-</operator><name>p</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_acos</name><argument_list>(<argument><expr><operator>-</operator><call><name>STBTT_sqrt</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">27</literal><operator>/</operator><name>p3</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>q</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_cos</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_cos</name><argument_list>(<argument><expr><name>v</name><operator>-</operator><literal type="number">3.141592</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">1.732050808f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>u</name> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>u</name> <operator>*</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>




<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>stbtt_GetGlyphSDF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>onedge_value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pixel_dist_scale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>scale_x</name> <init>= <expr><name>scale</name></expr></init></decl>, <decl><type ref="prev"/><name>scale_y</name> <init>= <expr><name>scale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ix0</name></decl>,<decl><type ref="prev"/><name>iy0</name></decl>,<decl><type ref="prev"/><name>ix1</name></decl>,<decl><type ref="prev"/><name>iy1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbtt_GetGlyphBitmapBoxSubpixel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ix0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iy0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ix1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ix0</name> <operator>==</operator> <name>ix1</name> <operator>||</operator> <name>iy0</name> <operator>==</operator> <name>iy1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ix0</name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iy0</name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ix1</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iy1</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>ix1</name> <operator>-</operator> <name>ix0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>iy1</name> <operator>-</operator> <name>iy0</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xoff</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>xoff</name> <operator>=</operator> <name>ix0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yoff</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>yoff</name> <operator>=</operator> <name>iy0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>scale_y</name> <operator>=</operator> <operator>-</operator><name>scale_y</name></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>precompute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_vertex</name> <modifier>*</modifier></type><name>verts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_verts</name> <init>= <expr><call><name>stbtt_GetGlyphShape</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>verts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>precompute</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>STBTT_malloc</name><argument_list>(<argument><expr><name>num_verts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>j</name><operator>=</operator><name>num_verts</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_verts</name></expr>;</condition> <incr><expr><name>j</name><operator>=</operator><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>STBTT_vline</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y0</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>precompute</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dist</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>dist</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>STBTT_vcurve</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name><name>verts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y2</name> <init>= <expr><name><name>verts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cx</name><operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cy</name><operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y0</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bx</name> <init>= <expr><name>x0</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>x1</name> <operator>+</operator> <name>x2</name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name>y0</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>y1</name> <operator>+</operator> <name>y2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>len2</name> <init>= <expr><name>bx</name><operator>*</operator><name>bx</name> <operator>+</operator> <name>by</name><operator>*</operator><name>by</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>!=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>precompute</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>bx</name><operator>*</operator><name>bx</name> <operator>+</operator> <name>by</name><operator>*</operator><name>by</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>precompute</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>precompute</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><name>iy0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>iy1</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name><operator>=</operator><name>ix0</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>ix1</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>min_dist</name> <init>= <expr><literal type="number">999999.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sx</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>x</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sy</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>y</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x_gspace</name> <init>= <expr><operator>(</operator><name>sx</name> <operator>/</operator> <name>scale_x</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y_gspace</name> <init>= <expr><operator>(</operator><name>sy</name> <operator>/</operator> <name>scale_y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>winding</name> <init>= <expr><call><name>stbtt__compute_crossings_x</name><argument_list>(<argument><expr><name>x_gspace</name></expr></argument>, <argument><expr><name>y_gspace</name></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>, <argument><expr><name>verts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_verts</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y0</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>dist2</name> <init>= <expr><operator>(</operator><name>x0</name><operator>-</operator><name>sx</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x0</name><operator>-</operator><name>sx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y0</name><operator>-</operator><name>sy</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y0</name><operator>-</operator><name>sy</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>min_dist</name><operator>*</operator><name>min_dist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dist2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>STBTT_vline</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_fabs</name><argument_list>(<argument><expr><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y0</name><operator>-</operator><name>sy</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x0</name><operator>-</operator><name>sx</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>precompute</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBTT_assert</name><argument_list>(<argument><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <name>min_dist</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name>x1</name><operator>-</operator><name>x0</name></expr></init></decl>, <decl><type ref="prev"/><name>dy</name> <init>= <expr><name>y1</name><operator>-</operator><name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>px</name> <init>= <expr><name>x0</name><operator>-</operator><name>sx</name></expr></init></decl>, <decl><type ref="prev"/><name>py</name> <init>= <expr><name>y0</name><operator>-</operator><name>sy</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>-</operator><operator>(</operator><name>px</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>py</name><operator>*</operator><name>dy</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dy</name><operator>*</operator><name>dy</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>verts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>STBTT_vcurve</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y2</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>cx</name><operator>*</operator><name>scale_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name><name>verts</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>cy</name><operator>*</operator><name>scale_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>box_x0</name> <init>= <expr><call><name>STBTT_min</name><argument_list>(<argument><expr><call><name>STBTT_min</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>box_y0</name> <init>= <expr><call><name>STBTT_min</name><argument_list>(<argument><expr><call><name>STBTT_min</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>box_x1</name> <init>= <expr><call><name>STBTT_max</name><argument_list>(<argument><expr><call><name>STBTT_max</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>box_y1</name> <init>= <expr><call><name>STBTT_max</name><argument_list>(<argument><expr><call><name>STBTT_max</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&gt;</operator> <name>box_x0</name><operator>-</operator><name>min_dist</name> <operator>&amp;&amp;</operator> <name><name>sx</name> <argument_list type="generic">&lt; <argument><expr><name>box_x1</name><operator>+</operator><name>min_dist</name> <operator>&amp;&amp;</operator> <name>sy</name></expr></argument> &gt;</argument_list></name> <name>box_y0</name><operator>-</operator><name>min_dist</name> <operator>&amp;&amp;</operator> <name>sy</name> <operator>&lt;</operator> <name>box_y1</name><operator>+</operator><name>min_dist</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ax</name> <init>= <expr><name>x1</name><operator>-</operator><name>x0</name></expr></init></decl>, <decl><type ref="prev"/><name>ay</name> <init>= <expr><name>y1</name><operator>-</operator><name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bx</name> <init>= <expr><name>x0</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>x1</name> <operator>+</operator> <name>x2</name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name>y0</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>y1</name> <operator>+</operator> <name>y2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mx</name> <init>= <expr><name>x0</name> <operator>-</operator> <name>sx</name></expr></init></decl>, <decl><type ref="prev"/><name>my</name> <init>= <expr><name>y0</name> <operator>-</operator> <name>sy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>px</name></decl>,<decl><type ref="prev"/><name>py</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a_inv</name> <init>= <expr><name><name>precompute</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a_inv</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">3</literal><operator>*</operator><operator>(</operator><name>ax</name><operator>*</operator><name>bx</name> <operator>+</operator> <name>ay</name><operator>*</operator><name>by</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>ax</name><operator>*</operator><name>ax</name> <operator>+</operator> <name>ay</name><operator>*</operator><name>ay</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mx</name><operator>*</operator><name>bx</name><operator>+</operator><name>my</name><operator>*</operator><name>by</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><name>mx</name><operator>*</operator><name>ax</name><operator>+</operator><name>my</name><operator>*</operator><name>ay</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><index>[<expr><name>num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>c</name><operator>/</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>discriminant</name> <init>= <expr><name>b</name><operator>*</operator><name>b</name> <operator>-</operator> <literal type="number">4</literal><operator>*</operator><name>a</name><operator>*</operator><name>c</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>discriminant</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>discriminant</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>b</name> <operator>-</operator> <name>root</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>a</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>b</name> <operator>+</operator> <name>root</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>a</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><literal type="number">3</literal><operator>*</operator><operator>(</operator><name>ax</name><operator>*</operator><name>bx</name> <operator>+</operator> <name>ay</name><operator>*</operator><name>by</name><operator>)</operator> <operator>*</operator> <name>a_inv</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>ax</name><operator>*</operator><name>ax</name> <operator>+</operator> <name>ay</name><operator>*</operator><name>ay</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mx</name><operator>*</operator><name>bx</name><operator>+</operator><name>my</name><operator>*</operator><name>by</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>a_inv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>mx</name><operator>*</operator><name>ax</name><operator>+</operator><name>my</name><operator>*</operator><name>ay</name><operator>)</operator> <operator>*</operator> <name>a_inv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>stbtt__solve_cubic</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0.0f</literal> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>it</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>px</name> <operator>=</operator> <name>it</name><operator>*</operator><name>it</name><operator>*</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name><operator>*</operator><name>it</name><operator>*</operator><name>x1</name> <operator>+</operator> <name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>py</name> <operator>=</operator> <name>it</name><operator>*</operator><name>it</name><operator>*</operator><name>y0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name><operator>*</operator><name>it</name><operator>*</operator><name>y1</name> <operator>+</operator> <name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist2</name> <operator>=</operator> <operator>(</operator><name>px</name><operator>-</operator><name>sx</name><operator>)</operator><operator>*</operator><operator>(</operator><name>px</name><operator>-</operator><name>sx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>py</name><operator>-</operator><name>sy</name><operator>)</operator><operator>*</operator><operator>(</operator><name>py</name><operator>-</operator><name>sy</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>min_dist</name> <operator>*</operator> <name>min_dist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dist2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0.0f</literal> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>it</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>px</name> <operator>=</operator> <name>it</name><operator>*</operator><name>it</name><operator>*</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name><operator>*</operator><name>it</name><operator>*</operator><name>x1</name> <operator>+</operator> <name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>py</name> <operator>=</operator> <name>it</name><operator>*</operator><name>it</name><operator>*</operator><name>y0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name><operator>*</operator><name>it</name><operator>*</operator><name>y1</name> <operator>+</operator> <name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist2</name> <operator>=</operator> <operator>(</operator><name>px</name><operator>-</operator><name>sx</name><operator>)</operator><operator>*</operator><operator>(</operator><name>px</name><operator>-</operator><name>sx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>py</name><operator>-</operator><name>sy</name><operator>)</operator><operator>*</operator><operator>(</operator><name>py</name><operator>-</operator><name>sy</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>min_dist</name> <operator>*</operator> <name>min_dist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dist2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0.0f</literal> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>it</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>px</name> <operator>=</operator> <name>it</name><operator>*</operator><name>it</name><operator>*</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name><operator>*</operator><name>it</name><operator>*</operator><name>x1</name> <operator>+</operator> <name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>py</name> <operator>=</operator> <name>it</name><operator>*</operator><name>it</name><operator>*</operator><name>y0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name><operator>*</operator><name>it</name><operator>*</operator><name>y1</name> <operator>+</operator> <name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist2</name> <operator>=</operator> <operator>(</operator><name>px</name><operator>-</operator><name>sx</name><operator>)</operator><operator>*</operator><operator>(</operator><name>px</name><operator>-</operator><name>sx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>py</name><operator>-</operator><name>sy</name><operator>)</operator><operator>*</operator><operator>(</operator><name>py</name><operator>-</operator><name>sy</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>min_dist</name> <operator>*</operator> <name>min_dist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>STBTT_sqrt</name><argument_list>(<argument><expr><name>dist2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>winding</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <operator>-</operator><name>min_dist</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>onedge_value</name> <operator>+</operator> <name>pixel_dist_scale</name> <operator>*</operator> <name>min_dist</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><name>iy0</name><operator>)</operator><operator>*</operator><name>w</name><operator>+</operator><operator>(</operator><name>x</name><operator>-</operator><name>ix0</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>precompute</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>verts</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>stbtt_GetCodepointSDF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>onedge_value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pixel_dist_scale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xoff</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetGlyphSDF</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><call><name>stbtt_FindGlyphIndex</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name>onedge_value</name></expr></argument>, <argument><expr><name>pixel_dist_scale</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>void</name></type> <name>stbtt_FreeSDF</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>STBTT_free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>stbtt_int32</name></type> <name>stbtt__CompareUTF8toUTF16_bigendian_prefix</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>len2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>ch</name> <init>= <expr><name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0xc0</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xd800</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <literal type="number">0xdc00</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint16</name></type> <name>ch2</name> <init>= <expr><name><name>s2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">3</literal> <operator>&gt;=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="number">0xd800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ch2</name> <operator>-</operator> <literal type="number">0xdc00</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0xf0</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>len2</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xdc00</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <literal type="number">0xe000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0xe0</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt_CompareUTF8toUTF16_bigendian_internal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>len1</name> <operator>==</operator> <call><name>stbtt__CompareUTF8toUTF16_bigendian_prefix</name><argument_list>(<argument><expr><operator>(</operator><name>stbtt_uint8</name><operator>*</operator><operator>)</operator> <name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><operator>(</operator><name>stbtt_uint8</name><operator>*</operator><operator>)</operator> <name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>STBTT_DEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbtt_GetFontNameString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>platformID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encodingID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>languageID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>count</name></decl>,<decl><type ref="prev"/><name>stringOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>offset</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>fontstart</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>nm</name> <init>= <expr><call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nm</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>nm</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stringOffset</name> <operator>=</operator> <name>nm</name> <operator>+</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>nm</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>loc</name> <init>= <expr><name>nm</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>platformID</name> <operator>==</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>encodingID</name> <operator>==</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>languageID</name> <operator>==</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>nameID</name> <operator>==</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>fc</name><operator>+</operator><name>stringOffset</name><operator>+</operator><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__matchpair</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint32</name></type> <name>nm</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>nlen</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>target_id</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>next_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>count</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>nm</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>stringOffset</name> <init>= <expr><name>nm</name> <operator>+</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>nm</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>loc</name> <init>= <expr><name>nm</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>id</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>target_id</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>platform</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>encoding</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>language</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>platform</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>platform</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>platform</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>slen</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>off</name> <init>= <expr><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>matchlen</name> <init>= <expr><call><name>stbtt__CompareUTF8toUTF16_bigendian_prefix</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>fc</name><operator>+</operator><name>stringOffset</name><operator>+</operator><name>off</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>matchlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>next_id</name> <operator>&amp;&amp;</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>platform</name> <operator>&amp;&amp;</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>encoding</name> <operator>&amp;&amp;</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>language</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>loc</name><operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>matchlen</name> <operator>==</operator> <name>nlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>matchlen</name> <operator>&lt;</operator> <name>nlen</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>matchlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>matchlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt_CompareUTF8toUTF16_bigendian_internal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>name</name><operator>+</operator><name>matchlen</name><operator>)</operator></expr></argument>, <argument><expr><name>nlen</name><operator>-</operator><name>matchlen</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>fc</name><operator>+</operator><name>stringOffset</name><operator>+</operator><name>off</name><operator>)</operator></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matchlen</name> <operator>==</operator> <name>nlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt__matches</name><parameter_list>(<parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>stbtt_uint8</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>nlen</name> <init>= <expr><operator>(</operator><name>stbtt_int32</name><operator>)</operator> <call><name>STBTT_strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbtt_uint32</name></type> <name>nm</name></decl>,<decl><type ref="prev"/><name>hd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbtt__isfont</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"head"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ttUSHORT</name><argument_list>(<argument><expr><name>fc</name><operator>+</operator><name>hd</name><operator>+</operator><literal type="number">44</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nm</name> <operator>=</operator> <call><name>stbtt__find_table</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nm</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stbtt__matchpair</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__matchpair</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__matchpair</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__matchpair</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__matchpair</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__matchpair</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbtt_FindMatchingFont_internal</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>font_collection</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name_utf8</name></decl></parameter>, <parameter><decl><type><name>stbtt_int32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbtt_int32</name></type> <name>off</name> <init>= <expr><call><name>stbtt_GetFontOffsetForIndex</name><argument_list>(<argument><expr><name>font_collection</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>off</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbtt__matches</name><argument_list>(<argument><expr><operator>(</operator><name>stbtt_uint8</name> <operator>*</operator><operator>)</operator> <name>font_collection</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>stbtt_uint8</name><operator>*</operator><operator>)</operator> <name>name_utf8</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>off</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wcast-qual"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_BakeFontBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>pixel_height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>first_char</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_chars</name></decl></parameter>, <parameter><decl><type><name>stbtt_bakedchar</name> <modifier>*</modifier></type><name>chardata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_BakeFontBitmap_internal</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>pixel_height</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>ph</name></expr></argument>, <argument><expr><name>first_char</name></expr></argument>, <argument><expr><name>num_chars</name></expr></argument>, <argument><expr><name>chardata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetFontOffsetForIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetFontOffsetForIndex_internal</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_GetNumberOfFonts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_GetNumberOfFonts_internal</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_InitFont</name><parameter_list>(<parameter><decl><type><name>stbtt_fontinfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_InitFont_internal</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_FindMatchingFont</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fontdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_FindMatchingFont_internal</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>fontdata</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBTT_DEF</name> <name>int</name></type> <name>stbtt_CompareUTF8toUTF16_bigendian</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stbtt_CompareUTF8toUTF16_bigendian_internal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




































































































</unit>
