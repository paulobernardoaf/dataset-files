<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\jar_mod.h">















































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_JAR_MOD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_JAR_MOD_H</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JARMOD_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARMOD_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JARMOD_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JARMOD_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>muchar</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>muint</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>mint</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>mulong</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMMAXCHANNELS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXNOTES</name></cpp:macro> <cpp:value>12*12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SAMPLE_RATE</name></cpp:macro> <cpp:value>48000</cpp:value></cpp:define>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>1</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>muchar</name></type> <name><name>name</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>finetune</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>reppnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>replen</name></decl>;</decl_stmt>
}</block></struct></type> <name>sample</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>muchar</name></type> <name>sampperiod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>sampeffect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>effect</name></decl>;</decl_stmt>
}</block></struct></type> <name>note</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>muchar</name></type> <name><name>title</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sample</name></type> <name><name>samples</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>muchar</name></type> <name>protracker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name><name>patterntable</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name><name>signature</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>speed</name></decl>;</decl_stmt>
}</block></struct></type> <name>module</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>)</name></cpp:pragma>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sampdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>sampnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>reppnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>replen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>samppos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>ticks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>effect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>parameffect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>effect_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>decalperiod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>portaspeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>portaperiod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>vibraperiod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name><name>Arpperiods</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>ArpIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>oldk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>volumeslide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>vibraparam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>vibrapointeur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>finetune</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>cut_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>patternloopcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>patternloopstartpoint</name></decl>;</decl_stmt>
}</block></struct></type> <name>channel</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>module</name></type> <name>song</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>sampledata</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>note</name><modifier>*</modifier></type> <name><name>patterndata</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mulong</name></type> <name>playrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>tablepos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>patternpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>patterndelay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>jump_loop_effect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muchar</name></type> <name>bpm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>patternticks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>patterntickse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>patternticksaim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>sampleticksconst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>samplenb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>channel</name></type> <name><name>channels</name><index>[<expr><name>NUMMAXCHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>number_of_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name><name>fullperiod</name><index>[<expr><name>MAXNOTES</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>mod_loaded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>last_r_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>last_l_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>stereo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>stereo_separation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mint</name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>muchar</name> <modifier>*</modifier></type><name>modfile</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mulong</name></type> <name>modfilesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>loopcount</name></decl>;</decl_stmt>
}</block></struct></type> <name>jar_mod_context_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>track_state_</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>instrument_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>cur_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cur_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>cur_effect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>cur_parameffect</name></decl>;</decl_stmt>
}</block></struct></type><name>track_state</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tracker_state_</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>number_of_tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bpm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_pattern_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_pattern_table_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>track_state</name></type> <name><name>tracks</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type><name>tracker_state</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tracker_state_instrument_</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type><name>tracker_state_instrument</name>;</typedef>

<typedef>typedef <type><struct>struct <name>jar_mod_tracker_buffer_state_</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>nb_max_of_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_of_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_rd_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tracker_state_instrument</name></type> <name><name>instruments</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tracker_state</name> <modifier>*</modifier></type> <name>track_state_buf</name></decl>;</decl_stmt>
}</block></struct></type><name>jar_mod_tracker_buffer_state</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>bool</name></type> <name>jar_mod_init</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>jar_mod_setcfg</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplerate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stereo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stereo_separation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>jar_mod_fillbuffer</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type> <name>outbuffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>nbsample</name></decl></parameter>, <parameter><decl><type><name>jar_mod_tracker_buffer_state</name> <modifier>*</modifier></type> <name>trkbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>jar_mod_unload</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mulong</name></type> <name>jar_mod_load_file</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mulong</name></type> <name>jar_mod_current_samples</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mulong</name></type> <name>jar_mod_max_samples</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>jar_mod_seek_start</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JAR_MOD_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_ARPEGGIO</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_PORTAMENTO_UP</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_PORTAMENTO_DOWN</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_TONE_PORTAMENTO</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_VIBRATO</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_VOLSLIDE_TONEPORTA</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_VOLSLIDE_VIBRATO</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_VOLSLIDE_TREMOLO</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_SET_PANNING</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_SET_OFFSET</name></cpp:macro> <cpp:value>0x9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_VOLUME_SLIDE</name></cpp:macro> <cpp:value>0xA</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_JUMP_POSITION</name></cpp:macro> <cpp:value>0xB</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_SET_VOLUME</name></cpp:macro> <cpp:value>0xC</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_PATTERN_BREAK</name></cpp:macro> <cpp:value>0xD</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_EXTENDED</name></cpp:macro> <cpp:value>0xE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_FINE_PORTA_UP</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_FINE_PORTA_DOWN</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_GLISSANDO_CTRL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_VIBRATO_WAVEFORM</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_SET_FINETUNE</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_PATTERN_LOOP</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_TREMOLO_WAVEFORM</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_SET_PANNING_2</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_RETRIGGER_NOTE</name></cpp:macro> <cpp:value>0x9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_FINE_VOLSLIDE_UP</name></cpp:macro> <cpp:value>0xA</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_FINE_VOLSLIDE_DOWN</name></cpp:macro> <cpp:value>0xB</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_NOTE_CUT</name></cpp:macro> <cpp:value>0xC</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_NOTE_DELAY</name></cpp:macro> <cpp:value>0xD</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_PATTERN_DELAY</name></cpp:macro> <cpp:value>0xE</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_E_INVERT_LOOP</name></cpp:macro> <cpp:value>0xF</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_SET_SPEED</name></cpp:macro> <cpp:value>0xF0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFFECT_SET_TEMPO</name></cpp:macro> <cpp:value>0xF2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERIOD_TABLE_LENGTH</name></cpp:macro> <cpp:value>MAXNOTES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULL_PERIOD_TABLE_LENGTH</name></cpp:macro> <cpp:value>( PERIOD_TABLE_LENGTH * 8 )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>short</name></type> <name><name>periodtable</name><index>[]</index></name><init>=
<expr><block>{
<expr><literal type="number">27392</literal></expr>, <expr><literal type="number">25856</literal></expr>, <expr><literal type="number">24384</literal></expr>, <expr><literal type="number">23040</literal></expr>, <expr><literal type="number">21696</literal></expr>, <expr><literal type="number">20480</literal></expr>, <expr><literal type="number">19328</literal></expr>, <expr><literal type="number">18240</literal></expr>, <expr><literal type="number">17216</literal></expr>, <expr><literal type="number">16256</literal></expr>, <expr><literal type="number">15360</literal></expr>, <expr><literal type="number">14496</literal></expr>,
<expr><literal type="number">13696</literal></expr>, <expr><literal type="number">12928</literal></expr>, <expr><literal type="number">12192</literal></expr>, <expr><literal type="number">11520</literal></expr>, <expr><literal type="number">10848</literal></expr>, <expr><literal type="number">10240</literal></expr>, <expr><literal type="number">9664</literal></expr>, <expr><literal type="number">9120</literal></expr>, <expr><literal type="number">8606</literal></expr>, <expr><literal type="number">8128</literal></expr>, <expr><literal type="number">7680</literal></expr>, <expr><literal type="number">7248</literal></expr>,
<expr><literal type="number">6848</literal></expr>, <expr><literal type="number">6464</literal></expr>, <expr><literal type="number">6096</literal></expr>, <expr><literal type="number">5760</literal></expr>, <expr><literal type="number">5424</literal></expr>, <expr><literal type="number">5120</literal></expr>, <expr><literal type="number">4832</literal></expr>, <expr><literal type="number">4560</literal></expr>, <expr><literal type="number">4304</literal></expr>, <expr><literal type="number">4064</literal></expr>, <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">3624</literal></expr>,
<expr><literal type="number">3424</literal></expr>, <expr><literal type="number">3232</literal></expr>, <expr><literal type="number">3048</literal></expr>, <expr><literal type="number">2880</literal></expr>, <expr><literal type="number">2712</literal></expr>, <expr><literal type="number">2560</literal></expr>, <expr><literal type="number">2416</literal></expr>, <expr><literal type="number">2280</literal></expr>, <expr><literal type="number">2152</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1812</literal></expr>,
<expr><literal type="number">1712</literal></expr>, <expr><literal type="number">1616</literal></expr>, <expr><literal type="number">1524</literal></expr>, <expr><literal type="number">1440</literal></expr>, <expr><literal type="number">1356</literal></expr>, <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">1208</literal></expr>, <expr><literal type="number">1140</literal></expr>, <expr><literal type="number">1076</literal></expr>, <expr><literal type="number">1016</literal></expr>, <expr><literal type="number">960</literal></expr>, <expr><literal type="number">906</literal></expr>,
<expr><literal type="number">856</literal></expr>, <expr><literal type="number">808</literal></expr>, <expr><literal type="number">762</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">678</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">604</literal></expr>, <expr><literal type="number">570</literal></expr>, <expr><literal type="number">538</literal></expr>, <expr><literal type="number">508</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">453</literal></expr>,
<expr><literal type="number">428</literal></expr>, <expr><literal type="number">404</literal></expr>, <expr><literal type="number">381</literal></expr>, <expr><literal type="number">360</literal></expr>, <expr><literal type="number">339</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">302</literal></expr>, <expr><literal type="number">285</literal></expr>, <expr><literal type="number">269</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">226</literal></expr>,
<expr><literal type="number">214</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">113</literal></expr>,
<expr><literal type="number">107</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>,
<expr><literal type="number">53</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>short</name></type> <name><name>sintable</name><index>[]</index></name><init>=<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">141</literal></expr>,<expr><literal type="number">161</literal></expr>,
<expr><literal type="number">180</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">250</literal></expr>,<expr><literal type="number">253</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">212</literal></expr>,<expr><literal type="number">197</literal></expr>,
<expr><literal type="number">180</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">24</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>modtype_</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>signature</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numberofchannels</name></decl>;</decl_stmt>
}</block></struct></type><name>modtype</name>;</typedef>

<decl_stmt><decl><type><name>modtype</name></type> <name><name>modlist</name><index>[]</index></name><init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"M!K!"</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"M.K."</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"FLT4"</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"FLT8"</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"4CHN"</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"6CHN"</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"8CHN"</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"10CH"</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"12CH"</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"14CH"</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"16CH"</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"18CH"</literal></expr>,<expr><literal type="number">18</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"20CH"</literal></expr>,<expr><literal type="number">20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"22CH"</literal></expr>,<expr><literal type="number">22</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"24CH"</literal></expr>,<expr><literal type="number">24</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"26CH"</literal></expr>,<expr><literal type="number">26</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"28CH"</literal></expr>,<expr><literal type="number">28</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"30CH"</literal></expr>,<expr><literal type="number">30</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"32CH"</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type> <name>memcopy</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>d</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>=</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memclear</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>dest</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>memcompare</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>buf1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>buf2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>size</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>buf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>buf2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getnote</name><parameter_list>( <parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>finetune</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FULL_PERIOD_TABLE_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>period</name> <operator>&gt;=</operator> <name><name>mod</name><operator>-&gt;</operator><name>fullperiod</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>MAXNOTES</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>worknote</name><parameter_list>( <parameter><decl><type><name>note</name> <modifier>*</modifier></type> <name>nptr</name></decl></parameter>, <parameter><decl><type><name>channel</name> <modifier>*</modifier></type> <name>cptr</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>mod</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>muint</name></type> <name>sample</name></decl>, <decl><type ref="prev"/><name>period</name></decl>, <decl><type ref="prev"/><name>effect</name></decl>, <decl><type ref="prev"/><name>operiod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>curnote</name></decl>, <decl><type ref="prev"/><name>arpnote</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <operator>(</operator><name><name>nptr</name><operator>-&gt;</operator><name>sampperiod</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>nptr</name><operator>-&gt;</operator><name>sampeffect</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>nptr</name><operator>-&gt;</operator><name>sampperiod</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>nptr</name><operator>-&gt;</operator><name>period</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>nptr</name><operator>-&gt;</operator><name>sampeffect</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>nptr</name><operator>-&gt;</operator><name>effect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>operiod</name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>period</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>period</name> <operator>||</operator> <name>sample</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>sample</name> <operator>&amp;&amp;</operator> <name>sample</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name> <operator>=</operator> <name>sample</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>period</name> <operator>||</operator> <name>sample</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>sampdata</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>mod</name><operator>-&gt;</operator><name>sampledata</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>reppnt</name></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name></expr>]</index></name><operator>.</operator><name>reppnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>replen</name></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name></expr>]</index></name><operator>.</operator><name>replen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>finetune</name></name> <operator>=</operator> <operator>(</operator><name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name></expr>]</index></name><operator>.</operator><name>finetune</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>effect</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>!=</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>effect</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>!=</operator><literal type="number">6</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>vibraperiod</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>vibrapointeur</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>sample</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>effect</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <name>EFFECT_VOLSLIDE_TONEPORTA</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name></expr>]</index></name><operator>.</operator><name>volume</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator><name>effect</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <name>EFFECT_TONE_PORTAMENTO</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>effect</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>!=</operator><name>EFFECT_VOLSLIDE_TONEPORTA</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>period</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>decalperiod</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>period</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>cptr</name><operator>-&gt;</operator><name>finetune</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>finetune</name></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>period</name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>fullperiod</name><index>[<expr><call><name>getnote</name><argument_list>(<argument><expr><name>mod</name></expr></argument>,<argument><expr><name>period</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cptr</name><operator>-&gt;</operator><name>finetune</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>period</name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>fullperiod</name><index>[<expr><call><name>getnote</name><argument_list>(<argument><expr><name>mod</name></expr></argument>,<argument><expr><name>period</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>finetune</name></name><operator>)</operator><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>period</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect_code</name></name> <operator>=</operator> <name>effect</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>effect</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EFFECT_ARPEGGIO</name></expr>:</case>










<if_stmt><if>if<condition>(<expr><name>effect</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_ARPEGGIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name> <operator>=</operator> <name>effect</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>ArpIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curnote</name> <operator>=</operator> <call><name>getnote</name><argument_list>(<argument><expr><name>mod</name></expr></argument>,<argument><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name></expr></argument>,<argument><expr><name><name>cptr</name><operator>-&gt;</operator><name>finetune</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>Arpperiods</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>period</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>arpnote</name> <operator>=</operator> <name>curnote</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>arpnote</name> <operator>&gt;=</operator> <name>FULL_PERIOD_TABLE_LENGTH</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arpnote</name> <operator>=</operator> <name>FULL_PERIOD_TABLE_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>Arpperiods</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>fullperiod</name><index>[<expr><name>arpnote</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>arpnote</name> <operator>=</operator> <name>curnote</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>arpnote</name> <operator>&gt;=</operator> <name>FULL_PERIOD_TABLE_LENGTH</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arpnote</name> <operator>=</operator> <name>FULL_PERIOD_TABLE_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>Arpperiods</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>fullperiod</name><index>[<expr><name>arpnote</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_PORTAMENTO_UP</name></expr>:</case>











<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_PORTAMENTO_UP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name> <operator>=</operator> <name>effect</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_PORTAMENTO_DOWN</name></expr>:</case>








<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_PORTAMENTO_DOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name> <operator>=</operator> <name>effect</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_TONE_PORTAMENTO</name></expr>:</case>











<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_TONE_PORTAMENTO</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>effect</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>portaspeed</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><name>effect</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>period</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name> <operator>=</operator> <name>period</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>operiod</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_VIBRATO</name></expr>:</case>










<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_VIBRATO</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>effect</name> <operator>&amp;</operator> <literal type="number">0x0F</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>vibraparam</name></name> <operator>=</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>vibraparam</name></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <name>effect</name> <operator>&amp;</operator> <literal type="number">0x0F</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>effect</name> <operator>&amp;</operator> <literal type="number">0xF0</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>vibraparam</name></name> <operator>=</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>vibraparam</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <name>effect</name> <operator>&amp;</operator> <literal type="number">0xF0</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_VOLSLIDE_TONEPORTA</name></expr>:</case>










<if_stmt><if>if<condition>( <expr><name>period</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name> <operator>=</operator> <name>period</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>operiod</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_VOLSLIDE_TONEPORTA</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>effect</name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name> <operator>=</operator> <operator>(</operator> <name>effect</name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_VOLSLIDE_VIBRATO</name></expr>:</case>








<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_VOLSLIDE_VIBRATO</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name> <operator>=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_SET_OFFSET</name></expr>:</case>








<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>effect</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">4096</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>effect</name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator><operator>*</operator><literal type="number">256</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_VOLUME_SLIDE</name></expr>:</case>








<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_VOLUME_SLIDE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name> <operator>=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_JUMP_POSITION</name></expr>:</case>








<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>&gt;=</operator> <name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>jump_loop_effect</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_SET_VOLUME</name></expr>:</case>






<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_PATTERN_BREAK</name></expr>:</case>








<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>effect</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>effect</name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator> <operator>)</operator> <operator>*</operator> <name><name>mod</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>jump_loop_effect</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>tablepos</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>&gt;=</operator> <name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_EXTENDED</name></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><name>effect</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>EFFECT_E_FINE_PORTA_UP</name></expr>:</case>








<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>-=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&lt;</operator> <literal type="number">113</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <literal type="number">113</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_E_FINE_PORTA_DOWN</name></expr>:</case>







<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>+=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&gt;</operator> <literal type="number">856</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <literal type="number">856</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_E_FINE_VOLSLIDE_UP</name></expr>:</case>








<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>+=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name><operator>&gt;</operator><literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_E_FINE_VOLSLIDE_DOWN</name></expr>:</case>







<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>-=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>&gt;</operator> <literal type="number">200</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_E_PATTERN_LOOP</name></expr>:</case>











<if_stmt><if>if<condition>( <expr><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>patternloopcnt</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>patternloopcnt</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>patternloopcnt</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>patternloopstartpoint</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>jump_loop_effect</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>patternloopstartpoint</name></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>patternpos</name></name></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>patternloopcnt</name></name> <operator>=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>patternloopstartpoint</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>jump_loop_effect</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>patternloopstartpoint</name></name> <operator>=</operator> <name><name>mod</name><operator>-&gt;</operator><name>patternpos</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_E_PATTERN_DELAY</name></expr>:</case>









<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patterndelay</name></name> <operator>=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_E_NOTE_CUT</name></expr>:</case>









<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>EFFECT_E_NOTE_CUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>cut_param</name></name> <operator>=</operator> <operator>(</operator><name>effect</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>cptr</name><operator>-&gt;</operator><name>cut_param</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="number">0xF</literal></expr>:</case>




























<if_stmt><if>if<condition>( <expr><operator>(</operator><name>effect</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x21</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>effect</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <name>effect</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patternticksaim</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>mod</name><operator>-&gt;</operator><name>playrate</name></name> <operator>*</operator> <literal type="number">5</literal> <operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>mod</name><operator>-&gt;</operator><name>bpm</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>effect</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0x21</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>bpm</name></name> <operator>=</operator> <name>effect</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>patternticksaim</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>mod</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>mod</name><operator>-&gt;</operator><name>playrate</name></name> <operator>*</operator> <literal type="number">5</literal> <operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>mod</name><operator>-&gt;</operator><name>bpm</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>workeffect</name><parameter_list>( <parameter><decl><type><name>note</name> <modifier>*</modifier></type> <name>nptr</name></decl></parameter>, <parameter><decl><type><name>channel</name> <modifier>*</modifier></type> <name>cptr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EFFECT_ARPEGGIO</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>decalperiod</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>-</operator> <name><name>cptr</name><operator>-&gt;</operator><name>Arpperiods</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>ArpIndex</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>ArpIndex</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>ArpIndex</name></name><operator>&gt;</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>ArpIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_PORTAMENTO_UP</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>-=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&lt;</operator> <literal type="number">113</literal> <operator>||</operator> <name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&gt;</operator> <literal type="number">20000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <literal type="number">113</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_PORTAMENTO_DOWN</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>+=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&gt;</operator> <literal type="number">20000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <literal type="number">20000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_VOLSLIDE_TONEPORTA</name></expr>:</case>
<case>case <expr><name>EFFECT_TONE_PORTAMENTO</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>!=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&gt;</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>-</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name> <operator>&gt;=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaspeed</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>-=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaspeed</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name> <operator>-</operator> <name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>&gt;=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaspeed</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>+=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaspeed</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>==</operator> <name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>portaperiod</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>==</operator> <name>EFFECT_VOLSLIDE_TONEPORTA</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name> <operator>&gt;</operator> <literal type="number">0x0F</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>+</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name><operator>&gt;</operator><literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>-</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name><operator>&gt;</operator><literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_VOLSLIDE_VIBRATO</name></expr>:</case>
<case>case <expr><name>EFFECT_VIBRATO</name></expr>:</case>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>vibraperiod</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>vibraparam</name></name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator> <operator>*</operator> <name><name>sintable</name><index>[<expr><name><name>cptr</name><operator>-&gt;</operator><name>vibrapointeur</name></name><operator>&amp;</operator><literal type="number">0x1F</literal></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>vibrapointeur</name></name> <operator>&gt;</operator> <literal type="number">31</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>vibraperiod</name></name> <operator>=</operator> <operator>-</operator><name><name>cptr</name><operator>-&gt;</operator><name>vibraperiod</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>vibrapointeur</name></name> <operator>=</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>vibrapointeur</name></name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>vibraparam</name></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>effect</name></name> <operator>==</operator> <name>EFFECT_VOLSLIDE_VIBRATO</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name> <operator>&gt;</operator> <literal type="number">0xF</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name><operator>+</operator><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>-</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EFFECT_VOLUME_SLIDE</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name> <operator>&gt;</operator> <literal type="number">0xF</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>+=</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>-=</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>volumeslide</name></name><operator>&amp;</operator><literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>EFFECT_E_NOTE_CUT</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>cptr</name><operator>-&gt;</operator><name>cut_param</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>cut_param</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>cptr</name><operator>-&gt;</operator><name>cut_param</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>


<function><type><name>bool</name></type> <name>jar_mod_init</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>muint</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>modctx</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><name>modctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jar_mod_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>playrate</name></name> <operator>=</operator> <name>DEFAULT_SAMPLE_RATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>stereo_separation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PERIOD_TABLE_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>fullperiod</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>periodtable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator> <name><name>periodtable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>periodtable</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jar_mod_setcfg</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplerate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stereo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stereo_separation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>modctx</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>playrate</name></name> <operator>=</operator> <name>samplerate</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>stereo</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>stereo_separation</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>stereo_separation</name></name> <operator>=</operator> <name>stereo_separation</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>bits</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>bits</name> <operator>==</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>filter</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>jar_mod_load</name><parameter_list>( <parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>mod_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mod_data_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>muint</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sample</name> <modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>modmemory</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type> <name>endmodmemory</name></decl>;</decl_stmt>

<expr_stmt><expr><name>modmemory</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>mod_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endmodmemory</name> <operator>=</operator> <name>modmemory</name> <operator>+</operator> <name>mod_data_size</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>modmemory</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>modctx</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>title</name></name><operator>)</operator></expr></argument>,<argument><expr><name>modmemory</name></expr></argument>,<argument><expr><literal type="number">1084</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name><name>modlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numberofchannels</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>memcompare</name><argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>signature</name></name></expr></argument>,<argument><expr><name><name>modlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name> <operator>=</operator> <name><name>modlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numberofchannels</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>memcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>signature</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"M.K."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>length</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modmemory</name> <operator>+=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>modmemory</name> <operator>+=</operator> <literal type="number">1084</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>modmemory</name> <operator>&gt;=</operator> <name>endmodmemory</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><name>max</name> <operator>&lt;=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>patterntable</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterndata</name><index>[<expr><name>max</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>note</name><operator>*</operator><operator>)</operator><name>modmemory</name></expr>;</expr_stmt>
<expr_stmt><expr><name>modmemory</name> <operator>+=</operator> <operator>(</operator><literal type="number">256</literal><operator>*</operator><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>modmemory</name> <operator>&gt;=</operator> <name>endmodmemory</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></while>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>sampledata</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>sptr</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>sptr</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>t</name><operator>=</operator> <operator>(</operator><name><name>sptr</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;</operator><literal type="number">0xFF00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name><name>sptr</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sptr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>t</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name><operator>=</operator> <operator>(</operator><name><name>sptr</name><operator>-&gt;</operator><name>reppnt</name></name> <operator>&amp;</operator><literal type="number">0xFF00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name><name>sptr</name><operator>-&gt;</operator><name>reppnt</name></name> <operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sptr</name><operator>-&gt;</operator><name>reppnt</name></name> <operator>=</operator> <name>t</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name><operator>=</operator> <operator>(</operator><name><name>sptr</name><operator>-&gt;</operator><name>replen</name></name> <operator>&amp;</operator><literal type="number">0xFF00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name><name>sptr</name><operator>-&gt;</operator><name>replen</name></name> <operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sptr</name><operator>-&gt;</operator><name>replen</name></name> <operator>=</operator> <name>t</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sptr</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>sampledata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>modmemory</name></expr>;</expr_stmt>
<expr_stmt><expr><name>modmemory</name> <operator>+=</operator> <name><name>sptr</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sptr</name><operator>-&gt;</operator><name>replen</name></name> <operator>+</operator> <name><name>sptr</name><operator>-&gt;</operator><name>reppnt</name></name> <operator>&gt;</operator> <name><name>sptr</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sptr</name><operator>-&gt;</operator><name>replen</name></name> <operator>=</operator> <name><name>sptr</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>sptr</name><operator>-&gt;</operator><name>reppnt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>modmemory</name> <operator>&gt;</operator> <name>endmodmemory</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></for>



<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>bpm</name></name> <operator>=</operator> <literal type="number">125</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>samplenb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternticks</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name> <operator>*</operator> <name><name>modctx</name><operator>-&gt;</operator><name>playrate</name></name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator><operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>modctx</name><operator>-&gt;</operator><name>bpm</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternticksaim</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name> <operator>*</operator> <name><name>modctx</name><operator>-&gt;</operator><name>playrate</name></name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>modctx</name><operator>-&gt;</operator><name>bpm</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>sampleticksconst</name></name> <operator>=</operator> <literal type="number">3546894UL</literal> <operator>/</operator> <name><name>modctx</name><operator>-&gt;</operator><name>playrate</name></name></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>volume</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>period</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>mod_loaded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jar_mod_fillbuffer</name><parameter_list>( <parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type> <name>outbuffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>nbsample</name></decl></parameter>, <parameter><decl><type><name>jar_mod_tracker_buffer_state</name> <modifier>*</modifier></type> <name>trkbuf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>state_remaining_steps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ll</name></decl>,<decl><type ref="prev"/><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl</name></decl>,<decl><type ref="prev"/><name>tr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>finalperiod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>note</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>channel</name> <modifier>*</modifier></type><name>cptr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>modctx</name> <operator>&amp;&amp;</operator> <name>outbuffer</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>modctx</name><operator>-&gt;</operator><name>mod_loaded</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>state_remaining_steps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>trkbuf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>cur_rd_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcopy</name><argument_list>(<argument><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>title</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">31</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcopy</name><argument_list>(<argument><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>instruments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>instruments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>last_l_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lr</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>last_r_sample</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbsample</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>modctx</name><operator>-&gt;</operator><name>patternticks</name></name><operator>++</operator> <operator>&gt;</operator> <name><name>modctx</name><operator>-&gt;</operator><name>patternticksaim</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>modctx</name><operator>-&gt;</operator><name>patterndelay</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>nptr</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>patterndata</name><index>[<expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>patterntable</name><index>[<expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternticks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterntickse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>c</name><operator>&lt;</operator><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>worknote</name><argument_list>(<argument><expr><operator>(</operator><name>note</name><operator>*</operator><operator>)</operator><operator>(</operator><name>nptr</name><operator>+</operator><name>c</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>channel</name><operator>*</operator><operator>)</operator><operator>(</operator><name>cptr</name><operator>+</operator><name>c</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>c</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>modctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>modctx</name><operator>-&gt;</operator><name>jump_loop_effect</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>+=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>jump_loop_effect</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>==</operator> <literal type="number">64</literal><operator>*</operator><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>&gt;=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>loopcount</name></name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterndelay</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternticks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterntickse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>modctx</name><operator>-&gt;</operator><name>patterntickse</name></name><operator>++</operator> <operator>&gt;</operator> <operator>(</operator><name><name>modctx</name><operator>-&gt;</operator><name>patternticksaim</name></name><operator>/</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>nptr</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>patterndata</name><index>[<expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>patterntable</name><index>[<expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>c</name><operator>&lt;</operator><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>workeffect</name><argument_list>(<argument><expr><name>nptr</name><operator>+</operator><name>c</name></expr></argument>, <argument><expr><name>cptr</name><operator>+</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterntickse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name>trkbuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>state_remaining_steps</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name> <operator>&lt;</operator> <name><name>trkbuf</name><operator>-&gt;</operator><name>nb_max_of_state</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tracker_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>cptr</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>cptr</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>finalperiod</name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>period</name></name> <operator>-</operator> <name><name>cptr</name><operator>-&gt;</operator><name>decalperiod</name></name> <operator>-</operator> <name><name>cptr</name><operator>-&gt;</operator><name>vibraperiod</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>finalperiod</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>+=</operator> <operator>(</operator> <operator>(</operator><name><name>modctx</name><operator>-&gt;</operator><name>sampleticksconst</name></name><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>/</operator> <name>finalperiod</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>ticks</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>replen</name></name><operator>&lt;=</operator><literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name><operator>&gt;&gt;</operator><literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>reppnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>length</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>%</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>cptr</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name><operator>&gt;&gt;</operator><literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>replen</name></name><operator>+</operator><name><name>cptr</name><operator>-&gt;</operator><name>reppnt</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>reppnt</name></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>%</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>cptr</name><operator>-&gt;</operator><name>replen</name></name><operator>+</operator><name><name>cptr</name><operator>-&gt;</operator><name>reppnt</name></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>samppos</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>sampdata</name></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator><literal type="number">2</literal><operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>(</operator> <name><name>cptr</name><operator>-&gt;</operator><name>sampdata</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cptr</name><operator>-&gt;</operator><name>sampdata</name></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator><literal type="number">3</literal><operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <operator>(</operator> <name><name>cptr</name><operator>-&gt;</operator><name>sampdata</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>trkbuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>state_remaining_steps</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name> <operator>&lt;</operator> <name><name>trkbuf</name><operator>-&gt;</operator><name>nb_max_of_state</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name>number_of_tracks</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name>buf_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name>cur_pattern</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>patterntable</name><index>[<expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name>cur_pattern_pos</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>/</operator> <name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name>cur_pattern_table_pos</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name>bpm</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>song</name><operator>.</operator><name>speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cur_effect</name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>effect_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cur_parameffect</name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>parameffect</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cur_period</name> <operator>=</operator> <name>finalperiod</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cur_volume</name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>volume</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name><index>[<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name></expr>]</index></name><operator>.</operator><name><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>instrument_number</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>cptr</name><operator>-&gt;</operator><name>sampnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>trkbuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>state_remaining_steps</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>state_remaining_steps</name> <operator>=</operator> <name><name>trkbuf</name><operator>-&gt;</operator><name>sample_step</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name> <operator>&lt;</operator> <name><name>trkbuf</name><operator>-&gt;</operator><name>nb_max_of_state</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>state_remaining_steps</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tr</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>modctx</name><operator>-&gt;</operator><name>filter</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>l</name><operator>+</operator><name>ll</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name><operator>+</operator><name>lr</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>modctx</name><operator>-&gt;</operator><name>stereo_separation</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>l</name><operator>+</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name><operator>+</operator><operator>(</operator><name>l</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>l</name> <operator>&gt;</operator> <literal type="number">32767</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>l</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">32768</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>r</name> <operator>&gt;</operator> <literal type="number">32767</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>r</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">32768</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>outbuffer</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuffer</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ll</name> <operator>=</operator> <name>tl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lr</name> <operator>=</operator> <name>tr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>last_l_sample</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>last_r_sample</name></name> <operator>=</operator> <name>lr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>samplenb</name></name> <operator>=</operator> <name><name>modctx</name><operator>-&gt;</operator><name>samplenb</name></name><operator>+</operator><name>nbsample</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbsample</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name><name>outbuffer</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuffer</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>trkbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>nb_of_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>cur_rd_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>track_state_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tracker_state</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>trkbuf</name><operator>-&gt;</operator><name>nb_max_of_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>instruments</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>trkbuf</name><operator>-&gt;</operator><name>instruments</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>jar_mod_reset</name><parameter_list>( <parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>modctx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modctx</name><operator>-&gt;</operator><name>song</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>song</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modctx</name><operator>-&gt;</operator><name>sampledata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>sampledata</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modctx</name><operator>-&gt;</operator><name>patterndata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterndata</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>tablepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterndelay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>jump_loop_effect</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>bpm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternticks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patterntickse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>patternticksaim</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>sampleticksconst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>samplenb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memclear</name><argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>number_of_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>mod_loaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>last_r_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>last_l_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>jar_mod_init</name><argument_list>(<argument><expr><name>modctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jar_mod_unload</name><parameter_list>( <parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>modctx</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>JARMOD_FREE</name><argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfilesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>loopcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jar_mod_reset</name><argument_list>(<argument><expr><name>modctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>mulong</name></type> <name>jar_mod_load_file</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mulong</name></type> <name>fsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>JARMOD_FREE</name><argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>f</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fsize</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fsize</name> <operator>&amp;&amp;</operator> <name>fsize</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name> <operator>=</operator> <call><name>JARMOD_MALLOC</name><argument_list>(<argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfilesize</name></name> <operator>=</operator> <name>fsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>jar_mod_load</name><argument_list>(<argument><expr><name>modctx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>modctx</name><operator>-&gt;</operator><name>modfile</name></name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>fsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>mulong</name></type> <name>jar_mod_current_samples</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>modctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>modctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>modctx</name><operator>-&gt;</operator><name>samplenb</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>mulong</name></type> <name>jar_mod_max_samples</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mint</name></type> <name><name>buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>lastcount</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>loopcount</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>loopcount</name></name> <operator>&lt;=</operator> <name>lastcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jar_mod_fillbuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>samplenb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jar_mod_seek_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>jar_mod_seek_start</name><parameter_list>(<parameter><decl><type><name>jar_mod_context_t</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>modfile</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>muchar</name><modifier>*</modifier></type> <name>ftmp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>modfile</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mulong</name></type> <name>stmp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>modfilesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>muint</name></type> <name>lcnt</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>loopcount</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>jar_mod_reset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>jar_mod_load</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ftmp</name></expr></argument>, <argument><expr><name>stmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>modfile</name></name> <operator>=</operator> <name>ftmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>modfilesize</name></name> <operator>=</operator> <name>stmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>loopcount</name></name> <operator>=</operator> <name>lcnt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
