<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\deps\mingw\xinput.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WINE_XINPUT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__WINE_XINPUT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windef.h&gt;</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_DPAD_UP</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_DPAD_DOWN</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_DPAD_LEFT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_DPAD_RIGHT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_START</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_BACK</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_LEFT_THUMB</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_RIGHT_THUMB</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_LEFT_SHOULDER</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_RIGHT_SHOULDER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_A</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_B</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_X</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_Y</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_KEYSTROKE_KEYDOWN</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_KEYSTROKE_KEYUP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_KEYSTROKE_REPEAT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_A</name></cpp:macro> <cpp:value>0x5800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_B</name></cpp:macro> <cpp:value>0x5801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_X</name></cpp:macro> <cpp:value>0x5802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_Y</name></cpp:macro> <cpp:value>0x5803</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RSHOULDER</name></cpp:macro> <cpp:value>0x5804</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LSHOULDER</name></cpp:macro> <cpp:value>0x5805</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTRIGGER</name></cpp:macro> <cpp:value>0x5806</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTRIGGER</name></cpp:macro> <cpp:value>0x5807</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_DPAD_UP</name></cpp:macro> <cpp:value>0x5810</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_DPAD_DOWN</name></cpp:macro> <cpp:value>0x5811</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_DPAD_LEFT</name></cpp:macro> <cpp:value>0x5812</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_DPAD_RIGHT</name></cpp:macro> <cpp:value>0x5813</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_START</name></cpp:macro> <cpp:value>0x5814</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_BACK</name></cpp:macro> <cpp:value>0x5815</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_PRESS</name></cpp:macro> <cpp:value>0x5816</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_PRESS</name></cpp:macro> <cpp:value>0x5817</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_UP</name></cpp:macro> <cpp:value>0x5820</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_DOWN</name></cpp:macro> <cpp:value>0x5821</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_RIGHT</name></cpp:macro> <cpp:value>0x5822</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_LEFT</name></cpp:macro> <cpp:value>0x5823</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_UPLEFT</name></cpp:macro> <cpp:value>0x5824</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_UPRIGHT</name></cpp:macro> <cpp:value>0x5825</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_DOWNRIGHT</name></cpp:macro> <cpp:value>0x5826</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_LTHUMB_DOWNLEFT</name></cpp:macro> <cpp:value>0x5827</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_UP</name></cpp:macro> <cpp:value>0x5830</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_DOWN</name></cpp:macro> <cpp:value>0x5831</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_RIGHT</name></cpp:macro> <cpp:value>0x5832</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_LEFT</name></cpp:macro> <cpp:value>0x5833</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_UPLEFT</name></cpp:macro> <cpp:value>0x5834</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_UPRIGHT</name></cpp:macro> <cpp:value>0x5835</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_DOWNRIGHT</name></cpp:macro> <cpp:value>0x5836</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAD_RTHUMB_DOWNLEFT</name></cpp:macro> <cpp:value>0x5837</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE</name></cpp:macro> <cpp:value>7849</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE</name></cpp:macro> <cpp:value>8689</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_GAMEPAD_TRIGGER_THRESHOLD</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVTYPE_GAMEPAD</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_GAMEPAD</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_WHEEL</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_ARCADE_STICK</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_FLIGHT_SICK</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_DANCE_PAD</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_GUITAR</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_DEVSUBTYPE_DRUM_KIT</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_CAPS_VOICE_SUPPORTED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_FLAG_GAMEPAD</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_DEVTYPE_GAMEPAD</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_DEVTYPE_HEADSET</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_TYPE_DISCONNECTED</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_TYPE_WIRED</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_TYPE_ALKALINE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_TYPE_NIMH</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_TYPE_UNKNOWN</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_LEVEL_EMPTY</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_LEVEL_LOW</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_LEVEL_MEDIUM</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATTERY_LEVEL_FULL</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XUSER_MAX_COUNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XUSER_INDEX_ANY</name></cpp:macro> <cpp:value>0x000000FF</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>_XINPUT_GAMEPAD</name> <block>{
<decl_stmt><decl><type><name>WORD</name></type> <name>wButtons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>bLeftTrigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>bRightTrigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHORT</name></type> <name>sThumbLX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHORT</name></type> <name>sThumbLY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHORT</name></type> <name>sThumbRX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHORT</name></type> <name>sThumbRY</name></decl>;</decl_stmt>
}</block></struct></type> <name>XINPUT_GAMEPAD</name><operator>,</operator> *<name>PXINPUT_GAMEPAD</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_XINPUT_STATE</name> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPacketNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XINPUT_GAMEPAD</name></type> <name>Gamepad</name></decl>;</decl_stmt>
}</block></struct></type> <name>XINPUT_STATE</name><operator>,</operator> *<name>PXINPUT_STATE</name>;</typedef>







<typedef>typedef <type><struct>struct <name>_XINPUT_VIBRATION</name> <block>{
<decl_stmt><decl><type><name>WORD</name></type> <name>wLeftMotorSpeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>wRightMotorSpeed</name></decl>;</decl_stmt>
}</block></struct></type> <name>XINPUT_VIBRATION</name><operator>,</operator> *<name>PXINPUT_VIBRATION</name>;</typedef>









<typedef>typedef <type><struct>struct <name>_XINPUT_CAPABILITIES</name> <block>{
<decl_stmt><decl><type><name>BYTE</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>SubType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XINPUT_GAMEPAD</name></type> <name>Gamepad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XINPUT_VIBRATION</name></type> <name>Vibration</name></decl>;</decl_stmt>
}</block></struct></type> <name>XINPUT_CAPABILITIES</name><operator>,</operator> *<name>PXINPUT_CAPABILITIES</name>;</typedef>





<typedef>typedef <type><struct>struct <name>_XINPUT_KEYSTROKE</name> <block>{
<decl_stmt><decl><type><name>WORD</name></type> <name>VirtualKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name>Unicode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>UserIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>HidCode</name></decl>;</decl_stmt>
}</block></struct></type> <name>XINPUT_KEYSTROKE</name><operator>,</operator> *<name>PXINPUT_KEYSTROKE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_XINPUT_BATTERY_INFORMATION</name>
<block>{
<decl_stmt><decl><type><name>BYTE</name></type> <name>BatteryType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>BatteryLevel</name></decl>;</decl_stmt>
}</block></struct></type> <name>XINPUT_BATTERY_INFORMATION</name><operator>,</operator> *<name>PXINPUT_BATTERY_INFORMATION</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name> <name>WINAPI</name></type> <name>XInputEnable</name><parameter_list>(<parameter><decl><type><name>WINBOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name> <name>WINAPI</name></type> <name>XInputSetState</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_VIBRATION</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name> <name>WINAPI</name></type> <name>XInputGetState</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_STATE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name> <name>WINAPI</name></type> <name>XInputGetKeystroke</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>PXINPUT_KEYSTROKE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name> <name>WINAPI</name></type> <name>XInputGetCapabilities</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_CAPABILITIES</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name> <name>WINAPI</name></type> <name>XInputGetDSoundAudioDeviceGuids</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GUID</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name> <name>WINAPI</name></type> <name>XInputGetBatteryInformation</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>BYTE</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_BATTERY_INFORMATION</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
