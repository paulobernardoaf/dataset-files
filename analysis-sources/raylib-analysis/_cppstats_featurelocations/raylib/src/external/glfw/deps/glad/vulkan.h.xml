<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\deps\glad\vulkan.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_VULKAN_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_VULKAN_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VULKAN_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> header already included (API: vulkan), remove previous include!</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VULKAN_H_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VULKAN_CORE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> header already included (API: vulkan), remove previous include!</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VULKAN_CORE_H_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_VULKAN</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_WIN32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_WIN32</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_APPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_APPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_APPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_EMSCRIPTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_EMSCRIPTEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_EMSCRIPTEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>winapifamily</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1700</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>_USING_V110_SDK71_</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_INTERNAL_HAVE_WINAPIFAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winapifamily.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>WINAPI_FAMILY_PARTITION</name><argument_list>(<argument><expr><name>WINAPI_PARTITION_DESKTOP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>WINAPI_FAMILY_PARTITION</name><argument_list>(<argument><expr><name>WINAPI_PARTITION_APP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_UWP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_PLATFORM_UWP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GNUC_EXTENSION</name></cpp:macro> <cpp:value>__extension__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GNUC_EXTENSION</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GLAD_PLATFORM_WIN32</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__attribute__ ((dllexport)) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__declspec(dllexport) extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__attribute__ ((dllimport)) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__declspec(dllimport) extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLAD_API_CALL_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default"))) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_CALL</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_PTR</name></cpp:macro> <cpp:value>APIENTRY</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GLAD_PLATFORM_WIN32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_PTR</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_API_PTR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>GLAD_API_CALL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPIENTRY</name></cpp:macro> <cpp:value>GLAD_API_PTR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_MAKE_VERSION</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(major * 10000 + minor)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_VERSION_MAJOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(version / 10000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_VERSION_MINOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(version % 10000)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLADapiproc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLADapiproc</name></type> (<modifier>*</modifier><name>GLADloadfunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLADapiproc</name></type> (<modifier>*</modifier><name>GLADuserptrloadfunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLADprecallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>GLADapiproc</name></type> <name>apiproc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_args</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLADpostcallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>GLADapiproc</name></type> <name>apiproc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_args</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_ATTACHMENT_UNUSED</name></cpp:macro> <cpp:value>(~0U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_EXT_DEBUG_REPORT_EXTENSION_NAME</name></cpp:macro> <cpp:value>"VK_EXT_debug_report"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_EXT_DEBUG_REPORT_SPEC_VERSION</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_KHR_SURFACE_EXTENSION_NAME</name></cpp:macro> <cpp:value>"VK_KHR_surface"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_KHR_SURFACE_SPEC_VERSION</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_KHR_SWAPCHAIN_EXTENSION_NAME</name></cpp:macro> <cpp:value>"VK_KHR_swapchain"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_KHR_SWAPCHAIN_SPEC_VERSION</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_LOD_CLAMP_NONE</name></cpp:macro> <cpp:value>1000.0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_LUID_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MAX_DESCRIPTION_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MAX_DEVICE_GROUP_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MAX_EXTENSION_NAME_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MAX_MEMORY_HEAPS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MAX_MEMORY_TYPES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MAX_PHYSICAL_DEVICE_NAME_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_QUEUE_FAMILY_EXTERNAL</name></cpp:macro> <cpp:value>(~0U-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_QUEUE_FAMILY_IGNORED</name></cpp:macro> <cpp:value>(~0U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_REMAINING_ARRAY_LAYERS</name></cpp:macro> <cpp:value>(~0U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_REMAINING_MIP_LEVELS</name></cpp:macro> <cpp:value>(~0U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_SUBPASS_EXTERNAL</name></cpp:macro> <cpp:value>(~0U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_UUID_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_WHOLE_SIZE</name></cpp:macro> <cpp:value>(~0ULL)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/vk_platform.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MAKE_VERSION</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((major) &lt;&lt; 22) | ((minor) &lt;&lt; 12) | (patch))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_VERSION_MAJOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(version) &gt;&gt; 22)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_VERSION_MINOR</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)(version) &gt;&gt; 12) &amp; 0x3ff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_VERSION_PATCH</name><parameter_list>(<parameter><type><name>version</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(version) &amp; 0xfff)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_API_VERSION_1_0</name></cpp:macro> <cpp:value>VK_MAKE_VERSION(1, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_API_VERSION_1_1</name></cpp:macro> <cpp:value>VK_MAKE_VERSION(1, 1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_HEADER_VERSION</name></cpp:macro> <cpp:value>106</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_DEFINE_HANDLE</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct object##_T* object;</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ILP32__</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ia64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>_M_IA64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct object##_T *object;</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef uint64_t object;</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_NULL_HANDLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>








<macro><name>VK_DEFINE_HANDLE</name><argument_list>(<argument>VkInstance</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_HANDLE</name><argument_list>(<argument>VkPhysicalDevice</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_HANDLE</name><argument_list>(<argument>VkDevice</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_HANDLE</name><argument_list>(<argument>VkQueue</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_HANDLE</name><argument_list>(<argument>VkCommandBuffer</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkDeviceMemory</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkCommandPool</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkBuffer</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkBufferView</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkImage</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkImageView</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkShaderModule</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkPipeline</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkPipelineLayout</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkSampler</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkDescriptorSet</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkDescriptorSetLayout</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkDescriptorPool</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkFence</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkSemaphore</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkEvent</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkQueryPool</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkFramebuffer</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkRenderPass</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkPipelineCache</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkDescriptorUpdateTemplate</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkSamplerYcbcrConversion</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkSurfaceKHR</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkSwapchainKHR</argument>)</argument_list></macro>
<macro><name>VK_DEFINE_NON_DISPATCHABLE_HANDLE</name><argument_list>(<argument>VkDebugReportCallbackEXT</argument>)</argument_list></macro>
<typedef>typedef <type><enum>enum <name>VkAttachmentLoadOp</name> <block>{
<decl><name>VK_ATTACHMENT_LOAD_OP_LOAD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_ATTACHMENT_LOAD_OP_CLEAR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_ATTACHMENT_LOAD_OP_DONT_CARE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkAttachmentLoadOp</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkAttachmentStoreOp</name> <block>{
<decl><name>VK_ATTACHMENT_STORE_OP_STORE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_ATTACHMENT_STORE_OP_DONT_CARE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkAttachmentStoreOp</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkBlendFactor</name> <block>{
<decl><name>VK_BLEND_FACTOR_ZERO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_SRC_COLOR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_DST_COLOR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_SRC_ALPHA</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_DST_ALPHA</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_CONSTANT_COLOR</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_CONSTANT_ALPHA</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_SRC_ALPHA_SATURATE</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_SRC1_COLOR</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_SRC1_ALPHA</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>
}</block></enum></type> <name>VkBlendFactor</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkBlendOp</name> <block>{
<decl><name>VK_BLEND_OP_ADD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_BLEND_OP_SUBTRACT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_BLEND_OP_REVERSE_SUBTRACT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_BLEND_OP_MIN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_BLEND_OP_MAX</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkBlendOp</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkBorderColor</name> <block>{
<decl><name>VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_BORDER_COLOR_INT_TRANSPARENT_BLACK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_BORDER_COLOR_INT_OPAQUE_BLACK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_BORDER_COLOR_INT_OPAQUE_WHITE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block></enum></type> <name>VkBorderColor</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VkPipelineCacheHeaderVersion</name> <block>{
<decl><name>VK_PIPELINE_CACHE_HEADER_VERSION_ONE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkPipelineCacheHeaderVersion</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VkDeviceQueueCreateFlagBits</name> <block>{
<decl><name>VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkDeviceQueueCreateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkBufferCreateFlagBits</name> <block>{
<decl><name>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_BUFFER_CREATE_SPARSE_ALIASED_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_BUFFER_CREATE_PROTECTED_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>VkBufferCreateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkBufferUsageFlagBits</name> <block>{
<decl><name>VK_BUFFER_USAGE_TRANSFER_SRC_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_TRANSFER_DST_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_STORAGE_BUFFER_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_INDEX_BUFFER_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>
}</block></enum></type> <name>VkBufferUsageFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkColorComponentFlagBits</name> <block>{
<decl><name>VK_COLOR_COMPONENT_R_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_COLOR_COMPONENT_G_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_COLOR_COMPONENT_B_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_COLOR_COMPONENT_A_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>VkColorComponentFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkComponentSwizzle</name> <block>{
<decl><name>VK_COMPONENT_SWIZZLE_IDENTITY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_COMPONENT_SWIZZLE_ZERO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_COMPONENT_SWIZZLE_ONE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_COMPONENT_SWIZZLE_R</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_COMPONENT_SWIZZLE_G</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_COMPONENT_SWIZZLE_B</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_COMPONENT_SWIZZLE_A</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>
}</block></enum></type> <name>VkComponentSwizzle</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCommandPoolCreateFlagBits</name> <block>{
<decl><name>VK_COMMAND_POOL_CREATE_TRANSIENT_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_COMMAND_POOL_CREATE_PROTECTED_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkCommandPoolCreateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCommandPoolResetFlagBits</name> <block>{
<decl><name>VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkCommandPoolResetFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCommandBufferResetFlagBits</name> <block>{
<decl><name>VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkCommandBufferResetFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCommandBufferLevel</name> <block>{
<decl><name>VK_COMMAND_BUFFER_LEVEL_PRIMARY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_COMMAND_BUFFER_LEVEL_SECONDARY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkCommandBufferLevel</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCommandBufferUsageFlagBits</name> <block>{
<decl><name>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkCommandBufferUsageFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCompareOp</name> <block>{
<decl><name>VK_COMPARE_OP_NEVER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_COMPARE_OP_LESS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_COMPARE_OP_EQUAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_COMPARE_OP_LESS_OR_EQUAL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_COMPARE_OP_GREATER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_COMPARE_OP_NOT_EQUAL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_COMPARE_OP_GREATER_OR_EQUAL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_COMPARE_OP_ALWAYS</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>
}</block></enum></type> <name>VkCompareOp</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCullModeFlagBits</name> <block>{
<decl><name>VK_CULL_MODE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_CULL_MODE_FRONT_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_CULL_MODE_BACK_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_CULL_MODE_FRONT_AND_BACK</name> <init>= <expr><literal type="number">0x00000003</literal></expr></init></decl>
}</block></enum></type> <name>VkCullModeFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDescriptorType</name> <block>{
<decl><name>VK_DESCRIPTOR_TYPE_SAMPLER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>
}</block></enum></type> <name>VkDescriptorType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDynamicState</name> <block>{
<decl><name>VK_DYNAMIC_STATE_VIEWPORT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_SCISSOR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_LINE_WIDTH</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_DEPTH_BIAS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_BLEND_CONSTANTS</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_DEPTH_BOUNDS</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_STENCIL_WRITE_MASK</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_STENCIL_REFERENCE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_DYNAMIC_STATE_RANGE_SIZE</name> <init>= <expr><operator>(</operator><name>VK_DYNAMIC_STATE_STENCIL_REFERENCE</name> <operator>-</operator> <name>VK_DYNAMIC_STATE_VIEWPORT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>
}</block></enum></type> <name>VkDynamicState</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkFenceCreateFlagBits</name> <block>{
<decl><name>VK_FENCE_CREATE_SIGNALED_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkFenceCreateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPolygonMode</name> <block>{
<decl><name>VK_POLYGON_MODE_FILL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_POLYGON_MODE_LINE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_POLYGON_MODE_POINT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkPolygonMode</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkFormat</name> <block>{
<decl><name>VK_FORMAT_UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R4G4_UNORM_PACK8</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R4G4B4A4_UNORM_PACK16</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B4G4R4A4_UNORM_PACK16</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R5G6B5_UNORM_PACK16</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B5G6R5_UNORM_PACK16</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R5G5B5A1_UNORM_PACK16</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B5G5R5A1_UNORM_PACK16</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A1R5G5B5_UNORM_PACK16</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8_UNORM</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8_SNORM</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8_USCALED</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8_SSCALED</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8_UINT</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8_SINT</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8_SRGB</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8_UNORM</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8_SNORM</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8_USCALED</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8_SSCALED</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8_UINT</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8_SINT</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8_SRGB</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8_UNORM</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8_SNORM</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8_USCALED</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8_SSCALED</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8_UINT</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8_SINT</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8_SRGB</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8_UNORM</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8_SNORM</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8_USCALED</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8_SSCALED</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8_UINT</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8_SINT</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8_SRGB</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8A8_UNORM</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8A8_SNORM</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8A8_USCALED</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8A8_SSCALED</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8A8_UINT</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8A8_SINT</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R8G8B8A8_SRGB</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8A8_UNORM</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8A8_SNORM</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8A8_USCALED</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8A8_SSCALED</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8A8_UINT</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8A8_SINT</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8A8_SRGB</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A8B8G8R8_UNORM_PACK32</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A8B8G8R8_SNORM_PACK32</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A8B8G8R8_USCALED_PACK32</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A8B8G8R8_SSCALED_PACK32</name> <init>= <expr><literal type="number">54</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A8B8G8R8_UINT_PACK32</name> <init>= <expr><literal type="number">55</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A8B8G8R8_SINT_PACK32</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A8B8G8R8_SRGB_PACK32</name> <init>= <expr><literal type="number">57</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2R10G10B10_UNORM_PACK32</name> <init>= <expr><literal type="number">58</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2R10G10B10_SNORM_PACK32</name> <init>= <expr><literal type="number">59</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2R10G10B10_USCALED_PACK32</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2R10G10B10_SSCALED_PACK32</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2R10G10B10_UINT_PACK32</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2R10G10B10_SINT_PACK32</name> <init>= <expr><literal type="number">63</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2B10G10R10_UNORM_PACK32</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2B10G10R10_SNORM_PACK32</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2B10G10R10_USCALED_PACK32</name> <init>= <expr><literal type="number">66</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2B10G10R10_SSCALED_PACK32</name> <init>= <expr><literal type="number">67</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2B10G10R10_UINT_PACK32</name> <init>= <expr><literal type="number">68</literal></expr></init></decl>,
<decl><name>VK_FORMAT_A2B10G10R10_SINT_PACK32</name> <init>= <expr><literal type="number">69</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16_UNORM</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16_SNORM</name> <init>= <expr><literal type="number">71</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16_USCALED</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16_SSCALED</name> <init>= <expr><literal type="number">73</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16_UINT</name> <init>= <expr><literal type="number">74</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16_SINT</name> <init>= <expr><literal type="number">75</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16_SFLOAT</name> <init>= <expr><literal type="number">76</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16_UNORM</name> <init>= <expr><literal type="number">77</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16_SNORM</name> <init>= <expr><literal type="number">78</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16_USCALED</name> <init>= <expr><literal type="number">79</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16_SSCALED</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16_UINT</name> <init>= <expr><literal type="number">81</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16_SINT</name> <init>= <expr><literal type="number">82</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16_SFLOAT</name> <init>= <expr><literal type="number">83</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16_UNORM</name> <init>= <expr><literal type="number">84</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16_SNORM</name> <init>= <expr><literal type="number">85</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16_USCALED</name> <init>= <expr><literal type="number">86</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16_SSCALED</name> <init>= <expr><literal type="number">87</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16_UINT</name> <init>= <expr><literal type="number">88</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16_SINT</name> <init>= <expr><literal type="number">89</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16_SFLOAT</name> <init>= <expr><literal type="number">90</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16A16_UNORM</name> <init>= <expr><literal type="number">91</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16A16_SNORM</name> <init>= <expr><literal type="number">92</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16A16_USCALED</name> <init>= <expr><literal type="number">93</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16A16_SSCALED</name> <init>= <expr><literal type="number">94</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16A16_UINT</name> <init>= <expr><literal type="number">95</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16A16_SINT</name> <init>= <expr><literal type="number">96</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R16G16B16A16_SFLOAT</name> <init>= <expr><literal type="number">97</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32_UINT</name> <init>= <expr><literal type="number">98</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32_SINT</name> <init>= <expr><literal type="number">99</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32_SFLOAT</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32_UINT</name> <init>= <expr><literal type="number">101</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32_SINT</name> <init>= <expr><literal type="number">102</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32_SFLOAT</name> <init>= <expr><literal type="number">103</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32B32_UINT</name> <init>= <expr><literal type="number">104</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32B32_SINT</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32B32_SFLOAT</name> <init>= <expr><literal type="number">106</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32B32A32_UINT</name> <init>= <expr><literal type="number">107</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32B32A32_SINT</name> <init>= <expr><literal type="number">108</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R32G32B32A32_SFLOAT</name> <init>= <expr><literal type="number">109</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64_UINT</name> <init>= <expr><literal type="number">110</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64_SINT</name> <init>= <expr><literal type="number">111</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64_SFLOAT</name> <init>= <expr><literal type="number">112</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64_UINT</name> <init>= <expr><literal type="number">113</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64_SINT</name> <init>= <expr><literal type="number">114</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64_SFLOAT</name> <init>= <expr><literal type="number">115</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64B64_UINT</name> <init>= <expr><literal type="number">116</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64B64_SINT</name> <init>= <expr><literal type="number">117</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64B64_SFLOAT</name> <init>= <expr><literal type="number">118</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64B64A64_UINT</name> <init>= <expr><literal type="number">119</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64B64A64_SINT</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R64G64B64A64_SFLOAT</name> <init>= <expr><literal type="number">121</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B10G11R11_UFLOAT_PACK32</name> <init>= <expr><literal type="number">122</literal></expr></init></decl>,
<decl><name>VK_FORMAT_E5B9G9R9_UFLOAT_PACK32</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>,
<decl><name>VK_FORMAT_D16_UNORM</name> <init>= <expr><literal type="number">124</literal></expr></init></decl>,
<decl><name>VK_FORMAT_X8_D24_UNORM_PACK32</name> <init>= <expr><literal type="number">125</literal></expr></init></decl>,
<decl><name>VK_FORMAT_D32_SFLOAT</name> <init>= <expr><literal type="number">126</literal></expr></init></decl>,
<decl><name>VK_FORMAT_S8_UINT</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>,
<decl><name>VK_FORMAT_D16_UNORM_S8_UINT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_FORMAT_D24_UNORM_S8_UINT</name> <init>= <expr><literal type="number">129</literal></expr></init></decl>,
<decl><name>VK_FORMAT_D32_SFLOAT_S8_UINT</name> <init>= <expr><literal type="number">130</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC1_RGB_UNORM_BLOCK</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC1_RGB_SRGB_BLOCK</name> <init>= <expr><literal type="number">132</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC1_RGBA_UNORM_BLOCK</name> <init>= <expr><literal type="number">133</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC1_RGBA_SRGB_BLOCK</name> <init>= <expr><literal type="number">134</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC2_UNORM_BLOCK</name> <init>= <expr><literal type="number">135</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC2_SRGB_BLOCK</name> <init>= <expr><literal type="number">136</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC3_UNORM_BLOCK</name> <init>= <expr><literal type="number">137</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC3_SRGB_BLOCK</name> <init>= <expr><literal type="number">138</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC4_UNORM_BLOCK</name> <init>= <expr><literal type="number">139</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC4_SNORM_BLOCK</name> <init>= <expr><literal type="number">140</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC5_UNORM_BLOCK</name> <init>= <expr><literal type="number">141</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC5_SNORM_BLOCK</name> <init>= <expr><literal type="number">142</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC6H_UFLOAT_BLOCK</name> <init>= <expr><literal type="number">143</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC6H_SFLOAT_BLOCK</name> <init>= <expr><literal type="number">144</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC7_UNORM_BLOCK</name> <init>= <expr><literal type="number">145</literal></expr></init></decl>,
<decl><name>VK_FORMAT_BC7_SRGB_BLOCK</name> <init>= <expr><literal type="number">146</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK</name> <init>= <expr><literal type="number">147</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK</name> <init>= <expr><literal type="number">148</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK</name> <init>= <expr><literal type="number">149</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK</name> <init>= <expr><literal type="number">151</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK</name> <init>= <expr><literal type="number">152</literal></expr></init></decl>,
<decl><name>VK_FORMAT_EAC_R11_UNORM_BLOCK</name> <init>= <expr><literal type="number">153</literal></expr></init></decl>,
<decl><name>VK_FORMAT_EAC_R11_SNORM_BLOCK</name> <init>= <expr><literal type="number">154</literal></expr></init></decl>,
<decl><name>VK_FORMAT_EAC_R11G11_UNORM_BLOCK</name> <init>= <expr><literal type="number">155</literal></expr></init></decl>,
<decl><name>VK_FORMAT_EAC_R11G11_SNORM_BLOCK</name> <init>= <expr><literal type="number">156</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_4x4_UNORM_BLOCK</name> <init>= <expr><literal type="number">157</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_4x4_SRGB_BLOCK</name> <init>= <expr><literal type="number">158</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_5x4_UNORM_BLOCK</name> <init>= <expr><literal type="number">159</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_5x4_SRGB_BLOCK</name> <init>= <expr><literal type="number">160</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_5x5_UNORM_BLOCK</name> <init>= <expr><literal type="number">161</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_5x5_SRGB_BLOCK</name> <init>= <expr><literal type="number">162</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_6x5_UNORM_BLOCK</name> <init>= <expr><literal type="number">163</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_6x5_SRGB_BLOCK</name> <init>= <expr><literal type="number">164</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_6x6_UNORM_BLOCK</name> <init>= <expr><literal type="number">165</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_6x6_SRGB_BLOCK</name> <init>= <expr><literal type="number">166</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_8x5_UNORM_BLOCK</name> <init>= <expr><literal type="number">167</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_8x5_SRGB_BLOCK</name> <init>= <expr><literal type="number">168</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_8x6_UNORM_BLOCK</name> <init>= <expr><literal type="number">169</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_8x6_SRGB_BLOCK</name> <init>= <expr><literal type="number">170</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_8x8_UNORM_BLOCK</name> <init>= <expr><literal type="number">171</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_8x8_SRGB_BLOCK</name> <init>= <expr><literal type="number">172</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x5_UNORM_BLOCK</name> <init>= <expr><literal type="number">173</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x5_SRGB_BLOCK</name> <init>= <expr><literal type="number">174</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x6_UNORM_BLOCK</name> <init>= <expr><literal type="number">175</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x6_SRGB_BLOCK</name> <init>= <expr><literal type="number">176</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x8_UNORM_BLOCK</name> <init>= <expr><literal type="number">177</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x8_SRGB_BLOCK</name> <init>= <expr><literal type="number">178</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x10_UNORM_BLOCK</name> <init>= <expr><literal type="number">179</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_10x10_SRGB_BLOCK</name> <init>= <expr><literal type="number">180</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_12x10_UNORM_BLOCK</name> <init>= <expr><literal type="number">181</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_12x10_SRGB_BLOCK</name> <init>= <expr><literal type="number">182</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_12x12_UNORM_BLOCK</name> <init>= <expr><literal type="number">183</literal></expr></init></decl>,
<decl><name>VK_FORMAT_ASTC_12x12_SRGB_BLOCK</name> <init>= <expr><literal type="number">184</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G8B8G8R8_422_UNORM</name> <init>= <expr><literal type="number">1000156000</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B8G8R8G8_422_UNORM</name> <init>= <expr><literal type="number">1000156001</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM</name> <init>= <expr><literal type="number">1000156002</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G8_B8R8_2PLANE_420_UNORM</name> <init>= <expr><literal type="number">1000156003</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM</name> <init>= <expr><literal type="number">1000156004</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G8_B8R8_2PLANE_422_UNORM</name> <init>= <expr><literal type="number">1000156005</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM</name> <init>= <expr><literal type="number">1000156006</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R10X6_UNORM_PACK16</name> <init>= <expr><literal type="number">1000156007</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R10X6G10X6_UNORM_2PACK16</name> <init>= <expr><literal type="number">1000156008</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16</name> <init>= <expr><literal type="number">1000156009</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16</name> <init>= <expr><literal type="number">1000156010</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16</name> <init>= <expr><literal type="number">1000156011</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156012</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156013</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156014</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156015</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156016</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R12X4_UNORM_PACK16</name> <init>= <expr><literal type="number">1000156017</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R12X4G12X4_UNORM_2PACK16</name> <init>= <expr><literal type="number">1000156018</literal></expr></init></decl>,
<decl><name>VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16</name> <init>= <expr><literal type="number">1000156019</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16</name> <init>= <expr><literal type="number">1000156020</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16</name> <init>= <expr><literal type="number">1000156021</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156022</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156023</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156024</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156025</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16</name> <init>= <expr><literal type="number">1000156026</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G16B16G16R16_422_UNORM</name> <init>= <expr><literal type="number">1000156027</literal></expr></init></decl>,
<decl><name>VK_FORMAT_B16G16R16G16_422_UNORM</name> <init>= <expr><literal type="number">1000156028</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM</name> <init>= <expr><literal type="number">1000156029</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G16_B16R16_2PLANE_420_UNORM</name> <init>= <expr><literal type="number">1000156030</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM</name> <init>= <expr><literal type="number">1000156031</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G16_B16R16_2PLANE_422_UNORM</name> <init>= <expr><literal type="number">1000156032</literal></expr></init></decl>,
<decl><name>VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM</name> <init>= <expr><literal type="number">1000156033</literal></expr></init></decl>
}</block></enum></type> <name>VkFormat</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkFormatFeatureFlagBits</name> <block>{
<decl><name>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_BLIT_SRC_BIT</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_BLIT_DST_BIT</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_TRANSFER_SRC_BIT</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_TRANSFER_DST_BIT</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</name> <init>= <expr><literal type="number">131072</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT</name> <init>= <expr><literal type="number">262144</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT</name> <init>= <expr><literal type="number">524288</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT</name> <init>= <expr><literal type="number">1048576</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT</name> <init>= <expr><literal type="number">2097152</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_DISJOINT_BIT</name> <init>= <expr><literal type="number">4194304</literal></expr></init></decl>,
<decl><name>VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT</name> <init>= <expr><literal type="number">8388608</literal></expr></init></decl>
}</block></enum></type> <name>VkFormatFeatureFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkFrontFace</name> <block>{
<decl><name>VK_FRONT_FACE_COUNTER_CLOCKWISE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_FRONT_FACE_CLOCKWISE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkFrontFace</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkImageAspectFlagBits</name> <block>{
<decl><name>VK_IMAGE_ASPECT_COLOR_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_IMAGE_ASPECT_DEPTH_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_IMAGE_ASPECT_STENCIL_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_IMAGE_ASPECT_METADATA_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_IMAGE_ASPECT_PLANE_0_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_IMAGE_ASPECT_PLANE_1_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_IMAGE_ASPECT_PLANE_2_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>
}</block></enum></type> <name>VkImageAspectFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkImageCreateFlagBits</name> <block>{
<decl><name>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_ALIAS_BIT</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_EXTENDED_USAGE_BIT</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_PROTECTED_BIT</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>,
<decl><name>VK_IMAGE_CREATE_DISJOINT_BIT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>
}</block></enum></type> <name>VkImageCreateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkImageLayout</name> <block>{
<decl><name>VK_IMAGE_LAYOUT_UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_GENERAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_PREINITIALIZED</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</name> <init>= <expr><literal type="number">1000117000</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</name> <init>= <expr><literal type="number">1000117001</literal></expr></init></decl>,
<decl><name>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</name> <init>= <expr><literal type="number">1000001002</literal></expr></init></decl>
}</block></enum></type> <name>VkImageLayout</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkImageTiling</name> <block>{
<decl><name>VK_IMAGE_TILING_OPTIMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_IMAGE_TILING_LINEAR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkImageTiling</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkImageType</name> <block>{
<decl><name>VK_IMAGE_TYPE_1D</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_IMAGE_TYPE_2D</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_IMAGE_TYPE_3D</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkImageType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkImageUsageFlagBits</name> <block>{
<decl><name>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_IMAGE_USAGE_TRANSFER_DST_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_IMAGE_USAGE_SAMPLED_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_IMAGE_USAGE_STORAGE_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>
}</block></enum></type> <name>VkImageUsageFlagBits</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VkImageViewType</name> <block>{
<decl><name>VK_IMAGE_VIEW_TYPE_1D</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_IMAGE_VIEW_TYPE_2D</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_IMAGE_VIEW_TYPE_3D</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_IMAGE_VIEW_TYPE_CUBE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_IMAGE_VIEW_TYPE_1D_ARRAY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_IMAGE_VIEW_TYPE_2D_ARRAY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>
}</block></enum></type> <name>VkImageViewType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSharingMode</name> <block>{
<decl><name>VK_SHARING_MODE_EXCLUSIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_SHARING_MODE_CONCURRENT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkSharingMode</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkIndexType</name> <block>{
<decl><name>VK_INDEX_TYPE_UINT16</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_INDEX_TYPE_UINT32</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkIndexType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkLogicOp</name> <block>{
<decl><name>VK_LOGIC_OP_CLEAR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_AND</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_AND_REVERSE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_COPY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_AND_INVERTED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_NO_OP</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_XOR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_OR</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_NOR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_EQUIVALENT</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_INVERT</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_OR_REVERSE</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_COPY_INVERTED</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_OR_INVERTED</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_NAND</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>VK_LOGIC_OP_SET</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>
}</block></enum></type> <name>VkLogicOp</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkMemoryHeapFlagBits</name> <block>{
<decl><name>VK_MEMORY_HEAP_DEVICE_LOCAL_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkMemoryHeapFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkAccessFlagBits</name> <block>{
<decl><name>VK_ACCESS_INDIRECT_COMMAND_READ_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_ACCESS_INDEX_READ_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_ACCESS_UNIFORM_READ_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_ACCESS_INPUT_ATTACHMENT_READ_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_ACCESS_SHADER_READ_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_ACCESS_SHADER_WRITE_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,
<decl><name>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>,
<decl><name>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><name>VK_ACCESS_TRANSFER_READ_BIT</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>,
<decl><name>VK_ACCESS_TRANSFER_WRITE_BIT</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>,
<decl><name>VK_ACCESS_HOST_READ_BIT</name> <init>= <expr><literal type="number">8192</literal></expr></init></decl>,
<decl><name>VK_ACCESS_HOST_WRITE_BIT</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>,
<decl><name>VK_ACCESS_MEMORY_READ_BIT</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>,
<decl><name>VK_ACCESS_MEMORY_WRITE_BIT</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>
}</block></enum></type> <name>VkAccessFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkMemoryPropertyFlagBits</name> <block>{
<decl><name>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_MEMORY_PROPERTY_HOST_CACHED_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_MEMORY_PROPERTY_PROTECTED_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>
}</block></enum></type> <name>VkMemoryPropertyFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPhysicalDeviceType</name> <block>{
<decl><name>VK_PHYSICAL_DEVICE_TYPE_OTHER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_PHYSICAL_DEVICE_TYPE_CPU</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkPhysicalDeviceType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPipelineBindPoint</name> <block>{
<decl><name>VK_PIPELINE_BIND_POINT_GRAPHICS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_BIND_POINT_COMPUTE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkPipelineBindPoint</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPipelineCreateFlagBits</name> <block>{
<decl><name>VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_CREATE_DERIVATIVE_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_CREATE_DISPATCH_BASE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block></enum></type> <name>VkPipelineCreateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPrimitiveTopology</name> <block>{
<decl><name>VK_PRIMITIVE_TOPOLOGY_POINT_LIST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_LINE_LIST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_LINE_STRIP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_PRIMITIVE_TOPOLOGY_PATCH_LIST</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>
}</block></enum></type> <name>VkPrimitiveTopology</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkQueryControlFlagBits</name> <block>{
<decl><name>VK_QUERY_CONTROL_PRECISE_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkQueryControlFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkQueryPipelineStatisticFlagBits</name> <block>{
<decl><name>VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>,
<decl><name>VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>
}</block></enum></type> <name>VkQueryPipelineStatisticFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkQueryResultFlagBits</name> <block>{
<decl><name>VK_QUERY_RESULT_64_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_QUERY_RESULT_WAIT_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_QUERY_RESULT_WITH_AVAILABILITY_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_QUERY_RESULT_PARTIAL_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>VkQueryResultFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkQueryType</name> <block>{
<decl><name>VK_QUERY_TYPE_OCCLUSION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_QUERY_TYPE_PIPELINE_STATISTICS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_QUERY_TYPE_TIMESTAMP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkQueryType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkQueueFlagBits</name> <block>{
<decl><name>VK_QUEUE_GRAPHICS_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_QUEUE_COMPUTE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_QUEUE_TRANSFER_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_QUEUE_SPARSE_BINDING_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_QUEUE_PROTECTED_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block></enum></type> <name>VkQueueFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSubpassContents</name> <block>{
<decl><name>VK_SUBPASS_CONTENTS_INLINE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkSubpassContents</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkResult</name> <block>{
<decl><name>VK_SUCCESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_NOT_READY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_TIMEOUT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_EVENT_SET</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_EVENT_RESET</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_INCOMPLETE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_ERROR_OUT_OF_HOST_MEMORY</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_ERROR_OUT_OF_DEVICE_MEMORY</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_ERROR_INITIALIZATION_FAILED</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_ERROR_DEVICE_LOST</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_ERROR_MEMORY_MAP_FAILED</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_ERROR_LAYER_NOT_PRESENT</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_ERROR_EXTENSION_NOT_PRESENT</name> <init>= <expr><operator>-</operator><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_ERROR_FEATURE_NOT_PRESENT</name> <init>= <expr><operator>-</operator><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_ERROR_INCOMPATIBLE_DRIVER</name> <init>= <expr><operator>-</operator><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_ERROR_TOO_MANY_OBJECTS</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_ERROR_FORMAT_NOT_SUPPORTED</name> <init>= <expr><operator>-</operator><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_ERROR_FRAGMENTED_POOL</name> <init>= <expr><operator>-</operator><literal type="number">12</literal></expr></init></decl>,
<decl><name>VK_ERROR_OUT_OF_POOL_MEMORY</name> <init>= <expr><operator>-</operator><literal type="number">1000069000</literal></expr></init></decl>,
<decl><name>VK_ERROR_INVALID_EXTERNAL_HANDLE</name> <init>= <expr><operator>-</operator><literal type="number">1000072003</literal></expr></init></decl>,
<decl><name>VK_ERROR_SURFACE_LOST_KHR</name> <init>= <expr><operator>-</operator><literal type="number">1000000000</literal></expr></init></decl>,
<decl><name>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</name> <init>= <expr><operator>-</operator><literal type="number">1000000001</literal></expr></init></decl>,
<decl><name>VK_SUBOPTIMAL_KHR</name> <init>= <expr><literal type="number">1000001003</literal></expr></init></decl>,
<decl><name>VK_ERROR_OUT_OF_DATE_KHR</name> <init>= <expr><operator>-</operator><literal type="number">1000001004</literal></expr></init></decl>,
<decl><name>VK_ERROR_VALIDATION_FAILED_EXT</name> <init>= <expr><operator>-</operator><literal type="number">1000011001</literal></expr></init></decl>
}</block></enum></type> <name>VkResult</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkShaderStageFlagBits</name> <block>{
<decl><name>VK_SHADER_STAGE_VERTEX_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_SHADER_STAGE_GEOMETRY_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_SHADER_STAGE_FRAGMENT_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_SHADER_STAGE_COMPUTE_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_SHADER_STAGE_ALL_GRAPHICS</name> <init>= <expr><literal type="number">0x0000001F</literal></expr></init></decl>,
<decl><name>VK_SHADER_STAGE_ALL</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>VkShaderStageFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSparseMemoryBindFlagBits</name> <block>{
<decl><name>VK_SPARSE_MEMORY_BIND_METADATA_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkSparseMemoryBindFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkStencilFaceFlagBits</name> <block>{
<decl><name>VK_STENCIL_FACE_FRONT_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_STENCIL_FACE_BACK_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_STENCIL_FRONT_AND_BACK</name> <init>= <expr><literal type="number">0x00000003</literal></expr></init></decl>
}</block></enum></type> <name>VkStencilFaceFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkStencilOp</name> <block>{
<decl><name>VK_STENCIL_OP_KEEP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_STENCIL_OP_ZERO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_STENCIL_OP_REPLACE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_STENCIL_OP_INCREMENT_AND_CLAMP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_STENCIL_OP_DECREMENT_AND_CLAMP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_STENCIL_OP_INVERT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_STENCIL_OP_INCREMENT_AND_WRAP</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_STENCIL_OP_DECREMENT_AND_WRAP</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>
}</block></enum></type> <name>VkStencilOp</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkStructureType</name> <block>{
<decl><name>VK_STRUCTURE_TYPE_APPLICATION_INFO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SUBMIT_INFO</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BIND_SPARSE_INFO</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_FENCE_CREATE_INFO</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EVENT_CREATE_INFO</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MEMORY_BARRIER</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES</name> <init>= <expr><literal type="number">1000094000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO</name> <init>= <expr><literal type="number">1000157000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO</name> <init>= <expr><literal type="number">1000157001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES</name> <init>= <expr><literal type="number">1000083000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS</name> <init>= <expr><literal type="number">1000127000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO</name> <init>= <expr><literal type="number">1000127001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO</name> <init>= <expr><literal type="number">1000060000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO</name> <init>= <expr><literal type="number">1000060003</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO</name> <init>= <expr><literal type="number">1000060004</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO</name> <init>= <expr><literal type="number">1000060005</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO</name> <init>= <expr><literal type="number">1000060006</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO</name> <init>= <expr><literal type="number">1000060013</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO</name> <init>= <expr><literal type="number">1000060014</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES</name> <init>= <expr><literal type="number">1000070000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO</name> <init>= <expr><literal type="number">1000070001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2</name> <init>= <expr><literal type="number">1000146000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2</name> <init>= <expr><literal type="number">1000146001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2</name> <init>= <expr><literal type="number">1000146002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2</name> <init>= <expr><literal type="number">1000146003</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2</name> <init>= <expr><literal type="number">1000146004</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2</name> <init>= <expr><literal type="number">1000059000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2</name> <init>= <expr><literal type="number">1000059001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2</name> <init>= <expr><literal type="number">1000059002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2</name> <init>= <expr><literal type="number">1000059003</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2</name> <init>= <expr><literal type="number">1000059004</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2</name> <init>= <expr><literal type="number">1000059005</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2</name> <init>= <expr><literal type="number">1000059006</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2</name> <init>= <expr><literal type="number">1000059007</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2</name> <init>= <expr><literal type="number">1000059008</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES</name> <init>= <expr><literal type="number">1000117000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO</name> <init>= <expr><literal type="number">1000117001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO</name> <init>= <expr><literal type="number">1000117002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO</name> <init>= <expr><literal type="number">1000117003</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO</name> <init>= <expr><literal type="number">1000053000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES</name> <init>= <expr><literal type="number">1000053001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES</name> <init>= <expr><literal type="number">1000053002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES</name> <init>= <expr><literal type="number">1000120000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES</name> <init>= <expr><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES</name></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO</name> <init>= <expr><literal type="number">1000145000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES</name> <init>= <expr><literal type="number">1000145001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES</name> <init>= <expr><literal type="number">1000145002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2</name> <init>= <expr><literal type="number">1000145003</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO</name> <init>= <expr><literal type="number">1000156000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO</name> <init>= <expr><literal type="number">1000156001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO</name> <init>= <expr><literal type="number">1000156002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO</name> <init>= <expr><literal type="number">1000156003</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES</name> <init>= <expr><literal type="number">1000156004</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES</name> <init>= <expr><literal type="number">1000156005</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO</name> <init>= <expr><literal type="number">1000085000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO</name> <init>= <expr><literal type="number">1000071000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES</name> <init>= <expr><literal type="number">1000071001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO</name> <init>= <expr><literal type="number">1000071002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES</name> <init>= <expr><literal type="number">1000071003</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES</name> <init>= <expr><literal type="number">1000071004</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO</name> <init>= <expr><literal type="number">1000072000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO</name> <init>= <expr><literal type="number">1000072001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO</name> <init>= <expr><literal type="number">1000072002</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO</name> <init>= <expr><literal type="number">1000112000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES</name> <init>= <expr><literal type="number">1000112001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO</name> <init>= <expr><literal type="number">1000113000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO</name> <init>= <expr><literal type="number">1000077000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO</name> <init>= <expr><literal type="number">1000076000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES</name> <init>= <expr><literal type="number">1000076001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES</name> <init>= <expr><literal type="number">1000168000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT</name> <init>= <expr><literal type="number">1000168001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES</name> <init>= <expr><literal type="number">1000063000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES</name> <init>= <expr><name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES</name></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR</name> <init>= <expr><literal type="number">1000001000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_PRESENT_INFO_KHR</name> <init>= <expr><literal type="number">1000001001</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR</name> <init>= <expr><literal type="number">1000060007</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR</name> <init>= <expr><literal type="number">1000060008</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR</name> <init>= <expr><literal type="number">1000060009</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR</name> <init>= <expr><literal type="number">1000060010</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR</name> <init>= <expr><literal type="number">1000060011</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR</name> <init>= <expr><literal type="number">1000060012</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT</name> <init>= <expr><literal type="number">1000011000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT</name> <init>= <expr><name>VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT</name></expr></init></decl>
}</block></enum></type> <name>VkStructureType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSystemAllocationScope</name> <block>{
<decl><name>VK_SYSTEM_ALLOCATION_SCOPE_COMMAND</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_SYSTEM_ALLOCATION_SCOPE_OBJECT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SYSTEM_ALLOCATION_SCOPE_CACHE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SYSTEM_ALLOCATION_SCOPE_DEVICE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkSystemAllocationScope</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkInternalAllocationType</name> <block>{
<decl><name>VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block></enum></type> <name>VkInternalAllocationType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSamplerAddressMode</name> <block>{
<decl><name>VK_SAMPLER_ADDRESS_MODE_REPEAT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>VkSamplerAddressMode</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkFilter</name> <block>{
<decl><name>VK_FILTER_NEAREST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_FILTER_LINEAR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkFilter</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSamplerMipmapMode</name> <block>{
<decl><name>VK_SAMPLER_MIPMAP_MODE_NEAREST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_MIPMAP_MODE_LINEAR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkSamplerMipmapMode</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkVertexInputRate</name> <block>{
<decl><name>VK_VERTEX_INPUT_RATE_VERTEX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_VERTEX_INPUT_RATE_INSTANCE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkVertexInputRate</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPipelineStageFlagBits</name> <block>{
<decl><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_VERTEX_INPUT_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_VERTEX_SHADER_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</name> <init>= <expr><literal type="number">8192</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_HOST_BIT</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>,
<decl><name>VK_PIPELINE_STAGE_ALL_COMMANDS_BIT</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>
}</block></enum></type> <name>VkPipelineStageFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSparseImageFormatFlagBits</name> <block>{
<decl><name>VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkSparseImageFormatFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSampleCountFlagBits</name> <block>{
<decl><name>VK_SAMPLE_COUNT_1_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SAMPLE_COUNT_2_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SAMPLE_COUNT_4_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_SAMPLE_COUNT_8_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_SAMPLE_COUNT_16_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_SAMPLE_COUNT_32_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_SAMPLE_COUNT_64_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>
}</block></enum></type> <name>VkSampleCountFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkAttachmentDescriptionFlagBits</name> <block>{
<decl><name>VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkAttachmentDescriptionFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDescriptorPoolCreateFlagBits</name> <block>{
<decl><name>VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkDescriptorPoolCreateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDependencyFlagBits</name> <block>{
<decl><name>VK_DEPENDENCY_BY_REGION_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_DEPENDENCY_DEVICE_GROUP_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_DEPENDENCY_VIEW_LOCAL_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkDependencyFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkObjectType</name> <block>{
<decl><name>VK_OBJECT_TYPE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_INSTANCE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_PHYSICAL_DEVICE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_DEVICE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_QUEUE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_SEMAPHORE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_COMMAND_BUFFER</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_FENCE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_DEVICE_MEMORY</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_BUFFER</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_IMAGE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_EVENT</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_QUERY_POOL</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_BUFFER_VIEW</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_IMAGE_VIEW</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_SHADER_MODULE</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_PIPELINE_CACHE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_PIPELINE_LAYOUT</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_RENDER_PASS</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_PIPELINE</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_SAMPLER</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_DESCRIPTOR_POOL</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_DESCRIPTOR_SET</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_FRAMEBUFFER</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_COMMAND_POOL</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION</name> <init>= <expr><literal type="number">1000156000</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE</name> <init>= <expr><literal type="number">1000085000</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_SURFACE_KHR</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_SWAPCHAIN_KHR</name> <init>= <expr><literal type="number">1000001000</literal></expr></init></decl>,
<decl><name>VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT</name> <init>= <expr><literal type="number">1000011000</literal></expr></init></decl>
}</block></enum></type> <name>VkObjectType</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDescriptorUpdateTemplateType</name> <block>{
<decl><name>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block></enum></type> <name>VkDescriptorUpdateTemplateType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VkPointClippingBehavior</name> <block>{
<decl><name>VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkPointClippingBehavior</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkColorSpaceKHR</name> <block>{
<decl><name>VK_COLOR_SPACE_SRGB_NONLINEAR_KHR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_COLORSPACE_SRGB_NONLINEAR_KHR</name> <init>= <expr><name>VK_COLOR_SPACE_SRGB_NONLINEAR_KHR</name></expr></init></decl>
}</block></enum></type> <name>VkColorSpaceKHR</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkCompositeAlphaFlagBitsKHR</name> <block>{
<decl><name>VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>VkCompositeAlphaFlagBitsKHR</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPresentModeKHR</name> <block>{
<decl><name>VK_PRESENT_MODE_IMMEDIATE_KHR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_PRESENT_MODE_MAILBOX_KHR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_PRESENT_MODE_FIFO_KHR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_PRESENT_MODE_FIFO_RELAXED_KHR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>VkPresentModeKHR</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSurfaceTransformFlagBitsKHR</name> <block>{
<decl><name>VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>
}</block></enum></type> <name>VkSurfaceTransformFlagBitsKHR</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDebugReportFlagBitsEXT</name> <block>{
<decl><name>VK_DEBUG_REPORT_INFORMATION_BIT_EXT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_WARNING_BIT_EXT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_ERROR_BIT_EXT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_DEBUG_BIT_EXT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block></enum></type> <name>VkDebugReportFlagBitsEXT</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDebugReportObjectTypeEXT</name> <block>{
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT</name> <init>= <expr><name>VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT</name></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT</name> <init>= <expr><name>VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT</name></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT</name> <init>= <expr><literal type="number">1000156000</literal></expr></init></decl>,
<decl><name>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT</name> <init>= <expr><literal type="number">1000085000</literal></expr></init></decl>
}</block></enum></type> <name>VkDebugReportObjectTypeEXT</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkExternalMemoryHandleTypeFlagBits</name> <block>{
<decl><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>
}</block></enum></type> <name>VkExternalMemoryHandleTypeFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkExternalMemoryFeatureFlagBits</name> <block>{
<decl><name>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkExternalMemoryFeatureFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkExternalSemaphoreHandleTypeFlagBits</name> <block>{
<decl><name>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block></enum></type> <name>VkExternalSemaphoreHandleTypeFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkExternalSemaphoreFeatureFlagBits</name> <block>{
<decl><name>VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkExternalSemaphoreFeatureFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSemaphoreImportFlagBits</name> <block>{
<decl><name>VK_SEMAPHORE_IMPORT_TEMPORARY_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkSemaphoreImportFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkExternalFenceHandleTypeFlagBits</name> <block>{
<decl><name>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>VkExternalFenceHandleTypeFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkExternalFenceFeatureFlagBits</name> <block>{
<decl><name>VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkExternalFenceFeatureFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkFenceImportFlagBits</name> <block>{
<decl><name>VK_FENCE_IMPORT_TEMPORARY_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkFenceImportFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkPeerMemoryFeatureFlagBits</name> <block>{
<decl><name>VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_PEER_MEMORY_FEATURE_COPY_DST_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>VkPeerMemoryFeatureFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkMemoryAllocateFlagBits</name> <block>{
<decl><name>VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkMemoryAllocateFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkDeviceGroupPresentModeFlagBitsKHR</name> <block>{
<decl><name>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>VkDeviceGroupPresentModeFlagBitsKHR</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSwapchainCreateFlagBitsKHR</name> <block>{
<decl><name>VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>VkSwapchainCreateFlagBitsKHR</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSubgroupFeatureFlagBits</name> <block>{
<decl><name>VK_SUBGROUP_FEATURE_BASIC_BIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SUBGROUP_FEATURE_VOTE_BIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SUBGROUP_FEATURE_ARITHMETIC_BIT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_SUBGROUP_FEATURE_BALLOT_BIT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_SUBGROUP_FEATURE_SHUFFLE_BIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>VK_SUBGROUP_FEATURE_CLUSTERED_BIT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>VK_SUBGROUP_FEATURE_QUAD_BIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>
}</block></enum></type> <name>VkSubgroupFeatureFlagBits</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkTessellationDomainOrigin</name> <block>{
<decl><name>VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkTessellationDomainOrigin</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSamplerYcbcrModelConversion</name> <block>{
<decl><name>VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>VkSamplerYcbcrModelConversion</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkSamplerYcbcrRange</name> <block>{
<decl><name>VK_SAMPLER_YCBCR_RANGE_ITU_FULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_SAMPLER_YCBCR_RANGE_ITU_NARROW</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkSamplerYcbcrRange</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkChromaLocation</name> <block>{
<decl><name>VK_CHROMA_LOCATION_COSITED_EVEN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_CHROMA_LOCATION_MIDPOINT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>VkChromaLocation</name>;</typedef>
<typedef>typedef <type><enum>enum <name>VkVendorId</name> <block>{
<decl><name>VK_VENDOR_ID_VIV</name> <init>= <expr><literal type="number">0x10001</literal></expr></init></decl>,
<decl><name>VK_VENDOR_ID_VSI</name> <init>= <expr><literal type="number">0x10002</literal></expr></init></decl>,
<decl><name>VK_VENDOR_ID_KAZAN</name> <init>= <expr><literal type="number">0x10003</literal></expr></init></decl>
}</block></enum></type> <name>VkVendorId</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>VKAPI_PTR</name> <modifier>*</modifier><name>PFN_vkInternalAllocationNotification</name>)<parameter_list>(
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>VkInternalAllocationType</name></type> <name>allocationType</name></decl></parameter>,
<parameter><decl><type><name>VkSystemAllocationScope</name></type> <name>allocationScope</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>VKAPI_PTR</name> <modifier>*</modifier><name>PFN_vkInternalFreeNotification</name>)<parameter_list>(
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>VkInternalAllocationType</name></type> <name>allocationType</name></decl></parameter>,
<parameter><decl><type><name>VkSystemAllocationScope</name></type> <name>allocationScope</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>VKAPI_PTR</name> <modifier>*</modifier><name>PFN_vkReallocationFunction</name>)<parameter_list>(
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pOriginal</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>VkSystemAllocationScope</name></type> <name>allocationScope</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>VKAPI_PTR</name> <modifier>*</modifier><name>PFN_vkAllocationFunction</name>)<parameter_list>(
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>VkSystemAllocationScope</name></type> <name>allocationScope</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>VKAPI_PTR</name> <modifier>*</modifier><name>PFN_vkFreeFunction</name>)<parameter_list>(
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pMemory</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>VKAPI_PTR</name> <modifier>*</modifier><name>PFN_vkVoidFunction</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>VkBaseOutStructure</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>VkBaseOutStructure</name></name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBaseOutStructure</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBaseInStructure</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>VkBaseInStructure</name></name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBaseInStructure</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkOffset2D</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>y</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkOffset2D</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkOffset3D</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>z</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkOffset3D</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExtent2D</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExtent2D</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExtent3D</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExtent3D</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkViewport</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxDepth</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkViewport</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkRect2D</name> <block>{
<decl_stmt><decl><type><name>VkOffset2D</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent2D</name></type> <name>extent</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkRect2D</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkClearRect</name> <block>{
<decl_stmt><decl><type><name>VkRect2D</name></type> <name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>baseArrayLayer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>layerCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkClearRect</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkComponentMapping</name> <block>{
<decl_stmt><decl><type><name>VkComponentSwizzle</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkComponentSwizzle</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkComponentSwizzle</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkComponentSwizzle</name></type> <name>a</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkComponentMapping</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExtensionProperties</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>extensionName</name> <index>[ <expr><name>VK_MAX_EXTENSION_NAME_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>specVersion</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExtensionProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkLayerProperties</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>layerName</name> <index>[ <expr><name>VK_MAX_EXTENSION_NAME_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>specVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>implementationVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>description</name> <index>[ <expr><name>VK_MAX_DESCRIPTION_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VkLayerProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkApplicationInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pApplicationName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>applicationVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pEngineName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>engineVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>apiVersion</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkApplicationInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkAllocationCallbacks</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkAllocationFunction</name></type> <name>pfnAllocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkReallocationFunction</name></type> <name>pfnReallocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkFreeFunction</name></type> <name>pfnFree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkInternalAllocationNotification</name></type> <name>pfnInternalAllocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkInternalFreeNotification</name></type> <name>pfnInternalFree</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkAllocationCallbacks</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorImageInfo</name> <block>{
<decl_stmt><decl><type><name>VkSampler</name></type> <name>sampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageView</name></type> <name>imageView</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>imageLayout</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorImageInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkCopyDescriptorSet</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorSet</name></type> <name>srcSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srcBinding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srcArrayElement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorSet</name></type> <name>dstSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstBinding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstArrayElement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkCopyDescriptorSet</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorPoolSize</name> <block>{
<decl_stmt><decl><type><name>VkDescriptorType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorPoolSize</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorSetAllocateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorPool</name></type> <name>descriptorPool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorSetCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDescriptorSetLayout</name> <modifier>*</modifier></type> <name>pSetLayouts</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorSetAllocateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSpecializationMapEntry</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>constantID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSpecializationMapEntry</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSpecializationInfo</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mapEntryCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSpecializationMapEntry</name> <modifier>*</modifier></type> <name>pMapEntries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dataSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pData</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSpecializationInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkVertexInputBindingDescription</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>binding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkVertexInputRate</name></type> <name>inputRate</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkVertexInputBindingDescription</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkVertexInputAttributeDescription</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>binding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkVertexInputAttributeDescription</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkStencilOpState</name> <block>{
<decl_stmt><decl><type><name>VkStencilOp</name></type> <name>failOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkStencilOp</name></type> <name>passOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkStencilOp</name></type> <name>depthFailOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCompareOp</name></type> <name>compareOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>compareMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>writeMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reference</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkStencilOpState</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkCommandBufferAllocateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCommandPool</name></type> <name>commandPool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCommandBufferLevel</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>commandBufferCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkCommandBufferAllocateInfo</name>;</typedef>
<typedef>typedef <type><union>union <name>VkClearColorValue</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>float32</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>int32</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>uint32</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></union></type> <name>VkClearColorValue</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkClearDepthStencilValue</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stencil</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkClearDepthStencilValue</name>;</typedef>
<typedef>typedef <type><union>union <name>VkClearValue</name> <block>{
<decl_stmt><decl><type><name>VkClearColorValue</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkClearDepthStencilValue</name></type> <name>depthStencil</name></decl>;</decl_stmt>
}</block></union></type> <name>VkClearValue</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkAttachmentReference</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>attachment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>layout</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkAttachmentReference</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDrawIndirectCommand</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vertexCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>instanceCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>firstVertex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>firstInstance</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDrawIndirectCommand</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDrawIndexedIndirectCommand</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>indexCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>instanceCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>firstIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>vertexOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>firstInstance</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDrawIndexedIndirectCommand</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDispatchIndirectCommand</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDispatchIndirectCommand</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSurfaceFormatKHR</name> <block>{
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkColorSpaceKHR</name></type> <name>colorSpace</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSurfaceFormatKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPresentInfoKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>waitSemaphoreCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSemaphore</name> <modifier>*</modifier></type> <name>pWaitSemaphores</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>swapchainCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSwapchainKHR</name> <modifier>*</modifier></type> <name>pSwapchains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pImageIndices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkResult</name> <modifier>*</modifier></type> <name>pResults</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPresentInfoKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceExternalImageFormatInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlagBits</name></type> <name>handleType</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceExternalImageFormatInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceExternalSemaphoreInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalSemaphoreHandleTypeFlagBits</name></type> <name>handleType</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceExternalSemaphoreInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceExternalFenceInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalFenceHandleTypeFlagBits</name></type> <name>handleType</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceExternalFenceInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceMultiviewProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxMultiviewViewCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxMultiviewInstanceIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceMultiviewProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkRenderPassMultiviewCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subpassCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pViewMasks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dependencyCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type> <name>pViewOffsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>correlationMaskCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pCorrelationMasks</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkRenderPassMultiviewCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBindBufferMemoryDeviceGroupInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceIndexCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pDeviceIndices</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBindBufferMemoryDeviceGroupInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBindImageMemoryDeviceGroupInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceIndexCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pDeviceIndices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>splitInstanceBindRegionCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkRect2D</name> <modifier>*</modifier></type> <name>pSplitInstanceBindRegions</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBindImageMemoryDeviceGroupInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupRenderPassBeginInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceRenderAreaCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkRect2D</name> <modifier>*</modifier></type> <name>pDeviceRenderAreas</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupRenderPassBeginInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupCommandBufferBeginInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupCommandBufferBeginInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupSubmitInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>waitSemaphoreCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pWaitSemaphoreDeviceIndices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>commandBufferCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pCommandBufferDeviceMasks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>signalSemaphoreCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pSignalSemaphoreDeviceIndices</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupSubmitInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupBindSparseInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>resourceDeviceIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>memoryDeviceIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupBindSparseInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageSwapchainCreateInfoKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSwapchainKHR</name></type> <name>swapchain</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageSwapchainCreateInfoKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBindImageMemorySwapchainInfoKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSwapchainKHR</name></type> <name>swapchain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>imageIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBindImageMemorySwapchainInfoKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkAcquireNextImageInfoKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSwapchainKHR</name></type> <name>swapchain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSemaphore</name></type> <name>semaphore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFence</name></type> <name>fence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkAcquireNextImageInfoKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupPresentInfoKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>swapchainCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pDeviceMasks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceGroupPresentModeFlagBitsKHR</name></type> <name>mode</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupPresentInfoKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupDeviceCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>physicalDeviceCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPhysicalDevice</name> <modifier>*</modifier></type> <name>pPhysicalDevices</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupDeviceCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorUpdateTemplateEntry</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstBinding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstArrayElement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorType</name></type> <name>descriptorType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stride</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorUpdateTemplateEntry</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBufferMemoryRequirementsInfo2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBufferMemoryRequirementsInfo2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageMemoryRequirementsInfo2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageMemoryRequirementsInfo2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageSparseMemoryRequirementsInfo2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageSparseMemoryRequirementsInfo2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDevicePointClippingProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPointClippingBehavior</name></type> <name>pointClippingBehavior</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDevicePointClippingProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryDedicatedAllocateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryDedicatedAllocateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineTessellationDomainOriginStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkTessellationDomainOrigin</name></type> <name>domainOrigin</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineTessellationDomainOriginStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSamplerYcbcrConversionInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerYcbcrConversion</name></type> <name>conversion</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSamplerYcbcrConversionInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBindImagePlaneMemoryInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageAspectFlagBits</name></type> <name>planeAspect</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBindImagePlaneMemoryInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImagePlaneMemoryRequirementsInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageAspectFlagBits</name></type> <name>planeAspect</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImagePlaneMemoryRequirementsInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSamplerYcbcrConversionImageFormatProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>combinedImageSamplerDescriptorCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSamplerYcbcrConversionImageFormatProperties</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>VkSampleMask</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>VkBool32</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>VkFlags</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>VkDeviceSize</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkFramebufferCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkQueryPoolCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkRenderPassCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSamplerCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineLayoutCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineCacheCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineDepthStencilStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineDynamicStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineColorBlendStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineMultisampleStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineRasterizationStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineViewportStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineTessellationStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineInputAssemblyStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineVertexInputStateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineShaderStageCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDescriptorSetLayoutCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkBufferViewCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkInstanceCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDeviceCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDeviceQueueCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkQueueFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkMemoryPropertyFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkMemoryHeapFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkAccessFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkBufferUsageFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkBufferCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkShaderStageFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkImageUsageFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkImageCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkImageViewCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkColorComponentFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkFenceCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSemaphoreCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkFormatFeatureFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkQueryControlFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkQueryResultFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkShaderModuleCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkEventCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkCommandPoolCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkCommandPoolResetFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkCommandBufferResetFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkCommandBufferUsageFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkQueryPipelineStatisticFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkMemoryMapFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkImageAspectFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSparseMemoryBindFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSparseImageFormatFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSubpassDescriptionFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPipelineStageFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSampleCountFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkAttachmentDescriptionFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkStencilFaceFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkCullModeFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDescriptorPoolCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDescriptorPoolResetFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDependencyFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSubgroupFeatureFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDescriptorUpdateTemplateCreateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkCompositeAlphaFlagsKHR</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSurfaceTransformFlagsKHR</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSwapchainCreateFlagsKHR</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkPeerMemoryFeatureFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkMemoryAllocateFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDeviceGroupPresentModeFlagsKHR</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkDebugReportFlagsEXT</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkCommandPoolTrimFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkExternalMemoryHandleTypeFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkExternalMemoryFeatureFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkExternalSemaphoreHandleTypeFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkExternalSemaphoreFeatureFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkSemaphoreImportFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkExternalFenceHandleTypeFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkExternalFenceFeatureFlags</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkFenceImportFlags</name>;</typedef>
<typedef>typedef <function_decl><type><name>VkBool32</name></type> (<name>VKAPI_PTR</name> <modifier>*</modifier><name>PFN_vkDebugReportCallbackEXT</name>)<parameter_list>(
<parameter><decl><type><name>VkDebugReportFlagsEXT</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>VkDebugReportObjectTypeEXT</name></type> <name>objectType</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>object</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>messageCode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pLayerPrefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pMessage</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceQueueCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceQueueCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueFamilyIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>pQueuePriorities</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceQueueCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkInstanceCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkInstanceCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkApplicationInfo</name> <modifier>*</modifier></type> <name>pApplicationInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>enabledLayerCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppEnabledLayerNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>enabledExtensionCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppEnabledExtensionNames</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkInstanceCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkQueueFamilyProperties</name> <block>{
<decl_stmt><decl><type><name>VkQueueFlags</name></type> <name>queueFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestampValidBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>minImageTransferGranularity</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkQueueFamilyProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryAllocateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>allocationSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>memoryTypeIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryAllocateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryRequirements</name> <block>{
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>alignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>memoryTypeBits</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryRequirements</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseImageFormatProperties</name> <block>{
<decl_stmt><decl><type><name>VkImageAspectFlags</name></type> <name>aspectMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>imageGranularity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSparseImageFormatFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseImageFormatProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseImageMemoryRequirements</name> <block>{
<decl_stmt><decl><type><name>VkSparseImageFormatProperties</name></type> <name>formatProperties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>imageMipTailFirstLod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>imageMipTailSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>imageMipTailOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>imageMipTailStride</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseImageMemoryRequirements</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryType</name> <block>{
<decl_stmt><decl><type><name>VkMemoryPropertyFlags</name></type> <name>propertyFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>heapIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryType</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryHeap</name> <block>{
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkMemoryHeapFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryHeap</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMappedMemoryRange</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMappedMemoryRange</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkFormatProperties</name> <block>{
<decl_stmt><decl><type><name>VkFormatFeatureFlags</name></type> <name>linearTilingFeatures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormatFeatureFlags</name></type> <name>optimalTilingFeatures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormatFeatureFlags</name></type> <name>bufferFeatures</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkFormatProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageFormatProperties</name> <block>{
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>maxExtent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxMipLevels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxArrayLayers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>sampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>maxResourceSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageFormatProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorBufferInfo</name> <block>{
<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>range</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorBufferInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkWriteDescriptorSet</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorSet</name></type> <name>dstSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstBinding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstArrayElement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorType</name></type> <name>descriptorType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDescriptorImageInfo</name> <modifier>*</modifier></type> <name>pImageInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDescriptorBufferInfo</name> <modifier>*</modifier></type> <name>pBufferInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkBufferView</name> <modifier>*</modifier></type> <name>pTexelBufferView</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkWriteDescriptorSet</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBufferCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBufferCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBufferUsageFlags</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSharingMode</name></type> <name>sharingMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueFamilyIndexCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pQueueFamilyIndices</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBufferCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBufferViewCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBufferViewCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>range</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBufferViewCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageSubresource</name> <block>{
<decl_stmt><decl><type><name>VkImageAspectFlags</name></type> <name>aspectMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mipLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>arrayLayer</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageSubresource</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageSubresourceLayers</name> <block>{
<decl_stmt><decl><type><name>VkImageAspectFlags</name></type> <name>aspectMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mipLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>baseArrayLayer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>layerCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageSubresourceLayers</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageSubresourceRange</name> <block>{
<decl_stmt><decl><type><name>VkImageAspectFlags</name></type> <name>aspectMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>baseMipLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>levelCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>baseArrayLayer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>layerCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageSubresourceRange</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryBarrier</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>srcAccessMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>dstAccessMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryBarrier</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBufferMemoryBarrier</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>srcAccessMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>dstAccessMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srcQueueFamilyIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstQueueFamilyIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBufferMemoryBarrier</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageMemoryBarrier</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>srcAccessMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>dstAccessMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>oldLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>newLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srcQueueFamilyIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstQueueFamilyIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageSubresourceRange</name></type> <name>subresourceRange</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageMemoryBarrier</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageType</name></type> <name>imageType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>extent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mipLevels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>arrayLayers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlagBits</name></type> <name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSharingMode</name></type> <name>sharingMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueFamilyIndexCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pQueueFamilyIndices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>initialLayout</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSubresourceLayout</name> <block>{
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>rowPitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>arrayPitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>depthPitch</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSubresourceLayout</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageViewCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageViewCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageViewType</name></type> <name>viewType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkComponentMapping</name></type> <name>components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageSubresourceRange</name></type> <name>subresourceRange</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageViewCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBufferCopy</name> <block>{
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>srcOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>dstOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBufferCopy</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseMemoryBind</name> <block>{
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>resourceOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>memoryOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSparseMemoryBindFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseMemoryBind</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseImageMemoryBind</name> <block>{
<decl_stmt><decl><type><name>VkImageSubresource</name></type> <name>subresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>extent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>memoryOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSparseMemoryBindFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseImageMemoryBind</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseBufferMemoryBindInfo</name> <block>{
<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bindCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSparseMemoryBind</name> <modifier>*</modifier></type> <name>pBinds</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseBufferMemoryBindInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseImageOpaqueMemoryBindInfo</name> <block>{
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bindCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSparseMemoryBind</name> <modifier>*</modifier></type> <name>pBinds</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseImageOpaqueMemoryBindInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseImageMemoryBindInfo</name> <block>{
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bindCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSparseImageMemoryBind</name> <modifier>*</modifier></type> <name>pBinds</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseImageMemoryBindInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBindSparseInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>waitSemaphoreCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSemaphore</name> <modifier>*</modifier></type> <name>pWaitSemaphores</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bufferBindCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSparseBufferMemoryBindInfo</name> <modifier>*</modifier></type> <name>pBufferBinds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>imageOpaqueBindCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSparseImageOpaqueMemoryBindInfo</name> <modifier>*</modifier></type> <name>pImageOpaqueBinds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>imageBindCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSparseImageMemoryBindInfo</name> <modifier>*</modifier></type> <name>pImageBinds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>signalSemaphoreCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSemaphore</name> <modifier>*</modifier></type> <name>pSignalSemaphores</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBindSparseInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageCopy</name> <block>{
<decl_stmt><decl><type><name>VkImageSubresourceLayers</name></type> <name>srcSubresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name>srcOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageSubresourceLayers</name></type> <name>dstSubresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name>dstOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>extent</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageCopy</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageBlit</name> <block>{
<decl_stmt><decl><type><name>VkImageSubresourceLayers</name></type> <name>srcSubresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name><name>srcOffsets</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageSubresourceLayers</name></type> <name>dstSubresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name><name>dstOffsets</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageBlit</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBufferImageCopy</name> <block>{
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>bufferOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bufferRowLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bufferImageHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageSubresourceLayers</name></type> <name>imageSubresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name>imageOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>imageExtent</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBufferImageCopy</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageResolve</name> <block>{
<decl_stmt><decl><type><name>VkImageSubresourceLayers</name></type> <name>srcSubresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name>srcOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageSubresourceLayers</name></type> <name>dstSubresource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkOffset3D</name></type> <name>dstOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent3D</name></type> <name>extent</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageResolve</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkShaderModuleCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkShaderModuleCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>codeSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pCode</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkShaderModuleCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorSetLayoutBinding</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>binding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorType</name></type> <name>descriptorType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkShaderStageFlags</name></type> <name>stageFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSampler</name> <modifier>*</modifier></type> <name>pImmutableSamplers</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorSetLayoutBinding</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorSetLayoutCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorSetLayoutCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bindingCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDescriptorSetLayoutBinding</name> <modifier>*</modifier></type> <name>pBindings</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorSetLayoutCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorPoolCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorPoolCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxSets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>poolSizeCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDescriptorPoolSize</name> <modifier>*</modifier></type> <name>pPoolSizes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorPoolCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineShaderStageCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineShaderStageCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkShaderStageFlagBits</name></type> <name>stage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkShaderModule</name></type> <name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSpecializationInfo</name> <modifier>*</modifier></type> <name>pSpecializationInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineShaderStageCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkComputePipelineCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineShaderStageCreateInfo</name></type> <name>stage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineLayout</name></type> <name>layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipeline</name></type> <name>basePipelineHandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>basePipelineIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkComputePipelineCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineVertexInputStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineVertexInputStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vertexBindingDescriptionCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkVertexInputBindingDescription</name> <modifier>*</modifier></type> <name>pVertexBindingDescriptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vertexAttributeDescriptionCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkVertexInputAttributeDescription</name> <modifier>*</modifier></type> <name>pVertexAttributeDescriptions</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineVertexInputStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineInputAssemblyStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineInputAssemblyStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPrimitiveTopology</name></type> <name>topology</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>primitiveRestartEnable</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineInputAssemblyStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineTessellationStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineTessellationStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>patchControlPoints</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineTessellationStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineViewportStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineViewportStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>viewportCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkViewport</name> <modifier>*</modifier></type> <name>pViewports</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>scissorCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkRect2D</name> <modifier>*</modifier></type> <name>pScissors</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineViewportStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineRasterizationStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineRasterizationStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthClampEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>rasterizerDiscardEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPolygonMode</name></type> <name>polygonMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCullModeFlags</name></type> <name>cullMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFrontFace</name></type> <name>frontFace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthBiasEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>depthBiasConstantFactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>depthBiasClamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>depthBiasSlopeFactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lineWidth</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineRasterizationStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineMultisampleStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineMultisampleStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlagBits</name></type> <name>rasterizationSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sampleShadingEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minSampleShading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSampleMask</name> <modifier>*</modifier></type> <name>pSampleMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>alphaToCoverageEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>alphaToOneEnable</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineMultisampleStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineColorBlendAttachmentState</name> <block>{
<decl_stmt><decl><type><name>VkBool32</name></type> <name>blendEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBlendFactor</name></type> <name>srcColorBlendFactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBlendFactor</name></type> <name>dstColorBlendFactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBlendOp</name></type> <name>colorBlendOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBlendFactor</name></type> <name>srcAlphaBlendFactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBlendFactor</name></type> <name>dstAlphaBlendFactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBlendOp</name></type> <name>alphaBlendOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkColorComponentFlags</name></type> <name>colorWriteMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineColorBlendAttachmentState</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineColorBlendStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineColorBlendStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>logicOpEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkLogicOp</name></type> <name>logicOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>attachmentCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineColorBlendAttachmentState</name> <modifier>*</modifier></type> <name>pAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>blendConstants</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineColorBlendStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineDynamicStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineDynamicStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dynamicStateCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDynamicState</name> <modifier>*</modifier></type> <name>pDynamicStates</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineDynamicStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineDepthStencilStateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineDepthStencilStateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthTestEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthWriteEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCompareOp</name></type> <name>depthCompareOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthBoundsTestEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>stencilTestEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkStencilOpState</name></type> <name>front</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkStencilOpState</name></type> <name>back</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minDepthBounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxDepthBounds</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineDepthStencilStateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkGraphicsPipelineCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stageCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineShaderStageCreateInfo</name> <modifier>*</modifier></type> <name>pStages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineVertexInputStateCreateInfo</name> <modifier>*</modifier></type> <name>pVertexInputState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineInputAssemblyStateCreateInfo</name> <modifier>*</modifier></type> <name>pInputAssemblyState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineTessellationStateCreateInfo</name> <modifier>*</modifier></type> <name>pTessellationState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineViewportStateCreateInfo</name> <modifier>*</modifier></type> <name>pViewportState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineRasterizationStateCreateInfo</name> <modifier>*</modifier></type> <name>pRasterizationState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineMultisampleStateCreateInfo</name> <modifier>*</modifier></type> <name>pMultisampleState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineDepthStencilStateCreateInfo</name> <modifier>*</modifier></type> <name>pDepthStencilState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineColorBlendStateCreateInfo</name> <modifier>*</modifier></type> <name>pColorBlendState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineDynamicStateCreateInfo</name> <modifier>*</modifier></type> <name>pDynamicState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineLayout</name></type> <name>layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkRenderPass</name></type> <name>renderPass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipeline</name></type> <name>basePipelineHandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>basePipelineIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkGraphicsPipelineCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineCacheCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineCacheCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>initialDataSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pInitialData</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineCacheCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPushConstantRange</name> <block>{
<decl_stmt><decl><type><name>VkShaderStageFlags</name></type> <name>stageFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPushConstantRange</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPipelineLayoutCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineLayoutCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>setLayoutCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDescriptorSetLayout</name> <modifier>*</modifier></type> <name>pSetLayouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pushConstantRangeCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPushConstantRange</name> <modifier>*</modifier></type> <name>pPushConstantRanges</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPipelineLayoutCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSamplerCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFilter</name></type> <name>magFilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFilter</name></type> <name>minFilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerMipmapMode</name></type> <name>mipmapMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerAddressMode</name></type> <name>addressModeU</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerAddressMode</name></type> <name>addressModeV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerAddressMode</name></type> <name>addressModeW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mipLodBias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>anisotropyEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxAnisotropy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>compareEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCompareOp</name></type> <name>compareOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minLod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxLod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBorderColor</name></type> <name>borderColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>unnormalizedCoordinates</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSamplerCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkCommandPoolCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCommandPoolCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueFamilyIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkCommandPoolCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkCommandBufferInheritanceInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkRenderPass</name></type> <name>renderPass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFramebuffer</name></type> <name>framebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>occlusionQueryEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkQueryControlFlags</name></type> <name>queryFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkQueryPipelineStatisticFlags</name></type> <name>pipelineStatistics</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkCommandBufferInheritanceInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkCommandBufferBeginInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCommandBufferUsageFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkCommandBufferInheritanceInfo</name> <modifier>*</modifier></type> <name>pInheritanceInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkCommandBufferBeginInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkRenderPassBeginInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkRenderPass</name></type> <name>renderPass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFramebuffer</name></type> <name>framebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkRect2D</name></type> <name>renderArea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>clearValueCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkClearValue</name> <modifier>*</modifier></type> <name>pClearValues</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkRenderPassBeginInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkClearAttachment</name> <block>{
<decl_stmt><decl><type><name>VkImageAspectFlags</name></type> <name>aspectMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>colorAttachment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkClearValue</name></type> <name>clearValue</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkClearAttachment</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkAttachmentDescription</name> <block>{
<decl_stmt><decl><type><name>VkAttachmentDescriptionFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlagBits</name></type> <name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAttachmentLoadOp</name></type> <name>loadOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAttachmentStoreOp</name></type> <name>storeOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAttachmentLoadOp</name></type> <name>stencilLoadOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAttachmentStoreOp</name></type> <name>stencilStoreOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>initialLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>finalLayout</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkAttachmentDescription</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSubpassDescription</name> <block>{
<decl_stmt><decl><type><name>VkSubpassDescriptionFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineBindPoint</name></type> <name>pipelineBindPoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>inputAttachmentCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkAttachmentReference</name> <modifier>*</modifier></type> <name>pInputAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>colorAttachmentCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkAttachmentReference</name> <modifier>*</modifier></type> <name>pColorAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkAttachmentReference</name> <modifier>*</modifier></type> <name>pResolveAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkAttachmentReference</name> <modifier>*</modifier></type> <name>pDepthStencilAttachment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>preserveAttachmentCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pPreserveAttachments</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSubpassDescription</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSubpassDependency</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srcSubpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstSubpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineStageFlags</name></type> <name>srcStageMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineStageFlags</name></type> <name>dstStageMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>srcAccessMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>dstAccessMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDependencyFlags</name></type> <name>dependencyFlags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSubpassDependency</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkRenderPassCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkRenderPassCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>attachmentCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkAttachmentDescription</name> <modifier>*</modifier></type> <name>pAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subpassCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSubpassDescription</name> <modifier>*</modifier></type> <name>pSubpasses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dependencyCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSubpassDependency</name> <modifier>*</modifier></type> <name>pDependencies</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkRenderPassCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkEventCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkEventCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkEventCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkFenceCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFenceCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkFenceCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceFeatures</name> <block>{
<decl_stmt><decl><type><name>VkBool32</name></type> <name>robustBufferAccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>fullDrawIndexUint32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>imageCubeArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>independentBlend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>geometryShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>tessellationShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sampleRateShading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>dualSrcBlend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>logicOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>multiDrawIndirect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>drawIndirectFirstInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthClamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthBiasClamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>fillModeNonSolid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>depthBounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>wideLines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>largePoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>alphaToOne</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>multiViewport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>samplerAnisotropy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>textureCompressionETC2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>textureCompressionASTC_LDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>textureCompressionBC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>occlusionQueryPrecise</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>pipelineStatisticsQuery</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>vertexPipelineStoresAndAtomics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>fragmentStoresAndAtomics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderTessellationAndGeometryPointSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderImageGatherExtended</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderStorageImageExtendedFormats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderStorageImageMultisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderStorageImageReadWithoutFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderStorageImageWriteWithoutFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderUniformBufferArrayDynamicIndexing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderSampledImageArrayDynamicIndexing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderStorageBufferArrayDynamicIndexing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderStorageImageArrayDynamicIndexing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderClipDistance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderCullDistance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderFloat64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderInt64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderInt16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderResourceResidency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderResourceMinLod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseBinding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidencyBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidencyImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidencyImage3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidency2Samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidency4Samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidency8Samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidency16Samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>sparseResidencyAliased</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>variableMultisampleRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>inheritedQueries</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceFeatures</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceSparseProperties</name> <block>{
<decl_stmt><decl><type><name>VkBool32</name></type> <name>residencyStandard2DBlockShape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>residencyStandard2DMultisampleBlockShape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>residencyStandard3DBlockShape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>residencyAlignedMipSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>residencyNonResidentStrict</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceSparseProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceLimits</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxImageDimension1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxImageDimension2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxImageDimension3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxImageDimensionCube</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxImageArrayLayers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTexelBufferElements</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxUniformBufferRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxStorageBufferRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPushConstantsSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxMemoryAllocationCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxSamplerAllocationCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>bufferImageGranularity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>sparseAddressSpaceSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxBoundDescriptorSets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerStageDescriptorSamplers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerStageDescriptorUniformBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerStageDescriptorStorageBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerStageDescriptorSampledImages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerStageDescriptorStorageImages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerStageDescriptorInputAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerStageResources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetSamplers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetUniformBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetUniformBuffersDynamic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetStorageBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetStorageBuffersDynamic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetSampledImages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetStorageImages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDescriptorSetInputAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxVertexInputAttributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxVertexInputBindings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxVertexInputAttributeOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxVertexInputBindingStride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxVertexOutputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationGenerationLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationPatchSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationControlPerVertexInputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationControlPerVertexOutputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationControlPerPatchOutputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationControlTotalOutputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationEvaluationInputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTessellationEvaluationOutputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxGeometryShaderInvocations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxGeometryInputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxGeometryOutputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxGeometryOutputVertices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxGeometryTotalOutputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxFragmentInputComponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxFragmentOutputAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxFragmentDualSrcAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxFragmentCombinedOutputResources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxComputeSharedMemorySize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>maxComputeWorkGroupCount</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxComputeWorkGroupInvocations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>maxComputeWorkGroupSize</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subPixelPrecisionBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subTexelPrecisionBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mipmapPrecisionBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDrawIndexedIndexValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDrawIndirectCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxSamplerLodBias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxSamplerAnisotropy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxViewports</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>maxViewportDimensions</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>viewportBoundsRange</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>viewportSubPixelBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>minMemoryMapAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>minTexelBufferOffsetAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>minUniformBufferOffsetAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>minStorageBufferOffsetAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>minTexelOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTexelOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>minTexelGatherOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxTexelGatherOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minInterpolationOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxInterpolationOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subPixelInterpolationOffsetBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxFramebufferWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxFramebufferHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxFramebufferLayers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>framebufferColorSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>framebufferDepthSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>framebufferStencilSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>framebufferNoAttachmentsSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxColorAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>sampledImageColorSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>sampledImageIntegerSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>sampledImageDepthSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>sampledImageStencilSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlags</name></type> <name>storageImageSampleCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxSampleMaskWords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>timestampComputeAndGraphics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>timestampPeriod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxClipDistances</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxCullDistances</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxCombinedClipAndCullDistances</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>discreteQueuePriorities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pointSizeRange</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lineWidthRange</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pointSizeGranularity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lineWidthGranularity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>strictLines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>standardSampleLocations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>optimalBufferCopyOffsetAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>optimalBufferCopyRowPitchAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>nonCoherentAtomSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceLimits</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSemaphoreCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSemaphoreCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSemaphoreCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkQueryPoolCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkQueryPoolCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkQueryType</name></type> <name>queryType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queryCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkQueryPipelineStatisticFlags</name></type> <name>pipelineStatistics</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkQueryPoolCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkFramebufferCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFramebufferCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkRenderPass</name></type> <name>renderPass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>attachmentCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkImageView</name> <modifier>*</modifier></type> <name>pAttachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>layers</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkFramebufferCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSubmitInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>waitSemaphoreCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSemaphore</name> <modifier>*</modifier></type> <name>pWaitSemaphores</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPipelineStageFlags</name> <modifier>*</modifier></type> <name>pWaitDstStageMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>commandBufferCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkCommandBuffer</name> <modifier>*</modifier></type> <name>pCommandBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>signalSemaphoreCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkSemaphore</name> <modifier>*</modifier></type> <name>pSignalSemaphores</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSubmitInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSurfaceCapabilitiesKHR</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>minImageCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxImageCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent2D</name></type> <name>currentExtent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent2D</name></type> <name>minImageExtent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent2D</name></type> <name>maxImageExtent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxImageArrayLayers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSurfaceTransformFlagsKHR</name></type> <name>supportedTransforms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSurfaceTransformFlagBitsKHR</name></type> <name>currentTransform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCompositeAlphaFlagsKHR</name></type> <name>supportedCompositeAlpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageUsageFlags</name></type> <name>supportedUsageFlags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSurfaceCapabilitiesKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSwapchainCreateInfoKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSwapchainCreateFlagsKHR</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>minImageCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>imageFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkColorSpaceKHR</name></type> <name>imageColorSpace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtent2D</name></type> <name>imageExtent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>imageArrayLayers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageUsageFlags</name></type> <name>imageUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSharingMode</name></type> <name>imageSharingMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueFamilyIndexCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pQueueFamilyIndices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSurfaceTransformFlagBitsKHR</name></type> <name>preTransform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkCompositeAlphaFlagBitsKHR</name></type> <name>compositeAlpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPresentModeKHR</name></type> <name>presentMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>clipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSwapchainKHR</name></type> <name>oldSwapchain</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSwapchainCreateInfoKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDebugReportCallbackCreateInfoEXT</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDebugReportFlagsEXT</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDebugReportCallbackEXT</name></type> <name>pfnCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDebugReportCallbackCreateInfoEXT</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceFeatures2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPhysicalDeviceFeatures</name></type> <name>features</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceFeatures2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkFormatProperties2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormatProperties</name></type> <name>formatProperties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkFormatProperties2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageFormatProperties2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageFormatProperties</name></type> <name>imageFormatProperties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageFormatProperties2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceImageFormatInfo2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceImageFormatInfo2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkQueueFamilyProperties2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkQueueFamilyProperties</name></type> <name>queueFamilyProperties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkQueueFamilyProperties2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseImageFormatProperties2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSparseImageFormatProperties</name></type> <name>properties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseImageFormatProperties2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceSparseImageFormatInfo2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampleCountFlagBits</name></type> <name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceSparseImageFormatInfo2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceVariablePointersFeatures</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>variablePointersStorageBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>variablePointers</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceVariablePointersFeatures</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>VkPhysicalDeviceVariablePointerFeatures</name></name></type> <name>VkPhysicalDeviceVariablePointerFeatures</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExternalMemoryProperties</name> <block>{
<decl_stmt><decl><type><name>VkExternalMemoryFeatureFlags</name></type> <name>externalMemoryFeatures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlags</name></type> <name>exportFromImportedHandleTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlags</name></type> <name>compatibleHandleTypes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExternalMemoryProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExternalImageFormatProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryProperties</name></type> <name>externalMemoryProperties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExternalImageFormatProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceExternalBufferInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBufferCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBufferUsageFlags</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlagBits</name></type> <name>handleType</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceExternalBufferInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExternalBufferProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryProperties</name></type> <name>externalMemoryProperties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExternalBufferProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceIDProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>deviceUUID</name> <index>[ <expr><name>VK_UUID_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>driverUUID</name> <index>[ <expr><name>VK_UUID_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>deviceLUID</name> <index>[ <expr><name>VK_LUID_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceNodeMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>deviceLUIDValid</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceIDProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExternalMemoryImageCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlags</name></type> <name>handleTypes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExternalMemoryImageCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExternalMemoryBufferCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlags</name></type> <name>handleTypes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExternalMemoryBufferCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExportMemoryAllocateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlags</name></type> <name>handleTypes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExportMemoryAllocateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExternalSemaphoreProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalSemaphoreHandleTypeFlags</name></type> <name>exportFromImportedHandleTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalSemaphoreHandleTypeFlags</name></type> <name>compatibleHandleTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalSemaphoreFeatureFlags</name></type> <name>externalSemaphoreFeatures</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExternalSemaphoreProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExportSemaphoreCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalSemaphoreHandleTypeFlags</name></type> <name>handleTypes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExportSemaphoreCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExternalFenceProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalFenceHandleTypeFlags</name></type> <name>exportFromImportedHandleTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalFenceHandleTypeFlags</name></type> <name>compatibleHandleTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalFenceFeatureFlags</name></type> <name>externalFenceFeatures</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExternalFenceProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkExportFenceCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExternalFenceHandleTypeFlags</name></type> <name>handleTypes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExportFenceCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceMultiviewFeatures</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>multiview</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>multiviewGeometryShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>multiviewTessellationShader</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceMultiviewFeatures</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceGroupProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>physicalDeviceCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPhysicalDevice</name></type> <name><name>physicalDevices</name> <index>[ <expr><name>VK_MAX_DEVICE_GROUP_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>subsetAllocation</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceGroupProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryAllocateFlagsInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkMemoryAllocateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryAllocateFlagsInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBindBufferMemoryInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>memoryOffset</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBindBufferMemoryInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkBindImageMemoryInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImage</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>memoryOffset</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkBindImageMemoryInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupPresentCapabilitiesKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>presentMask</name> <index>[ <expr><name>VK_MAX_DEVICE_GROUP_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceGroupPresentModeFlagsKHR</name></type> <name>modes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupPresentCapabilitiesKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceGroupSwapchainCreateInfoKHR</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceGroupPresentModeFlagsKHR</name></type> <name>modes</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceGroupSwapchainCreateInfoKHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorUpdateTemplateCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorUpdateTemplateCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorUpdateEntryCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDescriptorUpdateTemplateEntry</name> <modifier>*</modifier></type> <name>pDescriptorUpdateEntries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorUpdateTemplateType</name></type> <name>templateType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorSetLayout</name></type> <name>descriptorSetLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineBindPoint</name></type> <name>pipelineBindPoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPipelineLayout</name></type> <name>pipelineLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>set</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorUpdateTemplateCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkInputAttachmentAspectReference</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>inputAttachmentIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageAspectFlags</name></type> <name>aspectMask</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkInputAttachmentAspectReference</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkRenderPassInputAttachmentAspectCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aspectReferenceCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkInputAttachmentAspectReference</name> <modifier>*</modifier></type> <name>pAspectReferences</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkRenderPassInputAttachmentAspectCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDevice16BitStorageFeatures</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>storageBuffer16BitAccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>uniformAndStorageBuffer16BitAccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>storagePushConstant16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>storageInputOutput16</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDevice16BitStorageFeatures</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceSubgroupProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>subgroupSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkShaderStageFlags</name></type> <name>supportedStages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSubgroupFeatureFlags</name></type> <name>supportedOperations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>quadOperationsInAllStages</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceSubgroupProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryRequirements2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkMemoryRequirements</name></type> <name>memoryRequirements</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryRequirements2</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>VkMemoryRequirements2KHR</name></name></type> <name>VkMemoryRequirements2KHR</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSparseImageMemoryRequirements2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSparseImageMemoryRequirements</name></type> <name>memoryRequirements</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSparseImageMemoryRequirements2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkMemoryDedicatedRequirements</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>prefersDedicatedAllocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>requiresDedicatedAllocation</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkMemoryDedicatedRequirements</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkImageViewUsageCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkImageViewUsageCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkSamplerYcbcrConversionCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerYcbcrModelConversion</name></type> <name>ycbcrModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSamplerYcbcrRange</name></type> <name>ycbcrRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkComponentMapping</name></type> <name>components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkChromaLocation</name></type> <name>xChromaOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkChromaLocation</name></type> <name>yChromaOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkFilter</name></type> <name>chromaFilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>forceExplicitReconstruction</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkSamplerYcbcrConversionCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceSamplerYcbcrConversionFeatures</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>samplerYcbcrConversion</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceSamplerYcbcrConversionFeatures</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkProtectedSubmitInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>protectedSubmit</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkProtectedSubmitInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceProtectedMemoryFeatures</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>protectedMemory</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceProtectedMemoryFeatures</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceProtectedMemoryProperties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>protectedNoFault</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceProtectedMemoryProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceQueueInfo2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceQueueCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueFamilyIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceQueueInfo2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceMaintenance3Properties</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxPerSetDescriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceSize</name></type> <name>maxMemoryAllocationSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceMaintenance3Properties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDescriptorSetLayoutSupport</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>supported</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDescriptorSetLayoutSupport</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceShaderDrawParametersFeatures</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkBool32</name></type> <name>shaderDrawParameters</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceShaderDrawParametersFeatures</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>VkPhysicalDeviceShaderDrawParameterFeatures</name></name></type> <name>VkPhysicalDeviceShaderDrawParameterFeatures</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceProperties</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>apiVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>driverVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vendorID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPhysicalDeviceType</name></type> <name>deviceType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>deviceName</name> <index>[ <expr><name>VK_MAX_PHYSICAL_DEVICE_NAME_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pipelineCacheUUID</name> <index>[ <expr><name>VK_UUID_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPhysicalDeviceLimits</name></type> <name>limits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPhysicalDeviceSparseProperties</name></type> <name>sparseProperties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkDeviceCreateInfo</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDeviceCreateFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queueCreateInfoCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkDeviceQueueCreateInfo</name> <modifier>*</modifier></type> <name>pQueueCreateInfos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>enabledLayerCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppEnabledLayerNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>enabledExtensionCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppEnabledExtensionNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VkPhysicalDeviceFeatures</name> <modifier>*</modifier></type> <name>pEnabledFeatures</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkDeviceCreateInfo</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceMemoryProperties</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>memoryTypeCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkMemoryType</name></type> <name><name>memoryTypes</name> <index>[ <expr><name>VK_MAX_MEMORY_TYPES</name></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>memoryHeapCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkMemoryHeap</name></type> <name><name>memoryHeaps</name> <index>[ <expr><name>VK_MAX_MEMORY_HEAPS</name></expr> ]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceMemoryProperties</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceProperties2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPhysicalDeviceProperties</name></type> <name>properties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceProperties2</name>;</typedef>
<typedef>typedef <type><struct>struct <name>VkPhysicalDeviceMemoryProperties2</name> <block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkPhysicalDeviceMemoryProperties</name></type> <name>memoryProperties</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkPhysicalDeviceMemoryProperties2</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_VERSION_1_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_VK_VERSION_1_0</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_VERSION_1_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_VK_VERSION_1_1</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_EXT_debug_report</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_VK_EXT_debug_report</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_KHR_surface</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_VK_KHR_surface</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_KHR_swapchain</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>GLAD_VK_KHR_swapchain</name></decl>;</decl_stmt>


<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkAcquireNextImage2KHR</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAcquireNextImageInfoKHR</name> <modifier>*</modifier></type> <name>pAcquireInfo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pImageIndex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkAcquireNextImageKHR</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSwapchainKHR</name></type> <name>swapchain</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>VkSemaphore</name></type> <name>semaphore</name></decl></parameter>, <parameter><decl><type><name>VkFence</name></type> <name>fence</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pImageIndex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkAllocateCommandBuffers</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkCommandBufferAllocateInfo</name> <modifier>*</modifier></type> <name>pAllocateInfo</name></decl></parameter>, <parameter><decl><type><name>VkCommandBuffer</name> <modifier>*</modifier></type> <name>pCommandBuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkAllocateDescriptorSets</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDescriptorSetAllocateInfo</name> <modifier>*</modifier></type> <name>pAllocateInfo</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorSet</name> <modifier>*</modifier></type> <name>pDescriptorSets</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkAllocateMemory</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkMemoryAllocateInfo</name> <modifier>*</modifier></type> <name>pAllocateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name> <modifier>*</modifier></type> <name>pMemory</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkBeginCommandBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkCommandBufferBeginInfo</name> <modifier>*</modifier></type> <name>pBeginInfo</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkBindBufferMemory</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>memoryOffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkBindBufferMemory2</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bindInfoCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBindBufferMemoryInfo</name> <modifier>*</modifier></type> <name>pBindInfos</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkBindImageMemory</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>memoryOffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkBindImageMemory2</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bindInfoCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBindImageMemoryInfo</name> <modifier>*</modifier></type> <name>pBindInfos</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdBeginQuery</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name></type> <name>queryPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>VkQueryControlFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdBeginRenderPass</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkRenderPassBeginInfo</name> <modifier>*</modifier></type> <name>pRenderPassBegin</name></decl></parameter>, <parameter><decl><type><name>VkSubpassContents</name></type> <name>contents</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdBindDescriptorSets</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkPipelineBindPoint</name></type> <name>pipelineBindPoint</name></decl></parameter>, <parameter><decl><type><name>VkPipelineLayout</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstSet</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>descriptorSetCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDescriptorSet</name> <modifier>*</modifier></type> <name>pDescriptorSets</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dynamicOffsetCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type> <name>pDynamicOffsets</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdBindIndexBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>VkIndexType</name></type> <name>indexType</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdBindPipeline</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkPipelineBindPoint</name></type> <name>pipelineBindPoint</name></decl></parameter>, <parameter><decl><type><name>VkPipeline</name></type> <name>pipeline</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdBindVertexBuffers</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstBinding</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bindingCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBuffer</name> <modifier>*</modifier></type> <name>pBuffers</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDeviceSize</name> <modifier>*</modifier></type> <name>pOffsets</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdBlitImage</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>srcImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>srcImageLayout</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>dstImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>dstImageLayout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>regionCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageBlit</name> <modifier>*</modifier></type> <name>pRegions</name></decl></parameter>, <parameter><decl><type><name>VkFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdClearAttachments</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>attachmentCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkClearAttachment</name> <modifier>*</modifier></type> <name>pAttachments</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rectCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkClearRect</name> <modifier>*</modifier></type> <name>pRects</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdClearColorImage</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>imageLayout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkClearColorValue</name> <modifier>*</modifier></type> <name>pColor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rangeCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageSubresourceRange</name> <modifier>*</modifier></type> <name>pRanges</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdClearDepthStencilImage</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>imageLayout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkClearDepthStencilValue</name> <modifier>*</modifier></type> <name>pDepthStencil</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rangeCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageSubresourceRange</name> <modifier>*</modifier></type> <name>pRanges</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdCopyBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>srcBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>dstBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>regionCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferCopy</name> <modifier>*</modifier></type> <name>pRegions</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdCopyBufferToImage</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>srcBuffer</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>dstImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>dstImageLayout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>regionCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferImageCopy</name> <modifier>*</modifier></type> <name>pRegions</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdCopyImage</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>srcImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>srcImageLayout</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>dstImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>dstImageLayout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>regionCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageCopy</name> <modifier>*</modifier></type> <name>pRegions</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdCopyImageToBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>srcImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>srcImageLayout</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>dstBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>regionCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferImageCopy</name> <modifier>*</modifier></type> <name>pRegions</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdCopyQueryPoolResults</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name></type> <name>queryPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstQuery</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queryCount</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>dstBuffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>dstOffset</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>VkQueryResultFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdDispatch</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>groupCountX</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>groupCountY</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>groupCountZ</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdDispatchBase</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>baseGroupX</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>baseGroupY</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>baseGroupZ</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>groupCountX</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>groupCountY</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>groupCountZ</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdDispatchIndirect</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdDraw</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vertexCount</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>instanceCount</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstVertex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstInstance</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdDrawIndexed</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>indexCount</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>instanceCount</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vertexOffset</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstInstance</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdDrawIndexedIndirect</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>drawCount</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdDrawIndirect</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>drawCount</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdEndQuery</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name></type> <name>queryPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>query</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdEndRenderPass</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdExecuteCommands</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>commandBufferCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkCommandBuffer</name> <modifier>*</modifier></type> <name>pCommandBuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdFillBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>dstBuffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>dstOffset</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdNextSubpass</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkSubpassContents</name></type> <name>contents</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdPipelineBarrier</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlags</name></type> <name>srcStageMask</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlags</name></type> <name>dstStageMask</name></decl></parameter>, <parameter><decl><type><name>VkDependencyFlags</name></type> <name>dependencyFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>memoryBarrierCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkMemoryBarrier</name> <modifier>*</modifier></type> <name>pMemoryBarriers</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bufferMemoryBarrierCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferMemoryBarrier</name> <modifier>*</modifier></type> <name>pBufferMemoryBarriers</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>imageMemoryBarrierCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageMemoryBarrier</name> <modifier>*</modifier></type> <name>pImageMemoryBarriers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdPushConstants</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkPipelineLayout</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>VkShaderStageFlags</name></type> <name>stageFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pValues</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdResetEvent</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlags</name></type> <name>stageMask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdResetQueryPool</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name></type> <name>queryPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstQuery</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queryCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdResolveImage</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>srcImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>srcImageLayout</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>dstImage</name></decl></parameter>, <parameter><decl><type><name>VkImageLayout</name></type> <name>dstImageLayout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>regionCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageResolve</name> <modifier>*</modifier></type> <name>pRegions</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetBlendConstants</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>blendConstants</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetDepthBias</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>depthBiasConstantFactor</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>depthBiasClamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>depthBiasSlopeFactor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetDepthBounds</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minDepthBounds</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxDepthBounds</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetDeviceMask</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>deviceMask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetEvent</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlags</name></type> <name>stageMask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetLineWidth</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>lineWidth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetScissor</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstScissor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>scissorCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkRect2D</name> <modifier>*</modifier></type> <name>pScissors</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetStencilCompareMask</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkStencilFaceFlags</name></type> <name>faceMask</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>compareMask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetStencilReference</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkStencilFaceFlags</name></type> <name>faceMask</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>reference</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetStencilWriteMask</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkStencilFaceFlags</name></type> <name>faceMask</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>writeMask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdSetViewport</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstViewport</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>viewportCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkViewport</name> <modifier>*</modifier></type> <name>pViewports</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdUpdateBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>dstBuffer</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>dstOffset</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdWaitEvents</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>eventCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkEvent</name> <modifier>*</modifier></type> <name>pEvents</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlags</name></type> <name>srcStageMask</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlags</name></type> <name>dstStageMask</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>memoryBarrierCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkMemoryBarrier</name> <modifier>*</modifier></type> <name>pMemoryBarriers</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bufferMemoryBarrierCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferMemoryBarrier</name> <modifier>*</modifier></type> <name>pBufferMemoryBarriers</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>imageMemoryBarrierCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageMemoryBarrier</name> <modifier>*</modifier></type> <name>pImageMemoryBarriers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCmdWriteTimestamp</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlagBits</name></type> <name>pipelineStage</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name></type> <name>queryPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>query</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name> <modifier>*</modifier></type> <name>pBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateBufferView</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferViewCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkBufferView</name> <modifier>*</modifier></type> <name>pView</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateCommandPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkCommandPoolCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkCommandPool</name> <modifier>*</modifier></type> <name>pCommandPool</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateComputePipelines</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkPipelineCache</name></type> <name>pipelineCache</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>createInfoCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkComputePipelineCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkPipeline</name> <modifier>*</modifier></type> <name>pPipelines</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateDebugReportCallbackEXT</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDebugReportCallbackCreateInfoEXT</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkDebugReportCallbackEXT</name> <modifier>*</modifier></type> <name>pCallback</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateDescriptorPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDescriptorPoolCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorPool</name> <modifier>*</modifier></type> <name>pDescriptorPool</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateDescriptorSetLayout</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDescriptorSetLayoutCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorSetLayout</name> <modifier>*</modifier></type> <name>pSetLayout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateDescriptorUpdateTemplate</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDescriptorUpdateTemplateCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorUpdateTemplate</name> <modifier>*</modifier></type> <name>pDescriptorUpdateTemplate</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateDevice</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDeviceCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkDevice</name> <modifier>*</modifier></type> <name>pDevice</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateEvent</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkEventCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkEvent</name> <modifier>*</modifier></type> <name>pEvent</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateFence</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkFenceCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkFence</name> <modifier>*</modifier></type> <name>pFence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateFramebuffer</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkFramebufferCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkFramebuffer</name> <modifier>*</modifier></type> <name>pFramebuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateGraphicsPipelines</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkPipelineCache</name></type> <name>pipelineCache</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>createInfoCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkGraphicsPipelineCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkPipeline</name> <modifier>*</modifier></type> <name>pPipelines</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateImage</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkImage</name> <modifier>*</modifier></type> <name>pImage</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateImageView</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageViewCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkImageView</name> <modifier>*</modifier></type> <name>pView</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateInstance</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VkInstanceCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkInstance</name> <modifier>*</modifier></type> <name>pInstance</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreatePipelineCache</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPipelineCacheCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkPipelineCache</name> <modifier>*</modifier></type> <name>pPipelineCache</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreatePipelineLayout</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPipelineLayoutCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkPipelineLayout</name> <modifier>*</modifier></type> <name>pPipelineLayout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateQueryPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkQueryPoolCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name> <modifier>*</modifier></type> <name>pQueryPool</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateRenderPass</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkRenderPassCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkRenderPass</name> <modifier>*</modifier></type> <name>pRenderPass</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateSampler</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkSamplerCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkSampler</name> <modifier>*</modifier></type> <name>pSampler</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateSamplerYcbcrConversion</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkSamplerYcbcrConversionCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkSamplerYcbcrConversion</name> <modifier>*</modifier></type> <name>pYcbcrConversion</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateSemaphore</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkSemaphoreCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkSemaphore</name> <modifier>*</modifier></type> <name>pSemaphore</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateShaderModule</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkShaderModuleCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkShaderModule</name> <modifier>*</modifier></type> <name>pShaderModule</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkCreateSwapchainKHR</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkSwapchainCreateInfoKHR</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>VkSwapchainKHR</name> <modifier>*</modifier></type> <name>pSwapchain</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDebugReportMessageEXT</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>VkDebugReportFlagsEXT</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>VkDebugReportObjectTypeEXT</name></type> <name>objectType</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>messageCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pLayerPrefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pMessage</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyBufferView</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkBufferView</name></type> <name>bufferView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyCommandPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkCommandPool</name></type> <name>commandPool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyDebugReportCallbackEXT</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>VkDebugReportCallbackEXT</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyDescriptorPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorPool</name></type> <name>descriptorPool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyDescriptorSetLayout</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorSetLayout</name></type> <name>descriptorSetLayout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyDescriptorUpdateTemplate</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorUpdateTemplate</name></type> <name>descriptorUpdateTemplate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyDevice</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyEvent</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyFence</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkFence</name></type> <name>fence</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyFramebuffer</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkFramebuffer</name></type> <name>framebuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyImage</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyImageView</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkImageView</name></type> <name>imageView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyInstance</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyPipeline</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkPipeline</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyPipelineCache</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkPipelineCache</name></type> <name>pipelineCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyPipelineLayout</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkPipelineLayout</name></type> <name>pipelineLayout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyQueryPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name></type> <name>queryPool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyRenderPass</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkRenderPass</name></type> <name>renderPass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroySampler</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSampler</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroySamplerYcbcrConversion</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSamplerYcbcrConversion</name></type> <name>ycbcrConversion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroySemaphore</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSemaphore</name></type> <name>semaphore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroyShaderModule</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkShaderModule</name></type> <name>shaderModule</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroySurfaceKHR</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDestroySwapchainKHR</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSwapchainKHR</name></type> <name>swapchain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkDeviceWaitIdle</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEndCommandBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEnumerateDeviceExtensionProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pLayerName</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkExtensionProperties</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEnumerateDeviceLayerProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkLayerProperties</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEnumerateInstanceExtensionProperties</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pLayerName</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkExtensionProperties</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEnumerateInstanceLayerProperties</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkLayerProperties</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEnumerateInstanceVersion</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pApiVersion</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEnumeratePhysicalDeviceGroups</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPhysicalDeviceGroupCount</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDeviceGroupProperties</name> <modifier>*</modifier></type> <name>pPhysicalDeviceGroupProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkEnumeratePhysicalDevices</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPhysicalDeviceCount</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDevice</name> <modifier>*</modifier></type> <name>pPhysicalDevices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkFlushMappedMemoryRanges</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>memoryRangeCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkMappedMemoryRange</name> <modifier>*</modifier></type> <name>pMemoryRanges</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkFreeCommandBuffers</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkCommandPool</name></type> <name>commandPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>commandBufferCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkCommandBuffer</name> <modifier>*</modifier></type> <name>pCommandBuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkFreeDescriptorSets</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorPool</name></type> <name>descriptorPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>descriptorSetCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDescriptorSet</name> <modifier>*</modifier></type> <name>pDescriptorSets</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkFreeMemory</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type> <name>pAllocator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetBufferMemoryRequirements</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>VkMemoryRequirements</name> <modifier>*</modifier></type> <name>pMemoryRequirements</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetBufferMemoryRequirements2</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBufferMemoryRequirementsInfo2</name> <modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>VkMemoryRequirements2</name> <modifier>*</modifier></type> <name>pMemoryRequirements</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDescriptorSetLayoutSupport</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDescriptorSetLayoutCreateInfo</name> <modifier>*</modifier></type> <name>pCreateInfo</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorSetLayoutSupport</name> <modifier>*</modifier></type> <name>pSupport</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDeviceGroupPeerMemoryFeatures</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>heapIndex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>localDeviceIndex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>remoteDeviceIndex</name></decl></parameter>, <parameter><decl><type><name>VkPeerMemoryFeatureFlags</name> <modifier>*</modifier></type> <name>pPeerMemoryFeatures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDeviceGroupPresentCapabilitiesKHR</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDeviceGroupPresentCapabilitiesKHR</name> <modifier>*</modifier></type> <name>pDeviceGroupPresentCapabilities</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDeviceGroupSurfacePresentModesKHR</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VkDeviceGroupPresentModeFlagsKHR</name> <modifier>*</modifier></type> <name>pModes</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDeviceMemoryCommitment</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name> <modifier>*</modifier></type> <name>pCommittedMemoryInBytes</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PFN_vkVoidFunction</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDeviceProcAddr</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDeviceQueue</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queueFamilyIndex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queueIndex</name></decl></parameter>, <parameter><decl><type><name>VkQueue</name> <modifier>*</modifier></type> <name>pQueue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetDeviceQueue2</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkDeviceQueueInfo2</name> <modifier>*</modifier></type> <name>pQueueInfo</name></decl></parameter>, <parameter><decl><type><name>VkQueue</name> <modifier>*</modifier></type> <name>pQueue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetEventStatus</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetFenceStatus</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkFence</name></type> <name>fence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetImageMemoryRequirements</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>VkMemoryRequirements</name> <modifier>*</modifier></type> <name>pMemoryRequirements</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetImageMemoryRequirements2</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageMemoryRequirementsInfo2</name> <modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>VkMemoryRequirements2</name> <modifier>*</modifier></type> <name>pMemoryRequirements</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetImageSparseMemoryRequirements</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pSparseMemoryRequirementCount</name></decl></parameter>, <parameter><decl><type><name>VkSparseImageMemoryRequirements</name> <modifier>*</modifier></type> <name>pSparseMemoryRequirements</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetImageSparseMemoryRequirements2</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageSparseMemoryRequirementsInfo2</name> <modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pSparseMemoryRequirementCount</name></decl></parameter>, <parameter><decl><type><name>VkSparseImageMemoryRequirements2</name> <modifier>*</modifier></type> <name>pSparseMemoryRequirements</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetImageSubresourceLayout</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkImageSubresource</name> <modifier>*</modifier></type> <name>pSubresource</name></decl></parameter>, <parameter><decl><type><name>VkSubresourceLayout</name> <modifier>*</modifier></type> <name>pLayout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PFN_vkVoidFunction</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetInstanceProcAddr</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceExternalBufferProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPhysicalDeviceExternalBufferInfo</name> <modifier>*</modifier></type> <name>pExternalBufferInfo</name></decl></parameter>, <parameter><decl><type><name>VkExternalBufferProperties</name> <modifier>*</modifier></type> <name>pExternalBufferProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceExternalFenceProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPhysicalDeviceExternalFenceInfo</name> <modifier>*</modifier></type> <name>pExternalFenceInfo</name></decl></parameter>, <parameter><decl><type><name>VkExternalFenceProperties</name> <modifier>*</modifier></type> <name>pExternalFenceProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceExternalSemaphoreProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPhysicalDeviceExternalSemaphoreInfo</name> <modifier>*</modifier></type> <name>pExternalSemaphoreInfo</name></decl></parameter>, <parameter><decl><type><name>VkExternalSemaphoreProperties</name> <modifier>*</modifier></type> <name>pExternalSemaphoreProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceFeatures</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDeviceFeatures</name> <modifier>*</modifier></type> <name>pFeatures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceFeatures2</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDeviceFeatures2</name> <modifier>*</modifier></type> <name>pFeatures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceFormatProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>VkFormatProperties</name> <modifier>*</modifier></type> <name>pFormatProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceFormatProperties2</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>VkFormatProperties2</name> <modifier>*</modifier></type> <name>pFormatProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceImageFormatProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>VkImageType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl></parameter>, <parameter><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name></decl></parameter>, <parameter><decl><type><name>VkImageCreateFlags</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>VkImageFormatProperties</name> <modifier>*</modifier></type> <name>pImageFormatProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceImageFormatProperties2</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPhysicalDeviceImageFormatInfo2</name> <modifier>*</modifier></type> <name>pImageFormatInfo</name></decl></parameter>, <parameter><decl><type><name>VkImageFormatProperties2</name> <modifier>*</modifier></type> <name>pImageFormatProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceMemoryProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDeviceMemoryProperties</name> <modifier>*</modifier></type> <name>pMemoryProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceMemoryProperties2</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDeviceMemoryProperties2</name> <modifier>*</modifier></type> <name>pMemoryProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDevicePresentRectanglesKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pRectCount</name></decl></parameter>, <parameter><decl><type><name>VkRect2D</name> <modifier>*</modifier></type> <name>pRects</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDeviceProperties</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceProperties2</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDeviceProperties2</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceQueueFamilyProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pQueueFamilyPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkQueueFamilyProperties</name> <modifier>*</modifier></type> <name>pQueueFamilyProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceQueueFamilyProperties2</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pQueueFamilyPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkQueueFamilyProperties2</name> <modifier>*</modifier></type> <name>pQueueFamilyProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>VkImageType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VkSampleCountFlagBits</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>VkImageUsageFlags</name></type> <name>usage</name></decl></parameter>, <parameter><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkSparseImageFormatProperties</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties2</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPhysicalDeviceSparseImageFormatInfo2</name> <modifier>*</modifier></type> <name>pFormatInfo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPropertyCount</name></decl></parameter>, <parameter><decl><type><name>VkSparseImageFormatProperties2</name> <modifier>*</modifier></type> <name>pProperties</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceCapabilitiesKHR</name> <modifier>*</modifier></type> <name>pSurfaceCapabilities</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceSurfaceFormatsKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pSurfaceFormatCount</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceFormatKHR</name> <modifier>*</modifier></type> <name>pSurfaceFormats</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceSurfacePresentModesKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pPresentModeCount</name></decl></parameter>, <parameter><decl><type><name>VkPresentModeKHR</name> <modifier>*</modifier></type> <name>pPresentModes</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceSurfaceSupportKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physicalDevice</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queueFamilyIndex</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VkBool32</name> <modifier>*</modifier></type> <name>pSupported</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetPipelineCacheData</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkPipelineCache</name></type> <name>pipelineCache</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetQueryPoolResults</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkQueryPool</name></type> <name>queryPool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>firstQuery</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queryCount</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>VkQueryResultFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetRenderAreaGranularity</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkRenderPass</name></type> <name>renderPass</name></decl></parameter>, <parameter><decl><type><name>VkExtent2D</name> <modifier>*</modifier></type> <name>pGranularity</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkGetSwapchainImagesKHR</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkSwapchainKHR</name></type> <name>swapchain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pSwapchainImageCount</name></decl></parameter>, <parameter><decl><type><name>VkImage</name> <modifier>*</modifier></type> <name>pSwapchainImages</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkInvalidateMappedMemoryRanges</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>memoryRangeCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkMappedMemoryRange</name> <modifier>*</modifier></type> <name>pMemoryRanges</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkMapMemory</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>VkDeviceSize</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VkMemoryMapFlags</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkMergePipelineCaches</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkPipelineCache</name></type> <name>dstCache</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>srcCacheCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPipelineCache</name> <modifier>*</modifier></type> <name>pSrcCaches</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkQueueBindSparse</name>)<parameter_list>(<parameter><decl><type><name>VkQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bindInfoCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkBindSparseInfo</name> <modifier>*</modifier></type> <name>pBindInfo</name></decl></parameter>, <parameter><decl><type><name>VkFence</name></type> <name>fence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkQueuePresentKHR</name>)<parameter_list>(<parameter><decl><type><name>VkQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkPresentInfoKHR</name> <modifier>*</modifier></type> <name>pPresentInfo</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkQueueSubmit</name>)<parameter_list>(<parameter><decl><type><name>VkQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>submitCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkSubmitInfo</name> <modifier>*</modifier></type> <name>pSubmits</name></decl></parameter>, <parameter><decl><type><name>VkFence</name></type> <name>fence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkQueueWaitIdle</name>)<parameter_list>(<parameter><decl><type><name>VkQueue</name></type> <name>queue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkResetCommandBuffer</name>)<parameter_list>(<parameter><decl><type><name>VkCommandBuffer</name></type> <name>commandBuffer</name></decl></parameter>, <parameter><decl><type><name>VkCommandBufferResetFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkResetCommandPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkCommandPool</name></type> <name>commandPool</name></decl></parameter>, <parameter><decl><type><name>VkCommandPoolResetFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkResetDescriptorPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorPool</name></type> <name>descriptorPool</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorPoolResetFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkResetEvent</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkResetFences</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fenceCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkFence</name> <modifier>*</modifier></type> <name>pFences</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkSetEvent</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkTrimCommandPool</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkCommandPool</name></type> <name>commandPool</name></decl></parameter>, <parameter><decl><type><name>VkCommandPoolTrimFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkUnmapMemory</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name></type> <name>memory</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkUpdateDescriptorSetWithTemplate</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorSet</name></type> <name>descriptorSet</name></decl></parameter>, <parameter><decl><type><name>VkDescriptorUpdateTemplate</name></type> <name>descriptorUpdateTemplate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkUpdateDescriptorSets</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>descriptorWriteCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkWriteDescriptorSet</name> <modifier>*</modifier></type> <name>pDescriptorWrites</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>descriptorCopyCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkCopyDescriptorSet</name> <modifier>*</modifier></type> <name>pDescriptorCopies</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>GLAD_API_PTR</name> <modifier>*</modifier><name>PFN_vkWaitForFences</name>)<parameter_list>(<parameter><decl><type><name>VkDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fenceCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkFence</name> <modifier>*</modifier></type> <name>pFences</name></decl></parameter>, <parameter><decl><type><name>VkBool32</name></type> <name>waitAll</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkAcquireNextImage2KHR</name></type> <name>glad_vkAcquireNextImage2KHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkAcquireNextImage2KHR</name></cpp:macro> <cpp:value>glad_vkAcquireNextImage2KHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkAcquireNextImageKHR</name></type> <name>glad_vkAcquireNextImageKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkAcquireNextImageKHR</name></cpp:macro> <cpp:value>glad_vkAcquireNextImageKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkAllocateCommandBuffers</name></type> <name>glad_vkAllocateCommandBuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkAllocateCommandBuffers</name></cpp:macro> <cpp:value>glad_vkAllocateCommandBuffers</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkAllocateDescriptorSets</name></type> <name>glad_vkAllocateDescriptorSets</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkAllocateDescriptorSets</name></cpp:macro> <cpp:value>glad_vkAllocateDescriptorSets</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkAllocateMemory</name></type> <name>glad_vkAllocateMemory</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkAllocateMemory</name></cpp:macro> <cpp:value>glad_vkAllocateMemory</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkBeginCommandBuffer</name></type> <name>glad_vkBeginCommandBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkBeginCommandBuffer</name></cpp:macro> <cpp:value>glad_vkBeginCommandBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkBindBufferMemory</name></type> <name>glad_vkBindBufferMemory</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkBindBufferMemory</name></cpp:macro> <cpp:value>glad_vkBindBufferMemory</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkBindBufferMemory2</name></type> <name>glad_vkBindBufferMemory2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkBindBufferMemory2</name></cpp:macro> <cpp:value>glad_vkBindBufferMemory2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkBindImageMemory</name></type> <name>glad_vkBindImageMemory</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkBindImageMemory</name></cpp:macro> <cpp:value>glad_vkBindImageMemory</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkBindImageMemory2</name></type> <name>glad_vkBindImageMemory2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkBindImageMemory2</name></cpp:macro> <cpp:value>glad_vkBindImageMemory2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdBeginQuery</name></type> <name>glad_vkCmdBeginQuery</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdBeginQuery</name></cpp:macro> <cpp:value>glad_vkCmdBeginQuery</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdBeginRenderPass</name></type> <name>glad_vkCmdBeginRenderPass</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdBeginRenderPass</name></cpp:macro> <cpp:value>glad_vkCmdBeginRenderPass</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdBindDescriptorSets</name></type> <name>glad_vkCmdBindDescriptorSets</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdBindDescriptorSets</name></cpp:macro> <cpp:value>glad_vkCmdBindDescriptorSets</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdBindIndexBuffer</name></type> <name>glad_vkCmdBindIndexBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdBindIndexBuffer</name></cpp:macro> <cpp:value>glad_vkCmdBindIndexBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdBindPipeline</name></type> <name>glad_vkCmdBindPipeline</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdBindPipeline</name></cpp:macro> <cpp:value>glad_vkCmdBindPipeline</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdBindVertexBuffers</name></type> <name>glad_vkCmdBindVertexBuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdBindVertexBuffers</name></cpp:macro> <cpp:value>glad_vkCmdBindVertexBuffers</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdBlitImage</name></type> <name>glad_vkCmdBlitImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdBlitImage</name></cpp:macro> <cpp:value>glad_vkCmdBlitImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdClearAttachments</name></type> <name>glad_vkCmdClearAttachments</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdClearAttachments</name></cpp:macro> <cpp:value>glad_vkCmdClearAttachments</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdClearColorImage</name></type> <name>glad_vkCmdClearColorImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdClearColorImage</name></cpp:macro> <cpp:value>glad_vkCmdClearColorImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdClearDepthStencilImage</name></type> <name>glad_vkCmdClearDepthStencilImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdClearDepthStencilImage</name></cpp:macro> <cpp:value>glad_vkCmdClearDepthStencilImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdCopyBuffer</name></type> <name>glad_vkCmdCopyBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdCopyBuffer</name></cpp:macro> <cpp:value>glad_vkCmdCopyBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdCopyBufferToImage</name></type> <name>glad_vkCmdCopyBufferToImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdCopyBufferToImage</name></cpp:macro> <cpp:value>glad_vkCmdCopyBufferToImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdCopyImage</name></type> <name>glad_vkCmdCopyImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdCopyImage</name></cpp:macro> <cpp:value>glad_vkCmdCopyImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdCopyImageToBuffer</name></type> <name>glad_vkCmdCopyImageToBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdCopyImageToBuffer</name></cpp:macro> <cpp:value>glad_vkCmdCopyImageToBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdCopyQueryPoolResults</name></type> <name>glad_vkCmdCopyQueryPoolResults</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdCopyQueryPoolResults</name></cpp:macro> <cpp:value>glad_vkCmdCopyQueryPoolResults</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdDispatch</name></type> <name>glad_vkCmdDispatch</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdDispatch</name></cpp:macro> <cpp:value>glad_vkCmdDispatch</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdDispatchBase</name></type> <name>glad_vkCmdDispatchBase</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdDispatchBase</name></cpp:macro> <cpp:value>glad_vkCmdDispatchBase</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdDispatchIndirect</name></type> <name>glad_vkCmdDispatchIndirect</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdDispatchIndirect</name></cpp:macro> <cpp:value>glad_vkCmdDispatchIndirect</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdDraw</name></type> <name>glad_vkCmdDraw</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdDraw</name></cpp:macro> <cpp:value>glad_vkCmdDraw</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdDrawIndexed</name></type> <name>glad_vkCmdDrawIndexed</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdDrawIndexed</name></cpp:macro> <cpp:value>glad_vkCmdDrawIndexed</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdDrawIndexedIndirect</name></type> <name>glad_vkCmdDrawIndexedIndirect</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdDrawIndexedIndirect</name></cpp:macro> <cpp:value>glad_vkCmdDrawIndexedIndirect</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdDrawIndirect</name></type> <name>glad_vkCmdDrawIndirect</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdDrawIndirect</name></cpp:macro> <cpp:value>glad_vkCmdDrawIndirect</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdEndQuery</name></type> <name>glad_vkCmdEndQuery</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdEndQuery</name></cpp:macro> <cpp:value>glad_vkCmdEndQuery</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdEndRenderPass</name></type> <name>glad_vkCmdEndRenderPass</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdEndRenderPass</name></cpp:macro> <cpp:value>glad_vkCmdEndRenderPass</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdExecuteCommands</name></type> <name>glad_vkCmdExecuteCommands</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdExecuteCommands</name></cpp:macro> <cpp:value>glad_vkCmdExecuteCommands</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdFillBuffer</name></type> <name>glad_vkCmdFillBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdFillBuffer</name></cpp:macro> <cpp:value>glad_vkCmdFillBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdNextSubpass</name></type> <name>glad_vkCmdNextSubpass</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdNextSubpass</name></cpp:macro> <cpp:value>glad_vkCmdNextSubpass</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdPipelineBarrier</name></type> <name>glad_vkCmdPipelineBarrier</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdPipelineBarrier</name></cpp:macro> <cpp:value>glad_vkCmdPipelineBarrier</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdPushConstants</name></type> <name>glad_vkCmdPushConstants</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdPushConstants</name></cpp:macro> <cpp:value>glad_vkCmdPushConstants</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdResetEvent</name></type> <name>glad_vkCmdResetEvent</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdResetEvent</name></cpp:macro> <cpp:value>glad_vkCmdResetEvent</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdResetQueryPool</name></type> <name>glad_vkCmdResetQueryPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdResetQueryPool</name></cpp:macro> <cpp:value>glad_vkCmdResetQueryPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdResolveImage</name></type> <name>glad_vkCmdResolveImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdResolveImage</name></cpp:macro> <cpp:value>glad_vkCmdResolveImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetBlendConstants</name></type> <name>glad_vkCmdSetBlendConstants</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetBlendConstants</name></cpp:macro> <cpp:value>glad_vkCmdSetBlendConstants</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetDepthBias</name></type> <name>glad_vkCmdSetDepthBias</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetDepthBias</name></cpp:macro> <cpp:value>glad_vkCmdSetDepthBias</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetDepthBounds</name></type> <name>glad_vkCmdSetDepthBounds</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetDepthBounds</name></cpp:macro> <cpp:value>glad_vkCmdSetDepthBounds</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetDeviceMask</name></type> <name>glad_vkCmdSetDeviceMask</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetDeviceMask</name></cpp:macro> <cpp:value>glad_vkCmdSetDeviceMask</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetEvent</name></type> <name>glad_vkCmdSetEvent</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetEvent</name></cpp:macro> <cpp:value>glad_vkCmdSetEvent</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetLineWidth</name></type> <name>glad_vkCmdSetLineWidth</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetLineWidth</name></cpp:macro> <cpp:value>glad_vkCmdSetLineWidth</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetScissor</name></type> <name>glad_vkCmdSetScissor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetScissor</name></cpp:macro> <cpp:value>glad_vkCmdSetScissor</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetStencilCompareMask</name></type> <name>glad_vkCmdSetStencilCompareMask</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetStencilCompareMask</name></cpp:macro> <cpp:value>glad_vkCmdSetStencilCompareMask</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetStencilReference</name></type> <name>glad_vkCmdSetStencilReference</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetStencilReference</name></cpp:macro> <cpp:value>glad_vkCmdSetStencilReference</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetStencilWriteMask</name></type> <name>glad_vkCmdSetStencilWriteMask</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetStencilWriteMask</name></cpp:macro> <cpp:value>glad_vkCmdSetStencilWriteMask</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdSetViewport</name></type> <name>glad_vkCmdSetViewport</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdSetViewport</name></cpp:macro> <cpp:value>glad_vkCmdSetViewport</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdUpdateBuffer</name></type> <name>glad_vkCmdUpdateBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdUpdateBuffer</name></cpp:macro> <cpp:value>glad_vkCmdUpdateBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdWaitEvents</name></type> <name>glad_vkCmdWaitEvents</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdWaitEvents</name></cpp:macro> <cpp:value>glad_vkCmdWaitEvents</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCmdWriteTimestamp</name></type> <name>glad_vkCmdWriteTimestamp</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCmdWriteTimestamp</name></cpp:macro> <cpp:value>glad_vkCmdWriteTimestamp</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateBuffer</name></type> <name>glad_vkCreateBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateBuffer</name></cpp:macro> <cpp:value>glad_vkCreateBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateBufferView</name></type> <name>glad_vkCreateBufferView</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateBufferView</name></cpp:macro> <cpp:value>glad_vkCreateBufferView</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateCommandPool</name></type> <name>glad_vkCreateCommandPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateCommandPool</name></cpp:macro> <cpp:value>glad_vkCreateCommandPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateComputePipelines</name></type> <name>glad_vkCreateComputePipelines</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateComputePipelines</name></cpp:macro> <cpp:value>glad_vkCreateComputePipelines</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateDebugReportCallbackEXT</name></type> <name>glad_vkCreateDebugReportCallbackEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateDebugReportCallbackEXT</name></cpp:macro> <cpp:value>glad_vkCreateDebugReportCallbackEXT</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateDescriptorPool</name></type> <name>glad_vkCreateDescriptorPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateDescriptorPool</name></cpp:macro> <cpp:value>glad_vkCreateDescriptorPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateDescriptorSetLayout</name></type> <name>glad_vkCreateDescriptorSetLayout</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateDescriptorSetLayout</name></cpp:macro> <cpp:value>glad_vkCreateDescriptorSetLayout</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateDescriptorUpdateTemplate</name></type> <name>glad_vkCreateDescriptorUpdateTemplate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateDescriptorUpdateTemplate</name></cpp:macro> <cpp:value>glad_vkCreateDescriptorUpdateTemplate</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateDevice</name></type> <name>glad_vkCreateDevice</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateDevice</name></cpp:macro> <cpp:value>glad_vkCreateDevice</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateEvent</name></type> <name>glad_vkCreateEvent</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateEvent</name></cpp:macro> <cpp:value>glad_vkCreateEvent</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateFence</name></type> <name>glad_vkCreateFence</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateFence</name></cpp:macro> <cpp:value>glad_vkCreateFence</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateFramebuffer</name></type> <name>glad_vkCreateFramebuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateFramebuffer</name></cpp:macro> <cpp:value>glad_vkCreateFramebuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateGraphicsPipelines</name></type> <name>glad_vkCreateGraphicsPipelines</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateGraphicsPipelines</name></cpp:macro> <cpp:value>glad_vkCreateGraphicsPipelines</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateImage</name></type> <name>glad_vkCreateImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateImage</name></cpp:macro> <cpp:value>glad_vkCreateImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateImageView</name></type> <name>glad_vkCreateImageView</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateImageView</name></cpp:macro> <cpp:value>glad_vkCreateImageView</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateInstance</name></type> <name>glad_vkCreateInstance</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateInstance</name></cpp:macro> <cpp:value>glad_vkCreateInstance</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreatePipelineCache</name></type> <name>glad_vkCreatePipelineCache</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreatePipelineCache</name></cpp:macro> <cpp:value>glad_vkCreatePipelineCache</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreatePipelineLayout</name></type> <name>glad_vkCreatePipelineLayout</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreatePipelineLayout</name></cpp:macro> <cpp:value>glad_vkCreatePipelineLayout</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateQueryPool</name></type> <name>glad_vkCreateQueryPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateQueryPool</name></cpp:macro> <cpp:value>glad_vkCreateQueryPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateRenderPass</name></type> <name>glad_vkCreateRenderPass</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateRenderPass</name></cpp:macro> <cpp:value>glad_vkCreateRenderPass</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateSampler</name></type> <name>glad_vkCreateSampler</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateSampler</name></cpp:macro> <cpp:value>glad_vkCreateSampler</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateSamplerYcbcrConversion</name></type> <name>glad_vkCreateSamplerYcbcrConversion</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateSamplerYcbcrConversion</name></cpp:macro> <cpp:value>glad_vkCreateSamplerYcbcrConversion</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateSemaphore</name></type> <name>glad_vkCreateSemaphore</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateSemaphore</name></cpp:macro> <cpp:value>glad_vkCreateSemaphore</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateShaderModule</name></type> <name>glad_vkCreateShaderModule</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateShaderModule</name></cpp:macro> <cpp:value>glad_vkCreateShaderModule</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkCreateSwapchainKHR</name></type> <name>glad_vkCreateSwapchainKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkCreateSwapchainKHR</name></cpp:macro> <cpp:value>glad_vkCreateSwapchainKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDebugReportMessageEXT</name></type> <name>glad_vkDebugReportMessageEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDebugReportMessageEXT</name></cpp:macro> <cpp:value>glad_vkDebugReportMessageEXT</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyBuffer</name></type> <name>glad_vkDestroyBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyBuffer</name></cpp:macro> <cpp:value>glad_vkDestroyBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyBufferView</name></type> <name>glad_vkDestroyBufferView</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyBufferView</name></cpp:macro> <cpp:value>glad_vkDestroyBufferView</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyCommandPool</name></type> <name>glad_vkDestroyCommandPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyCommandPool</name></cpp:macro> <cpp:value>glad_vkDestroyCommandPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyDebugReportCallbackEXT</name></type> <name>glad_vkDestroyDebugReportCallbackEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyDebugReportCallbackEXT</name></cpp:macro> <cpp:value>glad_vkDestroyDebugReportCallbackEXT</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyDescriptorPool</name></type> <name>glad_vkDestroyDescriptorPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyDescriptorPool</name></cpp:macro> <cpp:value>glad_vkDestroyDescriptorPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyDescriptorSetLayout</name></type> <name>glad_vkDestroyDescriptorSetLayout</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyDescriptorSetLayout</name></cpp:macro> <cpp:value>glad_vkDestroyDescriptorSetLayout</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyDescriptorUpdateTemplate</name></type> <name>glad_vkDestroyDescriptorUpdateTemplate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyDescriptorUpdateTemplate</name></cpp:macro> <cpp:value>glad_vkDestroyDescriptorUpdateTemplate</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyDevice</name></type> <name>glad_vkDestroyDevice</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyDevice</name></cpp:macro> <cpp:value>glad_vkDestroyDevice</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyEvent</name></type> <name>glad_vkDestroyEvent</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyEvent</name></cpp:macro> <cpp:value>glad_vkDestroyEvent</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyFence</name></type> <name>glad_vkDestroyFence</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyFence</name></cpp:macro> <cpp:value>glad_vkDestroyFence</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyFramebuffer</name></type> <name>glad_vkDestroyFramebuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyFramebuffer</name></cpp:macro> <cpp:value>glad_vkDestroyFramebuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyImage</name></type> <name>glad_vkDestroyImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyImage</name></cpp:macro> <cpp:value>glad_vkDestroyImage</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyImageView</name></type> <name>glad_vkDestroyImageView</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyImageView</name></cpp:macro> <cpp:value>glad_vkDestroyImageView</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyInstance</name></type> <name>glad_vkDestroyInstance</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyInstance</name></cpp:macro> <cpp:value>glad_vkDestroyInstance</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyPipeline</name></type> <name>glad_vkDestroyPipeline</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyPipeline</name></cpp:macro> <cpp:value>glad_vkDestroyPipeline</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyPipelineCache</name></type> <name>glad_vkDestroyPipelineCache</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyPipelineCache</name></cpp:macro> <cpp:value>glad_vkDestroyPipelineCache</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyPipelineLayout</name></type> <name>glad_vkDestroyPipelineLayout</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyPipelineLayout</name></cpp:macro> <cpp:value>glad_vkDestroyPipelineLayout</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyQueryPool</name></type> <name>glad_vkDestroyQueryPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyQueryPool</name></cpp:macro> <cpp:value>glad_vkDestroyQueryPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyRenderPass</name></type> <name>glad_vkDestroyRenderPass</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyRenderPass</name></cpp:macro> <cpp:value>glad_vkDestroyRenderPass</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroySampler</name></type> <name>glad_vkDestroySampler</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroySampler</name></cpp:macro> <cpp:value>glad_vkDestroySampler</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroySamplerYcbcrConversion</name></type> <name>glad_vkDestroySamplerYcbcrConversion</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroySamplerYcbcrConversion</name></cpp:macro> <cpp:value>glad_vkDestroySamplerYcbcrConversion</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroySemaphore</name></type> <name>glad_vkDestroySemaphore</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroySemaphore</name></cpp:macro> <cpp:value>glad_vkDestroySemaphore</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroyShaderModule</name></type> <name>glad_vkDestroyShaderModule</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroyShaderModule</name></cpp:macro> <cpp:value>glad_vkDestroyShaderModule</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroySurfaceKHR</name></type> <name>glad_vkDestroySurfaceKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroySurfaceKHR</name></cpp:macro> <cpp:value>glad_vkDestroySurfaceKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDestroySwapchainKHR</name></type> <name>glad_vkDestroySwapchainKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDestroySwapchainKHR</name></cpp:macro> <cpp:value>glad_vkDestroySwapchainKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkDeviceWaitIdle</name></type> <name>glad_vkDeviceWaitIdle</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkDeviceWaitIdle</name></cpp:macro> <cpp:value>glad_vkDeviceWaitIdle</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEndCommandBuffer</name></type> <name>glad_vkEndCommandBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEndCommandBuffer</name></cpp:macro> <cpp:value>glad_vkEndCommandBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEnumerateDeviceExtensionProperties</name></type> <name>glad_vkEnumerateDeviceExtensionProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumerateDeviceExtensionProperties</name></cpp:macro> <cpp:value>glad_vkEnumerateDeviceExtensionProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEnumerateDeviceLayerProperties</name></type> <name>glad_vkEnumerateDeviceLayerProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumerateDeviceLayerProperties</name></cpp:macro> <cpp:value>glad_vkEnumerateDeviceLayerProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEnumerateInstanceExtensionProperties</name></type> <name>glad_vkEnumerateInstanceExtensionProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumerateInstanceExtensionProperties</name></cpp:macro> <cpp:value>glad_vkEnumerateInstanceExtensionProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEnumerateInstanceLayerProperties</name></type> <name>glad_vkEnumerateInstanceLayerProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumerateInstanceLayerProperties</name></cpp:macro> <cpp:value>glad_vkEnumerateInstanceLayerProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEnumerateInstanceVersion</name></type> <name>glad_vkEnumerateInstanceVersion</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumerateInstanceVersion</name></cpp:macro> <cpp:value>glad_vkEnumerateInstanceVersion</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEnumeratePhysicalDeviceGroups</name></type> <name>glad_vkEnumeratePhysicalDeviceGroups</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumeratePhysicalDeviceGroups</name></cpp:macro> <cpp:value>glad_vkEnumeratePhysicalDeviceGroups</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkEnumeratePhysicalDevices</name></type> <name>glad_vkEnumeratePhysicalDevices</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumeratePhysicalDevices</name></cpp:macro> <cpp:value>glad_vkEnumeratePhysicalDevices</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkFlushMappedMemoryRanges</name></type> <name>glad_vkFlushMappedMemoryRanges</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkFlushMappedMemoryRanges</name></cpp:macro> <cpp:value>glad_vkFlushMappedMemoryRanges</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkFreeCommandBuffers</name></type> <name>glad_vkFreeCommandBuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkFreeCommandBuffers</name></cpp:macro> <cpp:value>glad_vkFreeCommandBuffers</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkFreeDescriptorSets</name></type> <name>glad_vkFreeDescriptorSets</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkFreeDescriptorSets</name></cpp:macro> <cpp:value>glad_vkFreeDescriptorSets</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkFreeMemory</name></type> <name>glad_vkFreeMemory</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkFreeMemory</name></cpp:macro> <cpp:value>glad_vkFreeMemory</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetBufferMemoryRequirements</name></type> <name>glad_vkGetBufferMemoryRequirements</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetBufferMemoryRequirements</name></cpp:macro> <cpp:value>glad_vkGetBufferMemoryRequirements</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetBufferMemoryRequirements2</name></type> <name>glad_vkGetBufferMemoryRequirements2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetBufferMemoryRequirements2</name></cpp:macro> <cpp:value>glad_vkGetBufferMemoryRequirements2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDescriptorSetLayoutSupport</name></type> <name>glad_vkGetDescriptorSetLayoutSupport</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDescriptorSetLayoutSupport</name></cpp:macro> <cpp:value>glad_vkGetDescriptorSetLayoutSupport</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDeviceGroupPeerMemoryFeatures</name></type> <name>glad_vkGetDeviceGroupPeerMemoryFeatures</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDeviceGroupPeerMemoryFeatures</name></cpp:macro> <cpp:value>glad_vkGetDeviceGroupPeerMemoryFeatures</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDeviceGroupPresentCapabilitiesKHR</name></type> <name>glad_vkGetDeviceGroupPresentCapabilitiesKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDeviceGroupPresentCapabilitiesKHR</name></cpp:macro> <cpp:value>glad_vkGetDeviceGroupPresentCapabilitiesKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDeviceGroupSurfacePresentModesKHR</name></type> <name>glad_vkGetDeviceGroupSurfacePresentModesKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDeviceGroupSurfacePresentModesKHR</name></cpp:macro> <cpp:value>glad_vkGetDeviceGroupSurfacePresentModesKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDeviceMemoryCommitment</name></type> <name>glad_vkGetDeviceMemoryCommitment</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDeviceMemoryCommitment</name></cpp:macro> <cpp:value>glad_vkGetDeviceMemoryCommitment</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDeviceProcAddr</name></type> <name>glad_vkGetDeviceProcAddr</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDeviceProcAddr</name></cpp:macro> <cpp:value>glad_vkGetDeviceProcAddr</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDeviceQueue</name></type> <name>glad_vkGetDeviceQueue</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDeviceQueue</name></cpp:macro> <cpp:value>glad_vkGetDeviceQueue</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetDeviceQueue2</name></type> <name>glad_vkGetDeviceQueue2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetDeviceQueue2</name></cpp:macro> <cpp:value>glad_vkGetDeviceQueue2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetEventStatus</name></type> <name>glad_vkGetEventStatus</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetEventStatus</name></cpp:macro> <cpp:value>glad_vkGetEventStatus</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetFenceStatus</name></type> <name>glad_vkGetFenceStatus</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetFenceStatus</name></cpp:macro> <cpp:value>glad_vkGetFenceStatus</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetImageMemoryRequirements</name></type> <name>glad_vkGetImageMemoryRequirements</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetImageMemoryRequirements</name></cpp:macro> <cpp:value>glad_vkGetImageMemoryRequirements</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetImageMemoryRequirements2</name></type> <name>glad_vkGetImageMemoryRequirements2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetImageMemoryRequirements2</name></cpp:macro> <cpp:value>glad_vkGetImageMemoryRequirements2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetImageSparseMemoryRequirements</name></type> <name>glad_vkGetImageSparseMemoryRequirements</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetImageSparseMemoryRequirements</name></cpp:macro> <cpp:value>glad_vkGetImageSparseMemoryRequirements</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetImageSparseMemoryRequirements2</name></type> <name>glad_vkGetImageSparseMemoryRequirements2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetImageSparseMemoryRequirements2</name></cpp:macro> <cpp:value>glad_vkGetImageSparseMemoryRequirements2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetImageSubresourceLayout</name></type> <name>glad_vkGetImageSubresourceLayout</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetImageSubresourceLayout</name></cpp:macro> <cpp:value>glad_vkGetImageSubresourceLayout</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetInstanceProcAddr</name></type> <name>glad_vkGetInstanceProcAddr</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetInstanceProcAddr</name></cpp:macro> <cpp:value>glad_vkGetInstanceProcAddr</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceExternalBufferProperties</name></type> <name>glad_vkGetPhysicalDeviceExternalBufferProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceExternalBufferProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceExternalBufferProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceExternalFenceProperties</name></type> <name>glad_vkGetPhysicalDeviceExternalFenceProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceExternalFenceProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceExternalFenceProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceExternalSemaphoreProperties</name></type> <name>glad_vkGetPhysicalDeviceExternalSemaphoreProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceExternalSemaphoreProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceExternalSemaphoreProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceFeatures</name></type> <name>glad_vkGetPhysicalDeviceFeatures</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceFeatures</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceFeatures</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceFeatures2</name></type> <name>glad_vkGetPhysicalDeviceFeatures2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceFeatures2</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceFeatures2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceFormatProperties</name></type> <name>glad_vkGetPhysicalDeviceFormatProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceFormatProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceFormatProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceFormatProperties2</name></type> <name>glad_vkGetPhysicalDeviceFormatProperties2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceFormatProperties2</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceFormatProperties2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceImageFormatProperties</name></type> <name>glad_vkGetPhysicalDeviceImageFormatProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceImageFormatProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceImageFormatProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceImageFormatProperties2</name></type> <name>glad_vkGetPhysicalDeviceImageFormatProperties2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceImageFormatProperties2</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceImageFormatProperties2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceMemoryProperties</name></type> <name>glad_vkGetPhysicalDeviceMemoryProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceMemoryProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceMemoryProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceMemoryProperties2</name></type> <name>glad_vkGetPhysicalDeviceMemoryProperties2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceMemoryProperties2</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceMemoryProperties2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDevicePresentRectanglesKHR</name></type> <name>glad_vkGetPhysicalDevicePresentRectanglesKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDevicePresentRectanglesKHR</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDevicePresentRectanglesKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceProperties</name></type> <name>glad_vkGetPhysicalDeviceProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceProperties2</name></type> <name>glad_vkGetPhysicalDeviceProperties2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceProperties2</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceProperties2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceQueueFamilyProperties</name></type> <name>glad_vkGetPhysicalDeviceQueueFamilyProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceQueueFamilyProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceQueueFamilyProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceQueueFamilyProperties2</name></type> <name>glad_vkGetPhysicalDeviceQueueFamilyProperties2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceQueueFamilyProperties2</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceQueueFamilyProperties2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties</name></type> <name>glad_vkGetPhysicalDeviceSparseImageFormatProperties</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceSparseImageFormatProperties</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceSparseImageFormatProperties</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties2</name></type> <name>glad_vkGetPhysicalDeviceSparseImageFormatProperties2</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceSparseImageFormatProperties2</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceSparseImageFormatProperties2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceSurfaceFormatsKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfaceFormatsKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceSurfaceFormatsKHR</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceSurfaceFormatsKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceSurfacePresentModesKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfacePresentModesKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceSurfacePresentModesKHR</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceSurfacePresentModesKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPhysicalDeviceSurfaceSupportKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfaceSupportKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPhysicalDeviceSurfaceSupportKHR</name></cpp:macro> <cpp:value>glad_vkGetPhysicalDeviceSurfaceSupportKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetPipelineCacheData</name></type> <name>glad_vkGetPipelineCacheData</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetPipelineCacheData</name></cpp:macro> <cpp:value>glad_vkGetPipelineCacheData</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetQueryPoolResults</name></type> <name>glad_vkGetQueryPoolResults</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetQueryPoolResults</name></cpp:macro> <cpp:value>glad_vkGetQueryPoolResults</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetRenderAreaGranularity</name></type> <name>glad_vkGetRenderAreaGranularity</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetRenderAreaGranularity</name></cpp:macro> <cpp:value>glad_vkGetRenderAreaGranularity</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkGetSwapchainImagesKHR</name></type> <name>glad_vkGetSwapchainImagesKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetSwapchainImagesKHR</name></cpp:macro> <cpp:value>glad_vkGetSwapchainImagesKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkInvalidateMappedMemoryRanges</name></type> <name>glad_vkInvalidateMappedMemoryRanges</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkInvalidateMappedMemoryRanges</name></cpp:macro> <cpp:value>glad_vkInvalidateMappedMemoryRanges</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkMapMemory</name></type> <name>glad_vkMapMemory</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkMapMemory</name></cpp:macro> <cpp:value>glad_vkMapMemory</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkMergePipelineCaches</name></type> <name>glad_vkMergePipelineCaches</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkMergePipelineCaches</name></cpp:macro> <cpp:value>glad_vkMergePipelineCaches</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkQueueBindSparse</name></type> <name>glad_vkQueueBindSparse</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkQueueBindSparse</name></cpp:macro> <cpp:value>glad_vkQueueBindSparse</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkQueuePresentKHR</name></type> <name>glad_vkQueuePresentKHR</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkQueuePresentKHR</name></cpp:macro> <cpp:value>glad_vkQueuePresentKHR</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkQueueSubmit</name></type> <name>glad_vkQueueSubmit</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkQueueSubmit</name></cpp:macro> <cpp:value>glad_vkQueueSubmit</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkQueueWaitIdle</name></type> <name>glad_vkQueueWaitIdle</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkQueueWaitIdle</name></cpp:macro> <cpp:value>glad_vkQueueWaitIdle</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkResetCommandBuffer</name></type> <name>glad_vkResetCommandBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkResetCommandBuffer</name></cpp:macro> <cpp:value>glad_vkResetCommandBuffer</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkResetCommandPool</name></type> <name>glad_vkResetCommandPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkResetCommandPool</name></cpp:macro> <cpp:value>glad_vkResetCommandPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkResetDescriptorPool</name></type> <name>glad_vkResetDescriptorPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkResetDescriptorPool</name></cpp:macro> <cpp:value>glad_vkResetDescriptorPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkResetEvent</name></type> <name>glad_vkResetEvent</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkResetEvent</name></cpp:macro> <cpp:value>glad_vkResetEvent</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkResetFences</name></type> <name>glad_vkResetFences</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkResetFences</name></cpp:macro> <cpp:value>glad_vkResetFences</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkSetEvent</name></type> <name>glad_vkSetEvent</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkSetEvent</name></cpp:macro> <cpp:value>glad_vkSetEvent</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkTrimCommandPool</name></type> <name>glad_vkTrimCommandPool</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkTrimCommandPool</name></cpp:macro> <cpp:value>glad_vkTrimCommandPool</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkUnmapMemory</name></type> <name>glad_vkUnmapMemory</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkUnmapMemory</name></cpp:macro> <cpp:value>glad_vkUnmapMemory</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkUpdateDescriptorSetWithTemplate</name></type> <name>glad_vkUpdateDescriptorSetWithTemplate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkUpdateDescriptorSetWithTemplate</name></cpp:macro> <cpp:value>glad_vkUpdateDescriptorSetWithTemplate</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkUpdateDescriptorSets</name></type> <name>glad_vkUpdateDescriptorSets</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkUpdateDescriptorSets</name></cpp:macro> <cpp:value>glad_vkUpdateDescriptorSets</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAD_API_CALL</name> <name>PFN_vkWaitForFences</name></type> <name>glad_vkWaitForFences</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkWaitForFences</name></cpp:macro> <cpp:value>glad_vkWaitForFences</cpp:value></cpp:define>


<function_decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>gladLoadVulkanUserPtr</name><parameter_list>( <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physical_device</name></decl></parameter>, <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GLAD_API_CALL</name> <name>int</name></type> <name>gladLoadVulkan</name><parameter_list>( <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physical_device</name></decl></parameter>, <parameter><decl><type><name>GLADloadfunc</name></type> <name>load</name></decl></parameter>)</parameter_list>;</function_decl>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
