<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\deps\glad_vulkan.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/vulkan.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_IMPL_UTIL_C_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_IMPL_UTIL_C_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_IMPL_UTIL_SSCANF</name></cpp:macro> <cpp:value>sscanf_s</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_IMPL_UTIL_SSCANF</name></cpp:macro> <cpp:value>sscanf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<decl_stmt><decl><type><name>int</name></type> <name>GLAD_VK_VERSION_1_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_VK_VERSION_1_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_VK_EXT_debug_report</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_VK_KHR_surface</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_VK_KHR_swapchain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>PFN_vkAcquireNextImage2KHR</name></type> <name>glad_vkAcquireNextImage2KHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkAcquireNextImageKHR</name></type> <name>glad_vkAcquireNextImageKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkAllocateCommandBuffers</name></type> <name>glad_vkAllocateCommandBuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkAllocateDescriptorSets</name></type> <name>glad_vkAllocateDescriptorSets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkAllocateMemory</name></type> <name>glad_vkAllocateMemory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkBeginCommandBuffer</name></type> <name>glad_vkBeginCommandBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkBindBufferMemory</name></type> <name>glad_vkBindBufferMemory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkBindBufferMemory2</name></type> <name>glad_vkBindBufferMemory2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkBindImageMemory</name></type> <name>glad_vkBindImageMemory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkBindImageMemory2</name></type> <name>glad_vkBindImageMemory2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdBeginQuery</name></type> <name>glad_vkCmdBeginQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdBeginRenderPass</name></type> <name>glad_vkCmdBeginRenderPass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdBindDescriptorSets</name></type> <name>glad_vkCmdBindDescriptorSets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdBindIndexBuffer</name></type> <name>glad_vkCmdBindIndexBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdBindPipeline</name></type> <name>glad_vkCmdBindPipeline</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdBindVertexBuffers</name></type> <name>glad_vkCmdBindVertexBuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdBlitImage</name></type> <name>glad_vkCmdBlitImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdClearAttachments</name></type> <name>glad_vkCmdClearAttachments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdClearColorImage</name></type> <name>glad_vkCmdClearColorImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdClearDepthStencilImage</name></type> <name>glad_vkCmdClearDepthStencilImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdCopyBuffer</name></type> <name>glad_vkCmdCopyBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdCopyBufferToImage</name></type> <name>glad_vkCmdCopyBufferToImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdCopyImage</name></type> <name>glad_vkCmdCopyImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdCopyImageToBuffer</name></type> <name>glad_vkCmdCopyImageToBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdCopyQueryPoolResults</name></type> <name>glad_vkCmdCopyQueryPoolResults</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdDispatch</name></type> <name>glad_vkCmdDispatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdDispatchBase</name></type> <name>glad_vkCmdDispatchBase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdDispatchIndirect</name></type> <name>glad_vkCmdDispatchIndirect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdDraw</name></type> <name>glad_vkCmdDraw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdDrawIndexed</name></type> <name>glad_vkCmdDrawIndexed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdDrawIndexedIndirect</name></type> <name>glad_vkCmdDrawIndexedIndirect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdDrawIndirect</name></type> <name>glad_vkCmdDrawIndirect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdEndQuery</name></type> <name>glad_vkCmdEndQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdEndRenderPass</name></type> <name>glad_vkCmdEndRenderPass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdExecuteCommands</name></type> <name>glad_vkCmdExecuteCommands</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdFillBuffer</name></type> <name>glad_vkCmdFillBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdNextSubpass</name></type> <name>glad_vkCmdNextSubpass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdPipelineBarrier</name></type> <name>glad_vkCmdPipelineBarrier</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdPushConstants</name></type> <name>glad_vkCmdPushConstants</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdResetEvent</name></type> <name>glad_vkCmdResetEvent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdResetQueryPool</name></type> <name>glad_vkCmdResetQueryPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdResolveImage</name></type> <name>glad_vkCmdResolveImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetBlendConstants</name></type> <name>glad_vkCmdSetBlendConstants</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetDepthBias</name></type> <name>glad_vkCmdSetDepthBias</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetDepthBounds</name></type> <name>glad_vkCmdSetDepthBounds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetDeviceMask</name></type> <name>glad_vkCmdSetDeviceMask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetEvent</name></type> <name>glad_vkCmdSetEvent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetLineWidth</name></type> <name>glad_vkCmdSetLineWidth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetScissor</name></type> <name>glad_vkCmdSetScissor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetStencilCompareMask</name></type> <name>glad_vkCmdSetStencilCompareMask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetStencilReference</name></type> <name>glad_vkCmdSetStencilReference</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetStencilWriteMask</name></type> <name>glad_vkCmdSetStencilWriteMask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdSetViewport</name></type> <name>glad_vkCmdSetViewport</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdUpdateBuffer</name></type> <name>glad_vkCmdUpdateBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdWaitEvents</name></type> <name>glad_vkCmdWaitEvents</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCmdWriteTimestamp</name></type> <name>glad_vkCmdWriteTimestamp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateBuffer</name></type> <name>glad_vkCreateBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateBufferView</name></type> <name>glad_vkCreateBufferView</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateCommandPool</name></type> <name>glad_vkCreateCommandPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateComputePipelines</name></type> <name>glad_vkCreateComputePipelines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateDebugReportCallbackEXT</name></type> <name>glad_vkCreateDebugReportCallbackEXT</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateDescriptorPool</name></type> <name>glad_vkCreateDescriptorPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateDescriptorSetLayout</name></type> <name>glad_vkCreateDescriptorSetLayout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateDescriptorUpdateTemplate</name></type> <name>glad_vkCreateDescriptorUpdateTemplate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateDevice</name></type> <name>glad_vkCreateDevice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateEvent</name></type> <name>glad_vkCreateEvent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateFence</name></type> <name>glad_vkCreateFence</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateFramebuffer</name></type> <name>glad_vkCreateFramebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateGraphicsPipelines</name></type> <name>glad_vkCreateGraphicsPipelines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateImage</name></type> <name>glad_vkCreateImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateImageView</name></type> <name>glad_vkCreateImageView</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateInstance</name></type> <name>glad_vkCreateInstance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreatePipelineCache</name></type> <name>glad_vkCreatePipelineCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreatePipelineLayout</name></type> <name>glad_vkCreatePipelineLayout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateQueryPool</name></type> <name>glad_vkCreateQueryPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateRenderPass</name></type> <name>glad_vkCreateRenderPass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateSampler</name></type> <name>glad_vkCreateSampler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateSamplerYcbcrConversion</name></type> <name>glad_vkCreateSamplerYcbcrConversion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateSemaphore</name></type> <name>glad_vkCreateSemaphore</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateShaderModule</name></type> <name>glad_vkCreateShaderModule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateSwapchainKHR</name></type> <name>glad_vkCreateSwapchainKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDebugReportMessageEXT</name></type> <name>glad_vkDebugReportMessageEXT</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyBuffer</name></type> <name>glad_vkDestroyBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyBufferView</name></type> <name>glad_vkDestroyBufferView</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyCommandPool</name></type> <name>glad_vkDestroyCommandPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyDebugReportCallbackEXT</name></type> <name>glad_vkDestroyDebugReportCallbackEXT</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyDescriptorPool</name></type> <name>glad_vkDestroyDescriptorPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyDescriptorSetLayout</name></type> <name>glad_vkDestroyDescriptorSetLayout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyDescriptorUpdateTemplate</name></type> <name>glad_vkDestroyDescriptorUpdateTemplate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyDevice</name></type> <name>glad_vkDestroyDevice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyEvent</name></type> <name>glad_vkDestroyEvent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyFence</name></type> <name>glad_vkDestroyFence</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyFramebuffer</name></type> <name>glad_vkDestroyFramebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyImage</name></type> <name>glad_vkDestroyImage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyImageView</name></type> <name>glad_vkDestroyImageView</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyInstance</name></type> <name>glad_vkDestroyInstance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyPipeline</name></type> <name>glad_vkDestroyPipeline</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyPipelineCache</name></type> <name>glad_vkDestroyPipelineCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyPipelineLayout</name></type> <name>glad_vkDestroyPipelineLayout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyQueryPool</name></type> <name>glad_vkDestroyQueryPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyRenderPass</name></type> <name>glad_vkDestroyRenderPass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroySampler</name></type> <name>glad_vkDestroySampler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroySamplerYcbcrConversion</name></type> <name>glad_vkDestroySamplerYcbcrConversion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroySemaphore</name></type> <name>glad_vkDestroySemaphore</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroyShaderModule</name></type> <name>glad_vkDestroyShaderModule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroySurfaceKHR</name></type> <name>glad_vkDestroySurfaceKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDestroySwapchainKHR</name></type> <name>glad_vkDestroySwapchainKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkDeviceWaitIdle</name></type> <name>glad_vkDeviceWaitIdle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEndCommandBuffer</name></type> <name>glad_vkEndCommandBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEnumerateDeviceExtensionProperties</name></type> <name>glad_vkEnumerateDeviceExtensionProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEnumerateDeviceLayerProperties</name></type> <name>glad_vkEnumerateDeviceLayerProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEnumerateInstanceExtensionProperties</name></type> <name>glad_vkEnumerateInstanceExtensionProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEnumerateInstanceLayerProperties</name></type> <name>glad_vkEnumerateInstanceLayerProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEnumerateInstanceVersion</name></type> <name>glad_vkEnumerateInstanceVersion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEnumeratePhysicalDeviceGroups</name></type> <name>glad_vkEnumeratePhysicalDeviceGroups</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkEnumeratePhysicalDevices</name></type> <name>glad_vkEnumeratePhysicalDevices</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkFlushMappedMemoryRanges</name></type> <name>glad_vkFlushMappedMemoryRanges</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkFreeCommandBuffers</name></type> <name>glad_vkFreeCommandBuffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkFreeDescriptorSets</name></type> <name>glad_vkFreeDescriptorSets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkFreeMemory</name></type> <name>glad_vkFreeMemory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetBufferMemoryRequirements</name></type> <name>glad_vkGetBufferMemoryRequirements</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetBufferMemoryRequirements2</name></type> <name>glad_vkGetBufferMemoryRequirements2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDescriptorSetLayoutSupport</name></type> <name>glad_vkGetDescriptorSetLayoutSupport</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDeviceGroupPeerMemoryFeatures</name></type> <name>glad_vkGetDeviceGroupPeerMemoryFeatures</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDeviceGroupPresentCapabilitiesKHR</name></type> <name>glad_vkGetDeviceGroupPresentCapabilitiesKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDeviceGroupSurfacePresentModesKHR</name></type> <name>glad_vkGetDeviceGroupSurfacePresentModesKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDeviceMemoryCommitment</name></type> <name>glad_vkGetDeviceMemoryCommitment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDeviceProcAddr</name></type> <name>glad_vkGetDeviceProcAddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDeviceQueue</name></type> <name>glad_vkGetDeviceQueue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetDeviceQueue2</name></type> <name>glad_vkGetDeviceQueue2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetEventStatus</name></type> <name>glad_vkGetEventStatus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetFenceStatus</name></type> <name>glad_vkGetFenceStatus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetImageMemoryRequirements</name></type> <name>glad_vkGetImageMemoryRequirements</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetImageMemoryRequirements2</name></type> <name>glad_vkGetImageMemoryRequirements2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetImageSparseMemoryRequirements</name></type> <name>glad_vkGetImageSparseMemoryRequirements</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetImageSparseMemoryRequirements2</name></type> <name>glad_vkGetImageSparseMemoryRequirements2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetImageSubresourceLayout</name></type> <name>glad_vkGetImageSubresourceLayout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetInstanceProcAddr</name></type> <name>glad_vkGetInstanceProcAddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceExternalBufferProperties</name></type> <name>glad_vkGetPhysicalDeviceExternalBufferProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceExternalFenceProperties</name></type> <name>glad_vkGetPhysicalDeviceExternalFenceProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceExternalSemaphoreProperties</name></type> <name>glad_vkGetPhysicalDeviceExternalSemaphoreProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceFeatures</name></type> <name>glad_vkGetPhysicalDeviceFeatures</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceFeatures2</name></type> <name>glad_vkGetPhysicalDeviceFeatures2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceFormatProperties</name></type> <name>glad_vkGetPhysicalDeviceFormatProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceFormatProperties2</name></type> <name>glad_vkGetPhysicalDeviceFormatProperties2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceImageFormatProperties</name></type> <name>glad_vkGetPhysicalDeviceImageFormatProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceImageFormatProperties2</name></type> <name>glad_vkGetPhysicalDeviceImageFormatProperties2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceMemoryProperties</name></type> <name>glad_vkGetPhysicalDeviceMemoryProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceMemoryProperties2</name></type> <name>glad_vkGetPhysicalDeviceMemoryProperties2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDevicePresentRectanglesKHR</name></type> <name>glad_vkGetPhysicalDevicePresentRectanglesKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceProperties</name></type> <name>glad_vkGetPhysicalDeviceProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceProperties2</name></type> <name>glad_vkGetPhysicalDeviceProperties2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceQueueFamilyProperties</name></type> <name>glad_vkGetPhysicalDeviceQueueFamilyProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceQueueFamilyProperties2</name></type> <name>glad_vkGetPhysicalDeviceQueueFamilyProperties2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties</name></type> <name>glad_vkGetPhysicalDeviceSparseImageFormatProperties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties2</name></type> <name>glad_vkGetPhysicalDeviceSparseImageFormatProperties2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceSurfaceFormatsKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfaceFormatsKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceSurfacePresentModesKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfacePresentModesKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceSurfaceSupportKHR</name></type> <name>glad_vkGetPhysicalDeviceSurfaceSupportKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetPipelineCacheData</name></type> <name>glad_vkGetPipelineCacheData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetQueryPoolResults</name></type> <name>glad_vkGetQueryPoolResults</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetRenderAreaGranularity</name></type> <name>glad_vkGetRenderAreaGranularity</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetSwapchainImagesKHR</name></type> <name>glad_vkGetSwapchainImagesKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkInvalidateMappedMemoryRanges</name></type> <name>glad_vkInvalidateMappedMemoryRanges</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkMapMemory</name></type> <name>glad_vkMapMemory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkMergePipelineCaches</name></type> <name>glad_vkMergePipelineCaches</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkQueueBindSparse</name></type> <name>glad_vkQueueBindSparse</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkQueuePresentKHR</name></type> <name>glad_vkQueuePresentKHR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkQueueSubmit</name></type> <name>glad_vkQueueSubmit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkQueueWaitIdle</name></type> <name>glad_vkQueueWaitIdle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkResetCommandBuffer</name></type> <name>glad_vkResetCommandBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkResetCommandPool</name></type> <name>glad_vkResetCommandPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkResetDescriptorPool</name></type> <name>glad_vkResetDescriptorPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkResetEvent</name></type> <name>glad_vkResetEvent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkResetFences</name></type> <name>glad_vkResetFences</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkSetEvent</name></type> <name>glad_vkSetEvent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkTrimCommandPool</name></type> <name>glad_vkTrimCommandPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkUnmapMemory</name></type> <name>glad_vkUnmapMemory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkUpdateDescriptorSetWithTemplate</name></type> <name>glad_vkUpdateDescriptorSetWithTemplate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkUpdateDescriptorSets</name></type> <name>glad_vkUpdateDescriptorSets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkWaitForFences</name></type> <name>glad_vkWaitForFences</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_vk_load_VK_VERSION_1_0</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_VK_VERSION_1_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vkAllocateCommandBuffers</name> <operator>=</operator> <operator>(</operator><name>PFN_vkAllocateCommandBuffers</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkAllocateCommandBuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkAllocateDescriptorSets</name> <operator>=</operator> <operator>(</operator><name>PFN_vkAllocateDescriptorSets</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkAllocateDescriptorSets"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkAllocateMemory</name> <operator>=</operator> <operator>(</operator><name>PFN_vkAllocateMemory</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkAllocateMemory"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkBeginCommandBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkBeginCommandBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkBeginCommandBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkBindBufferMemory</name> <operator>=</operator> <operator>(</operator><name>PFN_vkBindBufferMemory</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkBindBufferMemory"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkBindImageMemory</name> <operator>=</operator> <operator>(</operator><name>PFN_vkBindImageMemory</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkBindImageMemory"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdBeginQuery</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdBeginQuery</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdBeginQuery"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdBeginRenderPass</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdBeginRenderPass</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdBeginRenderPass"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdBindDescriptorSets</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdBindDescriptorSets</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdBindDescriptorSets"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdBindIndexBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdBindIndexBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdBindIndexBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdBindPipeline</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdBindPipeline</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdBindPipeline"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdBindVertexBuffers</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdBindVertexBuffers</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdBindVertexBuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdBlitImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdBlitImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdBlitImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdClearAttachments</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdClearAttachments</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdClearAttachments"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdClearColorImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdClearColorImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdClearColorImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdClearDepthStencilImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdClearDepthStencilImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdClearDepthStencilImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdCopyBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdCopyBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdCopyBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdCopyBufferToImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdCopyBufferToImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdCopyBufferToImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdCopyImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdCopyImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdCopyImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdCopyImageToBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdCopyImageToBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdCopyImageToBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdCopyQueryPoolResults</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdCopyQueryPoolResults</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdCopyQueryPoolResults"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdDispatch</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdDispatch</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdDispatch"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdDispatchIndirect</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdDispatchIndirect</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdDispatchIndirect"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdDraw</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdDraw</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdDraw"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdDrawIndexed</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdDrawIndexed</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdDrawIndexed"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdDrawIndexedIndirect</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdDrawIndexedIndirect</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdDrawIndexedIndirect"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdDrawIndirect</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdDrawIndirect</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdDrawIndirect"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdEndQuery</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdEndQuery</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdEndQuery"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdEndRenderPass</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdEndRenderPass</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdEndRenderPass"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdExecuteCommands</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdExecuteCommands</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdExecuteCommands"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdFillBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdFillBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdFillBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdNextSubpass</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdNextSubpass</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdNextSubpass"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdPipelineBarrier</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdPipelineBarrier</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdPipelineBarrier"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdPushConstants</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdPushConstants</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdPushConstants"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdResetEvent</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdResetEvent</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdResetEvent"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdResetQueryPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdResetQueryPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdResetQueryPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdResolveImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdResolveImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdResolveImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetBlendConstants</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetBlendConstants</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetBlendConstants"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetDepthBias</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetDepthBias</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetDepthBias"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetDepthBounds</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetDepthBounds</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetDepthBounds"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetEvent</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetEvent</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetEvent"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetLineWidth</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetLineWidth</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetLineWidth"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetScissor</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetScissor</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetScissor"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetStencilCompareMask</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetStencilCompareMask</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetStencilCompareMask"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetStencilReference</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetStencilReference</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetStencilReference"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetStencilWriteMask</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetStencilWriteMask</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetStencilWriteMask"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetViewport</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetViewport</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetViewport"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdUpdateBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdUpdateBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdUpdateBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdWaitEvents</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdWaitEvents</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdWaitEvents"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdWriteTimestamp</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdWriteTimestamp</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdWriteTimestamp"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateBufferView</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateBufferView</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateBufferView"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateCommandPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateCommandPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateCommandPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateComputePipelines</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateComputePipelines</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateComputePipelines"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateDescriptorPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateDescriptorPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateDescriptorPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateDescriptorSetLayout</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateDescriptorSetLayout</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateDescriptorSetLayout"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateDevice</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateDevice</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateDevice"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateEvent</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateEvent</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateEvent"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateFence</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateFence</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateFence"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateFramebuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateFramebuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateGraphicsPipelines</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateGraphicsPipelines</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateGraphicsPipelines"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateImageView</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateImageView</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateImageView"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateInstance</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateInstance</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateInstance"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreatePipelineCache</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreatePipelineCache</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreatePipelineCache"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreatePipelineLayout</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreatePipelineLayout</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreatePipelineLayout"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateQueryPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateQueryPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateQueryPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateRenderPass</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateRenderPass</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateRenderPass"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateSampler</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateSampler</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateSampler"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateSemaphore</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateSemaphore</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateSemaphore"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateShaderModule</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateShaderModule</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateShaderModule"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyBufferView</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyBufferView</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyBufferView"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyCommandPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyCommandPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyCommandPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyDescriptorPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyDescriptorPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyDescriptorPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyDescriptorSetLayout</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyDescriptorSetLayout</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyDescriptorSetLayout"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyDevice</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyDevice</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyDevice"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyEvent</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyEvent</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyEvent"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyFence</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyFence</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyFence"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyFramebuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyFramebuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyImage</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyImage</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyImage"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyImageView</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyImageView</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyImageView"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyInstance</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyInstance</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyInstance"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyPipeline</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyPipeline</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyPipeline"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyPipelineCache</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyPipelineCache</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyPipelineCache"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyPipelineLayout</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyPipelineLayout</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyPipelineLayout"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyQueryPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyQueryPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyQueryPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyRenderPass</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyRenderPass</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyRenderPass"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroySampler</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroySampler</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroySampler"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroySemaphore</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroySemaphore</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroySemaphore"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyShaderModule</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyShaderModule</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyShaderModule"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDeviceWaitIdle</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDeviceWaitIdle</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDeviceWaitIdle"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEndCommandBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEndCommandBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEndCommandBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEnumerateDeviceExtensionProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumerateDeviceExtensionProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumerateDeviceExtensionProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEnumerateDeviceLayerProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumerateDeviceLayerProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumerateDeviceLayerProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEnumerateInstanceExtensionProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumerateInstanceExtensionProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumerateInstanceExtensionProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEnumerateInstanceLayerProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumerateInstanceLayerProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumerateInstanceLayerProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEnumeratePhysicalDevices</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumeratePhysicalDevices</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumeratePhysicalDevices"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkFlushMappedMemoryRanges</name> <operator>=</operator> <operator>(</operator><name>PFN_vkFlushMappedMemoryRanges</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkFlushMappedMemoryRanges"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkFreeCommandBuffers</name> <operator>=</operator> <operator>(</operator><name>PFN_vkFreeCommandBuffers</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkFreeCommandBuffers"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkFreeDescriptorSets</name> <operator>=</operator> <operator>(</operator><name>PFN_vkFreeDescriptorSets</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkFreeDescriptorSets"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkFreeMemory</name> <operator>=</operator> <operator>(</operator><name>PFN_vkFreeMemory</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkFreeMemory"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetBufferMemoryRequirements</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetBufferMemoryRequirements</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetBufferMemoryRequirements"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDeviceMemoryCommitment</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDeviceMemoryCommitment</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceMemoryCommitment"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDeviceProcAddr</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDeviceProcAddr</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceProcAddr"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDeviceQueue</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDeviceQueue</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceQueue"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetEventStatus</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetEventStatus</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetEventStatus"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetFenceStatus</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetFenceStatus</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetFenceStatus"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetImageMemoryRequirements</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetImageMemoryRequirements</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetImageMemoryRequirements"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetImageSparseMemoryRequirements</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetImageSparseMemoryRequirements</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetImageSparseMemoryRequirements"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetImageSubresourceLayout</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetImageSubresourceLayout</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetImageSubresourceLayout"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetInstanceProcAddr</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetInstanceProcAddr</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetInstanceProcAddr"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceFeatures</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceFeatures</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceFeatures"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceFormatProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceFormatProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceFormatProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceImageFormatProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceImageFormatProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceImageFormatProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceMemoryProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceMemoryProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceMemoryProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceQueueFamilyProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceQueueFamilyProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceQueueFamilyProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceSparseImageFormatProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceSparseImageFormatProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPipelineCacheData</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPipelineCacheData</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPipelineCacheData"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetQueryPoolResults</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetQueryPoolResults</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetQueryPoolResults"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetRenderAreaGranularity</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetRenderAreaGranularity</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetRenderAreaGranularity"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkInvalidateMappedMemoryRanges</name> <operator>=</operator> <operator>(</operator><name>PFN_vkInvalidateMappedMemoryRanges</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkInvalidateMappedMemoryRanges"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkMapMemory</name> <operator>=</operator> <operator>(</operator><name>PFN_vkMapMemory</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkMapMemory"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkMergePipelineCaches</name> <operator>=</operator> <operator>(</operator><name>PFN_vkMergePipelineCaches</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkMergePipelineCaches"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkQueueBindSparse</name> <operator>=</operator> <operator>(</operator><name>PFN_vkQueueBindSparse</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkQueueBindSparse"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkQueueSubmit</name> <operator>=</operator> <operator>(</operator><name>PFN_vkQueueSubmit</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkQueueSubmit"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkQueueWaitIdle</name> <operator>=</operator> <operator>(</operator><name>PFN_vkQueueWaitIdle</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkQueueWaitIdle"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkResetCommandBuffer</name> <operator>=</operator> <operator>(</operator><name>PFN_vkResetCommandBuffer</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkResetCommandBuffer"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkResetCommandPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkResetCommandPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkResetCommandPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkResetDescriptorPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkResetDescriptorPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkResetDescriptorPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkResetEvent</name> <operator>=</operator> <operator>(</operator><name>PFN_vkResetEvent</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkResetEvent"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkResetFences</name> <operator>=</operator> <operator>(</operator><name>PFN_vkResetFences</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkResetFences"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkSetEvent</name> <operator>=</operator> <operator>(</operator><name>PFN_vkSetEvent</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkSetEvent"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkUnmapMemory</name> <operator>=</operator> <operator>(</operator><name>PFN_vkUnmapMemory</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkUnmapMemory"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkUpdateDescriptorSets</name> <operator>=</operator> <operator>(</operator><name>PFN_vkUpdateDescriptorSets</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkUpdateDescriptorSets"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkWaitForFences</name> <operator>=</operator> <operator>(</operator><name>PFN_vkWaitForFences</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkWaitForFences"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_vk_load_VK_VERSION_1_1</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_VK_VERSION_1_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vkBindBufferMemory2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkBindBufferMemory2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkBindBufferMemory2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkBindImageMemory2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkBindImageMemory2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkBindImageMemory2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdDispatchBase</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdDispatchBase</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdDispatchBase"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCmdSetDeviceMask</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCmdSetDeviceMask</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCmdSetDeviceMask"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateDescriptorUpdateTemplate</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateDescriptorUpdateTemplate</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateDescriptorUpdateTemplate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateSamplerYcbcrConversion</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateSamplerYcbcrConversion</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateSamplerYcbcrConversion"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyDescriptorUpdateTemplate</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyDescriptorUpdateTemplate</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyDescriptorUpdateTemplate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroySamplerYcbcrConversion</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroySamplerYcbcrConversion</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroySamplerYcbcrConversion"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEnumerateInstanceVersion</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumerateInstanceVersion</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumerateInstanceVersion"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkEnumeratePhysicalDeviceGroups</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumeratePhysicalDeviceGroups</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumeratePhysicalDeviceGroups"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetBufferMemoryRequirements2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetBufferMemoryRequirements2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetBufferMemoryRequirements2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDescriptorSetLayoutSupport</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDescriptorSetLayoutSupport</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDescriptorSetLayoutSupport"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDeviceGroupPeerMemoryFeatures</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDeviceGroupPeerMemoryFeatures</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceGroupPeerMemoryFeatures"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDeviceQueue2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDeviceQueue2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceQueue2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetImageMemoryRequirements2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetImageMemoryRequirements2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetImageMemoryRequirements2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetImageSparseMemoryRequirements2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetImageSparseMemoryRequirements2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetImageSparseMemoryRequirements2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceExternalBufferProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceExternalBufferProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceExternalBufferProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceExternalFenceProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceExternalFenceProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceExternalFenceProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceExternalSemaphoreProperties</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceExternalSemaphoreProperties</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceExternalSemaphoreProperties"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceFeatures2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceFeatures2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceFeatures2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceFormatProperties2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceFormatProperties2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceFormatProperties2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceImageFormatProperties2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceImageFormatProperties2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceImageFormatProperties2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceMemoryProperties2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceMemoryProperties2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceMemoryProperties2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceProperties2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceProperties2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceProperties2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceQueueFamilyProperties2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceQueueFamilyProperties2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceQueueFamilyProperties2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceSparseImageFormatProperties2</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceSparseImageFormatProperties2</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceSparseImageFormatProperties2"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkTrimCommandPool</name> <operator>=</operator> <operator>(</operator><name>PFN_vkTrimCommandPool</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkTrimCommandPool"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkUpdateDescriptorSetWithTemplate</name> <operator>=</operator> <operator>(</operator><name>PFN_vkUpdateDescriptorSetWithTemplate</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkUpdateDescriptorSetWithTemplate"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_vk_load_VK_EXT_debug_report</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_VK_EXT_debug_report</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vkCreateDebugReportCallbackEXT</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateDebugReportCallbackEXT</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateDebugReportCallbackEXT"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDebugReportMessageEXT</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDebugReportMessageEXT</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDebugReportMessageEXT"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroyDebugReportCallbackEXT</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroyDebugReportCallbackEXT</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroyDebugReportCallbackEXT"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_vk_load_VK_KHR_surface</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_VK_KHR_surface</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vkDestroySurfaceKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroySurfaceKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroySurfaceKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceSurfaceCapabilitiesKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceSurfaceFormatsKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceSurfaceFormatsKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceSurfaceFormatsKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceSurfacePresentModesKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceSurfacePresentModesKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceSurfacePresentModesKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDeviceSurfaceSupportKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDeviceSurfaceSupportKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDeviceSurfaceSupportKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_vk_load_VK_KHR_swapchain</name><parameter_list>( <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_VK_KHR_swapchain</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vkAcquireNextImage2KHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkAcquireNextImage2KHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkAcquireNextImage2KHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkAcquireNextImageKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkAcquireNextImageKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkAcquireNextImageKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkCreateSwapchainKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateSwapchainKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkCreateSwapchainKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkDestroySwapchainKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkDestroySwapchainKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkDestroySwapchainKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDeviceGroupPresentCapabilitiesKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDeviceGroupPresentCapabilitiesKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceGroupPresentCapabilitiesKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetDeviceGroupSurfacePresentModesKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetDeviceGroupSurfacePresentModesKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetDeviceGroupSurfacePresentModesKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetPhysicalDevicePresentRectanglesKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetPhysicalDevicePresentRectanglesKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetPhysicalDevicePresentRectanglesKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkGetSwapchainImagesKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetSwapchainImagesKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkGetSwapchainImagesKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkQueuePresentKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkQueuePresentKHR</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkQueuePresentKHR"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_vk_get_extensions</name><parameter_list>( <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physical_device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out_extension_count</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>out_extensions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>instance_extension_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>device_extension_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_extension_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_extension_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtensionProperties</name> <modifier>*</modifier></type><name>ext_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkResult</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vkEnumerateInstanceExtensionProperties</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>physical_device</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>vkEnumerateDeviceExtensionProperties</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vkEnumerateInstanceExtensionProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>instance_extension_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>physical_device</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vkEnumerateDeviceExtensionProperties</name><argument_list>(<argument><expr><name>physical_device</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_extension_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_extension_count</name> <operator>=</operator> <name>instance_extension_count</name> <operator>+</operator> <name>device_extension_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_extension_count</name> <operator>=</operator> <ternary><condition><expr><name>instance_extension_count</name> <operator>&gt;</operator> <name>device_extension_count</name></expr>
?</condition><then> <expr><name>instance_extension_count</name></expr> </then><else>: <expr><name>device_extension_count</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ext_properties</name> <operator>=</operator> <operator>(</operator><name>VkExtensionProperties</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>max_extension_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VkExtensionProperties</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_properties</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vkEnumerateInstanceExtensionProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>instance_extension_count</name></expr></argument>, <argument><expr><name>ext_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ext_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extensions</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>total_extension_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extensions</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ext_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>instance_extension_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VkExtensionProperties</name></type> <name>ext</name> <init>= <expr><name><name>ext_properties</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extension_name_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>.</operator><name>extensionName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>extension_name_length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ext</name><operator>.</operator><name>extensionName</name></name></expr></argument>, <argument><expr><name>extension_name_length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>physical_device</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vkEnumerateDeviceExtensionProperties</name><argument_list>(<argument><expr><name>physical_device</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_extension_count</name></expr></argument>, <argument><expr><name>ext_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>instance_extension_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>device_extension_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VkExtensionProperties</name></type> <name>ext</name> <init>= <expr><name><name>ext_properties</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extension_name_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ext</name><operator>.</operator><name>extensionName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>extensions</name><index>[<expr><name>instance_extension_count</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>extension_name_length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>extensions</name><index>[<expr><name>instance_extension_count</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ext</name><operator>.</operator><name>extensionName</name></name></expr></argument>, <argument><expr><name>extension_name_length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ext_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_extension_count</name> <operator>=</operator> <name>total_extension_count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_extensions</name> <operator>=</operator> <name>extensions</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glad_vk_free_extensions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>extension_count</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extensions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>extension_count</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_vk_has_extension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>extension_count</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extensions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>extension_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLADapiproc</name></type> <name>glad_vk_get_proc_from_userptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><macro><name>GLAD_GNUC_EXTENSION</name> <argument_list>(<argument>GLADapiproc (*)(const char *name)</argument>)</argument_list></macro> <name>userptr</name><operator>)</operator><operator>(</operator><name>name</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_vk_find_extensions_vulkan</name><parameter_list>( <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physical_device</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>extension_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extensions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glad_vk_get_extensions</name><argument_list>(<argument><expr><name>physical_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extension_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extensions</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>GLAD_VK_EXT_debug_report</name> <operator>=</operator> <call><name>glad_vk_has_extension</name><argument_list>(<argument><expr><literal type="string">"VK_EXT_debug_report"</literal></expr></argument>, <argument><expr><name>extension_count</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_VK_KHR_surface</name> <operator>=</operator> <call><name>glad_vk_has_extension</name><argument_list>(<argument><expr><literal type="string">"VK_KHR_surface"</literal></expr></argument>, <argument><expr><name>extension_count</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_VK_KHR_swapchain</name> <operator>=</operator> <call><name>glad_vk_has_extension</name><argument_list>(<argument><expr><literal type="string">"VK_KHR_swapchain"</literal></expr></argument>, <argument><expr><name>extension_count</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glad_vk_free_extensions</name><argument_list>(<argument><expr><name>extension_count</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glad_vk_find_core_vulkan</name><parameter_list>( <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physical_device</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>major</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VK_VERSION_1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vkEnumerateInstanceVersion</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkResult</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vkEnumerateInstanceVersion</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>major</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>VK_VERSION_MAJOR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>VK_VERSION_MINOR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>physical_device</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>vkGetPhysicalDeviceProperties</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VkPhysicalDeviceProperties</name></type> <name>properties</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vkGetPhysicalDeviceProperties</name><argument_list>(<argument><expr><name>physical_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>major</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>VK_VERSION_MAJOR</name><argument_list>(<argument><expr><name><name>properties</name><operator>.</operator><name>apiVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>VK_VERSION_MINOR</name><argument_list>(<argument><expr><name><name>properties</name><operator>.</operator><name>apiVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>GLAD_VK_VERSION_1_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_VK_VERSION_1_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>GLAD_MAKE_VERSION</name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gladLoadVulkanUserPtr</name><parameter_list>( <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physical_device</name></decl></parameter>, <parameter><decl><type><name>GLADuserptrloadfunc</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VK_VERSION_1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>vkEnumerateInstanceVersion</name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumerateInstanceVersion</name><operator>)</operator> <call><name>load</name><argument_list>(<argument><expr><literal type="string">"vkEnumerateInstanceVersion"</literal></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>glad_vk_find_core_vulkan</name><argument_list>( <argument><expr><name>physical_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glad_vk_load_VK_VERSION_1_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glad_vk_load_VK_VERSION_1_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glad_vk_find_extensions_vulkan</name><argument_list>( <argument><expr><name>physical_device</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>glad_vk_load_VK_EXT_debug_report</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glad_vk_load_VK_KHR_surface</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glad_vk_load_VK_KHR_swapchain</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><name>userptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>version</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>gladLoadVulkan</name><parameter_list>( <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>physical_device</name></decl></parameter>, <parameter><decl><type><name>GLADloadfunc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>gladLoadVulkanUserPtr</name><argument_list>( <argument><expr><name>physical_device</name></expr></argument>, <argument><expr><name>glad_vk_get_proc_from_userptr</name></expr></argument>, <argument><expr><macro><name>GLAD_GNUC_EXTENSION</name> <argument_list>(<argument>void*</argument>)</argument_list></macro> <name>load</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




</unit>
