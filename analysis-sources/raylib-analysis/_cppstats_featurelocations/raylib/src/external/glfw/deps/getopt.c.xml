<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\deps\getopt.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>no_argument</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>required_argument</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>optional_argument</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>optarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optopt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>optind</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opterr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>optcursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>









<function><type><name>int</name></type> <name>getopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>optstring</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>optchar</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>optdecl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opterr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_more_optchars</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_more_optchars</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_more_optchars</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_more_optchars</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>
<goto>goto <name>no_more_optchars</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>optcursor</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>optcursor</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optcursor</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>optchar</name> <operator>=</operator> <operator>*</operator><name>optcursor</name></expr>;</expr_stmt>



<expr_stmt><expr><name>optopt</name> <operator>=</operator> <name>optchar</name></expr>;</expr_stmt>




<expr_stmt><expr><name>optdecl</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>optstring</name></expr></argument>, <argument><expr><name>optchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optdecl</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>optdecl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <operator>++</operator><name>optcursor</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>optarg</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>optdecl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>










<if_stmt><if>if <condition>(<expr><operator>++</operator><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optchar</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>optstring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">':'</literal></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>optcursor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>optchar</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>optcursor</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>++</operator><name>optcursor</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>optchar</name></expr>;</return>

<label><name>no_more_optchars</name>:</label>
<expr_stmt><expr><name>optcursor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>getopt_long</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>optstring</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name><modifier>*</modifier></type> <name>longopts</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>longindex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name><modifier>*</modifier></type> <name>o</name> <init>= <expr><name>longopts</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name><modifier>*</modifier></type> <name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>argument_name_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>current_argument</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>optstring</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>current_argument</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argument_name_length</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>current_argument</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>o</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>current_argument</name></expr></argument>, <argument><expr><name>argument_name_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>num_matches</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num_matches</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>longindex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>longindex</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>match</name> <operator>-</operator> <name>longopts</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>flag</name></name><operator>)</operator> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <ternary><condition><expr><name><name>match</name><operator>-&gt;</operator><name>flag</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>match</name><operator>-&gt;</operator><name>val</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>has_arg</name></name> <operator>!=</operator> <name>no_argument</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optarg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>optarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>has_arg</name></name> <operator>==</operator> <name>required_argument</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>optarg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>++</operator><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>optarg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
