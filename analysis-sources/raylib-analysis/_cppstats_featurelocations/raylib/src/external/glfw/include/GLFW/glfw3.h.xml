<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\include\GLFW\glfw3.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_glfw3_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw3_h_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_VULKAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vulkan/vulkan.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_APIENTRY_DEFINED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINGDIAPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINGDIAPI</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_WINGDIAPI_DEFINED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CALLBACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLBACK</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CALLBACK_DEFINED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES/gl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES/glext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2ext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES3</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES3/gl3.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2ext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES31</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES3/gl31.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2ext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES3/gl32.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2ext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLCOREARB</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl3.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl3ext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glcorearb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_NONE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLEXT_LEGACY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/glu.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/gl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glu.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_DLL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_BUILD_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"You must not have both GLFW_DLL and _GLFW_BUILD_DLL defined"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_BUILD_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFWAPI</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_DLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFWAPI</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_BUILD_DLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFWAPI</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFWAPI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_VERSION_MAJOR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_VERSION_MINOR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_VERSION_REVISION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RELEASE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_PRESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_REPEAT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_CENTERED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_UP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_RIGHT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_DOWN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_LEFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_RIGHT_UP</name></cpp:macro> <cpp:value>(GLFW_HAT_RIGHT | GLFW_HAT_UP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_RIGHT_DOWN</name></cpp:macro> <cpp:value>(GLFW_HAT_RIGHT | GLFW_HAT_DOWN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_LEFT_UP</name></cpp:macro> <cpp:value>(GLFW_HAT_LEFT | GLFW_HAT_UP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAT_LEFT_DOWN</name></cpp:macro> <cpp:value>(GLFW_HAT_LEFT | GLFW_HAT_DOWN)</cpp:value></cpp:define>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_UNKNOWN</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_SPACE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_APOSTROPHE</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_COMMA</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_MINUS</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_PERIOD</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_SLASH</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_0</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_1</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_2</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_3</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_4</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_5</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_6</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_7</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_8</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_9</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_SEMICOLON</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_EQUAL</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_A</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_B</name></cpp:macro> <cpp:value>66</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_C</name></cpp:macro> <cpp:value>67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_D</name></cpp:macro> <cpp:value>68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_E</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_G</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_H</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_I</name></cpp:macro> <cpp:value>73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_J</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_K</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_L</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_M</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_N</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_O</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_P</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_Q</name></cpp:macro> <cpp:value>81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_R</name></cpp:macro> <cpp:value>82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_S</name></cpp:macro> <cpp:value>83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_T</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_U</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_V</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_W</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_X</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_Y</name></cpp:macro> <cpp:value>89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_Z</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_LEFT_BRACKET</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_BACKSLASH</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_RIGHT_BRACKET</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_GRAVE_ACCENT</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_WORLD_1</name></cpp:macro> <cpp:value>161</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_WORLD_2</name></cpp:macro> <cpp:value>162</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_ESCAPE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_ENTER</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_TAB</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_BACKSPACE</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_INSERT</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_DELETE</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_RIGHT</name></cpp:macro> <cpp:value>262</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_LEFT</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_DOWN</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_UP</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_PAGE_UP</name></cpp:macro> <cpp:value>266</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_PAGE_DOWN</name></cpp:macro> <cpp:value>267</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_HOME</name></cpp:macro> <cpp:value>268</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_END</name></cpp:macro> <cpp:value>269</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_CAPS_LOCK</name></cpp:macro> <cpp:value>280</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_SCROLL_LOCK</name></cpp:macro> <cpp:value>281</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_NUM_LOCK</name></cpp:macro> <cpp:value>282</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_PRINT_SCREEN</name></cpp:macro> <cpp:value>283</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_PAUSE</name></cpp:macro> <cpp:value>284</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F1</name></cpp:macro> <cpp:value>290</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F2</name></cpp:macro> <cpp:value>291</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F3</name></cpp:macro> <cpp:value>292</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F4</name></cpp:macro> <cpp:value>293</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F5</name></cpp:macro> <cpp:value>294</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F6</name></cpp:macro> <cpp:value>295</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F7</name></cpp:macro> <cpp:value>296</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F8</name></cpp:macro> <cpp:value>297</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F9</name></cpp:macro> <cpp:value>298</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F10</name></cpp:macro> <cpp:value>299</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F11</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F12</name></cpp:macro> <cpp:value>301</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F13</name></cpp:macro> <cpp:value>302</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F14</name></cpp:macro> <cpp:value>303</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F15</name></cpp:macro> <cpp:value>304</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F16</name></cpp:macro> <cpp:value>305</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F17</name></cpp:macro> <cpp:value>306</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F18</name></cpp:macro> <cpp:value>307</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F19</name></cpp:macro> <cpp:value>308</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F20</name></cpp:macro> <cpp:value>309</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F21</name></cpp:macro> <cpp:value>310</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F22</name></cpp:macro> <cpp:value>311</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F23</name></cpp:macro> <cpp:value>312</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F24</name></cpp:macro> <cpp:value>313</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_F25</name></cpp:macro> <cpp:value>314</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_0</name></cpp:macro> <cpp:value>320</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_1</name></cpp:macro> <cpp:value>321</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_2</name></cpp:macro> <cpp:value>322</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_3</name></cpp:macro> <cpp:value>323</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_4</name></cpp:macro> <cpp:value>324</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_5</name></cpp:macro> <cpp:value>325</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_6</name></cpp:macro> <cpp:value>326</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_7</name></cpp:macro> <cpp:value>327</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_8</name></cpp:macro> <cpp:value>328</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_9</name></cpp:macro> <cpp:value>329</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_DECIMAL</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_DIVIDE</name></cpp:macro> <cpp:value>331</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_MULTIPLY</name></cpp:macro> <cpp:value>332</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_SUBTRACT</name></cpp:macro> <cpp:value>333</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_ADD</name></cpp:macro> <cpp:value>334</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_ENTER</name></cpp:macro> <cpp:value>335</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_KP_EQUAL</name></cpp:macro> <cpp:value>336</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_LEFT_SHIFT</name></cpp:macro> <cpp:value>340</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_LEFT_CONTROL</name></cpp:macro> <cpp:value>341</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_LEFT_ALT</name></cpp:macro> <cpp:value>342</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_LEFT_SUPER</name></cpp:macro> <cpp:value>343</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_RIGHT_SHIFT</name></cpp:macro> <cpp:value>344</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_RIGHT_CONTROL</name></cpp:macro> <cpp:value>345</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_RIGHT_ALT</name></cpp:macro> <cpp:value>346</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_RIGHT_SUPER</name></cpp:macro> <cpp:value>347</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_MENU</name></cpp:macro> <cpp:value>348</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_KEY_LAST</name></cpp:macro> <cpp:value>GLFW_KEY_MENU</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOD_SHIFT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOD_CONTROL</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOD_ALT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOD_SUPER</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOD_CAPS_LOCK</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOD_NUM_LOCK</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_3</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_5</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_6</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_7</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_8</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_LAST</name></cpp:macro> <cpp:value>GLFW_MOUSE_BUTTON_8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_LEFT</name></cpp:macro> <cpp:value>GLFW_MOUSE_BUTTON_1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_RIGHT</name></cpp:macro> <cpp:value>GLFW_MOUSE_BUTTON_2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MOUSE_BUTTON_MIDDLE</name></cpp:macro> <cpp:value>GLFW_MOUSE_BUTTON_3</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_3</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_5</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_6</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_7</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_8</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_9</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_10</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_11</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_12</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_13</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_14</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_15</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_16</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_LAST</name></cpp:macro> <cpp:value>GLFW_JOYSTICK_16</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_A</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_B</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_X</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_Y</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_LEFT_BUMPER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_BACK</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_START</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_GUIDE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_LEFT_THUMB</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_RIGHT_THUMB</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_DPAD_UP</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_DPAD_RIGHT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_DPAD_DOWN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_DPAD_LEFT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_LAST</name></cpp:macro> <cpp:value>GLFW_GAMEPAD_BUTTON_DPAD_LEFT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_CROSS</name></cpp:macro> <cpp:value>GLFW_GAMEPAD_BUTTON_A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_CIRCLE</name></cpp:macro> <cpp:value>GLFW_GAMEPAD_BUTTON_B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_SQUARE</name></cpp:macro> <cpp:value>GLFW_GAMEPAD_BUTTON_X</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_BUTTON_TRIANGLE</name></cpp:macro> <cpp:value>GLFW_GAMEPAD_BUTTON_Y</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_AXIS_LEFT_X</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_AXIS_LEFT_Y</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_AXIS_RIGHT_X</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_AXIS_RIGHT_Y</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_AXIS_LEFT_TRIGGER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GAMEPAD_AXIS_LAST</name></cpp:macro> <cpp:value>GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NO_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NOT_INITIALIZED</name></cpp:macro> <cpp:value>0x00010001</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NO_CURRENT_CONTEXT</name></cpp:macro> <cpp:value>0x00010002</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_INVALID_ENUM</name></cpp:macro> <cpp:value>0x00010003</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_INVALID_VALUE</name></cpp:macro> <cpp:value>0x00010004</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OUT_OF_MEMORY</name></cpp:macro> <cpp:value>0x00010005</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_API_UNAVAILABLE</name></cpp:macro> <cpp:value>0x00010006</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_VERSION_UNAVAILABLE</name></cpp:macro> <cpp:value>0x00010007</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_PLATFORM_ERROR</name></cpp:macro> <cpp:value>0x00010008</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_FORMAT_UNAVAILABLE</name></cpp:macro> <cpp:value>0x00010009</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NO_WINDOW_CONTEXT</name></cpp:macro> <cpp:value>0x0001000A</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CURSOR_UNAVAILABLE</name></cpp:macro> <cpp:value>0x0001000B</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_FOCUSED</name></cpp:macro> <cpp:value>0x00020001</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ICONIFIED</name></cpp:macro> <cpp:value>0x00020002</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RESIZABLE</name></cpp:macro> <cpp:value>0x00020003</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_VISIBLE</name></cpp:macro> <cpp:value>0x00020004</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_DECORATED</name></cpp:macro> <cpp:value>0x00020005</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_AUTO_ICONIFY</name></cpp:macro> <cpp:value>0x00020006</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_FLOATING</name></cpp:macro> <cpp:value>0x00020007</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_MAXIMIZED</name></cpp:macro> <cpp:value>0x00020008</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CENTER_CURSOR</name></cpp:macro> <cpp:value>0x00020009</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_TRANSPARENT_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x0002000A</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HOVERED</name></cpp:macro> <cpp:value>0x0002000B</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_FOCUS_ON_SHOW</name></cpp:macro> <cpp:value>0x0002000C</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RED_BITS</name></cpp:macro> <cpp:value>0x00021001</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_GREEN_BITS</name></cpp:macro> <cpp:value>0x00021002</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_BLUE_BITS</name></cpp:macro> <cpp:value>0x00021003</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ALPHA_BITS</name></cpp:macro> <cpp:value>0x00021004</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_DEPTH_BITS</name></cpp:macro> <cpp:value>0x00021005</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_STENCIL_BITS</name></cpp:macro> <cpp:value>0x00021006</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ACCUM_RED_BITS</name></cpp:macro> <cpp:value>0x00021007</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ACCUM_GREEN_BITS</name></cpp:macro> <cpp:value>0x00021008</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ACCUM_BLUE_BITS</name></cpp:macro> <cpp:value>0x00021009</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ACCUM_ALPHA_BITS</name></cpp:macro> <cpp:value>0x0002100A</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_AUX_BUFFERS</name></cpp:macro> <cpp:value>0x0002100B</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_STEREO</name></cpp:macro> <cpp:value>0x0002100C</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_SAMPLES</name></cpp:macro> <cpp:value>0x0002100D</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_SRGB_CAPABLE</name></cpp:macro> <cpp:value>0x0002100E</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_REFRESH_RATE</name></cpp:macro> <cpp:value>0x0002100F</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_DOUBLEBUFFER</name></cpp:macro> <cpp:value>0x00021010</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CLIENT_API</name></cpp:macro> <cpp:value>0x00022001</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONTEXT_VERSION_MAJOR</name></cpp:macro> <cpp:value>0x00022002</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONTEXT_VERSION_MINOR</name></cpp:macro> <cpp:value>0x00022003</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONTEXT_REVISION</name></cpp:macro> <cpp:value>0x00022004</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONTEXT_ROBUSTNESS</name></cpp:macro> <cpp:value>0x00022005</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_FORWARD_COMPAT</name></cpp:macro> <cpp:value>0x00022006</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_DEBUG_CONTEXT</name></cpp:macro> <cpp:value>0x00022007</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_PROFILE</name></cpp:macro> <cpp:value>0x00022008</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONTEXT_RELEASE_BEHAVIOR</name></cpp:macro> <cpp:value>0x00022009</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONTEXT_NO_ERROR</name></cpp:macro> <cpp:value>0x0002200A</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONTEXT_CREATION_API</name></cpp:macro> <cpp:value>0x0002200B</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_SCALE_TO_MONITOR</name></cpp:macro> <cpp:value>0x0002200C</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_COCOA_RETINA_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x00023001</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_COCOA_FRAME_NAME</name></cpp:macro> <cpp:value>0x00023002</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_COCOA_GRAPHICS_SWITCHING</name></cpp:macro> <cpp:value>0x00023003</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_X11_CLASS_NAME</name></cpp:macro> <cpp:value>0x00024001</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_X11_INSTANCE_NAME</name></cpp:macro> <cpp:value>0x00024002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_WIN32_KEYBOARD_MENU</name></cpp:macro> <cpp:value>0x00025001</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NO_API</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_API</name></cpp:macro> <cpp:value>0x00030001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_ES_API</name></cpp:macro> <cpp:value>0x00030002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NO_ROBUSTNESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NO_RESET_NOTIFICATION</name></cpp:macro> <cpp:value>0x00031001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_LOSE_CONTEXT_ON_RESET</name></cpp:macro> <cpp:value>0x00031002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_ANY_PROFILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_CORE_PROFILE</name></cpp:macro> <cpp:value>0x00032001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OPENGL_COMPAT_PROFILE</name></cpp:macro> <cpp:value>0x00032002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CURSOR</name></cpp:macro> <cpp:value>0x00033001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_STICKY_KEYS</name></cpp:macro> <cpp:value>0x00033002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_STICKY_MOUSE_BUTTONS</name></cpp:macro> <cpp:value>0x00033003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_LOCK_KEY_MODS</name></cpp:macro> <cpp:value>0x00033004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RAW_MOUSE_MOTION</name></cpp:macro> <cpp:value>0x00033005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CURSOR_NORMAL</name></cpp:macro> <cpp:value>0x00034001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CURSOR_HIDDEN</name></cpp:macro> <cpp:value>0x00034002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CURSOR_DISABLED</name></cpp:macro> <cpp:value>0x00034003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ANY_RELEASE_BEHAVIOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RELEASE_BEHAVIOR_FLUSH</name></cpp:macro> <cpp:value>0x00035001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RELEASE_BEHAVIOR_NONE</name></cpp:macro> <cpp:value>0x00035002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NATIVE_CONTEXT_API</name></cpp:macro> <cpp:value>0x00036001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_EGL_CONTEXT_API</name></cpp:macro> <cpp:value>0x00036002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_OSMESA_CONTEXT_API</name></cpp:macro> <cpp:value>0x00036003</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_ARROW_CURSOR</name></cpp:macro> <cpp:value>0x00036001</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_IBEAM_CURSOR</name></cpp:macro> <cpp:value>0x00036002</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CROSSHAIR_CURSOR</name></cpp:macro> <cpp:value>0x00036003</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_POINTING_HAND_CURSOR</name></cpp:macro> <cpp:value>0x00036004</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RESIZE_EW_CURSOR</name></cpp:macro> <cpp:value>0x00036005</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RESIZE_NS_CURSOR</name></cpp:macro> <cpp:value>0x00036006</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RESIZE_NWSE_CURSOR</name></cpp:macro> <cpp:value>0x00036007</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RESIZE_NESW_CURSOR</name></cpp:macro> <cpp:value>0x00036008</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_RESIZE_ALL_CURSOR</name></cpp:macro> <cpp:value>0x00036009</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_NOT_ALLOWED_CURSOR</name></cpp:macro> <cpp:value>0x0003600A</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HRESIZE_CURSOR</name></cpp:macro> <cpp:value>GLFW_RESIZE_EW_CURSOR</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_VRESIZE_CURSOR</name></cpp:macro> <cpp:value>GLFW_RESIZE_NS_CURSOR</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_HAND_CURSOR</name></cpp:macro> <cpp:value>GLFW_POINTING_HAND_CURSOR</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_CONNECTED</name></cpp:macro> <cpp:value>0x00040001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_DISCONNECTED</name></cpp:macro> <cpp:value>0x00040002</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_JOYSTICK_HAT_BUTTONS</name></cpp:macro> <cpp:value>0x00050001</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_COCOA_CHDIR_RESOURCES</name></cpp:macro> <cpp:value>0x00051001</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_COCOA_MENUBAR</name></cpp:macro> <cpp:value>0x00051002</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_DONT_CARE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>


















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLFWglproc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>













<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLFWvkproc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>











<typedef>typedef <type><name><name>struct</name> <name>GLFWmonitor</name></name></type> <name>GLFWmonitor</name>;</typedef>











<typedef>typedef <type><name><name>struct</name> <name>GLFWwindow</name></name></type> <name>GLFWwindow</name>;</typedef>











<typedef>typedef <type><name><name>struct</name> <name>GLFWcursor</name></name></type> <name>GLFWcursor</name>;</typedef>























<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWerrorfun</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>






















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowposfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>





















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowsizefun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowclosefun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowrefreshfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowfocusfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowiconifyfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowmaximizefun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWframebuffersizefun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWwindowcontentscalefun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>float</name></type></decl></parameter>,<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

























<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWmousebuttonfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>






















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWcursorposfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>double</name></type></decl></parameter>,<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWcursorenterfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWscrollfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>double</name></type></decl></parameter>,<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

























<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWkeyfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWcharfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


























<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWcharmodsfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>























<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWdropfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>char</name><modifier>*</modifier><index>[]</index></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWmonitorfun</name>)<parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>GLFWjoystickfun</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>














<typedef>typedef <type><struct>struct <name>GLFWvidmode</name>
<block>{


<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>redBits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>greenBits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>blueBits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>refreshRate</name></decl>;</decl_stmt>
}</block></struct></type> <name>GLFWvidmode</name>;</typedef>













<typedef>typedef <type><struct>struct <name>GLFWgammaramp</name>
<block>{


<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>red</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>green</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>blue</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>GLFWgammaramp</name>;</typedef>














<typedef>typedef <type><struct>struct <name>GLFWimage</name>
<block>{


<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pixels</name></decl>;</decl_stmt>
}</block></struct></type> <name>GLFWimage</name>;</typedef>












<typedef>typedef <type><struct>struct <name>GLFWgamepadstate</name>
<block>{



<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buttons</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>float</name></type> <name><name>axes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>GLFWgamepadstate</name>;</typedef>






































<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwTerminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwInitHint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetVersion</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetVersionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list>;</function_decl>













































<function_decl><type><name>GLFWAPI</name> <name>GLFWerrorfun</name></type> <name>glfwSetErrorCallback</name><parameter_list>(<parameter><decl><type><name>GLFWerrorfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>GLFWAPI</name> <name>GLFWmonitor</name><modifier>*</modifier><modifier>*</modifier></type> <name>glfwGetMonitors</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>GLFWAPI</name> <name>GLFWmonitor</name><modifier>*</modifier></type> <name>glfwGetPrimaryMonitor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorPos</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorWorkarea</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorPhysicalSize</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>widthMM</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>heightMM</name></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorContentScale</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetMonitorName</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetMonitorUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>GLFWAPI</name> <name>void</name><modifier>*</modifier></type> <name>glfwGetMonitorUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <name>GLFWmonitorfun</name></type> <name>glfwSetMonitorCallback</name><parameter_list>(<parameter><decl><type><name>GLFWmonitorfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>glfwGetVideoModes</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>



























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>glfwGetVideoMode</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetGamma</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>glfwGetGammaRamp</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>








































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetGammaRamp</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwDefaultWindowHints</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWindowHint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>





































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWindowHintString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
























































































































































<function_decl><type><name>GLFWAPI</name> <name>GLFWwindow</name><modifier>*</modifier></type> <name>glfwCreateWindow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>share</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwDestroyWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwWindowShouldClose</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowShouldClose</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowTitle</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>;</function_decl>














































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowIcon</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>images</name></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>


































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>










































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowSizeLimits</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minheight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxheight</name></decl></parameter>)</parameter_list>;</function_decl>










































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>)</parameter_list>;</function_decl>








































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetFramebufferSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>




































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowFrameSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bottom</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowContentScale</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>GLFWAPI</name> <name>float</name></type> <name>glfwGetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwIconifyWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwRestoreWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwMaximizeWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwShowWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwHideWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>






































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwFocusWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwRequestWindowAttention</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>GLFWAPI</name> <name>GLFWmonitor</name><modifier>*</modifier></type> <name>glfwGetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>


























































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refreshRate</name></decl></parameter>)</parameter_list>;</function_decl>

































<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetWindowAttrib</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>)</parameter_list>;</function_decl>




































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowAttrib</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






















<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>GLFWAPI</name> <name>void</name><modifier>*</modifier></type> <name>glfwGetWindowUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>


































<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowposfun</name></type> <name>glfwSetWindowPosCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowposfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowsizefun</name></type> <name>glfwSetWindowSizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowsizefun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>







































<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowclosefun</name></type> <name>glfwSetWindowCloseCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowclosefun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>



































<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowrefreshfun</name></type> <name>glfwSetWindowRefreshCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowrefreshfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>


































<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowfocusfun</name></type> <name>glfwSetWindowFocusCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowfocusfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowiconifyfun</name></type> <name>glfwSetWindowIconifyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowiconifyfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowmaximizefun</name></type> <name>glfwSetWindowMaximizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowmaximizefun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <name>GLFWframebuffersizefun</name></type> <name>glfwSetFramebufferSizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWframebuffersizefun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>GLFWAPI</name> <name>GLFWwindowcontentscalefun</name></type> <name>glfwSetWindowContentScaleCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWwindowcontentscalefun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>





































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwPollEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>












































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWaitEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
















































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWaitEventsTimeout</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwPostEmptyEvent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetInputMode</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>





























































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetInputMode</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwRawMouseMotionSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



































































<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetKeyName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetKeyScancode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>







































<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetKey</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetMouseButton</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl>





































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetCursorPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>







































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetCursorPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>





































<function_decl><type><name>GLFWAPI</name> <name>GLFWcursor</name><modifier>*</modifier></type> <name>glfwCreateCursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>;</function_decl>















































<function_decl><type><name>GLFWAPI</name> <name>GLFWcursor</name><modifier>*</modifier></type> <name>glfwCreateStandardCursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwDestroyCursor</name><parameter_list>(<parameter><decl><type><name>GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetCursor</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>

















































<function_decl><type><name>GLFWAPI</name> <name>GLFWkeyfun</name></type> <name>glfwSetKeyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWkeyfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>










































<function_decl><type><name>GLFWAPI</name> <name>GLFWcharfun</name></type> <name>glfwSetCharCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWcharfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>









































<function_decl><type><name>GLFWAPI</name> <name>GLFWcharmodsfun</name></type> <name>glfwSetCharModsCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWcharmodsfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>




































<function_decl><type><name>GLFWAPI</name> <name>GLFWmousebuttonfun</name></type> <name>glfwSetMouseButtonCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWmousebuttonfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>GLFWAPI</name> <name>GLFWcursorposfun</name></type> <name>glfwSetCursorPosCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWcursorposfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>GLFWAPI</name> <name>GLFWcursorenterfun</name></type> <name>glfwSetCursorEnterCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWcursorenterfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

































<function_decl><type><name>GLFWAPI</name> <name>GLFWscrollfun</name></type> <name>glfwSetScrollCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWscrollfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>




































<function_decl><type><name>GLFWAPI</name> <name>GLFWdropfun</name></type> <name>glfwSetDropCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWdropfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwJoystickPresent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>glfwGetJoystickAxes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>








































<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickButtons</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
























































<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickHats</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>;</function_decl>








































<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickGUID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetJoystickUserPointer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>GLFWAPI</name> <name>void</name><modifier>*</modifier></type> <name>glfwGetJoystickUserPointer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>;</function_decl>



























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwJoystickIsGamepad</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>;</function_decl>



































<function_decl><type><name>GLFWAPI</name> <name>GLFWjoystickfun</name></type> <name>glfwSetJoystickCallback</name><parameter_list>(<parameter><decl><type><name>GLFWjoystickfun</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

































<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwUpdateGamepadMappings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetGamepadName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>;</function_decl>





































<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetGamepadState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>GLFWgamepadstate</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetClipboardString</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetClipboardString</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <name>double</name></type> <name>glfwGetTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetTime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>GLFWAPI</name> <name>uint64_t</name></type> <name>glfwGetTimerValue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>GLFWAPI</name> <name>uint64_t</name></type> <name>glfwGetTimerFrequency</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwMakeContextCurrent</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>GLFWAPI</name> <name>GLFWwindow</name><modifier>*</modifier></type> <name>glfwGetCurrentContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSwapBuffers</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>













































<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSwapInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>;</function_decl>





































<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwExtensionSupported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>;</function_decl>









































<function_decl><type><name>GLFWAPI</name> <name>GLFWglproc</name></type> <name>glfwGetProcAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>;</function_decl>



























<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwVulkanSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>















































<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>glfwGetRequiredInstanceExtensions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VK_VERSION_1_0</name></expr></argument>)</argument_list></call></expr></cpp:if>








































<function_decl><type><name>GLFWAPI</name> <name>GLFWvkproc</name></type> <name>glfwGetInstanceProcAddress</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>;</function_decl>




































<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetPhysicalDevicePresentationSupport</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>VkPhysicalDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>queuefamily</name></decl></parameter>)</parameter_list>;</function_decl>




























































<function_decl><type><name>GLFWAPI</name> <name>VkResult</name></type> <name>glfwCreateWindowSurface</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type> <name>allocator</name></decl></parameter>, <parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_WINGDIAPI_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINGDIAPI</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GLFW_WINGDIAPI_DEFINED</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_CALLBACK_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CALLBACK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GLFW_CALLBACK_DEFINED</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPIENTRY</name></cpp:macro> <cpp:value>APIENTRY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
