<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\include\GLFW\glfw3native.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_glfw3_native_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw3_native_h_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_WGL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_APIENTRY_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APIENTRY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GLFW_APIENTRY_DEFINED</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>PVOID</name>;</typedef>
<typedef>typedef <type><name>PVOID</name></type> <name>HANDLE</name>;</typedef>
<typedef>typedef <type><name>HANDLE</name></type> <name>HWND</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_COCOA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_NSGL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ApplicationServices/ApplicationServices.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OBJC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#import &lt;Cocoa/Cocoa.h&gt;</cpp:empty>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ApplicationServices/ApplicationServices.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>id</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_GLX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/Xrandr.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-client.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_WGL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_NSGL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_GLX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glx.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_EGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/egl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_OSMESA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/osmesa.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>













<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetWin32Adapter</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetWin32Monitor</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>HWND</name></type> <name>glfwGetWin32Window</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_WGL</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>GLFWAPI</name> <name>HGLRC</name></type> <name>glfwGetWGLContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>GLFWAPI</name> <name>CGDirectDisplayID</name></type> <name>glfwGetCocoaMonitor</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>id</name></type> <name>glfwGetCocoaWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_NSGL</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>GLFWAPI</name> <name>id</name></type> <name>glfwGetNSGLContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>GLFWAPI</name> <name>Display</name><modifier>*</modifier></type> <name>glfwGetX11Display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>RRCrtc</name></type> <name>glfwGetX11Adapter</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>RROutput</name></type> <name>glfwGetX11Monitor</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>Window</name></type> <name>glfwGetX11Window</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetX11SelectionString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl>



























<function_decl><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetX11SelectionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_GLX</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>GLFWAPI</name> <name>GLXContext</name></type> <name>glfwGetGLXContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>GLXWindow</name></type> <name>glfwGetGLXWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>GLFWAPI</name> <name><name>struct</name> <name>wl_display</name></name><modifier>*</modifier></type> <name>glfwGetWaylandDisplay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name><name>struct</name> <name>wl_output</name></name><modifier>*</modifier></type> <name>glfwGetWaylandMonitor</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>glfwGetWaylandWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_EGL</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>GLFWAPI</name> <name>EGLDisplay</name></type> <name>glfwGetEGLDisplay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>EGLContext</name></type> <name>glfwGetEGLContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>EGLSurface</name></type> <name>glfwGetEGLSurface</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_EXPOSE_NATIVE_OSMESA</name></expr></argument>)</argument_list></call></expr></cpp:if>



















<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetOSMesaColorBuffer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetOSMesaDepthBuffer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bytesPerValue</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>GLFWAPI</name> <name>OSMesaContext</name></type> <name>glfwGetOSMesaContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
