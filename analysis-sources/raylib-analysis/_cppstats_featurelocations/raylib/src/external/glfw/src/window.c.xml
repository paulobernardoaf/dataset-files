<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\window.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>








<function><type><name>void</name></type> <name>_glfwInputWindowFocus</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>focused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>focus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>focus</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>focused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>focused</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>button</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>key</name> <operator>&lt;=</operator> <name>GLFW_KEY_LAST</name></expr>;</condition> <incr><expr><name>key</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scancode</name> <init>= <expr><call><name>_glfwPlatformGetKeyScancode</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>GLFW_RELEASE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>button</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>button</name> <operator>&lt;=</operator> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>;</condition> <incr><expr><name>button</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>GLFW_RELEASE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_glfwInputWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>pos</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_glfwInputWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputWindowIconify</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>iconified</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>iconify</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>iconify</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>iconified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputWindowMaximize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>maximized</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>maximize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>maximize</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>maximized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_glfwInputFramebufferSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>fbsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>fbsize</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_glfwInputWindowContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>scale</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>xscale</name></expr></argument>, <argument><expr><name>yscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputWindowDamage</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>refresh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>refresh</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputWindowCloseRequest</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>shouldClose</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputWindowMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <name>monitor</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>GLFWAPI</name> <name>GLFWwindow</name><modifier>*</modifier></type> <name>glfwCreateWindow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>,
<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>share</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWfbconfig</name></type> <name>fbconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWctxconfig</name></type> <name>ctxconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwndconfig</name></type> <name>wndconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid window size %ix%i"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fbconfig</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctxconfig</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wndconfig</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndconfig</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndconfig</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndconfig</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctxconfig</name><operator>.</operator><name>share</name></name> <operator>=</operator> <operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>share</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwIsValidContextConfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctxconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWwindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>redBits</name></name> <operator>=</operator> <name><name>fbconfig</name><operator>.</operator><name>redBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>greenBits</name></name> <operator>=</operator> <name><name>fbconfig</name><operator>.</operator><name>greenBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>blueBits</name></name> <operator>=</operator> <name><name>fbconfig</name><operator>.</operator><name>blueBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>refreshRate</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>refreshRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>monitor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>.</operator><name>resizable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>.</operator><name>decorated</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>autoIconify</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>.</operator><name>autoIconify</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>floating</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>.</operator><name>floating</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>focusOnShow</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>.</operator><name>focusOnShow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>=</operator> <name>GLFW_CURSOR_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name> <operator>=</operator> <name>GLFW_DONT_CARE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>minheight</name></name> <operator>=</operator> <name>GLFW_DONT_CARE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name> <operator>=</operator> <name>GLFW_DONT_CARE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name> <operator>=</operator> <name>GLFW_DONT_CARE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>numer</name></name> <operator>=</operator> <name>GLFW_DONT_CARE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>denom</name></name> <operator>=</operator> <name>GLFW_DONT_CARE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformCreateWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wndconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwDestroyWindow</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>.</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwRefreshContextAttribs</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxconfig</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwDestroyWindow</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>.</operator><name>centerCursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwCenterCursorInContentArea</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>.</operator><name>visible</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformShowWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>.</operator><name>focused</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformFocusWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>glfwDefaultWindowHints</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>GLFW_OPENGL_API</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>GLFW_NATIVE_CONTEXT_API</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>resizable</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>decorated</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>focused</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>autoIconify</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>centerCursor</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>focusOnShow</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>redBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>greenBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>blueBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>alphaBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>depthBits</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>stencilBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>doublebuffer</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>refreshRate</name></name> <operator>=</operator> <name>GLFW_DONT_CARE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>ns</name><operator>.</operator><name>retina</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWindowHint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>hint</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GLFW_RED_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>redBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_GREEN_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>greenBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_BLUE_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>blueBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_ALPHA_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>alphaBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_DEPTH_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>depthBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_STENCIL_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>stencilBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_ACCUM_RED_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>accumRedBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_ACCUM_GREEN_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>accumGreenBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_ACCUM_BLUE_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>accumBlueBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_ACCUM_ALPHA_BITS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>accumAlphaBits</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_AUX_BUFFERS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>auxBuffers</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_STEREO</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>stereo</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_DOUBLEBUFFER</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>doublebuffer</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_TRANSPARENT_FRAMEBUFFER</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>transparent</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_SAMPLES</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_SRGB_CAPABLE</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>framebuffer</name><operator>.</operator><name>sRGB</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_RESIZABLE</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>resizable</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_DECORATED</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>decorated</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_FOCUSED</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>focused</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_AUTO_ICONIFY</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>autoIconify</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_FLOATING</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>floating</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_MAXIMIZED</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>maximized</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_VISIBLE</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_COCOA_RETINA_FRAMEBUFFER</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>ns</name><operator>.</operator><name>retina</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_WIN32_KEYBOARD_MENU</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>win32</name><operator>.</operator><name>keymenu</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_COCOA_GRAPHICS_SWITCHING</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>nsgl</name><operator>.</operator><name>offline</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_SCALE_TO_MONITOR</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>scaleToMonitor</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CENTER_CURSOR</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>centerCursor</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_FOCUS_ON_SHOW</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>focusOnShow</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CLIENT_API</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CONTEXT_CREATION_API</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CONTEXT_VERSION_MAJOR</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CONTEXT_VERSION_MINOR</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CONTEXT_ROBUSTNESS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>robustness</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_OPENGL_FORWARD_COMPAT</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>forward</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_OPENGL_DEBUG_CONTEXT</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CONTEXT_NO_ERROR</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>noerror</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_OPENGL_PROFILE</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>profile</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_CONTEXT_RELEASE_BEHAVIOR</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>context</name><operator>.</operator><name>release</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_REFRESH_RATE</name></expr>:</case>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>refreshRate</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid window hint 0x%08X"</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWindowHintString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>hint</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GLFW_COCOA_FRAME_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>ns</name><operator>.</operator><name>frameName</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>ns</name><operator>.</operator><name>frameName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_X11_CLASS_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>x11</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>x11</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_X11_INSTANCE_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>x11</name><operator>.</operator><name>instanceName</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>window</name><operator>.</operator><name>x11</name><operator>.</operator><name>instanceName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid window hint string 0x%08X"</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwDestroyWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformDestroyWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier><modifier>*</modifier></type> <name>prev</name> <init>= <expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>prev</name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>prev</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwWindowShouldClose</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>shouldClose</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowShouldClose</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>shouldClose</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowTitle</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowTitle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowIcon</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>images</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>images</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowIcon</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>images</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetWindowPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowSizeLimits</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>minwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minheight</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxheight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minwidth</name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator> <name>minheight</name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>minwidth</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>minheight</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid window minimum size %ix%i"</literal></expr></argument>,
<argument><expr><name>minwidth</name></expr></argument>, <argument><expr><name>minheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxwidth</name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator> <name>maxheight</name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maxwidth</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>maxheight</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>maxwidth</name> <operator>&lt;</operator> <name>minwidth</name> <operator>||</operator> <name>maxheight</name> <operator>&lt;</operator> <name>minheight</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid window maximum size %ix%i"</literal></expr></argument>,
<argument><expr><name>maxwidth</name></expr></argument>, <argument><expr><name>maxheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name> <operator>=</operator> <name>minwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>minheight</name></name> <operator>=</operator> <name>minheight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name> <operator>=</operator> <name>maxwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name> <operator>=</operator> <name>maxheight</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>||</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetWindowSizeLimits</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name>minwidth</name></expr></argument>, <argument><expr><name>minheight</name></expr></argument>,
<argument><expr><name>maxwidth</name></expr></argument>, <argument><expr><name>maxheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numer</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>denom</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>numer</name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator> <name>denom</name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>numer</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>denom</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid window aspect ratio %i:%i"</literal></expr></argument>,
<argument><expr><name>numer</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>numer</name></name> <operator>=</operator> <name>numer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>denom</name></name> <operator>=</operator> <name>denom</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>||</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetWindowAspectRatio</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>numer</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetFramebufferSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetFramebufferSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowFrameSize</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bottom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowFrameSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetWindowContentScale</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowContentScale</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xscale</name></expr></argument>, <argument><expr><name>yscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>float</name></type> <name>glfwGetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_glfwPlatformGetWindowOpacity</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opacity</name> <operator>==</operator> <name>opacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opacity</name> <operator>&gt;=</operator> <literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opacity</name> <operator>&lt;=</operator> <literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opacity</name> <operator>!=</operator> <name>opacity</name> <operator>||</operator> <name><name>opacity</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.f</literal> <operator>||</operator> <name>opacity</name></expr></argument> &gt;</argument_list></name> <literal type="number">1.f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Invalid window opacity %f"</literal></expr></argument>, <argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetWindowOpacity</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwIconifyWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformIconifyWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwRestoreWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformRestoreWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwMaximizeWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformMaximizeWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwShowWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformShowWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>focusOnShow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformFocusWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwRequestWindowAttention</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformRequestWindowAttention</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwHideWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformHideWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwFocusWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformFocusWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetWindowAttrib</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>attrib</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GLFW_FOCUSED</name></expr>:</case>
<return>return <expr><call><name>_glfwPlatformWindowFocused</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>GLFW_ICONIFIED</name></expr>:</case>
<return>return <expr><call><name>_glfwPlatformWindowIconified</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>GLFW_VISIBLE</name></expr>:</case>
<return>return <expr><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>GLFW_MAXIMIZED</name></expr>:</case>
<return>return <expr><call><name>_glfwPlatformWindowMaximized</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>GLFW_HOVERED</name></expr>:</case>
<return>return <expr><call><name>_glfwPlatformWindowHovered</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>GLFW_FOCUS_ON_SHOW</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>focusOnShow</name></name></expr>;</return>
<case>case <expr><name>GLFW_TRANSPARENT_FRAMEBUFFER</name></expr>:</case>
<return>return <expr><call><name>_glfwPlatformFramebufferTransparent</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>GLFW_RESIZABLE</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name></expr>;</return>
<case>case <expr><name>GLFW_DECORATED</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name></expr>;</return>
<case>case <expr><name>GLFW_FLOATING</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>floating</name></name></expr>;</return>
<case>case <expr><name>GLFW_AUTO_ICONIFY</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>autoIconify</name></name></expr>;</return>
<case>case <expr><name>GLFW_CLIENT_API</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name></expr>;</return>
<case>case <expr><name>GLFW_CONTEXT_CREATION_API</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>source</name></name></expr>;</return>
<case>case <expr><name>GLFW_CONTEXT_VERSION_MAJOR</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name></expr>;</return>
<case>case <expr><name>GLFW_CONTEXT_VERSION_MINOR</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>minor</name></name></expr>;</return>
<case>case <expr><name>GLFW_CONTEXT_REVISION</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>revision</name></name></expr>;</return>
<case>case <expr><name>GLFW_CONTEXT_ROBUSTNESS</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>robustness</name></name></expr>;</return>
<case>case <expr><name>GLFW_OPENGL_FORWARD_COMPAT</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>forward</name></name></expr>;</return>
<case>case <expr><name>GLFW_OPENGL_DEBUG_CONTEXT</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>debug</name></name></expr>;</return>
<case>case <expr><name>GLFW_OPENGL_PROFILE</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>profile</name></name></expr>;</return>
<case>case <expr><name>GLFW_CONTEXT_RELEASE_BEHAVIOR</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>release</name></name></expr>;</return>
<case>case <expr><name>GLFW_CONTEXT_NO_ERROR</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>noerror</name></name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid window attribute 0x%08X"</literal></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowAttrib</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attrib</name> <operator>==</operator> <name>GLFW_AUTO_ICONIFY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>autoIconify</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>attrib</name> <operator>==</operator> <name>GLFW_RESIZABLE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowResizable</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>attrib</name> <operator>==</operator> <name>GLFW_DECORATED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowDecorated</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>attrib</name> <operator>==</operator> <name>GLFW_FLOATING</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>floating</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>floating</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowFloating</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>attrib</name> <operator>==</operator> <name>GLFW_FOCUS_ON_SHOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>focusOnShow</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid window attribute 0x%08X"</literal></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWmonitor</name><modifier>*</modifier></type> <name>glfwGetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>GLFWmonitor</name><operator>*</operator><operator>)</operator> <name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>wh</name></decl></parameter>,
<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>mh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refreshRate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>wh</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>mh</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid window size %ix%i"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>refreshRate</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>refreshRate</name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid refresh rate %i"</literal></expr></argument>,
<argument><expr><name>refreshRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>videoMode</name><operator>.</operator><name>refreshRate</name></name> <operator>=</operator> <name>refreshRate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetWindowMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>,
<argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name>refreshRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetWindowUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>userPointer</name></name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name><modifier>*</modifier></type> <name>glfwGetWindowUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>userPointer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowposfun</name></type> <name>glfwSetWindowPosCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowposfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowsizefun</name></type> <name>glfwSetWindowSizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowsizefun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowclosefun</name></type> <name>glfwSetWindowCloseCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowclosefun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>close</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowrefreshfun</name></type> <name>glfwSetWindowRefreshCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowrefreshfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>refresh</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowfocusfun</name></type> <name>glfwSetWindowFocusCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowfocusfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>focus</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowiconifyfun</name></type> <name>glfwSetWindowIconifyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowiconifyfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>iconify</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowmaximizefun</name></type> <name>glfwSetWindowMaximizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowmaximizefun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>maximize</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWframebuffersizefun</name></type> <name>glfwSetFramebufferSizeCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWframebuffersizefun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>fbsize</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindowcontentscalefun</name></type> <name>glfwSetWindowContentScaleCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindowcontentscalefun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwPollEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformPollEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWaitEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformWaitEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwWaitEventsTimeout</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>timeout</name> <operator>==</operator> <name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>timeout</name> <operator>&lt;=</operator> <name>DBL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <name>timeout</name> <operator>||</operator> <name><name>timeout</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>timeout</name></expr></argument> &gt;</argument_list></name> <name>DBL_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Invalid time %f"</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformWaitEventsTimeout</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwPostEmptyEvent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformPostEmptyEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
