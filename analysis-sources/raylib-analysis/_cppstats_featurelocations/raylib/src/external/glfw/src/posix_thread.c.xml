<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\posix_thread.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>






<function><type><name>GLFWbool</name></type> <name>_glfwPlatformCreateTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>==</operator> <name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"POSIX: Failed to create context TLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_key_delete</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWtls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>_glfwPlatformGetTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>==</operator> <name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>==</operator> <name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwPlatformCreateMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>==</operator> <name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"POSIX: Failed to create mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformLockMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>==</operator> <name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformUnlockMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>allocated</name></name> <operator>==</operator> <name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>posix</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
