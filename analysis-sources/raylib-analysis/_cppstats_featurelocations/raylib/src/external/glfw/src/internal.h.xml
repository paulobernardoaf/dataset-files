<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\internal.h">


























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_USE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glfw_config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLCOREARB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES31</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_ES32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_NONE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLEXT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_GLU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_INCLUDE_VULKAN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLFW_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>










<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"You must not define any header option macros when compiling GLFW"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_INCLUDE_NONE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/GLFW/glfw3.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_INSERT_FIRST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_INSERT_LAST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_POLL_PRESENCE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_POLL_AXES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_POLL_BUTTONS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_POLL_ALL</name></cpp:macro> <cpp:value>(_GLFW_POLL_AXES | _GLFW_POLL_BUTTONS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_MESSAGE_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>GLFWbool</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>_GLFWerror</name></name></type> <name>_GLFWerror</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWinitconfig</name></name></type> <name>_GLFWinitconfig</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWwndconfig</name></name></type> <name>_GLFWwndconfig</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWctxconfig</name></name></type> <name>_GLFWctxconfig</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWfbconfig</name></name></type> <name>_GLFWfbconfig</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWcontext</name></name></type> <name>_GLFWcontext</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWwindow</name></name></type> <name>_GLFWwindow</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWlibrary</name></name></type> <name>_GLFWlibrary</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWmonitor</name></name></type> <name>_GLFWmonitor</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWcursor</name></name></type> <name>_GLFWcursor</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWmapelement</name></name></type> <name>_GLFWmapelement</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWmapping</name></name></type> <name>_GLFWmapping</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWjoystick</name></name></type> <name>_GLFWjoystick</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWtls</name></name></type> <name>_GLFWtls</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GLFWmutex</name></name></type> <name>_GLFWmutex</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>_GLFWmakecontextcurrentfun</name>)<parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>_GLFWswapbuffersfun</name>)<parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>_GLFWswapintervalfun</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>_GLFWextensionsupportedfun</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLFWglproc</name></type> (<modifier>*</modifier> <name>_GLFWgetprocaddressfun</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>_GLFWdestroycontextfun</name>)<parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION</name></cpp:macro> <cpp:value>0x1f02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE</name></cpp:macro> <cpp:value>0x1401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXTENSIONS</name></cpp:macro> <cpp:value>0x1f03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_EXTENSIONS</name></cpp:macro> <cpp:value>0x821d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAGS</name></cpp:macro> <cpp:value>0x821e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_DEBUG_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_PROFILE_MASK</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_COMPATIBILITY_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_CORE_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESET_NOTIFICATION_STRATEGY_ARB</name></cpp:macro> <cpp:value>0x8256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOSE_CONTEXT_ON_RESET_ARB</name></cpp:macro> <cpp:value>0x8252</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_RESET_NOTIFICATION_ARB</name></cpp:macro> <cpp:value>0x8261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_RELEASE_BEHAVIOR</name></cpp:macro> <cpp:value>0x82fb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH</name></cpp:macro> <cpp:value>0x82fc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>GLint</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLuint</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLenum</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLbitfield</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>GLubyte</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier> <name>PFNGLCLEARPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> (<name>APIENTRY</name> <modifier>*</modifier> <name>PFNGLGETSTRINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier> <name>PFNGLGETINTEGERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>,<parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> (<name>APIENTRY</name> <modifier>*</modifier> <name>PFNGLGETSTRINGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>,<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_NULL_HANDLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>VkInstance</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>VkPhysicalDevice</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>VkSurfaceKHR</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>VkFlags</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>VkBool32</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VkStructureType</name>
<block>{
<decl><name>VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR</name> <init>= <expr><literal type="number">1000004000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR</name> <init>= <expr><literal type="number">1000005000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR</name> <init>= <expr><literal type="number">1000006000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR</name> <init>= <expr><literal type="number">1000009000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK</name> <init>= <expr><literal type="number">1000123000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT</name> <init>= <expr><literal type="number">1000217000</literal></expr></init></decl>,
<decl><name>VK_STRUCTURE_TYPE_MAX_ENUM</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>VkStructureType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VkResult</name>
<block>{
<decl><name>VK_SUCCESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VK_NOT_READY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_TIMEOUT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_EVENT_SET</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_EVENT_RESET</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_INCOMPLETE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_ERROR_OUT_OF_HOST_MEMORY</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>VK_ERROR_OUT_OF_DEVICE_MEMORY</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>VK_ERROR_INITIALIZATION_FAILED</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>VK_ERROR_DEVICE_LOST</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>,
<decl><name>VK_ERROR_MEMORY_MAP_FAILED</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,
<decl><name>VK_ERROR_LAYER_NOT_PRESENT</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>,
<decl><name>VK_ERROR_EXTENSION_NOT_PRESENT</name> <init>= <expr><operator>-</operator><literal type="number">7</literal></expr></init></decl>,
<decl><name>VK_ERROR_FEATURE_NOT_PRESENT</name> <init>= <expr><operator>-</operator><literal type="number">8</literal></expr></init></decl>,
<decl><name>VK_ERROR_INCOMPATIBLE_DRIVER</name> <init>= <expr><operator>-</operator><literal type="number">9</literal></expr></init></decl>,
<decl><name>VK_ERROR_TOO_MANY_OBJECTS</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>,
<decl><name>VK_ERROR_FORMAT_NOT_SUPPORTED</name> <init>= <expr><operator>-</operator><literal type="number">11</literal></expr></init></decl>,
<decl><name>VK_ERROR_SURFACE_LOST_KHR</name> <init>= <expr><operator>-</operator><literal type="number">1000000000</literal></expr></init></decl>,
<decl><name>VK_SUBOPTIMAL_KHR</name> <init>= <expr><literal type="number">1000001003</literal></expr></init></decl>,
<decl><name>VK_ERROR_OUT_OF_DATE_KHR</name> <init>= <expr><operator>-</operator><literal type="number">1000001004</literal></expr></init></decl>,
<decl><name>VK_ERROR_INCOMPATIBLE_DISPLAY_KHR</name> <init>= <expr><operator>-</operator><literal type="number">1000003001</literal></expr></init></decl>,
<decl><name>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</name> <init>= <expr><operator>-</operator><literal type="number">1000000001</literal></expr></init></decl>,
<decl><name>VK_ERROR_VALIDATION_FAILED_EXT</name> <init>= <expr><operator>-</operator><literal type="number">1000011001</literal></expr></init></decl>,
<decl><name>VK_RESULT_MAX_ENUM</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>VkResult</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VkAllocationCallbacks</name></name></type> <name>VkAllocationCallbacks</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VkExtensionProperties</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>extensionName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>specVersion</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkExtensionProperties</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier> <name>PFN_vkVoidFunction</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_VULKAN_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>PFN_vkVoidFunction</name></type> <name>vkGetInstanceProcAddr</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VkResult</name></type> <name>vkEnumerateInstanceExtensionProperties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkExtensionProperties</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <function_decl><type><name>PFN_vkVoidFunction</name></type> (<name>APIENTRY</name> <modifier>*</modifier> <name>PFN_vkGetInstanceProcAddr</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>APIENTRY</name> <modifier>*</modifier> <name>PFN_vkEnumerateInstanceExtensionProperties</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkExtensionProperties</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkEnumerateInstanceExtensionProperties</name></cpp:macro> <cpp:value>_glfw.vk.EnumerateInstanceExtensionProperties</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vkGetInstanceProcAddr</name></cpp:macro> <cpp:value>_glfw.vk.GetInstanceProcAddr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cocoa_platform.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_platform.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x11_platform.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wl_platform.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_OSMESA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"null_platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"No supported window creation API selected"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_CONCAT_VERSION</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#m "." #n "." #r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_MAKE_VERSION</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_GLFW_CONCAT_VERSION(m, n, r)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_VERSION_NUMBER</name></cpp:macro> <cpp:value>_GLFW_MAKE_VERSION(GLFW_VERSION_MAJOR, GLFW_VERSION_MINOR, GLFW_VERSION_REVISION)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_REQUIRE_INIT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (!_glfw.initialized) { _glfwInputError(GLFW_NOT_INITIALIZED, NULL); return; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!_glfw.initialized) { _glfwInputError(GLFW_NOT_INITIALIZED, NULL); return x; }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_SWAP_POINTERS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ void* t; t = x; x = y; y = t; }</cpp:value></cpp:define>









<struct>struct <name>_GLFWerror</name>
<block>{
<decl_stmt><decl><type><name>_GLFWerror</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>description</name><index>[<expr><name>_GLFW_MESSAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>_GLFWinitconfig</name>
<block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>hatButtons</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>menubar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>chdir</name></decl>;</decl_stmt>
}</block> <decl><name>ns</name></decl>;</struct>
}</block>;</struct>







<struct>struct <name>_GLFWwndconfig</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>resizable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>visible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>decorated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>focused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>autoIconify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>floating</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>maximized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>centerCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>focusOnShow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>scaleToMonitor</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>retina</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>frameName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>ns</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>className</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>instanceName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>x11</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>keymenu</name></decl>;</decl_stmt>
}</block> <decl><name>win32</name></decl>;</struct>
}</block>;</struct>







<struct>struct <name>_GLFWctxconfig</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>forward</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>noerror</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>robustness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>release</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>share</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>offline</name></decl>;</decl_stmt>
}</block> <decl><name>nsgl</name></decl>;</struct>
}</block>;</struct>









<struct>struct <name>_GLFWfbconfig</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>redBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>greenBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blueBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alphaBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depthBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stencilBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accumRedBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accumGreenBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accumBlueBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accumAlphaBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auxBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>stereo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>doublebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>transparent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>handle</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWcontext</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>, <decl><type ref="prev"/><name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>forward</name></decl>, <decl><type ref="prev"/><name>debug</name></decl>, <decl><type ref="prev"/><name>noerror</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>robustness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>release</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNGLGETSTRINGIPROC</name></type> <name>GetStringi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINTEGERVPROC</name></type> <name>GetIntegerv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSTRINGPROC</name></type> <name>GetString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWmakecontextcurrentfun</name></type> <name>makeCurrent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWswapbuffersfun</name></type> <name>swapBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWswapintervalfun</name></type> <name>swapInterval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWextensionsupportedfun</name></type> <name>extensionSupported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWgetprocaddressfun</name></type> <name>getProcAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWdestroycontextfun</name></type> <name>destroy</name></decl>;</decl_stmt>


<expr_stmt><expr><name>_GLFW_PLATFORM_CONTEXT_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_GLFW_EGL_CONTEXT_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_GLFW_OSMESA_CONTEXT_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWwindow</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_GLFWwindow</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GLFWbool</name></type> <name>resizable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>decorated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>autoIconify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>floating</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>focusOnShow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>shouldClose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>userPointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>videoMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minwidth</name></decl>, <decl><type ref="prev"/><name>minheight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxwidth</name></decl>, <decl><type ref="prev"/><name>maxheight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numer</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>stickyKeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>stickyMouseButtons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>lockKeyMods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cursorMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mouseButtons</name><index>[<expr><name>GLFW_MOUSE_BUTTON_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>keys</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>virtualCursorPosX</name></decl>, <decl><type ref="prev"/><name>virtualCursorPosY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>rawMouseMotion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWcontext</name></type> <name>context</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWwindowposfun</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWwindowsizefun</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWwindowclosefun</name></type> <name>close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWwindowrefreshfun</name></type> <name>refresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWwindowfocusfun</name></type> <name>focus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWwindowiconifyfun</name></type> <name>iconify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWwindowmaximizefun</name></type> <name>maximize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWframebuffersizefun</name></type> <name>fbsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWwindowcontentscalefun</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWmousebuttonfun</name></type> <name>mouseButton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWcursorposfun</name></type> <name>cursorPos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWcursorenterfun</name></type> <name>cursorEnter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWscrollfun</name></type> <name>scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWkeyfun</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWcharfun</name></type> <name>character</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWcharmodsfun</name></type> <name>charmods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWdropfun</name></type> <name>drop</name></decl>;</decl_stmt>
}</block> <decl><name>callbacks</name></decl>;</struct>


<expr_stmt><expr><name>_GLFW_PLATFORM_WINDOW_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWmonitor</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>userPointer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>widthMM</name></decl>, <decl><type ref="prev"/><name>heightMM</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>modes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modeCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>currentMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWgammaramp</name></type> <name>originalRamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWgammaramp</name></type> <name>currentRamp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>_GLFW_PLATFORM_MONITOR_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWcursor</name>
<block>{
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>


<expr_stmt><expr><name>_GLFW_PLATFORM_CURSOR_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWmapelement</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>axisScale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>axisOffset</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWmapping</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>guid</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmapelement</name></type> <name><name>buttons</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmapelement</name></type> <name><name>axes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWjoystick</name>
<block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>axes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>axisCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>buttons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buttonCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>hats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hatCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>userPointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>guid</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmapping</name><modifier>*</modifier></type> <name>mapping</name></decl>;</decl_stmt>


<expr_stmt><expr><name>_GLFW_PLATFORM_JOYSTICK_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWtls</name>
<block>{

<expr_stmt><expr><name>_GLFW_PLATFORM_TLS_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWmutex</name>
<block>{

<expr_stmt><expr><name>_GLFW_PLATFORM_MUTEX_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>_GLFWlibrary</name>
<block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>initialized</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>_GLFWinitconfig</name></type> <name>init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWfbconfig</name></type> <name>framebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwndconfig</name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWctxconfig</name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refreshRate</name></decl>;</decl_stmt>
}</block> <decl><name>hints</name></decl>;</struct>

<decl_stmt><decl><type><name>_GLFWerror</name><modifier>*</modifier></type> <name>errorListHead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursorListHead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>windowListHead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier><modifier>*</modifier></type> <name>monitors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>monitorCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWjoystick</name></type> <name><name>joysticks</name><index>[<expr><name>GLFW_JOYSTICK_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmapping</name><modifier>*</modifier></type> <name>mappings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mappingCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWtls</name></type> <name>errorSlot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWtls</name></type> <name>contextSlot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmutex</name></type> <name>errorLock</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>_GLFW_PLATFORM_LIBRARY_TIMER_STATE</name></expr>;</expr_stmt>
}</block> <decl><name>timer</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>extensions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_VULKAN_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PFN_vkEnumerateInstanceExtensionProperties</name></type> <name>EnumerateInstanceExtensionProperties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkGetInstanceProcAddr</name></type> <name>GetInstanceProcAddr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_surface</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_win32_surface</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>MVK_macos_surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>EXT_metal_surface</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_xlib_surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_xcb_surface</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>KHR_wayland_surface</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>vk</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWmonitorfun</name></type> <name>monitor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWjoystickfun</name></type> <name>joystick</name></decl>;</decl_stmt>
}</block> <decl><name>callbacks</name></decl>;</struct>


<expr_stmt><expr><name>_GLFW_PLATFORM_LIBRARY_WINDOW_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_GLFW_PLATFORM_LIBRARY_JOYSTICK_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_GLFW_EGL_LIBRARY_CONTEXT_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_GLFW_OSMESA_LIBRARY_CONTEXT_STATE</name></expr>;</expr_stmt>
}</block>;</struct>



<decl_stmt><decl><type><specifier>extern</specifier> <name>_GLFWlibrary</name></type> <name>_glfw</name></decl>;</decl_stmt>






<function_decl><type><name>int</name></type> <name>_glfwPlatformInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformTerminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetVersionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPlatformGetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetCursorMode</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GLFWbool</name></type> <name>_glfwPlatformRawMouseMotionSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformCreateCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformCreateStandardCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformDestroyCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetScancodeName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformGetKeyScancode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPlatformFreeMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetMonitorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetMonitorContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetMonitorWorkarea</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>_glfwPlatformGetVideoModes</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetVideoMode</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GLFWbool</name></type> <name>_glfwPlatformGetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPlatformSetClipboardString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetClipboardString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>_glfwPlatformPollJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformUpdateGamepadGUID</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>_glfwPlatformGetTimerValue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>_glfwPlatformGetTimerFrequency</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>_glfwPlatformCreateWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformDestroyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowTitle</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowIcon</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>images</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowSizeLimits</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>minwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minheight</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxheight</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetFramebufferSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetWindowFrameSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bottom</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformGetWindowContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformIconifyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformRestoreWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformMaximizeWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformShowWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformHideWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformRequestWindowAttention</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformFocusWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refreshRate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformWindowFocused</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformWindowIconified</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformWindowVisible</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformWindowMaximized</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformWindowHovered</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformFramebufferTransparent</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float</name></type> <name>_glfwPlatformGetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowResizable</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowDecorated</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowFloating</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPlatformPollEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformWaitEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformWaitEventsTimeout</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformPostEmptyEvent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPlatformGetRequiredInstanceExtensions</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>extensions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwPlatformGetPhysicalDevicePresentationSupport</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>queuefamily</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VkResult</name></type> <name>_glfwPlatformCreateWindowSurface</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type> <name>allocator</name></decl></parameter>,
<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLFWbool</name></type> <name>_glfwPlatformCreateTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformDestroyTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name><modifier>*</modifier></type> <name>_glfwPlatformGetTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformSetTls</name><parameter_list>(<parameter><decl><type><name>_GLFWtls</name><modifier>*</modifier></type> <name>tls</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLFWbool</name></type> <name>_glfwPlatformCreateMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformDestroyMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformLockMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwPlatformUnlockMutex</name><parameter_list>(<parameter><decl><type><name>_GLFWmutex</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>_glfwInputWindowFocus</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>focused</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputFramebufferSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yscale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowIconify</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>iconified</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowMaximize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>maximized</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowDamage</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowCloseRequest</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputWindowMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwInputKey</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputChar</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>plain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputScroll</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>yoffset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputMouseClick</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputCursorEnter</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>entered</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputDrop</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>names</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputJoystickAxis</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputJoystickButton</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputJoystickHat</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hat</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwInputMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>placement</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputMonitorWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>_glfwInputError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>_glfwInputError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><name>GLFWbool</name></type> <name>_glfwStringInExtensionString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extensions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>_glfwChooseFBConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>alternatives</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GLFWbool</name></type> <name>_glfwRefreshContextAttribs</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GLFWbool</name></type> <name>_glfwIsValidContextConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>_glfwChooseVideoMode</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_glfwCompareVideoModes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>second</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>_glfwAllocMonitor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>widthMM</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMM</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwFreeMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwAllocGammaArrays</name><parameter_list>(<parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwFreeGammaArrays</name><parameter_list>(<parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwSplitBPP</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>blue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>_glfwAllocJoystick</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>axisCount</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buttonCount</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hatCount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwFreeJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwCenterCursorInContentArea</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLFWbool</name></type> <name>_glfwInitVulkan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwTerminateVulkan</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwGetVulkanResultString</name><parameter_list>(<parameter><decl><type><name>VkResult</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>_glfw_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float</name></type> <name>_glfw_fminf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float</name></type> <name>_glfw_fmaxf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
