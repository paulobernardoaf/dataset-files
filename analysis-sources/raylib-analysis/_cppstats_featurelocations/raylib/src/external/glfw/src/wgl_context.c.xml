<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\wgl_context.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>int</name></type> <name>findPixelFormatAttribValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>attribs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>attribCount</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>values</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>attribCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attribs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>attrib</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Unknown pixel format attribute requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addAttrib</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ assert((size_t) attribCount &lt; sizeof(attribs) / sizeof(attribs[0])); attribs[attribCount++] = a; }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>findAttribValue</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>findPixelFormatAttribValue(attribs, attribCount, values, a)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>choosePixelFormat</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>usableConfigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>closest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pixelFormat</name></decl>, <decl><type ref="prev"/><name>nativeCount</name></decl>, <decl><type ref="prev"/><name>usableCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>attribCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>attribs</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>values</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>attribs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>attribs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_pixel_format</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>attrib</name> <init>= <expr><name>WGL_NUMBER_PIXEL_FORMATS_ARB</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglGetPixelFormatAttribivARB</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nativeCount</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to retrieve pixel format attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_SUPPORT_OPENGL_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_DRAW_TO_WINDOW_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_PIXEL_TYPE_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ACCELERATION_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_RED_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_RED_SHIFT_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_GREEN_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_GREEN_SHIFT_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_BLUE_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_BLUE_SHIFT_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ALPHA_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ALPHA_SHIFT_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_DEPTH_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_STENCIL_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ACCUM_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ACCUM_RED_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ACCUM_GREEN_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ACCUM_BLUE_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_ACCUM_ALPHA_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_AUX_BUFFERS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_STEREO_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_DOUBLE_BUFFER_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_multisample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_SAMPLES_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_framebuffer_sRGB</name></name> <operator>||</operator> <name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_framebuffer_sRGB</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_colorspace</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addAttrib</name><argument_list>(<argument><expr><name>WGL_COLORSPACE_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>nativeCount</name> <operator>=</operator> <call><name>DescribePixelFormat</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PIXELFORMATDESCRIPTOR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>usableConfigs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nativeCount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWfbconfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nativeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>u</name> <init>= <expr><name>usableConfigs</name> <operator>+</operator> <name>usableCount</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pixelFormat</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_pixel_format</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglGetPixelFormatAttribivARB</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>,
<argument><expr><name>pixelFormat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>attribCount</name></expr></argument>,
<argument><expr><name>attribs</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to retrieve pixel format attributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>usableConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_SUPPORT_OPENGL_ARB</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_DRAW_TO_WINDOW_ARB</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_PIXEL_TYPE_ARB</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WGL_TYPE_RGBA_ARB</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_ACCELERATION_ARB</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WGL_NO_ACCELERATION_ARB</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>redBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_RED_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_GREEN_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_BLUE_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_ALPHA_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_DEPTH_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_STENCIL_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumRedBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_ACCUM_RED_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumGreenBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_ACCUM_GREEN_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumBlueBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_ACCUM_BLUE_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumAlphaBits</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_ACCUM_ALPHA_BITS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>auxBuffers</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_AUX_BUFFERS_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_STEREO_ARB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_DOUBLE_BUFFER_ARB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>doublebuffer</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_multisample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_SAMPLES_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_framebuffer_sRGB</name></name> <operator>||</operator>
<name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_framebuffer_sRGB</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>sRGB</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_colorspace</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>findAttribValue</name><argument_list>(<argument><expr><name>WGL_COLORSPACE_EXT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WGL_COLORSPACE_SRGB_EXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>sRGB</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DescribePixelFormat</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>,
<argument><expr><name>pixelFormat</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PIXELFORMATDESCRIPTOR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to describe pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>usableConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_DRAW_TO_WINDOW</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_SUPPORT_OPENGL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_GENERIC_ACCELERATED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_GENERIC_FORMAT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>iPixelType</name></name> <operator>!=</operator> <name>PFD_TYPE_RGBA</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>redBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cRedBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cGreenBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cBlueBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cAlphaBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cDepthBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cStencilBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumRedBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cAccumRedBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumGreenBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cAccumGreenBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumBlueBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cAccumBlueBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>accumAlphaBits</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cAccumAlphaBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>auxBuffers</name></name> <operator>=</operator> <name><name>pfd</name><operator>.</operator><name>cAuxBuffers</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_DOUBLEBUFFER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>doublebuffer</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>pixelFormat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>usableCount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>usableCount</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: The driver does not appear to support OpenGL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>usableConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>closest</name> <operator>=</operator> <call><name>_glfwChooseFBConfig</name><argument_list>(<argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><name>usableConfigs</name></expr></argument>, <argument><expr><name>usableCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>closest</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to find a suitable pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>usableConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixelFormat</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>closest</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>usableConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pixelFormat</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>addAttrib</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>findAttribValue</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>makeContextCurrentWGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to make context current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to clear current context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapBuffersWGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsWindowsVistaOrGreater</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>enabled</name> <init>= <expr><call><name>IsWindows8OrGreater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>||</operator>
<operator>(</operator><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>DwmIsCompositionEnabled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>enabled</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DwmFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SwapBuffers</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swapIntervalWGL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsWindowsVistaOrGreater</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>enabled</name> <init>= <expr><call><name>IsWindows8OrGreater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>||</operator>
<operator>(</operator><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>DwmIsCompositionEnabled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>enabled</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_swap_control</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wglSwapIntervalEXT</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extensionSupportedWGL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extensions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetExtensionsStringARB</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <call><name>wglGetExtensionsStringARB</name><argument_list>(<argument><expr><call><name>wglGetCurrentDC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetExtensionsStringEXT</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <call><name>wglGetExtensionsStringEXT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extensions</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>_glfwStringInExtensionString</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWglproc</name></type> <name>getProcAddressWGL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWglproc</name></type> <name>proc</name> <init>= <expr><operator>(</operator><name>GLFWglproc</name><operator>)</operator> <call><name>wglGetProcAddress</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>proc</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>GLFWglproc</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyContextWGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>GLFWbool</name></type> <name>_glfwInitWGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLRC</name></type> <name>prc</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>pdc</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"opengl32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to load opengl32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>CreateContext</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wglCreateContext</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"wglCreateContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>DeleteContext</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wglDeleteContext</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"wglDeleteContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetProcAddress</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wglGetProcAddress</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"wglGetProcAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetCurrentDC</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wglGetCurrentDC</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"wglGetCurrentDC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetCurrentContext</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wglGetCurrentContext</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"wglGetCurrentContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>MakeCurrent</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wglMakeCurrent</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"wglMakeCurrent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ShareLists</name></name> <operator>=</operator> <operator>(</operator><name>PFN_wglShareLists</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"wglShareLists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>nSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>PFD_DRAW_TO_WINDOW</name> <operator>|</operator> <name>PFD_SUPPORT_OPENGL</name> <operator>|</operator> <name>PFD_DOUBLEBUFFER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>iPixelType</name></name> <operator>=</operator> <name>PFD_TYPE_RGBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>cColorBits</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><call><name>ChoosePixelFormat</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to set pixel format for dummy context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wglCreateContext</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to create dummy context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pdc</name> <operator>=</operator> <call><name>wglGetCurrentDC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>wglGetCurrentContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to make dummy context current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>pdc</name></expr></argument>, <argument><expr><name>prc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetExtensionsStringEXT</name></name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name><operator>)</operator>
<call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglGetExtensionsStringEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetExtensionsStringARB</name></name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name><operator>)</operator>
<call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglGetExtensionsStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>CreateContextAttribsARB</name></name> <operator>=</operator> <operator>(</operator><name>PFNWGLCREATECONTEXTATTRIBSARBPROC</name><operator>)</operator>
<call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglCreateContextAttribsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>SwapIntervalEXT</name></name> <operator>=</operator> <operator>(</operator><name>PFNWGLSWAPINTERVALEXTPROC</name><operator>)</operator>
<call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglSwapIntervalEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>GetPixelFormatAttribivARB</name></name> <operator>=</operator> <operator>(</operator><name>PFNWGLGETPIXELFORMATATTRIBIVARBPROC</name><operator>)</operator>
<call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttribivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_multisample</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_framebuffer_sRGB</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_framebuffer_sRGB</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context_profile</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_create_context_es2_profile</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_create_context_es2_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context_robustness</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context_robustness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context_no_error</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context_no_error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_swap_control</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_swap_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_colorspace</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_colorspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_pixel_format</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_pixel_format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_context_flush_control</name></name> <operator>=</operator>
<call><name>extensionSupportedWGL</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_context_flush_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>pdc</name></expr></argument>, <argument><expr><name>prc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwTerminateWGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setAttrib</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ assert(((size_t) index + 1) &lt; sizeof(attribs) / sizeof(attribs[0])); attribs[index++] = a; attribs[index++] = v; }</cpp:value></cpp:define>








<function><type><name>GLFWbool</name></type> <name>_glfwCreateContextWGL</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>attribs</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixelFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLRC</name></type> <name>share</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>share</name> <operator>=</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to retrieve DC for window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixelFormat</name> <operator>=</operator> <call><name>choosePixelFormat</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pixelFormat</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DescribePixelFormat</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>,
<argument><expr><name>pixelFormat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to retrieve PFD for selected pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>, <argument><expr><name>pixelFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to set selected pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: A forward compatible OpenGL context requested but WGL_ARB_create_context is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context_profile</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: OpenGL profile requested but WGL_ARB_create_context_profile is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context</name></name> <operator>||</operator>
<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context_profile</name></name> <operator>||</operator>
<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>EXT_create_context_es2_profile</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: OpenGL ES requested but WGL_ARB_create_context_es2_profile is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_CORE_PROFILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>WGL_CONTEXT_CORE_PROFILE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>GLFW_OPENGL_COMPAT_PROFILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>WGL_CONTEXT_ES2_PROFILE_BIT_EXT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WGL_CONTEXT_DEBUG_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context_robustness</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>==</operator> <name>GLFW_NO_RESET_NOTIFICATION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB</name></expr></argument>,
<argument><expr><name>WGL_NO_RESET_NOTIFICATION_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>==</operator> <name>GLFW_LOSE_CONTEXT_ON_RESET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB</name></expr></argument>,
<argument><expr><name>WGL_LOSE_CONTEXT_ON_RESET_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_context_flush_control</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>==</operator> <name>GLFW_RELEASE_BEHAVIOR_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_RELEASE_BEHAVIOR_ARB</name></expr></argument>,
<argument><expr><name>WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>==</operator> <name>GLFW_RELEASE_BEHAVIOR_FLUSH</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_RELEASE_BEHAVIOR_ARB</name></expr></argument>,
<argument><expr><name>WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>noerror</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wgl</name><operator>.</operator><name>ARB_create_context_no_error</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_OPENGL_NO_ERROR_ARB</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_MAJOR_VERSION_ARB</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_MINOR_VERSION_ARB</name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_FLAGS_ARB</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><name>WGL_CONTEXT_PROFILE_MASK_ARB</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setAttrib</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name> <operator>=</operator>
<call><name>wglCreateContextAttribsARB</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <operator>(</operator><literal type="number">0xc0070000</literal> <operator>|</operator> <name>ERROR_INVALID_VERSION_ARB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Driver does not support OpenGL version %i.%i"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Driver does not support OpenGL ES version %i.%i"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <operator>(</operator><literal type="number">0xc0070000</literal> <operator>|</operator> <name>ERROR_INVALID_PROFILE_ARB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Driver does not support the requested OpenGL profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <operator>(</operator><literal type="number">0xc0070000</literal> <operator>|</operator> <name>ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: The share context is not compatible with the requested context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to create OpenGL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to create OpenGL ES context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>wglCreateContext</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to create OpenGL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>share</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglShareLists</name><argument_list>(<argument><expr><name>share</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"WGL: Failed to enable sharing with specified OpenGL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>makeCurrent</name></name> <operator>=</operator> <name>makeContextCurrentWGL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapBuffers</name></name> <operator>=</operator> <name>swapBuffersWGL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapInterval</name></name> <operator>=</operator> <name>swapIntervalWGL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>extensionSupported</name></name> <operator>=</operator> <name>extensionSupportedWGL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name> <operator>=</operator> <name>getProcAddressWGL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>destroyContextWGL</name></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setAttrib</name></cpp:undef>






<function><type><name>GLFWAPI</name> <name>HGLRC</name></type> <name>glfwGetWGLContext</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>wgl</name><operator>.</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
