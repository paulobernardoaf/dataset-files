<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\context.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>












<function><type><name>GLFWbool</name></type> <name>_glfwIsValidContextConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name> <operator>||</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>!=</operator> <name>GLFW_NATIVE_CONTEXT_API</name> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>!=</operator> <name>GLFW_EGL_CONTEXT_API</name> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>!=</operator> <name>GLFW_OSMESA_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid context creation API 0x%08X"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_NO_API</name> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_OPENGL_API</name> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid client API 0x%08X"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid OpenGL version %i.%i"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>GLFW_OPENGL_CORE_PROFILE</name> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>GLFW_OPENGL_COMPAT_PROFILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid OpenGL profile 0x%08X"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>||</operator>
<operator>(</operator><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Context profiles are only defined for OpenGL version 3.2 and above"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>forward</name></name> <operator>&amp;&amp;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Forward-compatibility is only defined for OpenGL version 3.0 and above"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_ES_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid OpenGL ES version %i.%i"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>!=</operator> <name>GLFW_NO_RESET_NOTIFICATION</name> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name> <operator>!=</operator> <name>GLFW_LOSE_CONTEXT_ON_RESET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid context robustness mode 0x%08X"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>robustness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>!=</operator> <name>GLFW_RELEASE_BEHAVIOR_NONE</name> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name> <operator>!=</operator> <name>GLFW_RELEASE_BEHAVIOR_FLUSH</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid context release behavior 0x%08X"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>_glfwChooseFBConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>alternatives</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>missing</name></decl>, <decl><type ref="prev"/><name>leastMissing</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>colorDiff</name></decl>, <decl><type ref="prev"/><name>leastColorDiff</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>extraDiff</name></decl>, <decl><type ref="prev"/><name>leastExtraDiff</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>closest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name>alternatives</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>stereo</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>stereo</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>doublebuffer</name></name> <operator>!=</operator> <name><name>current</name><operator>-&gt;</operator><name>doublebuffer</name></name></expr>)</condition>
<block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<expr_stmt><expr><name>missing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>missing</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>missing</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>missing</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>auxBuffers</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>current</name><operator>-&gt;</operator><name>auxBuffers</name></name> <operator>&lt;</operator> <name><name>desired</name><operator>-&gt;</operator><name>auxBuffers</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>missing</name> <operator>+=</operator> <name><name>desired</name><operator>-&gt;</operator><name>auxBuffers</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>auxBuffers</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>samples</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>missing</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>transparent</name></name> <operator>!=</operator> <name><name>current</name><operator>-&gt;</operator><name>transparent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>missing</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>





<block>{<block_content>
<expr_stmt><expr><name>colorDiff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>redBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>colorDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>redBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>redBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>redBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>redBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>colorDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>greenBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>greenBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>colorDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>blueBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>blueBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>alphaBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>alphaBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>alphaBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>depthBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>depthBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>depthBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>stencilBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>stencilBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>stencilBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>accumRedBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumRedBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumRedBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumRedBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumRedBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>accumGreenBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumGreenBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumGreenBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumGreenBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumGreenBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>accumBlueBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumBlueBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumBlueBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumBlueBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumBlueBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>accumAlphaBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumAlphaBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumAlphaBits</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>accumAlphaBits</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>accumAlphaBits</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>samples</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extraDiff</name> <operator>+=</operator> <operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>samples</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>samples</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>desired</name><operator>-&gt;</operator><name>samples</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>samples</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>sRGB</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>sRGB</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extraDiff</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>





<if_stmt><if>if <condition>(<expr><name>missing</name> <operator>&lt;</operator> <name>leastMissing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>missing</name> <operator>==</operator> <name>leastMissing</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colorDiff</name> <operator>&lt;</operator> <name>leastColorDiff</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>colorDiff</name> <operator>==</operator> <name>leastColorDiff</name> <operator>&amp;&amp;</operator> <name>extraDiff</name> <operator>&lt;</operator> <name>leastExtraDiff</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>closest</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>leastMissing</name> <operator>=</operator> <name>missing</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leastColorDiff</name> <operator>=</operator> <name>colorDiff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leastExtraDiff</name> <operator>=</operator> <name>extraDiff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>closest</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>GLFWbool</name></type> <name>_glfwRefreshContextAttribs</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>previous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>prefixes</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"OpenGL ES-CM "</literal></expr>,
<expr><literal type="string">"OpenGL ES-CL "</literal></expr>,
<expr><literal type="string">"OpenGL ES "</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>GLFW_OPENGL_API</name></expr>;</expr_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERVPROC</name><operator>)</operator>
<call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name><argument_list>(<argument><expr><literal type="string">"glGetIntegerv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetString</name></name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGPROC</name><operator>)</operator>
<call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name><argument_list>(<argument><expr><literal type="string">"glGetString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name> <operator>||</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetString</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Entry point retrieval is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetString</name></name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"OpenGL version string retrieval is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"OpenGL ES version string retrieval is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>version</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>GLFW_OPENGL_ES_API</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sscanf</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>minor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No version found in OpenGL version string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No version found in OpenGL ES version string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>&lt;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>||</operator>
<operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>==</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name> <operator>&amp;&amp;</operator>
<name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>minor</name></name> <operator>&lt;</operator> <name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Requested OpenGL version %i.%i, got version %i.%i"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_VERSION_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Requested OpenGL ES version %i.%i, got version %i.%i"</literal></expr></argument>,
<argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetStringi</name></name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGIPROC</name><operator>)</operator>
<call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name><argument_list>(<argument><expr><literal type="string">"glGetStringi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetStringi</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Entry point retrieval is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_OPENGL_API</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_CONTEXT_FLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>forward</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GL_CONTEXT_FLAG_DEBUG_BIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>glfwExtensionSupported</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_debug_output"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>debug</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>noerror</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator>
<operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>minor</name></name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_CONTEXT_PROFILE_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>GL_CONTEXT_COMPATIBILITY_PROFILE_BIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>profile</name></name> <operator>=</operator> <name>GLFW_OPENGL_COMPAT_PROFILE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>GL_CONTEXT_CORE_PROFILE_BIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>profile</name></name> <operator>=</operator> <name>GLFW_OPENGL_CORE_PROFILE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>glfwExtensionSupported</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_compatibility"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>profile</name></name> <operator>=</operator> <name>GLFW_OPENGL_COMPAT_PROFILE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>glfwExtensionSupported</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_robustness"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>GLint</name></type> <name>strategy</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_RESET_NOTIFICATION_STRATEGY_ARB</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strategy</name> <operator>==</operator> <name>GL_LOSE_CONTEXT_ON_RESET_ARB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>robustness</name></name> <operator>=</operator> <name>GLFW_LOSE_CONTEXT_ON_RESET</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>strategy</name> <operator>==</operator> <name>GL_NO_RESET_NOTIFICATION_ARB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>robustness</name></name> <operator>=</operator> <name>GLFW_NO_RESET_NOTIFICATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>glfwExtensionSupported</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_robustness"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>GLint</name></type> <name>strategy</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_RESET_NOTIFICATION_STRATEGY_ARB</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strategy</name> <operator>==</operator> <name>GL_LOSE_CONTEXT_ON_RESET_ARB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>robustness</name></name> <operator>=</operator> <name>GLFW_LOSE_CONTEXT_ON_RESET</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>strategy</name> <operator>==</operator> <name>GL_NO_RESET_NOTIFICATION_ARB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>robustness</name></name> <operator>=</operator> <name>GLFW_NO_RESET_NOTIFICATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glfwExtensionSupported</name><argument_list>(<argument><expr><literal type="string">"GL_KHR_context_flush_control"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>behavior</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_CONTEXT_RELEASE_BEHAVIOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>==</operator> <name>GL_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>release</name></name> <operator>=</operator> <name>GLFW_RELEASE_BEHAVIOR_NONE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>behavior</name> <operator>==</operator> <name>GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>release</name></name> <operator>=</operator> <name>GLFW_RELEASE_BEHAVIOR_FLUSH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<block>{<block_content>
<decl_stmt><decl><type><name>PFNGLCLEARPROC</name></type> <name>glClear</name> <init>= <expr><operator>(</operator><name>PFNGLCLEARPROC</name><operator>)</operator>
<call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name><argument_list>(<argument><expr><literal type="string">"glClear"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapBuffers</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>GLFWbool</name></type> <name>_glfwStringInExtensionString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extensions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><name>extensions</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>terminator</name></decl>;</decl_stmt>

<expr_stmt><expr><name>where</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>where</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>terminator</name> <operator>=</operator> <name>where</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <name>start</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>where</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>terminator</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwMakeContextCurrent</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>previous</name> <init>= <expr><call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>,
<argument><expr><literal type="string">"Cannot make current with a window that has no OpenGL or OpenGL ES context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name> <operator>||</operator> <name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>source</name></name> <operator>!=</operator> <name><name>previous</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>source</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>previous</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>makeCurrent</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>makeCurrent</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWwindow</name><modifier>*</modifier></type> <name>glfwGetCurrentContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSwapBuffers</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_WINDOW_CONTEXT</name></expr></argument>,
<argument><expr><literal type="string">"Cannot swap buffers of a window that has no OpenGL or OpenGL ES context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapBuffers</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSwapInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_CURRENT_CONTEXT</name></expr></argument>,
<argument><expr><literal type="string">"Cannot set swap interval without a current OpenGL or OpenGL ES context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>swapInterval</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwExtensionSupported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>extension</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_CURRENT_CONTEXT</name></expr></argument>,
<argument><expr><literal type="string">"Cannot query extension without a current OpenGL or OpenGL ES context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>extension</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Extension name cannot be an empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>major</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>count</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_NUM_EXTENSIONS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>en</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator>
<call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetStringi</name></name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>en</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Extension string retrieval is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extensions</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator>
<call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>GetString</name></name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extensions</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Extension string retrieval is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwStringInExtensionString</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<return>return <expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>extensionSupported</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWglproc</name></type> <name>glfwGetProcAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>procname</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_NO_CURRENT_CONTEXT</name></expr></argument>,
<argument><expr><literal type="string">"Cannot query entry point without a current OpenGL or OpenGL ES context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>getProcAddress</name></name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
