<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\monitor.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>int</name></type> <name>compareVideoModes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>fm</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>sm</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fbpp</name> <init>= <expr><name><name>fm</name><operator>-&gt;</operator><name>redBits</name></name> <operator>+</operator> <name><name>fm</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>+</operator> <name><name>fm</name><operator>-&gt;</operator><name>blueBits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sbpp</name> <init>= <expr><name><name>sm</name><operator>-&gt;</operator><name>redBits</name></name> <operator>+</operator> <name><name>sm</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>+</operator> <name><name>sm</name><operator>-&gt;</operator><name>blueBits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>farea</name> <init>= <expr><name><name>fm</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>fm</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sarea</name> <init>= <expr><name><name>sm</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>sm</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>fbpp</name> <operator>!=</operator> <name>sbpp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fbpp</name> <operator>-</operator> <name>sbpp</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>farea</name> <operator>!=</operator> <name>sarea</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>farea</name> <operator>-</operator> <name>sarea</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fm</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>sm</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>fm</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>sm</name><operator>-&gt;</operator><name>width</name></name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><name><name>fm</name><operator>-&gt;</operator><name>refreshRate</name></name> <operator>-</operator> <name><name>sm</name><operator>-&gt;</operator><name>refreshRate</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>refreshVideoModes</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>modeCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>modes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <call><name>_glfwPlatformGetVideoModes</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>modes</name></expr></argument>, <argument><expr><name>modeCount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLFWvidmode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareVideoModes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name> <operator>=</operator> <name>modeCount</name></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>_glfwInputMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>placement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_CONNECTED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name> <operator>=</operator>
<call><name>realloc</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>placement</name> <operator>==</operator> <name>_GLFW_INSERT_FIRST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>monitor</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name><index>[<expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>monitor</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_DISCONNECTED</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>window</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr>;</init> <condition><expr><name>window</name></expr>;</condition> <incr><expr><name>window</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>==</operator> <name>monitor</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>xoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowFrameSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yoff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>monitors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>monitor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>callbacks</name><operator>.</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>_glfw</name><operator>.</operator><name>callbacks</name><operator>.</operator><name>monitor</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>monitor</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_DISCONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwFreeMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_glfwInputMonitorWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>_glfwAllocMonitor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>widthMM</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMM</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>widthMM</name></name> <operator>=</operator> <name>widthMM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>heightMM</name></name> <operator>=</operator> <name>heightMM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>monitor</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwFreeMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monitor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformFreeMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwFreeGammaArrays</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>originalRamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwFreeGammaArrays</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>currentRamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwAllocGammaArrays</name><parameter_list>(<parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwFreeGammaArrays</name><parameter_list>(<parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ramp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLFWgammaramp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>_glfwChooseVideoMode</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sizeDiff</name></decl>, <decl><type ref="prev"/><name>leastSizeDiff</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rateDiff</name></decl>, <decl><type ref="prev"/><name>leastRateDiff</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>colorDiff</name></decl>, <decl><type ref="prev"/><name>leastColorDiff</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>closest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refreshVideoModes</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>colorDiff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>redBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorDiff</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>redBits</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>redBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorDiff</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>greenBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorDiff</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>blueBits</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>blueBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sizeDiff</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desired</name><operator>-&gt;</operator><name>refreshRate</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rateDiff</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>refreshRate</name></name> <operator>-</operator> <name><name>desired</name><operator>-&gt;</operator><name>refreshRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rateDiff</name> <operator>=</operator> <name>UINT_MAX</name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>refreshRate</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colorDiff</name> <operator>&lt;</operator> <name>leastColorDiff</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>colorDiff</name> <operator>==</operator> <name>leastColorDiff</name> <operator>&amp;&amp;</operator> <name>sizeDiff</name> <operator>&lt;</operator> <name>leastSizeDiff</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>colorDiff</name> <operator>==</operator> <name>leastColorDiff</name> <operator>&amp;&amp;</operator> <name>sizeDiff</name> <operator>==</operator> <name>leastSizeDiff</name> <operator>&amp;&amp;</operator> <name>rateDiff</name> <operator>&lt;</operator> <name>leastRateDiff</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leastSizeDiff</name> <operator>=</operator> <name>sizeDiff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leastRateDiff</name> <operator>=</operator> <name>rateDiff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leastColorDiff</name> <operator>=</operator> <name>colorDiff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>closest</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>_glfwCompareVideoModes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>sm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>compareVideoModes</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>sm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwSplitBPP</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>blue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <operator>*</operator><name>green</name> <operator>=</operator> <operator>*</operator><name>blue</name> <operator>=</operator> <name>bpp</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>bpp</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>red</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>green</name> <operator>=</operator> <operator>*</operator><name>green</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>red</name> <operator>=</operator> <operator>*</operator><name>red</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name>GLFWmonitor</name><modifier>*</modifier><modifier>*</modifier></type> <name>glfwGetMonitors</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>GLFWmonitor</name><operator>*</operator><operator>*</operator><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>monitors</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWmonitor</name><modifier>*</modifier></type> <name>glfwGetPrimaryMonitor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>GLFWmonitor</name><operator>*</operator><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>monitors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorPos</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetMonitorPos</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorWorkarea</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetMonitorWorkarea</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorPhysicalSize</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>widthMM</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>heightMM</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>widthMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>widthMM</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>heightMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>heightMM</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>widthMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>widthMM</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>widthMM</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>heightMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>heightMM</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>heightMM</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetMonitorContentScale</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetMonitorContentScale</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>xscale</name></expr></argument>, <argument><expr><name>yscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetMonitorName</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetMonitorUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>userPointer</name></name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name><modifier>*</modifier></type> <name>glfwGetMonitorUserPointer</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>userPointer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWmonitorfun</name></type> <name>glfwSetMonitorCallback</name><parameter_list>(<parameter><decl><type><name>GLFWmonitorfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>callbacks</name><operator>.</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>glfwGetVideoModes</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refreshVideoModes</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>monitor</name><operator>-&gt;</operator><name>modeCount</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>modes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>glfwGetVideoMode</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>currentMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>currentMode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetGamma</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWgammaramp</name></type> <name>ramp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>original</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>gamma</name> <operator>&gt;</operator> <literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>gamma</name> <operator>&lt;=</operator> <name>FLT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gamma</name> <operator>!=</operator> <name>gamma</name> <operator>||</operator> <name>gamma</name> <operator>&lt;=</operator> <literal type="number">0.f</literal> <operator>||</operator> <name>gamma</name> <operator>&gt;</operator> <name>FLT_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Invalid gamma value %f"</literal></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>original</name> <operator>=</operator> <call><name>glfwGetGammaRamp</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>original</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>original</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>original</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>


<expr_stmt><expr><name>value</name> <operator>=</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name><name>original</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">1.f</literal> <operator>/</operator> <name>gamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">65535.f</literal> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>_glfw_fminf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">65535.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ramp</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ramp</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ramp</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ramp</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>original</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwSetGammaRamp</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ramp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>glfwGetGammaRamp</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwFreeGammaArrays</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>currentRamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformGetGammaRamp</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>currentRamp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>currentRamp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetGammaRamp</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ramp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid gamma ramp size %i"</literal></expr></argument>,
<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>monitor</name><operator>-&gt;</operator><name>originalRamp</name><operator>.</operator><name>size</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformGetGammaRamp</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>originalRamp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetGammaRamp</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>ramp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
