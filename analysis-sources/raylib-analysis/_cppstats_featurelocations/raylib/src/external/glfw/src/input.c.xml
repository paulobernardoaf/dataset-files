<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\input.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_STICK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_JOYSTICK_AXIS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_JOYSTICK_BUTTON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_JOYSTICK_HATBIT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>_GLFWmapping</name><modifier>*</modifier></type> <name>findMapping</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>_glfw</name><operator>.</operator><name>mappingCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>guid</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>mappings</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>isValidElementForJoystick</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWmapelement</name><modifier>*</modifier></type> <name>e</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_HATBIT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>js</name><operator>-&gt;</operator><name>hatCount</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_BUTTON</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>js</name><operator>-&gt;</operator><name>buttonCount</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_AXIS</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>js</name><operator>-&gt;</operator><name>axisCount</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>_GLFWmapping</name><modifier>*</modifier></type> <name>findValidMapping</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmapping</name><modifier>*</modifier></type> <name>mapping</name> <init>= <expr><call><name>findMapping</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mapping</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_GAMEPAD_BUTTON_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidElementForJoystick</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid button in gamepad mapping %s (%s)"</literal></expr></argument>,
<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>,
<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_GAMEPAD_AXIS_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidElementForJoystick</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid axis in gamepad mapping %s (%s)"</literal></expr></argument>,
<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>,
<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>mapping</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>parseMapping</name><parameter_list>(<parameter><decl><type><name>_GLFWmapping</name><modifier>*</modifier></type> <name>mapping</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmapelement</name><modifier>*</modifier></type> <name>element</name></decl>;</decl_stmt>
}</block> <decl><name><name>fields</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"platform"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_B</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_X</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_Y</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"back"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_BACK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"start"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_START</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"guide"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_GUIDE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leftshoulder"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_LEFT_BUMPER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rightshoulder"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leftstick"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_LEFT_THUMB</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rightstick"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_RIGHT_THUMB</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dpup"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_DPAD_UP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dpright"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_DPAD_RIGHT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dpdown"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_DPAD_DOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dpleft"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_BUTTON_DPAD_LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lefttrigger"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_AXIS_LEFT_TRIGGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"righttrigger"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"leftx"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_AXIS_LEFT_X</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lefty"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_AXIS_LEFT_Y</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rightx"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_AXIS_RIGHT_X</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"righty"</literal></expr>, <expr><name><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>GLFW_GAMEPAD_AXIS_RIGHT_Y</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">32</literal> <operator>||</operator> <name><name>c</name><index>[<expr><name>length</name></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name><name>c</name><index>[<expr><name>length</name></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>c</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>c</name><index>[<expr><name>length</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>element</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmapelement</name><modifier>*</modifier></type> <name>e</name> <init>= <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>element</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>minimum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>maximum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minimum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>maximum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>_GLFW_JOYSTICK_AXIS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>_GLFW_JOYSTICK_BUTTON</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>_GLFW_JOYSTICK_HATBIT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_HATBIT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>hat</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>bit</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>hat</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_AXIS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>axisScale</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>/</operator> <operator>(</operator><name>maximum</name> <operator>-</operator> <name>minimum</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>axisOffset</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>maximum</name> <operator>+</operator> <name>minimum</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>axisScale</name></name> <operator>=</operator> <operator>-</operator><name><name>e</name><operator>-&gt;</operator><name>axisScale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>axisOffset</name></name> <operator>=</operator> <operator>-</operator><name><name>e</name><operator>-&gt;</operator><name>axisOffset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>_GLFW_PLATFORM_MAPPING_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>_GLFW_PLATFORM_MAPPING_NAME</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mapping</name><operator>-&gt;</operator><name>guid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>guid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>guid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>_glfwPlatformUpdateGamepadGUID</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>_glfwInputKey</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>GLFW_KEY_LAST</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>repeated</name> <init>= <expr><name>GLFW_FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_RELEASE</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <name>GLFW_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_PRESS</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>repeated</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_RELEASE</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>stickyKeys</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <name>_GLFW_STICK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>GLFW_REPEAT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>lockKeyMods</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>GLFW_MOD_CAPS_LOCK</name> <operator>|</operator> <name>GLFW_MOD_NUM_LOCK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>key</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_glfwInputChar</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>plain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator> <operator>(</operator><name>codepoint</name> <operator>&gt;</operator> <literal type="number">126</literal> <operator>&amp;&amp;</operator> <name>codepoint</name> <operator>&lt;</operator> <literal type="number">160</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>lockKeyMods</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>GLFW_MOD_CAPS_LOCK</name> <operator>|</operator> <name>GLFW_MOD_NUM_LOCK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>charmods</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>charmods</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plain</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>character</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>character</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputScroll</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>yoffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>scroll</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>scroll</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>xoffset</name></expr></argument>, <argument><expr><name>yoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputMouseClick</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>button</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>button</name></expr></argument> &gt;</argument_list></name> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>lockKeyMods</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>GLFW_MOD_CAPS_LOCK</name> <operator>|</operator> <name>GLFW_MOD_NUM_LOCK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_RELEASE</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>stickyMouseButtons</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <name>_GLFW_STICK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>mouseButton</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>mouseButton</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_glfwInputCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name> <operator>==</operator> <name>xpos</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name> <operator>==</operator> <name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name> <operator>=</operator> <name>xpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name> <operator>=</operator> <name>ypos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>cursorPos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>cursorPos</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputCursorEnter</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>entered</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>cursorEnter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>cursorEnter</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>entered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputDrop</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>drop</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>drop</name></name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>jid</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>js</name> <operator>-</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>callbacks</name><operator>.</operator><name>joystick</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>_glfw</name><operator>.</operator><name>callbacks</name><operator>.</operator><name>joystick</name></name><argument_list>(<argument><expr><name>jid</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputJoystickAxis</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>axes</name><index>[<expr><name>axis</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputJoystickButton</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwInputJoystickHat</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hat</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>base</name> <init>= <expr><name><name>js</name><operator>-&gt;</operator><name>buttonCount</name></name> <operator>+</operator> <name>hat</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>base</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GLFW_PRESS</name></expr> </then><else>: <expr><name>GLFW_RELEASE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>base</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GLFW_PRESS</name></expr> </then><else>: <expr><name>GLFW_RELEASE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>base</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GLFW_PRESS</name></expr> </then><else>: <expr><name>GLFW_RELEASE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>base</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GLFW_PRESS</name></expr> </then><else>: <expr><name>GLFW_RELEASE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>hats</name><index>[<expr><name>hat</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>_glfwAllocJoystick</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>axisCount</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buttonCount</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hatCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>jid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>joysticks</name><index>[<expr><name>jid</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>jid</name> <operator>&gt;</operator> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>axes</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>axisCount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>buttonCount</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>hatCount</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>hats</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>hatCount</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>axisCount</name></name> <operator>=</operator> <name>axisCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>buttonCount</name></name> <operator>=</operator> <name>buttonCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>hatCount</name></name> <operator>=</operator> <name>hatCount</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <call><name>findValidMapping</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>js</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwFreeJoystick</name><parameter_list>(<parameter><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>axes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>js</name><operator>-&gt;</operator><name>hats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWjoystick</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwCenterCursorInContentArea</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><name>height</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetInputMode</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GLFW_CURSOR</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name></expr>;</return>
<case>case <expr><name>GLFW_STICKY_KEYS</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>stickyKeys</name></name></expr>;</return>
<case>case <expr><name>GLFW_STICKY_MOUSE_BUTTONS</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>stickyMouseButtons</name></name></expr>;</return>
<case>case <expr><name>GLFW_LOCK_KEY_MODS</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>lockKeyMods</name></name></expr>;</return>
<case>case <expr><name>GLFW_RAW_MOUSE_MOTION</name></expr>:</case>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid input mode 0x%08X"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetInputMode</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GLFW_CURSOR</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>GLFW_CURSOR_NORMAL</name> <operator>&amp;&amp;</operator>
<name>value</name> <operator>!=</operator> <name>GLFW_CURSOR_HIDDEN</name> <operator>&amp;&amp;</operator>
<name>value</name> <operator>!=</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid cursor mode 0x%08X"</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetCursorMode</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GLFW_STICKY_KEYS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>stickyKeys</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_KEY_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>_GLFW_STICK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GLFW_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>stickyKeys</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GLFW_STICKY_MOUSE_BUTTONS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>stickyMouseButtons</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>_GLFW_STICK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GLFW_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>stickyMouseButtons</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GLFW_LOCK_KEY_MODS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>lockKeyMods</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GLFW_RAW_MOUSE_MOTION</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformRawMouseMotionSupported</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Raw mouse motion is not supported on this system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>GLFW_TRUE</name></expr> </then><else>: <expr><name>GLFW_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid input mode 0x%08X"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwRawMouseMotionSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_glfwPlatformRawMouseMotionSupported</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetKeyName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>GLFW_KEY_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>GLFW_KEY_KP_EQUAL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>key</name> <argument_list type="generic">&lt; <argument><expr><name>GLFW_KEY_KP_0</name> <operator>||</operator> <name>key</name></expr></argument> &gt;</argument_list></name> <name>GLFW_KEY_KP_ADD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>key</name> <argument_list type="generic">&lt; <argument><expr><name>GLFW_KEY_APOSTROPHE</name> <operator>||</operator> <name>key</name></expr></argument> &gt;</argument_list></name> <name>GLFW_KEY_WORLD_2</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scancode</name> <operator>=</operator> <call><name>_glfwPlatformGetKeyScancode</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_glfwPlatformGetScancodeName</name><argument_list>(<argument><expr><name>scancode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetKeyScancode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name> <argument_list type="generic">&lt; <argument><expr><name>GLFW_KEY_SPACE</name> <operator>||</operator> <name>key</name></expr></argument> &gt;</argument_list></name> <name>GLFW_KEY_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid key %i"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_RELEASE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_glfwPlatformGetKeyScancode</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetKey</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name> <argument_list type="generic">&lt; <argument><expr><name>GLFW_KEY_SPACE</name> <operator>||</operator> <name>key</name></expr></argument> &gt;</argument_list></name> <name>GLFW_KEY_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid key %i"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_RELEASE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>==</operator> <name>_GLFW_STICK</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <name>GLFW_RELEASE</name></expr>;</expr_stmt>
<return>return <expr><name>GLFW_PRESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetMouseButton</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>button</name> <argument_list type="generic">&lt; <argument><expr><name>GLFW_MOUSE_BUTTON_1</name> <operator>||</operator> <name>button</name></expr></argument> &gt;</argument_list></name> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid mouse button %i"</literal></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_RELEASE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>button</name></expr>]</index></name> <operator>==</operator> <name>_GLFW_STICK</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>button</name></expr>]</index></name> <operator>=</operator> <name>GLFW_RELEASE</name></expr>;</expr_stmt>
<return>return <expr><name>GLFW_PRESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>button</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetCursorPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformGetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetCursorPos</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name> <operator>!=</operator> <name>xpos</name> <operator>||</operator> <name><name>xpos</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DBL_MAX</name> <operator>||</operator> <name>xpos</name></expr></argument> &gt;</argument_list></name> <name>DBL_MAX</name> <operator>||</operator>
<name>ypos</name> <operator>!=</operator> <name>ypos</name> <operator>||</operator> <name><name>ypos</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DBL_MAX</name> <operator>||</operator> <name>ypos</name></expr></argument> &gt;</argument_list></name> <name>DBL_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid cursor position %f %f"</literal></expr></argument>,
<argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformWindowFocused</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name> <operator>=</operator> <name>xpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name> <operator>=</operator> <name>ypos</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwPlatformSetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWcursor</name><modifier>*</modifier></type> <name>glfwCreateCursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>image</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWcursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>cursorListHead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>cursorListHead</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformCreateCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>xhot</name></expr></argument>, <argument><expr><name>yhot</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwDestroyCursor</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWcursor</name><operator>*</operator><operator>)</operator> <name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>GLFWcursor</name><operator>*</operator><operator>)</operator> <name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWcursor</name><modifier>*</modifier></type> <name>glfwCreateStandardCursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>!=</operator> <name>GLFW_ARROW_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_IBEAM_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_CROSSHAIR_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_POINTING_HAND_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_RESIZE_EW_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_RESIZE_NS_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_RESIZE_NWSE_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_RESIZE_NESW_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_RESIZE_ALL_CURSOR</name> <operator>&amp;&amp;</operator>
<name>shape</name> <operator>!=</operator> <name>GLFW_NOT_ALLOWED_CURSOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid standard cursor 0x%08X"</literal></expr></argument>, <argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWcursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>cursorListHead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>cursorListHead</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformCreateStandardCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glfwDestroyCursor</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWcursor</name><operator>*</operator><operator>)</operator> <name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>GLFWcursor</name><operator>*</operator><operator>)</operator> <name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwDestroyCursor</name><parameter_list>(<parameter><decl><type><name>GLFWcursor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name> <init>= <expr><operator>(</operator><name>_GLFWcursor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>window</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr>;</init> <condition><expr><name>window</name></expr>;</condition> <incr><expr><name>window</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glfwSetCursor</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name>window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>_glfwPlatformDestroyCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier><modifier>*</modifier></type> <name>prev</name> <init>= <expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>cursorListHead</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>prev</name> <operator>!=</operator> <name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>prev</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetCursor</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>windowHandle</name></decl></parameter>, <parameter><decl><type><name>GLFWcursor</name><modifier>*</modifier></type> <name>cursorHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>windowHandle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name> <init>= <expr><operator>(</operator><name>_GLFWcursor</name><operator>*</operator><operator>)</operator> <name>cursorHandle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWkeyfun</name></type> <name>glfwSetKeyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>GLFWkeyfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWcharfun</name></type> <name>glfwSetCharCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>GLFWcharfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>character</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWcharmodsfun</name></type> <name>glfwSetCharModsCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>GLFWcharmodsfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>charmods</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWmousebuttonfun</name></type> <name>glfwSetMouseButtonCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWmousebuttonfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>mouseButton</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWcursorposfun</name></type> <name>glfwSetCursorPosCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWcursorposfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>cursorPos</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWcursorenterfun</name></type> <name>glfwSetCursorEnterCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWcursorenterfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>cursorEnter</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWscrollfun</name></type> <name>glfwSetScrollCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>GLFWscrollfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>scroll</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWdropfun</name></type> <name>glfwSetDropCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>GLFWdropfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>drop</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwJoystickPresent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_PRESENCE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>glfwGetJoystickAxes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_AXES</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>js</name><operator>-&gt;</operator><name>axisCount</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>axes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickButtons</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_BUTTONS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>init</name><operator>.</operator><name>hatButtons</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>js</name><operator>-&gt;</operator><name>buttonCount</name></name> <operator>+</operator> <name><name>js</name><operator>-&gt;</operator><name>hatCount</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>js</name><operator>-&gt;</operator><name>buttonCount</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>buttons</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickHats</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_BUTTONS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>js</name><operator>-&gt;</operator><name>hatCount</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>hats</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_PRESENCE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetJoystickGUID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_PRESENCE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>guid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetJoystickUserPointer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>userPointer</name></name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name><modifier>*</modifier></type> <name>glfwGetJoystickUserPointer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>userPointer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWjoystickfun</name></type> <name>glfwSetJoystickCallback</name><parameter_list>(<parameter><decl><type><name>GLFWjoystickfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>callbacks</name><operator>.</operator><name>joystick</name></name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwUpdateGamepadMappings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>string</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>c</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmapping</name></type> <name>mapping</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parseMapping</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapping</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmapping</name><modifier>*</modifier></type> <name>previous</name> <init>= <expr><call><name>findMapping</name><argument_list>(<argument><expr><name><name>mapping</name><operator>.</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>mappingCount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>mappings</name></name> <operator>=</operator>
<call><name>realloc</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>mappings</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmapping</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>_glfw</name><operator>.</operator><name>mappingCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>mappings</name><index>[<expr><name><name>_glfw</name><operator>.</operator><name>mappingCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>jid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr>;</condition> <incr><expr><name>jid</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>js</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <call><name>findValidMapping</name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwJoystickIsGamepad</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_PRESENCE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>mapping</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetGamepadName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_PRESENCE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>js</name><operator>-&gt;</operator><name>mapping</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetGamepadState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jid</name></decl></parameter>, <parameter><decl><type><name>GLFWgamepadstate</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWjoystick</name><modifier>*</modifier></type> <name>js</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&gt;=</operator> <name>GLFW_JOYSTICK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jid</name> <operator>&lt;=</operator> <name>GLFW_JOYSTICK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLFWgamepadstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>jid</name></expr></argument> &gt;</argument_list></name> <name>GLFW_JOYSTICK_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid joystick ID %i"</literal></expr></argument>, <argument><expr><name>jid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>js</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>joysticks</name></name> <operator>+</operator> <name>jid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformPollJoystick</name><argument_list>(<argument><expr><name>js</name></expr></argument>, <argument><expr><name>_GLFW_POLL_ALL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>js</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_GAMEPAD_BUTTON_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWmapelement</name><modifier>*</modifier></type> <name>e</name> <init>= <expr><name><name>js</name><operator>-&gt;</operator><name>mapping</name><operator>-&gt;</operator><name>buttons</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_AXIS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>value</name> <init>= <expr><name><name>js</name><operator>-&gt;</operator><name>axes</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>axisScale</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>axisOffset</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>axisOffset</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>axisOffset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>axisScale</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GLFW_PRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GLFW_PRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_HATBIT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>hat</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>bit</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>hats</name><index>[<expr><name>hat</name></expr>]</index></name> <operator>&amp;</operator> <name>bit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GLFW_PRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_BUTTON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>js</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_GAMEPAD_AXIS_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>_GLFWmapelement</name><modifier>*</modifier></type> <name>e</name> <init>= <expr><name><name>js</name><operator>-&gt;</operator><name>mapping</name><operator>-&gt;</operator><name>axes</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_AXIS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>value</name> <init>= <expr><name><name>js</name><operator>-&gt;</operator><name>axes</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>axisScale</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>axisOffset</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>axes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_glfw_fminf</name><argument_list>(<argument><expr><call><name>_glfw_fmaxf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_HATBIT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>hat</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>bit</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>js</name><operator>-&gt;</operator><name>hats</name><index>[<expr><name>hat</name></expr>]</index></name> <operator>&amp;</operator> <name>bit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>axes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>axes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>_GLFW_JOYSTICK_BUTTON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>axes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>js</name><operator>-&gt;</operator><name>buttons</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">2.f</literal> <operator>-</operator> <literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetClipboardString</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>string</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetClipboardString</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetClipboardString</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_glfwPlatformGetClipboardString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>double</name></type> <name>glfwGetTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><call><name>_glfwPlatformGetTimerValue</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>offset</name></name><operator>)</operator> <operator>/</operator>
<call><name>_glfwPlatformGetTimerFrequency</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetTime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>!=</operator> <name>time</name> <operator>||</operator> <name><name>time</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>time</name></expr></argument> &gt;</argument_list></name> <literal type="number">18446744073.0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Invalid time %f"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>_glfwPlatformGetTimerValue</name><argument_list>()</argument_list></call> <operator>-</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><name>time</name> <operator>*</operator> <call><name>_glfwPlatformGetTimerFrequency</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>uint64_t</name></type> <name>glfwGetTimerValue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_glfwPlatformGetTimerValue</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>uint64_t</name></type> <name>glfwGetTimerFrequency</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_glfwPlatformGetTimerFrequency</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
