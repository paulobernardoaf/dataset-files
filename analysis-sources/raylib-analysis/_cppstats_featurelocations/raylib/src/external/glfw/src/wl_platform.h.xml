<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\wl_platform.h">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xkbcommon/xkbcommon.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xkbcommon/xkbcommon-compose.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>VkFlags</name></type> <name>VkWaylandSurfaceCreateFlagsKHR</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VkWaylandSurfaceCreateInfoKHR</name>
<block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkWaylandSurfaceCreateFlagsKHR</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name><modifier>*</modifier></type> <name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkWaylandSurfaceCreateInfoKHR</name>;</typedef>

<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkCreateWaylandSurfaceKHR</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkWaylandSurfaceCreateInfoKHR</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkBool32</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type></decl></parameter>,<parameter><decl><type><name>uint32_t</name></type></decl></parameter>,<parameter><decl><type><name><name>struct</name> <name>wl_display</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"posix_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"posix_time.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linux_joystick.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"null_joystick.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xkb_unicode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"egl_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osmesa_context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wayland-xdg-shell-client-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wayland-xdg-decoration-client-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wayland-viewporter-client-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wayland-relative-pointer-unstable-v1-client-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wayland-pointer-constraints-unstable-v1-client-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wayland-idle-inhibit-unstable-v1-client-protocol.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlopen</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlopen(name, RTLD_LAZY | RTLD_LOCAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlclose</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlclose(handle)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlsym</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlsym(handle, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_WINDOW</name></cpp:macro> <cpp:value>((EGLNativeWindowType) window-&gt;wl.native)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_DISPLAY</name></cpp:macro> <cpp:value>((EGLNativeDisplayType) _glfw.wl.display)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWwindowWayland wl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_LIBRARY_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWlibraryWayland wl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_MONITOR_STATE</name></cpp:macro> <cpp:value>_GLFWmonitorWayland wl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_CURSOR_STATE</name></cpp:macro> <cpp:value>_GLFWcursorWayland wl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_CONTEXT_STATE</name></cpp:macro> <cpp:value>struct { int dummyContext; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_LIBRARY_CONTEXT_STATE</name></cpp:macro> <cpp:value>struct { int dummyLibraryContext; }</cpp:value></cpp:define>

<struct>struct <name>wl_cursor_image</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hotspot_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hotspot_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>delay</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>wl_cursor</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>image_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_image</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>images</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <function_decl><type><name><name>struct</name> <name>wl_cursor_theme</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_wl_cursor_theme_load</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_shm</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_wl_cursor_theme_destroy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_cursor_theme</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>struct</name> <name>wl_cursor</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_wl_cursor_theme_get_cursor</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_cursor_theme</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_wl_cursor_image_get_buffer</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_cursor_image</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl_cursor_theme_load</name></cpp:macro> <cpp:value>_glfw.wl.cursor.theme_load</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl_cursor_theme_destroy</name></cpp:macro> <cpp:value>_glfw.wl.cursor.theme_destroy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl_cursor_theme_get_cursor</name></cpp:macro> <cpp:value>_glfw.wl.cursor.theme_get_cursor</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl_cursor_image_get_buffer</name></cpp:macro> <cpp:value>_glfw.wl.cursor.image_get_buffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name><name>struct</name> <name>wl_egl_window</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_wl_egl_window_create</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_wl_egl_window_destroy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_egl_window</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_wl_egl_window_resize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_egl_window</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl_egl_window_create</name></cpp:macro> <cpp:value>_glfw.wl.egl.window_create</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl_egl_window_destroy</name></cpp:macro> <cpp:value>_glfw.wl.egl.window_destroy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl_egl_window_resize</name></cpp:macro> <cpp:value>_glfw.wl.egl.window_resize</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name><name>struct</name> <name>xkb_context</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_xkb_context_new</name>)<parameter_list>(<parameter><decl><type><name><name>enum</name> <name>xkb_context_flags</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_xkb_context_unref</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_context</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>struct</name> <name>xkb_keymap</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_xkb_keymap_new_from_string</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_context</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>xkb_keymap_format</name></name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>xkb_keymap_compile_flags</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_xkb_keymap_unref</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_keymap</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>xkb_mod_index_t</name></type> (<modifier>*</modifier> <name>PFN_xkb_keymap_mod_get_index</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_keymap</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>PFN_xkb_keymap_key_repeats</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_keymap</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>xkb_keycode_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>struct</name> <name>xkb_state</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_xkb_state_new</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_keymap</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_xkb_state_unref</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_state</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>PFN_xkb_state_key_get_syms</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_state</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>xkb_keycode_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>xkb_keysym_t</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>enum</name> <name>xkb_state_component</name></name></type> (<modifier>*</modifier> <name>PFN_xkb_state_update_mask</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_state</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>xkb_mod_mask_t</name></type></decl></parameter>, <parameter><decl><type><name>xkb_mod_mask_t</name></type></decl></parameter>, <parameter><decl><type><name>xkb_mod_mask_t</name></type></decl></parameter>, <parameter><decl><type><name>xkb_layout_index_t</name></type></decl></parameter>, <parameter><decl><type><name>xkb_layout_index_t</name></type></decl></parameter>, <parameter><decl><type><name>xkb_layout_index_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>xkb_mod_mask_t</name></type> (<modifier>*</modifier> <name>PFN_xkb_state_serialize_mods</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_state</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>xkb_state_component</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_context_new</name></cpp:macro> <cpp:value>_glfw.wl.xkb.context_new</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_context_unref</name></cpp:macro> <cpp:value>_glfw.wl.xkb.context_unref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_keymap_new_from_string</name></cpp:macro> <cpp:value>_glfw.wl.xkb.keymap_new_from_string</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_keymap_unref</name></cpp:macro> <cpp:value>_glfw.wl.xkb.keymap_unref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_keymap_mod_get_index</name></cpp:macro> <cpp:value>_glfw.wl.xkb.keymap_mod_get_index</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_keymap_key_repeats</name></cpp:macro> <cpp:value>_glfw.wl.xkb.keymap_key_repeats</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_state_new</name></cpp:macro> <cpp:value>_glfw.wl.xkb.state_new</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_state_unref</name></cpp:macro> <cpp:value>_glfw.wl.xkb.state_unref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_state_key_get_syms</name></cpp:macro> <cpp:value>_glfw.wl.xkb.state_key_get_syms</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_state_update_mask</name></cpp:macro> <cpp:value>_glfw.wl.xkb.state_update_mask</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_state_serialize_mods</name></cpp:macro> <cpp:value>_glfw.wl.xkb.state_serialize_mods</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name><name>struct</name> <name>xkb_compose_table</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_xkb_compose_table_new_from_locale</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_context</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>xkb_compose_compile_flags</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_xkb_compose_table_unref</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_compose_table</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>struct</name> <name>xkb_compose_state</name></name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_xkb_compose_state_new</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_compose_table</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>xkb_compose_state_flags</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_xkb_compose_state_unref</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_compose_state</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>enum</name> <name>xkb_compose_feed_result</name></name></type> (<modifier>*</modifier> <name>PFN_xkb_compose_state_feed</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_compose_state</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>xkb_keysym_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name><name>enum</name> <name>xkb_compose_status</name></name></type> (<modifier>*</modifier> <name>PFN_xkb_compose_state_get_status</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_compose_state</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>xkb_keysym_t</name></type> (<modifier>*</modifier> <name>PFN_xkb_compose_state_get_one_sym</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_compose_state</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_compose_table_new_from_locale</name></cpp:macro> <cpp:value>_glfw.wl.xkb.compose_table_new_from_locale</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_compose_table_unref</name></cpp:macro> <cpp:value>_glfw.wl.xkb.compose_table_unref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_compose_state_new</name></cpp:macro> <cpp:value>_glfw.wl.xkb.compose_state_new</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_compose_state_unref</name></cpp:macro> <cpp:value>_glfw.wl.xkb.compose_state_unref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_compose_state_feed</name></cpp:macro> <cpp:value>_glfw.wl.xkb.compose_state_feed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_compose_state_get_status</name></cpp:macro> <cpp:value>_glfw.wl.xkb.compose_state_get_status</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xkb_compose_state_get_one_sym</name></cpp:macro> <cpp:value>_glfw.wl.xkb.compose_state_get_one_sym</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_DECORATION_WIDTH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_DECORATION_TOP</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_DECORATION_VERTICAL</name></cpp:macro> <cpp:value>(_GLFW_DECORATION_TOP + _GLFW_DECORATION_WIDTH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_DECORATION_HORIZONTAL</name></cpp:macro> <cpp:value>(2 * _GLFW_DECORATION_WIDTH)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_GLFWdecorationSideWayland</name>
<block>{
<decl><name>mainWindow</name></decl>,
<decl><name>topDecoration</name></decl>,
<decl><name>leftDecoration</name></decl>,
<decl><name>rightDecoration</name></decl>,
<decl><name>bottomDecoration</name></decl>,

}</block></enum></type> <name>_GLFWdecorationSideWayland</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GLFWdecorationWayland</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_subsurface</name></name><modifier>*</modifier></type> <name>subsurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wp_viewport</name></name><modifier>*</modifier></type> <name>viewport</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWdecorationWayland</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_GLFWwindowWayland</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>visible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>maximized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>hovered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>transparent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_egl_window</name></name><modifier>*</modifier></type> <name>native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_callback</name></name><modifier>*</modifier></type> <name>callback</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xdg_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xdg_toplevel</name></name><modifier>*</modifier></type> <name>toplevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zxdg_toplevel_decoration_v1</name></name><modifier>*</modifier></type> <name>decoration</name></decl>;</decl_stmt>
}</block> <decl><name>xdg</name></decl>;</struct>

<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>currentCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cursorPosX</name></decl>, <name>cursorPosY</name>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>title</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier><modifier>*</modifier></type> <name>monitors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>monitorsCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>monitorsSize</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_relative_pointer_v1</name></name><modifier>*</modifier></type> <name>relativePointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_locked_pointer_v1</name></name><modifier>*</modifier></type> <name>lockedPointer</name></decl>;</decl_stmt>
}</block> <decl><name>pointerLock</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>zwp_idle_inhibitor_v1</name></name><modifier>*</modifier></type> <name>idleInhibitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>wasFullscreen</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>serverSide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWdecorationWayland</name></type> <name>top</name></decl>, <name>left</name>, <name>right</name>, <name>bottom</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>focus</name></decl>;</decl_stmt>
}</block> <decl><name>decorations</name></decl>;</struct>

}</block></struct></type> <name>_GLFWwindowWayland</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_GLFWlibraryWayland</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name><modifier>*</modifier></type> <name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_registry</name></name><modifier>*</modifier></type> <name>registry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_compositor</name></name><modifier>*</modifier></type> <name>compositor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_subcompositor</name></name><modifier>*</modifier></type> <name>subcompositor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_shm</name></name><modifier>*</modifier></type> <name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_seat</name></name><modifier>*</modifier></type> <name>seat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_pointer</name></name><modifier>*</modifier></type> <name>pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_keyboard</name></name><modifier>*</modifier></type> <name>keyboard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_data_device_manager</name></name><modifier>*</modifier></type> <name>dataDeviceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_data_device</name></name><modifier>*</modifier></type> <name>dataDevice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_data_offer</name></name><modifier>*</modifier></type> <name>dataOffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_data_source</name></name><modifier>*</modifier></type> <name>dataSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xdg_wm_base</name></name><modifier>*</modifier></type> <name>wmBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zxdg_decoration_manager_v1</name></name><modifier>*</modifier></type> <name>decorationManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wp_viewporter</name></name><modifier>*</modifier></type> <name>viewporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_relative_pointer_manager_v1</name></name><modifier>*</modifier></type> <name>relativePointerManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_pointer_constraints_v1</name></name><modifier>*</modifier></type> <name>pointerConstraints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_idle_inhibit_manager_v1</name></name><modifier>*</modifier></type> <name>idleInhibitManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compositorVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seatVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_theme</name></name><modifier>*</modifier></type> <name>cursorTheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_theme</name></name><modifier>*</modifier></type> <name>cursorThemeHiDPI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>cursorSurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cursorPreviousName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cursorTimerfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>serial</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>keyboardRepeatRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>keyboardRepeatDelay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyboardLastKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyboardLastScancode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>clipboardString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clipboardSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>clipboardSendString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clipboardSendSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timerfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>keycodes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>scancodes</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_context</name></name><modifier>*</modifier></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_keymap</name></name><modifier>*</modifier></type> <name>keymap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_state</name></name><modifier>*</modifier></type> <name>state</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_compose_state</name></name><modifier>*</modifier></type> <name>composeState</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>xkb_mod_mask_t</name></type> <name>controlMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xkb_mod_mask_t</name></type> <name>altMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xkb_mod_mask_t</name></type> <name>shiftMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xkb_mod_mask_t</name></type> <name>superMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xkb_mod_mask_t</name></type> <name>capsLockMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xkb_mod_mask_t</name></type> <name>numLockMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_xkb_context_new</name></type> <name>context_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_context_unref</name></type> <name>context_unref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_keymap_new_from_string</name></type> <name>keymap_new_from_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_keymap_unref</name></type> <name>keymap_unref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_keymap_mod_get_index</name></type> <name>keymap_mod_get_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_keymap_key_repeats</name></type> <name>keymap_key_repeats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_state_new</name></type> <name>state_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_state_unref</name></type> <name>state_unref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_state_key_get_syms</name></type> <name>state_key_get_syms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_state_update_mask</name></type> <name>state_update_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_state_serialize_mods</name></type> <name>state_serialize_mods</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON_COMPOSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PFN_xkb_compose_table_new_from_locale</name></type> <name>compose_table_new_from_locale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_compose_table_unref</name></type> <name>compose_table_unref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_compose_state_new</name></type> <name>compose_state_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_compose_state_unref</name></type> <name>compose_state_unref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_compose_state_feed</name></type> <name>compose_state_feed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_compose_state_get_status</name></type> <name>compose_state_get_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_xkb_compose_state_get_one_sym</name></type> <name>compose_state_get_one_sym</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>xkb</name></decl>;</struct>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>pointerFocus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>keyboardFocus</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_wl_cursor_theme_load</name></type> <name>theme_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_wl_cursor_theme_destroy</name></type> <name>theme_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_wl_cursor_theme_get_cursor</name></type> <name>theme_get_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_wl_cursor_image_get_buffer</name></type> <name>image_get_buffer</name></decl>;</decl_stmt>
}</block> <decl><name>cursor</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFN_wl_egl_window_create</name></type> <name>window_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_wl_egl_window_destroy</name></type> <name>window_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_wl_egl_window_resize</name></type> <name>window_resize</name></decl>;</decl_stmt>
}</block> <decl><name>egl</name></decl>;</struct>

}</block></struct></type> <name>_GLFWlibraryWayland</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_GLFWmonitorWayland</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wl_output</name></name><modifier>*</modifier></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>currentMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWmonitorWayland</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_GLFWcursorWayland</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor</name></name><modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor</name></name><modifier>*</modifier></type> <name>cursorHiDPI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xhot</name></decl>, <name>yhot</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>currentImage</name></decl>;</decl_stmt>
}</block></struct></type> <name>_GLFWcursorWayland</name>;</typedef>


<function_decl><type><name>void</name></type> <name>_glfwAddOutputWayland</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
