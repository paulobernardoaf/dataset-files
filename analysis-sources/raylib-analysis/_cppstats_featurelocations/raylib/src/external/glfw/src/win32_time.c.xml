<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\win32_time.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>








<function><type><name>void</name></type> <name>_glfwInitTimerWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frequency</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>(</operator><name>LARGE_INTEGER</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>frequency</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>win32</name><operator>.</operator><name>hasPC</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>win32</name><operator>.</operator><name>frequency</name></name> <operator>=</operator> <name>frequency</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>win32</name><operator>.</operator><name>hasPC</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>win32</name><operator>.</operator><name>frequency</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>uint64_t</name></type> <name>_glfwPlatformGetTimerValue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>win32</name><operator>.</operator><name>hasPC</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>(</operator><name>LARGE_INTEGER</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>timeGetTime</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>_glfwPlatformGetTimerFrequency</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>win32</name><operator>.</operator><name>frequency</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
