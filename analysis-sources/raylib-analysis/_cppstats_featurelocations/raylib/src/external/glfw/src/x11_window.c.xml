<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\x11_window.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/cursorfont.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NET_WM_STATE_REMOVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NET_WM_STATE_ADD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NET_WM_STATE_TOGGLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Button6</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Button7</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MWM_HINTS_DECORATIONS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MWM_DECOR_ALL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_XDND_VERSION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>waitForEvent</name><parameter_list>(<parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name> <operator>&gt;</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>linjs</name><operator>.</operator><name>inotify</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>seconds</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>*</operator><name>timeout</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>microseconds</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>timeout</name> <operator>-</operator> <name>seconds</name><operator>)</operator> <operator>*</operator> <literal type="number">1e6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><name>seconds</name></expr>, <expr><name>microseconds</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>base</name> <init>= <expr><call><name>_glfwPlatformGetTimerValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>result</name> <init>= <expr><call><name>select</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>-=</operator> <operator>(</operator><call><name>_glfwPlatformGetTimerValue</name><argument_list>()</argument_list></call> <operator>-</operator> <name>base</name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>double</name><operator>)</operator> <call><name>_glfwPlatformGetTimerFrequency</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <name>EINTR</name><operator>)</operator> <operator>||</operator> <operator>*</operator><name>timeout</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>select</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>waitForVisibilityNotify</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>timeout</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>XCheckTypedWindowEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>VisibilityNotify</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>waitForEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>getWindowState</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>WithdrawnState</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>CARD32</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>icon</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_STATE</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_STATE</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>Bool</name></type> <name>isSelectionEvent</name><parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type> <name>display</name></decl></parameter>, <parameter><decl><type><name>XEvent</name><modifier>*</modifier></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>XPointer</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xany</name><operator>.</operator><name>window</name></name> <operator>!=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SelectionRequest</name> <operator>||</operator>
<name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SelectionNotify</name> <operator>||</operator>
<name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SelectionClear</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>Bool</name></type> <name>isFrameExtentsEvent</name><parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type> <name>display</name></decl></parameter>, <parameter><decl><type><name>XEvent</name><modifier>*</modifier></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>XPointer</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PropertyNotify</name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>PropertyNewValue</name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>window</name></name> <operator>==</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>atom</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_FRAME_EXTENTS</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>Bool</name></type> <name>isSelPropNewValueNotify</name><parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type> <name>display</name></decl></parameter>, <parameter><decl><type><name>XEvent</name><modifier>*</modifier></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>XPointer</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name><modifier>*</modifier></type> <name>notification</name> <init>= <expr><operator>(</operator><name>XEvent</name><operator>*</operator><operator>)</operator> <name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PropertyNotify</name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>PropertyNewValue</name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>window</name></name> <operator>==</operator> <name><name>notification</name><operator>-&gt;</operator><name>xselection</name><operator>.</operator><name>requestor</name></name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>atom</name></name> <operator>==</operator> <name><name>notification</name><operator>-&gt;</operator><name>xselection</name><operator>.</operator><name>property</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>translateState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mods</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>ShiftMask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>ControlMask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_CONTROL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>Mod1Mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>Mod4Mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_SUPER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>LockMask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_CAPS_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>Mod2Mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_NUM_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>mods</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>translateKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>scancode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>scancode</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_KEY_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>sendEventToWM</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Atom</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name> <init>= <expr><block>{ <expr><name>ClientMessage</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,
<argument><expr><name>False</name></expr></argument>,
<argument><expr><name>SubstructureNotifyMask</name> <operator>|</operator> <name>SubstructureRedirectMask</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>updateNormalHints</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XSizeHints</name><modifier>*</modifier></type> <name>hints</name> <init>= <expr><call><name>XAllocSizeHints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator>
<name><name>window</name><operator>-&gt;</operator><name>minheight</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PMinSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>minheight</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator>
<name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PMaxSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>numer</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator>
<name><name>window</name><operator>-&gt;</operator><name>denom</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PAspect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_aspect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>max_aspect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>numer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_aspect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>max_aspect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>denom</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>PMinSize</name> <operator>|</operator> <name>PMaxSize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PWinGravity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>win_gravity</name></name> <operator>=</operator> <name>StaticGravity</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMNormalHints</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>updateWindowMode</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_FULLSCREEN_MONITORS</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_FULLSCREEN_MONITORS</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_FULLSCREEN</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>_NET_WM_STATE_ADD</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_FULLSCREEN</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>








<decl_stmt><decl><type><name>XSetWindowAttributes</name></type> <name>attributes</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>attributes</name><operator>.</operator><name>override_redirect</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XChangeWindowAttributes</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>CWOverrideRedirect</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>overrideRedirect</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>transparent</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>value</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_BYPASS_COMPOSITOR</name></name></expr></argument>, <argument><expr><name>XA_CARDINAL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xinerama</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_FULLSCREEN_MONITORS</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XDeleteProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_FULLSCREEN_MONITORS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_FULLSCREEN</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>_NET_WM_STATE_REMOVE</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_FULLSCREEN</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>XSetWindowAttributes</name></type> <name>attributes</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>attributes</name><operator>.</operator><name>override_redirect</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XChangeWindowAttributes</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>CWOverrideRedirect</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>overrideRedirect</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>transparent</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XDeleteProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_BYPASS_COMPOSITOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>parseUriList</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>prefix</name> <init>= <expr><literal type="string">"file://"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>paths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>line</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><operator>*</operator><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paths</name><index>[<expr><operator>*</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>line</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>digits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>line</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <operator>*</operator><name>line</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<return>return <expr><name>paths</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type> <name>encodeUTF8</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x110000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>decodeUTF8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>offsets</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0x00000000u</literal></expr>, <expr><literal type="number">0x00003080u</literal></expr>, <expr><literal type="number">0x000e2080u</literal></expr>,
<expr><literal type="number">0x03c82080u</literal></expr>, <expr><literal type="number">0xfa082080u</literal></expr>, <expr><literal type="number">0x82082080u</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><operator>*</operator><operator>*</operator><name>s</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ch</name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>convertLatin1toUTF8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>source</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>sp</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tp</name> <init>= <expr><name>target</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>source</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>+=</operator> <call><name>encodeUTF8</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>updateCursorImage</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_NORMAL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XUndefineCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>hiddenCursorHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>enableRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XIEventMask</name></type> <name>em</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mask</name><index>[<expr><call><name>XIMaskLen</name><argument_list>(<argument><expr><name>XI_RawMotion</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>em</name><operator>.</operator><name>deviceid</name></name> <operator>=</operator> <name>XIAllMasterDevices</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>em</name><operator>.</operator><name>mask_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>em</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XISetMask</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>XI_RawMotion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XISelectEvents</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>em</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>disableRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XIEventMask</name></type> <name>em</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mask</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>em</name><operator>.</operator><name>deviceid</name></name> <operator>=</operator> <name>XIAllMasterDevices</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>em</name><operator>.</operator><name>mask_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>em</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XISelectEvents</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>em</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>disableCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>restoreCursorPosX</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>restoreCursorPosY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwCenterCursorInContentArea</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XGrabPointer</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
<argument><expr><name>ButtonPressMask</name> <operator>|</operator> <name>ButtonReleaseMask</name> <operator>|</operator> <name>PointerMotionMask</name></expr></argument>,
<argument><expr><name>GrabModeAsync</name></expr></argument>, <argument><expr><name>GrabModeAsync</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>hiddenCursorHandle</name></name></expr></argument>,
<argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>enableCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XUngrabPointer</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>restoreCursorPosX</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>restoreCursorPosY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>createNativeWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,
<parameter><decl><type><name>Visual</name><modifier>*</modifier></type> <name>visual</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>wndconfig</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>wndconfig</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>-&gt;</operator><name>scaleToMonitor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>*=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>*=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleY</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>colormap</name></name> <operator>=</operator> <call><name>XCreateColormap</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,
<argument><expr><name>visual</name></expr></argument>,
<argument><expr><name>AllocNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>transparent</name></name> <operator>=</operator> <call><name>_glfwIsVisualTransparentX11</name><argument_list>(<argument><expr><name>visual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XSetWindowAttributes</name></type> <name>wa</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wa</name><operator>.</operator><name>colormap</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>colormap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wa</name><operator>.</operator><name>event_mask</name></name> <operator>=</operator> <name>StructureNotifyMask</name> <operator>|</operator> <name>KeyPressMask</name> <operator>|</operator> <name>KeyReleaseMask</name> <operator>|</operator>
<name>PointerMotionMask</name> <operator>|</operator> <name>ButtonPressMask</name> <operator>|</operator> <name>ButtonReleaseMask</name> <operator>|</operator>
<name>ExposureMask</name> <operator>|</operator> <name>FocusChangeMask</name> <operator>|</operator> <name>VisibilityChangeMask</name> <operator>|</operator>
<name>EnterWindowMask</name> <operator>|</operator> <name>LeaveWindowMask</name> <operator>|</operator> <name>PropertyChangeMask</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwGrabErrorHandlerX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>XCreateWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>depth</name></expr></argument>, 
<argument><expr><name>InputOutput</name></expr></argument>,
<argument><expr><name>visual</name></expr></argument>,
<argument><expr><name>CWBorderPixel</name> <operator>|</operator> <name>CWColormap</name> <operator>|</operator> <name>CWEventMask</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwReleaseErrorHandlerX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorX11</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to create window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XSaveContext</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>context</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>XPointer</name><operator>)</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wndconfig</name><operator>-&gt;</operator><name>decorated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowDecorated</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name></type> <name><name>states</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>-&gt;</operator><name>floating</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>states</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>-&gt;</operator><name>maximized</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name> <operator>&amp;&amp;</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>states</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>states</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>maximized</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>states</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name></type> <name><name>protocols</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_DELETE_WINDOW</name></name></expr>,
<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_PING</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>protocols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>protocols</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Atom</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_PID</name></name></expr></argument>, <argument><expr><name>XA_CARDINAL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_TYPE</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_TYPE_NORMAL</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name></type> <name>type</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_TYPE_NORMAL</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_TYPE</name></name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>XWMHints</name><modifier>*</modifier></type> <name>hints</name> <init>= <expr><call><name>XAllocWMHints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hints</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_OUT_OF_MEMORY</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to allocate WM hints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>StateHint</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>initial_state</name></name> <operator>=</operator> <name>NormalState</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMHints</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>updateNormalHints</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>XClassHint</name><modifier>*</modifier></type> <name>hint</name> <init>= <expr><call><name>XAllocClassHint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>instanceName</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>instanceName</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_class</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>className</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>resourceName</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RESOURCE_NAME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>resourceName</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>resourceName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>resourceName</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="string">"glfw-application"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_class</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_class</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="string">"GLFW-Application"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XSetClassHint</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Atom</name></type> <name>version</name> <init>= <expr><name>_GLFW_XDND_VERSION</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndAware</name></name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>_glfwPlatformSetWindowTitle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name> <operator>=</operator> <call><name>XCreateIC</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr></argument>,
<argument><expr><name>XNInputStyle</name></expr></argument>,
<argument><expr><name>XIMPreeditNothing</name> <operator>|</operator> <name>XIMStatusNothing</name></expr></argument>,
<argument><expr><name>XNClientWindow</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>XNFocusWindow</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XGetICValues</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>, <argument><expr><name>XNFilterEvents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XSelectInput</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>wa</name><operator>.</operator><name>event_mask</name></name> <operator>|</operator> <name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetWindowPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>xpos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ypos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>Atom</name></type> <name>writeTargetToProperty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XSelectionRequestEvent</name><modifier>*</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>selectionString</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Atom</name></type> <name><name>formats</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>UTF8_STRING</name></name></expr>, <expr><name>XA_STRING</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>formatCount</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>selection</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>PRIMARY</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>selectionString</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>primarySelectionString</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>selectionString</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>clipboardString</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name> <operator>==</operator> <name>None</name></expr>)</condition>
<block>{<block_content>


<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>target</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>TARGETS</name></name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>Atom</name></type> <name><name>targets</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>TARGETS</name></name></expr>,
<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>MULTIPLE</name></name></expr>,
<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>UTF8_STRING</name></name></expr>,
<expr><name>XA_STRING</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr></argument>,
<argument><expr><name>XA_ATOM</name></expr></argument>,
<argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>targets</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>targets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>target</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>MULTIPLE</name></name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>ATOM_PAIR</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>formatCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>formats</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>formatCount</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>targets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>selectionString</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>selectionString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>targets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>ATOM_PAIR</name></name></expr></argument>,
<argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>targets</name></expr></argument>,
<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>target</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>SAVE_TARGETS</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NULL_</name></name></expr></argument>,
<argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>formatCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>target</name></name> <operator>==</operator> <name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>selectionString</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>selectionString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>request</name><operator>-&gt;</operator><name>property</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleSelectionClear</name><parameter_list>(<parameter><decl><type><name>XEvent</name><modifier>*</modifier></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xselectionclear</name><operator>.</operator><name>selection</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>PRIMARY</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>primarySelectionString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>primarySelectionString</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>clipboardString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>clipboardString</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleSelectionRequest</name><parameter_list>(<parameter><decl><type><name>XEvent</name><modifier>*</modifier></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>XSelectionRequestEvent</name><modifier>*</modifier></type> <name>request</name> <init>= <expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xselectionrequest</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>reply</name> <init>= <expr><block>{ <expr><name>SelectionNotify</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xselection</name><operator>.</operator><name>property</name></name> <operator>=</operator> <call><name>writeTargetToProperty</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xselection</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>display</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xselection</name><operator>.</operator><name>requestor</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xselection</name><operator>.</operator><name>selection</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>selection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xselection</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>target</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xselection</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getSelectionString</name><parameter_list>(<parameter><decl><type><name>Atom</name></type> <name>selection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>selectionString</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Atom</name></type> <name><name>targets</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>UTF8_STRING</name></name></expr>, <expr><name>XA_STRING</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>targetCount</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>targets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>selection</name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>PRIMARY</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>selectionString</name> <operator>=</operator> <operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>primarySelectionString</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>selectionString</name> <operator>=</operator> <operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>clipboardString</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>selection</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition>
<block>{<block_content>


<return>return <expr><operator>*</operator><name>selectionString</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>selectionString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>selectionString</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>targetCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>actualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>actualFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>itemCount</name></decl>, <decl><type ref="prev"/><name>bytesAfter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XEvent</name></type> <name>notification</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XConvertSelection</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name>selection</name></expr></argument>,
<argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>GLFW_SELECTION</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>,
<argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>XCheckTypedWindowEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>,
<argument><expr><name>SelectionNotify</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>notification</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>waitForEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>notification</name><operator>.</operator><name>xselection</name><operator>.</operator><name>property</name></name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XCheckIfEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>,
<argument><expr><name>isSelPropNewValueNotify</name></expr></argument>,
<argument><expr><operator>(</operator><name>XPointer</name><operator>)</operator> <operator>&amp;</operator><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>notification</name><operator>.</operator><name>xselection</name><operator>.</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>notification</name><operator>.</operator><name>xselection</name><operator>.</operator><name>property</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>LONG_MAX</name></expr></argument>,
<argument><expr><name>True</name></expr></argument>,
<argument><expr><name>AnyPropertyType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualFormat</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>itemCount</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytesAfter</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actualType</name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>INCR</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>XCheckIfEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>,
<argument><expr><name>isSelPropNewValueNotify</name></expr></argument>,
<argument><expr><operator>(</operator><name>XPointer</name><operator>)</operator> <operator>&amp;</operator><name>notification</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>waitForEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>notification</name><operator>.</operator><name>xselection</name><operator>.</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>notification</name><operator>.</operator><name>xselection</name><operator>.</operator><name>property</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>LONG_MAX</name></expr></argument>,
<argument><expr><name>True</name></expr></argument>,
<argument><expr><name>AnyPropertyType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualFormat</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>itemCount</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytesAfter</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>itemCount</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>itemCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>size</name> <operator>-</operator> <name>itemCount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>itemCount</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>XA_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>selectionString</name> <operator>=</operator> <call><name>convertLatin1toUTF8</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>selectionString</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>actualType</name> <operator>==</operator> <name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>XA_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>selectionString</name> <operator>=</operator> <call><name>convertLatin1toUTF8</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>selectionString</name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>selectionString</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>selectionString</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to convert selection to string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>*</operator><name>selectionString</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>acquireMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>XGetScreenSaver</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>timeout</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>interval</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>blanking</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>exposure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XSetScreenSaver</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DontPreferBlanking</name></expr></argument>,
<argument><expr><name>DefaultExposures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwSetVideoModeX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>videoMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>overrideRedirect</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>, <decl><type ref="prev"/><name>ypos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>mode</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>_glfwPlatformGetMonitorPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetVideoMode</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMoveResizeWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>, <argument><expr><name><name>mode</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitorWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>releaseMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitorWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwRestoreVideoModeX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>XSetScreenSaver</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>timeout</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>interval</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>blanking</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>saver</name><operator>.</operator><name>exposure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>processEvent</name><parameter_list>(<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keycode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bool</name></type> <name>filtered</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KeyPress</name> <operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KeyRelease</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keycode</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>keycode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>im</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filtered</name> <operator>=</operator> <call><name>XFilterEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>randr</name><operator>.</operator><name>eventBase</name></name> <operator>+</operator> <name>RRNotify</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XRRUpdateConfiguration</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPollMonitorsX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>eventBase</name></name> <operator>+</operator> <name>XkbEventCode</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>XkbEvent</name><operator>*</operator><operator>)</operator> <name>event</name><operator>)</operator><operator>-&gt;</operator><name><name>any</name><operator>.</operator><name>xkb_type</name></name> <operator>==</operator> <name>XkbStateNotify</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>XkbEvent</name><operator>*</operator><operator>)</operator> <name>event</name><operator>)</operator><operator>-&gt;</operator><name><name>state</name><operator>.</operator><name>changed</name></name> <operator>&amp;</operator> <name>XkbGroupStateMask</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>group</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>XkbEvent</name><operator>*</operator><operator>)</operator> <name>event</name><operator>)</operator><operator>-&gt;</operator><name><name>state</name><operator>.</operator><name>group</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GenericEvent</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&amp;&amp;</operator>
<name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xcookie</name><operator>.</operator><name>extension</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>majorOpcode</name></name> <operator>&amp;&amp;</operator>
<call><name>XGetEventData</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xcookie</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>xcookie</name><operator>.</operator><name>evtype</name></name> <operator>==</operator> <name>XI_RawMotion</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XIRawEvent</name><modifier>*</modifier></type> <name>re</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xcookie</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>valuators</name><operator>.</operator><name>mask_len</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>values</name> <init>= <expr><name><name>re</name><operator>-&gt;</operator><name>raw_values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xpos</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ypos</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XIMaskIsSet</name><argument_list>(<argument><expr><name><name>re</name><operator>-&gt;</operator><name>valuators</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xpos</name> <operator>+=</operator> <operator>*</operator><name>values</name></expr>;</expr_stmt>
<expr_stmt><expr><name>values</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XIMaskIsSet</name><argument_list>(<argument><expr><name><name>re</name><operator>-&gt;</operator><name>valuators</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ypos</name> <operator>+=</operator> <operator>*</operator><name>values</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFreeEventData</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xcookie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SelectionClear</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>handleSelectionClear</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SelectionRequest</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>handleSelectionRequest</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XFindContext</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xany</name><operator>.</operator><name>window</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>context</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>XPointer</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>window</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ReparentNotify</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xreparent</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>KeyPress</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name> <init>= <expr><call><name>translateKey</name><argument_list>(<argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mods</name> <init>= <expr><call><name>translateState</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plain</name> <init>= <expr><operator>!</operator><operator>(</operator><name>mods</name> <operator>&amp;</operator> <operator>(</operator><name>GLFW_MOD_CONTROL</name> <operator>|</operator> <name>GLFW_MOD_ALT</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastKeyTime</name></name> <operator>&lt;</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>time</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>keycode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>, <argument><expr><name>GLFW_PRESS</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastKeyTime</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filtered</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Status</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>chars</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>Xutf8LookupString</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XBufferOverflow</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chars</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>Xutf8LookupString</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name></expr></argument>,
<argument><expr><name>chars</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XLookupChars</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>XLookupBoth</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><name>chars</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>chars</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>c</name> <operator>-</operator> <name>chars</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputChar</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><call><name>decodeUTF8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>chars</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>XwcLookupString</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XBufferOverflow</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chars</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>XwcLookupString</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name></expr></argument>,
<argument><expr><name>chars</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XLookupChars</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>XLookupBoth</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputChar</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>chars</name> <operator>!=</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>KeySym</name></type> <name>keysym</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XLookupString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keysym</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>, <argument><expr><name>GLFW_PRESS</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>character</name> <init>= <expr><call><name>_glfwKeySym2Unicode</name><argument_list>(<argument><expr><name>keysym</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>character</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputChar</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>character</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>KeyRelease</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name> <init>= <expr><call><name>translateKey</name><argument_list>(<argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mods</name> <init>= <expr><call><name>translateState</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>detectable</name></name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>XEventsQueued</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>QueuedAfterReading</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XPeekEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>KeyPress</name> <operator>&amp;&amp;</operator>
<name><name>next</name><operator>.</operator><name>xkey</name><operator>.</operator><name>window</name></name> <operator>==</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>window</name></name> <operator>&amp;&amp;</operator>
<name><name>next</name><operator>.</operator><name>xkey</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>keycode</name></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>next</name><operator>.</operator><name>xkey</name><operator>.</operator><name>time</name></name> <operator>-</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>time</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition>
<block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>, <argument><expr><name>GLFW_RELEASE</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>ButtonPress</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mods</name> <init>= <expr><call><name>translateState</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_MOUSE_BUTTON_LEFT</name></expr></argument>, <argument><expr><name>GLFW_PRESS</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_MOUSE_BUTTON_MIDDLE</name></expr></argument>, <argument><expr><name>GLFW_PRESS</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_MOUSE_BUTTON_RIGHT</name></expr></argument>, <argument><expr><name>GLFW_PRESS</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputScroll</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button5</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputScroll</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputScroll</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button7</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputScroll</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>-</operator> <name>Button1</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>GLFW_PRESS</name></expr></argument>,
<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>ButtonRelease</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mods</name> <init>= <expr><call><name>translateState</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button1</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name>GLFW_MOUSE_BUTTON_LEFT</name></expr></argument>,
<argument><expr><name>GLFW_RELEASE</name></expr></argument>,
<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name>GLFW_MOUSE_BUTTON_MIDDLE</name></expr></argument>,
<argument><expr><name>GLFW_RELEASE</name></expr></argument>,
<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button3</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name>GLFW_MOUSE_BUTTON_RIGHT</name></expr></argument>,
<argument><expr><name>GLFW_RELEASE</name></expr></argument>,
<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>&gt;</operator> <name>Button7</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>-</operator> <name>Button1</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>GLFW_RELEASE</name></expr></argument>,
<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>EnterNotify</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xcrossing</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xcrossing</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorEnter</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosY</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>LeaveNotify</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputCursorEnter</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>MotionNotify</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>warpCursorPosX</name></name> <operator>||</operator>
<name>y</name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>warpCursorPosY</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dx</name> <init>= <expr><name>x</name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosX</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dy</name> <init>= <expr><name>y</name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosY</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name> <operator>+</operator> <name>dx</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name> <operator>+</operator> <name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosY</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>ConfigureNotify</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>width</name></name> <operator>||</operator>
<name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputFramebufferSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xpos</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ypos</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>xany</name><operator>.</operator><name>send_event</name></name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>parent</name></name> <operator>!=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>dummy</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XTranslateCoordinates</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>parent</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,
<argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ypos</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>xpos</name></name> <operator>||</operator> <name>ypos</name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ypos</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputWindowPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>xpos</name></name> <operator>=</operator> <name>xpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ypos</name></name> <operator>=</operator> <name>ypos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>ClientMessage</name></expr>:</case>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>filtered</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_PROTOCOLS</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Atom</name></type> <name>protocol</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_DELETE_WINDOW</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>_glfwInputWindowCloseRequest</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>protocol</name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_PING</name></name></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>XEvent</name></type> <name>reply</name> <init>= <expr><operator>*</operator><name>event</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,
<argument><expr><name>False</name></expr></argument>,
<argument><expr><name>SubstructureNotifyMask</name> <operator>|</operator> <name>SubstructureRedirectMask</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndEnter</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWbool</name></type> <name>list</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name>_GLFW_XDND_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndTypeList</name></name></expr></argument>,
<argument><expr><name>XA_ATOM</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>formats</name> <operator>=</operator> <operator>(</operator><name>Atom</name><operator>*</operator><operator>)</operator> <name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>text_uri_list</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>text_uri_list</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndDrop</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>Time</name></type> <name>time</name> <init>= <expr><name>CurrentTime</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name>_GLFW_XDND_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>format</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>time</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>XConvertSelection</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndSelection</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>format</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndSelection</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>reply</name> <init>= <expr><block>{ <expr><name>ClientMessage</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndFinished</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name></expr></argument>,
<argument><expr><name>False</name></expr></argument>, <argument><expr><name>NoEventMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndPosition</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xabs</name> <init>= <expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yabs</name> <init>= <expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>, <decl><type ref="prev"/><name>ypos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name>_GLFW_XDND_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XTranslateCoordinates</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>xabs</name></expr></argument>, <argument><expr><name>yabs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ypos</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>reply</name> <init>= <expr><block>{ <expr><name>ClientMessage</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndStatus</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>format</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndActionCopy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name></expr></argument>,
<argument><expr><name>False</name></expr></argument>, <argument><expr><name>NoEventMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>SelectionNotify</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xselection</name><operator>.</operator><name>property</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndSelection</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>result</name> <init>=
<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xselection</name><operator>.</operator><name>requestor</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xselection</name><operator>.</operator><name>property</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xselection</name><operator>.</operator><name>target</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>paths</name> <init>= <expr><call><name>parseUriList</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwInputDrop</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>reply</name> <init>= <expr><block>{ <expr><name>ClientMessage</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndFinished</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>XdndActionCopy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xdnd</name><operator>.</operator><name>source</name></name></expr></argument>,
<argument><expr><name>False</name></expr></argument>, <argument><expr><name>NoEventMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>FocusIn</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xfocus</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NotifyGrab</name> <operator>||</operator>
<name><name>event</name><operator>-&gt;</operator><name>xfocus</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NotifyUngrab</name></expr>)</condition>
<block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XSetICFocus</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>FocusOut</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xfocus</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NotifyGrab</name> <operator>||</operator>
<name><name>event</name><operator>-&gt;</operator><name>xfocus</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NotifyUngrab</name></expr>)</condition>
<block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XUnsetICFocus</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>autoIconify</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformIconifyWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>Expose</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputWindowDamage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>

<case>case <expr><name>PropertyNotify</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>PropertyNewValue</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>atom</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>WM_STATE</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>state</name> <init>= <expr><call><name>getWindowState</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>IconicState</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>NormalState</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWbool</name></type> <name>iconified</name> <init>= <expr><operator>(</operator><name>state</name> <operator>==</operator> <name>IconicState</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>iconified</name></name> <operator>!=</operator> <name>iconified</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iconified</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>iconified</name></name> <operator>=</operator> <name>iconified</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowIconify</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>iconified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>atom</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWbool</name></type> <name>maximized</name> <init>= <expr><call><name>_glfwPlatformWindowMaximized</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>maximized</name></name> <operator>!=</operator> <name>maximized</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>maximized</name></name> <operator>=</operator> <name>maximized</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowMaximize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>maximized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block>

<case>case <expr><name>DestroyNotify</name></expr>:</case>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>









<function><type><name>unsigned</name> <name>long</name></type> <name>_glfwGetWindowPropertyX11</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>Atom</name></type> <name>property</name></decl></parameter>,
<parameter><decl><type><name>Atom</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name></type> <name>actualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>actualFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>itemCount</name></decl>, <decl><type ref="prev"/><name>bytesAfter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name>window</name></expr></argument>,
<argument><expr><name>property</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>LONG_MAX</name></expr></argument>,
<argument><expr><name>False</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualFormat</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>itemCount</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytesAfter</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>itemCount</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwIsVisualTransparentX11</name><parameter_list>(<parameter><decl><type><name>Visual</name><modifier>*</modifier></type> <name>visual</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xrender</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>XRenderPictFormat</name><modifier>*</modifier></type> <name>pf</name> <init>= <expr><call><name>XRenderFindVisualFormat</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>visual</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>pf</name> <operator>&amp;&amp;</operator> <name><name>pf</name><operator>-&gt;</operator><name>direct</name><operator>.</operator><name>alphaMask</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwPushSelectionToManagerX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XConvertSelection</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>CLIPBOARD_MANAGER</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>SAVE_TARGETS</name></name></expr></argument>,
<argument><expr><name>None</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>,
<argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>XCheckIfEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>isSelectionEvent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SelectionRequest</name></expr>:</case>
<expr_stmt><expr><call><name>handleSelectionRequest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SelectionClear</name></expr>:</case>
<expr_stmt><expr><call><name>handleSelectionClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SelectionNotify</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>xselection</name><operator>.</operator><name>target</name></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>SAVE_TARGETS</name></name></expr>)</condition>
<block>{<block_content>





<return>return;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>waitForEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_glfwPlatformCreateWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Visual</name><modifier>*</modifier></type> <name>visual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_NATIVE_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitGLX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwChooseVisualGLX</name><argument_list>(<argument><expr><name>wndconfig</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_EGL_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitEGL</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwChooseVisualEGL</name><argument_list>(<argument><expr><name>wndconfig</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_OSMESA_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitOSMesa</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>GLFW_NO_API</name> <operator>||</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_OSMESA_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>visual</name> <operator>=</operator> <call><name>DefaultVisual</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>DefaultDepth</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>createNativeWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>wndconfig</name></expr></argument>, <argument><expr><name>visual</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_NATIVE_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextGLX</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_EGL_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextEGL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_OSMESA_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextOSMesa</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformShowWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateWindowMode</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XDestroyIC</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>ic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XDeleteContext</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XUnmapWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XDestroyWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>Window</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>colormap</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XFreeColormap</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>colormap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>colormap</name></name> <operator>=</operator> <operator>(</operator><name>Colormap</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowTitle</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Xutf8SetWMProperties</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>title</name></expr></argument>, <argument><expr><name>title</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<expr_stmt><expr><call><name>XmbSetWMProperties</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>title</name></expr></argument>, <argument><expr><name>title</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_NAME</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>UTF8_STRING</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>title</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_ICON_NAME</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>UTF8_STRING</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>title</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowIcon</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>images</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>longCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>longCount</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>*</operator> <name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>long</name><modifier>*</modifier></type> <name>icon</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>longCount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><name>icon</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>target</name><operator>++</operator> <operator>=</operator> <name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>target</name><operator>++</operator> <operator>=</operator> <name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>*</operator> <name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>target</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_ICON</name></name></expr></argument>,
<argument><expr><name>XA_CARDINAL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>icon</name></expr></argument>,
<argument><expr><name>longCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XDeleteProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_ICON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XTranslateCoordinates</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>supplied</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XSizeHints</name><modifier>*</modifier></type> <name>hints</name> <init>= <expr><call><name>XAllocSizeHints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetWMNormalHints</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>supplied</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PPosition</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMNormalHints</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XMoveWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>attribs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>attribs</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>attribs</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateNormalHints</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XResizeWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowSizeLimits</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>minwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minheight</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxheight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateNormalHints</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateNormalHints</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetFramebufferSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowFrameSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name><modifier>*</modifier></type> <name>extents</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>||</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_FRAME_EXTENTS</name></name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_REQUEST_FRAME_EXTENTS</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>timeout</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_REQUEST_FRAME_EXTENTS</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<while>while <condition>(<expr><operator>!</operator><call><name>XCheckIfEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>,
<argument><expr><name>isFrameExtentsEvent</name></expr></argument>,
<argument><expr><operator>(</operator><name>XPointer</name><operator>)</operator> <name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>waitForEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: The window manager has a broken _NET_REQUEST_FRAME_EXTENTS implementation; please report this issue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_FRAME_EXTENTS</name></name></expr></argument>,
<argument><expr><name>XA_CARDINAL</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>extents</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name><name>extents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <name><name>extents</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name><name>extents</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bottom</name> <operator>=</operator> <name><name>extents</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extents</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>extents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleX</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>contentScaleY</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformIconifyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>overrideRedirect</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Iconification of full screen windows requires a WM that supports EWMH full screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XIconifyWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformRestoreWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>overrideRedirect</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Iconification of full screen windows requires a WM that supports EWMH full screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwPlatformWindowIconified</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XMapWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waitForVisibilityNotify</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>&amp;&amp;</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name> <operator>&amp;&amp;</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>_NET_WM_STATE_REMOVE</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformMaximizeWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>||</operator>
<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name> <operator>||</operator>
<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>_NET_WM_STATE_ADD</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>states</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name> <init>=
<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>XA_ATOM</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>states</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Atom</name></type> <name><name>missing</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name></expr>,
<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>missingCount</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>missingCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>states</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>missing</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>missing</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>missing</name><index>[<expr><name>missingCount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>missingCount</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>states</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missingCount</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeAppend</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>missing</name></expr></argument>,
<argument><expr><name>missingCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformShowWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XMapWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waitForVisibilityNotify</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformHideWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XUnmapWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformRequestWindowAttention</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>||</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_DEMANDS_ATTENTION</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>_NET_WM_STATE_ADD</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_DEMANDS_ATTENTION</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformFocusWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_ACTIVE_WINDOW</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_ACTIVE_WINDOW</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XRaiseWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetInputFocus</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>RevertToParent</name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refreshRate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>==</operator> <name>monitor</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monitor</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateNormalHints</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XMoveResizeWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateNormalHints</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XMapRaised</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waitForVisibilityNotify</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>updateWindowMode</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>updateWindowMode</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMoveResizeWindow</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowFocused</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>focused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XGetInputFocus</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>focused</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name>focused</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowIconified</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>getWindowState</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>IconicState</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowVisible</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>wa</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>wa</name><operator>.</operator><name>map_state</name></name> <operator>==</operator> <name>IsViewable</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowMaximized</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>states</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>maximized</name> <init>= <expr><name>GLFW_FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>||</operator>
<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name> <operator>||</operator>
<operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>maximized</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>count</name> <init>=
<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>XA_ATOM</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>states</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>states</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_VERT</name></name> <operator>||</operator>
<name><name>states</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_MAXIMIZED_HORZ</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>maximized</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>states</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>maximized</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowHovered</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>w</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>w</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rootX</name></decl>, <decl><type ref="prev"/><name>rootY</name></decl>, <decl><type ref="prev"/><name>childX</name></decl>, <decl><type ref="prev"/><name>childY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XQueryPointer</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>childX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>childY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformFramebufferTransparent</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>transparent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_CM_Sx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>None</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowResizable</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateNormalHints</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowDecorated</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>functions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>decorations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>input_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>status</name></decl>;</decl_stmt>
}</block> <decl><name>hints</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>MWM_HINTS_DECORATIONS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>decorations</name></name> <operator>=</operator> <ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><name>MWM_DECOR_ALL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>MOTIF_WM_HINTS</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>MOTIF_WM_HINTS</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>hints</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowFloating</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name> <operator>||</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwPlatformWindowVisible</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>action</name> <init>= <expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><name>_NET_WM_STATE_ADD</name></expr> </then><else>: <expr><name>_NET_WM_STATE_REMOVE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sendEventToWM</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>action</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name><modifier>*</modifier></type> <name>states</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>,
<argument><expr><name>XA_ATOM</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>states</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeAppend</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>states</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>states</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE_ABOVE</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>states</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>states</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_STATE</name></name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>states</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>states</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>_glfwPlatformGetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>opacity</name> <init>= <expr><literal type="number">1.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_CM_Sx</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CARD32</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwGetWindowPropertyX11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_OPACITY</name></name></expr></argument>,
<argument><expr><name>XA_CARDINAL</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>opacity</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>value</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0xffffffffu</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>opacity</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CARD32</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>CARD32</name><operator>)</operator> <operator>(</operator><literal type="number">0xffffffffu</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>opacity</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NET_WM_WINDOW_OPACITY</name></name></expr></argument>, <argument><expr><name>XA_CARDINAL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwPlatformRawMouseMotionSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xi</name><operator>.</operator><name>available</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformPollEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_glfwDetectJoystickConnectionLinux</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>XPending</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>XQLength</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XNextEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>processEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosX</name></name> <operator>!=</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>lastCursorPosY</name></name> <operator>!=</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformWaitEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>XPending</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waitForEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>_glfwPlatformPollEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformWaitEventsTimeout</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>XPending</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>waitForEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>_glfwPlatformPollEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformPostEmptyEvent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name> <init>= <expr><block>{ <expr><name>ClientMessage</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>NULL_</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rootX</name></decl>, <decl><type ref="prev"/><name>rootY</name></decl>, <decl><type ref="prev"/><name>childX</name></decl>, <decl><type ref="prev"/><name>childY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XQueryPointer</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rootX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>childX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>childY</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name>childX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name>childY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>warpCursorPosX</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>warpCursorPosY</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XWarpPointer</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursorMode</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_glfwPlatformWindowFocused</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetScancodeName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scancode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>scancode</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xff</literal> <operator>||</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>==</operator> <name>GLFW_KEY_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Invalid scancode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>KeySym</name></type> <name>keysym</name> <init>= <expr><call><name>XkbKeycodeToKeysym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name>scancode</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xkb</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>keysym</name> <operator>==</operator> <name>NoSymbol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>ch</name> <init>= <expr><call><name>_glfwKeySym2Unicode</name><argument_list>(<argument><expr><name>keysym</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>count</name> <init>= <expr><call><name>encodeUTF8</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keynames</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keynames</name><index>[<expr><name>key</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>keynames</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformGetKeyScancode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>scancodes</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformCreateCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfwCreateCursorX11</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>xhot</name></expr></argument>, <argument><expr><name>yhot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformCreateStandardCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>xcursor</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>theme</name> <init>= <expr><call><name>XcursorGetTheme</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>theme</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name>XcursorGetDefaultSize</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_ARROW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_IBEAM_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_CROSSHAIR_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"crosshair"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_POINTING_HAND_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"pointer"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_EW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"ew-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NS_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"ns-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NWSE_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"nwse-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NESW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"nesw-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_ALL_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"all-scroll"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_NOT_ALLOWED_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"not-allowed"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>XcursorImage</name><modifier>*</modifier></type> <name>image</name> <init>= <expr><call><name>XcursorLibraryLoadImage</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>theme</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>image</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>XcursorImageLoadCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XcursorImageDestroy</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>native</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_ARROW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native</name> <operator>=</operator> <name>XC_left_ptr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_IBEAM_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native</name> <operator>=</operator> <name>XC_xterm</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_CROSSHAIR_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native</name> <operator>=</operator> <name>XC_crosshair</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_POINTING_HAND_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native</name> <operator>=</operator> <name>XC_hand2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_EW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native</name> <operator>=</operator> <name>XC_sb_h_double_arrow</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NS_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native</name> <operator>=</operator> <name>XC_sb_v_double_arrow</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_ALL_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native</name> <operator>=</operator> <name>XC_fleur</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_CURSOR_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"X11: Standard cursor shape unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>XCreateFontCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to create standard cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFreeCursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_NORMAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetClipboardString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>clipboardString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>clipboardString</name></name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>CLIPBOARD</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>,
<argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>CLIPBOARD</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to become owner of clipboard selection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetClipboardString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>getSelectionString</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>CLIPBOARD</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetRequiredInstanceExtensions</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>extensions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_xcb_surface</name></name> <operator>||</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_xlib_surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>extensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"VK_KHR_surface"</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_xcb_surface</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>extensions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"VK_KHR_xcb_surface"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>extensions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"VK_KHR_xlib_surface"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformGetPhysicalDevicePresentationSupport</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>queuefamily</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VisualID</name></type> <name>visualID</name> <init>= <expr><call><name>XVisualIDFromVisual</name><argument_list>(<argument><expr><call><name>DefaultVisual</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_xcb_surface</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR</name></type>
<name>vkGetPhysicalDeviceXcbPresentationSupportKHR</name> <init>=
<expr><operator>(</operator><name>PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkGetPhysicalDeviceXcbPresentationSupportKHR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkGetPhysicalDeviceXcbPresentationSupportKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"X11: Vulkan instance missing VK_KHR_xcb_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name><modifier>*</modifier></type> <name>connection</name> <init>= <expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>connection</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to retrieve XCB connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vkGetPhysicalDeviceXcbPresentationSupportKHR</name><argument_list>(<argument><expr><name>device</name></expr></argument>,
<argument><expr><name>queuefamily</name></expr></argument>,
<argument><expr><name>connection</name></expr></argument>,
<argument><expr><name>visualID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR</name></type>
<name>vkGetPhysicalDeviceXlibPresentationSupportKHR</name> <init>=
<expr><operator>(</operator><name>PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkGetPhysicalDeviceXlibPresentationSupportKHR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkGetPhysicalDeviceXlibPresentationSupportKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"X11: Vulkan instance missing VK_KHR_xlib_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vkGetPhysicalDeviceXlibPresentationSupportKHR</name><argument_list>(<argument><expr><name>device</name></expr></argument>,
<argument><expr><name>queuefamily</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name>visualID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VkResult</name></type> <name>_glfwPlatformCreateWindowSurface</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type> <name>allocator</name></decl></parameter>,
<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_xcb_surface</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>x11xcb</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>VkResult</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkXcbSurfaceCreateInfoKHR</name></type> <name>sci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateXcbSurfaceKHR</name></type> <name>vkCreateXcbSurfaceKHR</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name><modifier>*</modifier></type> <name>connection</name> <init>= <expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>connection</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to retrieve XCB connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vkCreateXcbSurfaceKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateXcbSurfaceKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkCreateXcbSurfaceKHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkCreateXcbSurfaceKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"X11: Vulkan instance missing VK_KHR_xcb_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>connection</name></name> <operator>=</operator> <name>connection</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vkCreateXcbSurfaceKHR</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to create Vulkan XCB surface: %s"</literal></expr></argument>,
<argument><expr><call><name>_glfwGetVulkanResultString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>VkResult</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkXlibSurfaceCreateInfoKHR</name></type> <name>sci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateXlibSurfaceKHR</name></type> <name>vkCreateXlibSurfaceKHR</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vkCreateXlibSurfaceKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateXlibSurfaceKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkCreateXlibSurfaceKHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkCreateXlibSurfaceKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"X11: Vulkan instance missing VK_KHR_xlib_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>dpy</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vkCreateXlibSurfaceKHR</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to create Vulkan X11 surface: %s"</literal></expr></argument>,
<argument><expr><call><name>_glfwGetVulkanResultString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name>Display</name><modifier>*</modifier></type> <name>glfwGetX11Display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>Window</name></type> <name>glfwGetX11Window</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>x11</name><operator>.</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwSetX11SelectionString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>primarySelectionString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>primarySelectionString</name></name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>PRIMARY</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>,
<argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>PRIMARY</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>helperWindowHandle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"X11: Failed to become owner of primary selection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetX11SelectionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>getSelectionString</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>x11</name><operator>.</operator><name>PRIMARY</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
