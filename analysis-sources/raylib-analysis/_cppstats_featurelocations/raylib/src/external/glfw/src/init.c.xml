<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\init.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mappings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>








<decl_stmt><decl><type><name>_GLFWlibrary</name></type> <name>_glfw</name> <init>= <expr><block>{ <expr><name>GLFW_FALSE</name></expr> }</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>_GLFWerror</name></type> <name>_glfwMainThreadError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GLFWerrorfun</name></type> <name>_glfwErrorCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>_GLFWinitconfig</name></type> <name>_glfwInitHints</name> <init>=
<expr><block>{
<expr><name>GLFW_TRUE</name></expr>, 
<expr><block>{
<expr><name>GLFW_TRUE</name></expr>, 
<expr><name>GLFW_TRUE</name></expr> 
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type> <name>terminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>callbacks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>callbacks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glfwDestroyWindow</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWwindow</name><operator>*</operator><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>cursorListHead</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glfwDestroyCursor</name><argument_list>(<argument><expr><operator>(</operator><name>GLFWcursor</name><operator>*</operator><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>cursorListHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>monitors</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>originalRamp</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetGammaRamp</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>monitor</name><operator>-&gt;</operator><name>originalRamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_glfwFreeMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>mappings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>mappings</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>mappingCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateVulkan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformTerminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>initialized</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>errorListHead</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWerror</name><modifier>*</modifier></type> <name>error</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>errorListHead</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>errorListHead</name></name> <operator>=</operator> <name><name>error</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>_glfwPlatformDestroyTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformDestroyTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformDestroyMutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_glfw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_glfw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>char</name><modifier>*</modifier></type> <name>_glfw_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>_glfw_fminf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b</name> <operator>!=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>_glfw_fmaxf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b</name> <operator>!=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>_glfwInputError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWerror</name><modifier>*</modifier></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>description</name><index>[<expr><name>_GLFW_MESSAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>description</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_NOT_INITIALIZED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"The GLFW library is not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_NO_CURRENT_CONTEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"There is no current context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_INVALID_ENUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"Invalid argument for enum parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_INVALID_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_API_UNAVAILABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"The requested API is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_VERSION_UNAVAILABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"The requested API version is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_PLATFORM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"A platform-specific error occurred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_FORMAT_UNAVAILABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"The requested format is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_NO_WINDOW_CONTEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"The specified window has no context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>GLFW_CURSOR_UNAVAILABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"The specified cursor shape is unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="string">"ERROR: UNKNOWN GLFW ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>initialized</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWerror</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorSlot</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformLockMutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>errorListHead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>errorListHead</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformUnlockMutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>&amp;</operator><name>_glfwMainThreadError</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>description</name></name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_glfwErrorCallback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwErrorCallback</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_glfw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_glfw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>hints</name><operator>.</operator><name>init</name></name> <operator>=</operator> <name>_glfwInitHints</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformInit</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwPlatformCreateMutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorLock</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>_glfwPlatformCreateTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorSlot</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>_glfwPlatformCreateTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>contextSlot</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwPlatformSetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorSlot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_glfwMainThreadError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>initialized</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>timer</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>_glfwPlatformGetTimerValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwDefaultWindowHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>_glfwDefaultMappings</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glfwUpdateGamepadMappings</name><argument_list>(<argument><expr><name><name>_glfwDefaultMappings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwTerminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwInitHint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>hint</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GLFW_JOYSTICK_HAT_BUTTONS</name></expr>:</case>
<expr_stmt><expr><name><name>_glfwInitHints</name><operator>.</operator><name>hatButtons</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_COCOA_CHDIR_RESOURCES</name></expr>:</case>
<expr_stmt><expr><name><name>_glfwInitHints</name><operator>.</operator><name>ns</name><operator>.</operator><name>chdir</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>GLFW_COCOA_MENUBAR</name></expr>:</case>
<expr_stmt><expr><name><name>_glfwInitHints</name><operator>.</operator><name>ns</name><operator>.</operator><name>menubar</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_ENUM</name></expr></argument>,
<argument><expr><literal type="string">"Invalid init hint 0x%08X"</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>void</name></type> <name>glfwGetVersion</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>major</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>major</name> <operator>=</operator> <name>GLFW_VERSION_MAJOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>minor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>minor</name> <operator>=</operator> <name>GLFW_VERSION_MINOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rev</name> <operator>=</operator> <name>GLFW_VERSION_REVISION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetVersionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_glfwPlatformGetVersionString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWerror</name><modifier>*</modifier></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>GLFW_NO_ERROR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>description</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>description</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>_glfwPlatformGetTls</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>errorSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>&amp;</operator><name>_glfwMainThreadError</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>error</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>GLFW_NO_ERROR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>description</name> <operator>&amp;&amp;</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>description</name> <operator>=</operator> <name><name>error</name><operator>-&gt;</operator><name>description</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWerrorfun</name></type> <name>glfwSetErrorCallback</name><parameter_list>(<parameter><decl><type><name>GLFWerrorfun</name></type> <name>cbfun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_SWAP_POINTERS</name><argument_list>(<argument><expr><name>_glfwErrorCallback</name></expr></argument>, <argument><expr><name>cbfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbfun</name></expr>;</return>
</block_content>}</block></function>

</unit>
