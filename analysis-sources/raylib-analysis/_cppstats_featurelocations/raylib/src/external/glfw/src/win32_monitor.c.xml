<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\win32_monitor.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>monitorCallback</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>,
<parameter><decl><type><name>RECT</name><modifier>*</modifier></type> <name>rect</name></decl></parameter>,
<parameter><decl><type><name>LPARAM</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MONITORINFOEXW</name></type> <name>mi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetMonitorInfoW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>MONITORINFO</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name><name>mi</name><operator>.</operator><name>szDevice</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>_GLFWmonitor</name><modifier>*</modifier></type> <name>createMonitor</name><parameter_list>(<parameter><decl><type><name>DISPLAY_DEVICEW</name><modifier>*</modifier></type> <name>adapter</name></decl></parameter>,
<parameter><decl><type><name>DISPLAY_DEVICEW</name><modifier>*</modifier></type> <name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>widthMM</name></decl>, <decl><type ref="prev"/><name>heightMM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DEVMODEW</name></type> <name>dm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>_glfwCreateUTF8FromWideStringWin32</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>DeviceString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>_glfwCreateUTF8FromWideStringWin32</name><argument_list>(<argument><expr><name><name>adapter</name><operator>-&gt;</operator><name>DeviceString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnumDisplaySettingsW</name><argument_list>(<argument><expr><name><name>adapter</name><operator>-&gt;</operator><name>DeviceName</name></name></expr></argument>, <argument><expr><name>ENUM_CURRENT_SETTINGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>CreateDCW</name><argument_list>(<argument><expr><literal type="string">L"DISPLAY"</literal></expr></argument>, <argument><expr><name><name>adapter</name><operator>-&gt;</operator><name>DeviceName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsWindows8Point1OrGreater</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>widthMM</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>HORZSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>heightMM</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>VERTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>widthMM</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name> <operator>*</operator> <literal type="number">25.4f</literal> <operator>/</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>LOGPIXELSX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>heightMM</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name> <operator>*</operator> <literal type="number">25.4f</literal> <operator>/</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>LOGPIXELSY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>monitor</name> <operator>=</operator> <call><name>_glfwAllocMonitor</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>widthMM</name></expr></argument>, <argument><expr><name>heightMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>adapter</name><operator>-&gt;</operator><name>StateFlags</name></name> <operator>&amp;</operator> <name>DISPLAY_DEVICE_MODESPRUNED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>modesPruned</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>, <argument><expr><name><name>adapter</name><operator>-&gt;</operator><name>DeviceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>adapter</name><operator>-&gt;</operator><name>DeviceName</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>publicAdapterName</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>publicAdapterName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>displayName</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>DeviceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>display</name><operator>-&gt;</operator><name>DeviceName</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>publicDisplayName</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>publicDisplayName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumDisplayMonitors</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>monitorCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>monitor</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>_glfwPollMonitorsWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>disconnectedCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier><modifier>*</modifier></type> <name>disconnected</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>adapterIndex</name></decl>, <decl><type ref="prev"/><name>displayIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DISPLAY_DEVICEW</name></type> <name>adapter</name></decl>, <decl><type ref="prev"/><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>disconnectedCount</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>disconnectedCount</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>disconnected</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>disconnected</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitors</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>monitorCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>adapterIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>adapterIndex</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>_GLFW_INSERT_LAST</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adapter</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adapter</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnumDisplayDevicesW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adapterIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adapter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>adapter</name><operator>.</operator><name>StateFlags</name></name> <operator>&amp;</operator> <name>DISPLAY_DEVICE_ACTIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>adapter</name><operator>.</operator><name>StateFlags</name></name> <operator>&amp;</operator> <name>DISPLAY_DEVICE_PRIMARY_DEVICE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>_GLFW_INSERT_FIRST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>displayIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>displayIndex</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnumDisplayDevicesW</name><argument_list>(<argument><expr><name><name>adapter</name><operator>.</operator><name>DeviceName</name></name></expr></argument>, <argument><expr><name>displayIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>display</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>.</operator><name>StateFlags</name></name> <operator>&amp;</operator> <name>DISPLAY_DEVICE_ACTIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name>wcscmp</name><argument_list>(<argument><expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>win32</name><operator>.</operator><name>displayName</name></name></expr></argument>,
<argument><expr><name><name>display</name><operator>.</operator><name>DeviceName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>monitor</name> <operator>=</operator> <call><name>createMonitor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>monitor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>disconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>GLFW_CONNECTED</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>_GLFW_INSERT_LAST</name></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>displayIndex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name>wcscmp</name><argument_list>(<argument><expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>,
<argument><expr><name><name>adapter</name><operator>.</operator><name>DeviceName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>monitor</name> <operator>=</operator> <call><name>createMonitor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adapter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>monitor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>disconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>GLFW_CONNECTED</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>disconnectedCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputMonitor</name><argument_list>(<argument><expr><name><name>disconnected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>GLFW_DISCONNECTED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>disconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwSetVideoModeWin32</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>best</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DEVMODEW</name></type> <name>dm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>_glfwChooseVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_glfwCompareVideoModes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current</name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmFields</name></name> <operator>=</operator> <name>DM_PELSWIDTH</name> <operator>|</operator> <name>DM_PELSHEIGHT</name> <operator>|</operator> <name>DM_BITSPERPEL</name> <operator>|</operator>
<name>DM_DISPLAYFREQUENCY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name> <operator>=</operator> <name><name>best</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name> <operator>=</operator> <name><name>best</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>=</operator> <name><name>best</name><operator>-&gt;</operator><name>redBits</name></name> <operator>+</operator> <name><name>best</name><operator>-&gt;</operator><name>greenBits</name></name> <operator>+</operator> <name><name>best</name><operator>-&gt;</operator><name>blueBits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name> <operator>=</operator> <name><name>best</name><operator>-&gt;</operator><name>refreshRate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>&lt;</operator> <literal type="number">15</literal> <operator>||</operator> <name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ChangeDisplaySettingsExW</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CDS_FULLSCREEN</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_SUCCESSFUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>modeChanged</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name> <init>= <expr><literal type="string">"Unknown error"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_BADDUALVIEW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"The system uses DualView"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_BADFLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"Invalid flags"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_BADMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"Graphics mode not supported"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_BADPARAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"Invalid parameter"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"Graphics mode failed"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_NOTUPDATED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"Failed to write to registry"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>DISP_CHANGE_RESTART</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"Computer restart required"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to set video mode: %s"</literal></expr></argument>,
<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwRestoreVideoModeWin32</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>modeChanged</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ChangeDisplaySettingsExW</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CDS_FULLSCREEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>modeChanged</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwGetMonitorContentScaleWin32</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>xdpi</name></decl>, <decl><type ref="prev"/><name>ydpi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsWindows8Point1OrGreater</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GetDpiForMonitor</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>MDT_EFFECTIVE_DPI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdpi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ydpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HDC</name></type> <name>dc</name> <init>= <expr><call><name>GetDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>xdpi</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>LOGPIXELSX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ydpi</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>LOGPIXELSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <name>xdpi</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>USER_DEFAULT_SCREEN_DPI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <name>ydpi</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>USER_DEFAULT_SCREEN_DPI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>_glfwPlatformFreeMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DEVMODEW</name></type> <name>dm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumDisplaySettingsExW</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>,
<argument><expr><name>ENUM_CURRENT_SETTINGS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>,
<argument><expr><name>EDS_ROTATEDMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwGetMonitorContentScaleWin32</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>xscale</name></expr></argument>, <argument><expr><name>yscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetMonitorWorkarea</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name> <init>= <expr><block>{ <expr>sizeof<operator>(</operator><name>mi</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>_glfwPlatformGetVideoModes</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>modeIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DEVMODEW</name></type> <name>dm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnumDisplaySettingsW</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>, <argument><expr><name>modeIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>modeIndex</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>refreshRate</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwSplitBPP</name><argument_list>(<argument><expr><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>.</operator><name>redBits</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>.</operator><name>greenBits</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>.</operator><name>blueBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_glfwCompareVideoModes</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>modesPruned</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ChangeDisplaySettingsExW</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CDS_TEST</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DISP_CHANGE_SUCCESSFUL</name></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>count</name> <operator>==</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>GLFWvidmode</name><operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLFWvidmode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><operator>*</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>count</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLFWvidmode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetVideoMode</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetVideoMode</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWvidmode</name><modifier>*</modifier></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DEVMODEW</name></type> <name>dm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumDisplaySettingsW</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>, <argument><expr><name>ENUM_CURRENT_SETTINGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>refreshRate</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwSplitBPP</name><argument_list>(<argument><expr><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>-&gt;</operator><name>redBits</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>-&gt;</operator><name>greenBits</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mode</name><operator>-&gt;</operator><name>blueBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwPlatformGetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDC</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>CreateDCW</name><argument_list>(<argument><expr><literal type="string">L"DISPLAY"</literal></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDeviceGammaRamp</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwAllocGammaArrays</name><argument_list>(<argument><expr><name>ramp</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetGammaRamp</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWgammaramp</name><modifier>*</modifier></type> <name>ramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDC</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ramp</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Gamma ramp size must be 256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ramp</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>CreateDCW</name><argument_list>(<argument><expr><literal type="string">L"DISPLAY"</literal></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>adapterName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDeviceGammaRamp</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetWin32Adapter</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>publicAdapterName</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glfwGetWin32Monitor</name><parameter_list>(<parameter><decl><type><name>GLFWmonitor</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><operator>(</operator><name>_GLFWmonitor</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>publicDisplayName</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
