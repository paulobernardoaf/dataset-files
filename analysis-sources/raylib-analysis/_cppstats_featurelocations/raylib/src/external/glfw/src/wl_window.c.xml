<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\wl_window.c">



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timerfd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>createTmpfileCloexec</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tmpname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkostemp</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>int</name></type> <name>createAnonymousFile</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>template</name><index>[]</index></name> <init>= <expr><literal type="string">"/glfw-shared-XXXXXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MEMFD_CREATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>memfd_create</name><argument_list>(<argument><expr><literal type="string">"glfw-shared"</literal></expr></argument>, <argument><expr><name>MFD_CLOEXEC</name> <operator>|</operator> <name>MFD_ALLOW_SEALING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_ADD_SEALS</name></expr></argument>, <argument><expr><name>F_SEAL_SHRINK</name> <operator>|</operator> <name>F_SEAL_SEAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHM_ANON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>shm_open</name><argument_list>(<argument><expr><name>SHM_ANON</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"XDG_RUNTIME_DIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>createTmpfileCloexec</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHM_ANON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>posix_fallocate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> <name>createShmBuffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_shm_pool</name></name><modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>createAnonymousFile</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Creating a buffer file for %d B failed: %m"</literal></expr></argument>,
<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: mmap failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>wl_shm_create_pool</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>shm</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>source</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>image</name><operator>-&gt;</operator><name>pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>source</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>source</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>target</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>target</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>target</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>target</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>alpha</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>buffer</name> <operator>=</operator>
<call><name>wl_shm_pool_create_buffer</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>WL_SHM_FORMAT_ARGB8888</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_shm_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>createDecoration</name><parameter_list>(<parameter><decl><type><name>_GLFWdecorationWayland</name><modifier>*</modifier></type> <name>decoration</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>parent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>opaque</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_region</name></name><modifier>*</modifier></type> <name>region</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <call><name>wl_compositor_create_surface</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoration</name><operator>-&gt;</operator><name>subsurface</name></name> <operator>=</operator>
<call><name>wl_subcompositor_get_subsurface</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>subcompositor</name></name></expr></argument>,
<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_subsurface_set_position</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>subsurface</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoration</name><operator>-&gt;</operator><name>viewport</name></name> <operator>=</operator> <call><name>wp_viewporter_get_viewport</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>viewporter</name></name></expr></argument>,
<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wp_viewport_set_destination</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>viewport</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_attach</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>wl_compositor_create_region</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_region_add</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_set_opaque_region</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_region_destroy</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>createDecorations</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWimage</name></type> <name>image</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>opaque</name> <init>= <expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>viewporter</name></name> <operator>||</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name> <operator>||</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>serverSide</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <call><name>createShmBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>createDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>_GLFW_DECORATION_TOP</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>_GLFW_DECORATION_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>createDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>,
<argument><expr><operator>-</operator><name>_GLFW_DECORATION_WIDTH</name></expr></argument>, <argument><expr><operator>-</operator><name>_GLFW_DECORATION_TOP</name></expr></argument>,
<argument><expr><name>_GLFW_DECORATION_WIDTH</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name>_GLFW_DECORATION_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>createDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>-</operator><name>_GLFW_DECORATION_TOP</name></expr></argument>,
<argument><expr><name>_GLFW_DECORATION_WIDTH</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name>_GLFW_DECORATION_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>createDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>bottom</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>,
<argument><expr><operator>-</operator><name>_GLFW_DECORATION_WIDTH</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>_GLFW_DECORATION_HORIZONTAL</name></expr></argument>, <argument><expr><name>_GLFW_DECORATION_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyDecoration</name><parameter_list>(<parameter><decl><type><name>_GLFWdecorationWayland</name><modifier>*</modifier></type> <name>decoration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_surface_destroy</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>decoration</name><operator>-&gt;</operator><name>subsurface</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_subsurface_destroy</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>subsurface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>decoration</name><operator>-&gt;</operator><name>viewport</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wp_viewport_destroy</name><argument_list>(<argument><expr><name><name>decoration</name><operator>-&gt;</operator><name>viewport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>decoration</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoration</name><operator>-&gt;</operator><name>subsurface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoration</name><operator>-&gt;</operator><name>viewport</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyDecorations</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>destroyDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroyDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroyDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroyDecoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdgDecorationHandleConfigure</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>zxdg_toplevel_decoration_v1</name></name><modifier>*</modifier></type> <name>decoration</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>serverSide</name></name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <name>ZXDG_TOPLEVEL_DECORATION_V1_MODE_SERVER_SIDE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>serverSide</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>createDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>zxdg_toplevel_decoration_v1_listener</name></name></type> <name>xdgDecorationListener</name> <init>= <expr><block>{
<expr><name>xdgDecorationHandleConfigure</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>setOpaqueRegion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_region</name></name><modifier>*</modifier></type> <name>region</name></decl>;</decl_stmt>

<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>wl_compositor_create_region</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wl_region_add</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_set_opaque_region</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_region_destroy</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>resizeWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scaledWidth</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name>scale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scaledHeight</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name>scale</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wl_egl_window_resize</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>native</name></name></expr></argument>, <argument><expr><name>scaledWidth</name></expr></argument>, <argument><expr><name>scaledHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>transparent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setOpaqueRegion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_glfwInputFramebufferSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>scaledWidth</name></expr></argument>, <argument><expr><name>scaledHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowContentScale</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>top</name><operator>.</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>wp_viewport_set_destination</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>top</name><operator>.</operator><name>viewport</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>_GLFW_DECORATION_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>top</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>wp_viewport_set_destination</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>left</name><operator>.</operator><name>viewport</name></name></expr></argument>,
<argument><expr><name>_GLFW_DECORATION_WIDTH</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name>_GLFW_DECORATION_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>left</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>wl_subsurface_set_position</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>right</name><operator>.</operator><name>subsurface</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>-</operator><name>_GLFW_DECORATION_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wp_viewport_set_destination</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>right</name><operator>.</operator><name>viewport</name></name></expr></argument>,
<argument><expr><name>_GLFW_DECORATION_WIDTH</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name>_GLFW_DECORATION_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>right</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>wl_subsurface_set_position</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>bottom</name><operator>.</operator><name>subsurface</name></name></expr></argument>,
<argument><expr><operator>-</operator><name>_GLFW_DECORATION_WIDTH</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wp_viewport_set_destination</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>bottom</name><operator>.</operator><name>viewport</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>_GLFW_DECORATION_HORIZONTAL</name></expr></argument>, <argument><expr><name>_GLFW_DECORATION_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>bottom</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkScaleChange</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>monitorScale</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositorVersion</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>monitorScale</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>wl</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <name>monitorScale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>monitorScale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_set_buffer_scale</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resizeWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>surfaceHandleEnter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><call><name>wl_output_get_user_data</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsCount</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsSize</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name></name> <operator>=</operator>
<call><name>realloc</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name><index>[<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsCount</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>monitor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>checkScaleChange</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>surfaceHandleLeave</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name> <init>= <expr><call><name>wl_output_get_user_data</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>found</name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monitor</name> <operator>==</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name><index>[<expr><operator>--</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsCount</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>checkScaleChange</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_surface_listener</name></name></type> <name>surfaceListener</name> <init>= <expr><block>{
<expr><name>surfaceHandleEnter</name></expr>,
<expr><name>surfaceHandleLeave</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setIdleInhibitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enable</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name> <operator>&amp;&amp;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>idleInhibitManager</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name> <operator>=</operator>
<call><name>zwp_idle_inhibit_manager_v1_create_inhibitor</name><argument_list>(
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>idleInhibitManager</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Idle inhibitor creation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>enable</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>zwp_idle_inhibitor_v1_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>createSurface</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>wl_compositor_create_surface</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wl_surface_add_listener</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>surfaceListener</name></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_surface_set_user_data</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>native</name></name> <operator>=</operator> <call><name>wl_egl_window_create</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>native</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>transparent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setOpaqueRegion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setFullscreen</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refreshRate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_fullscreen</name><argument_list>(
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>,
<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setIdleInhibitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>serverSide</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destroyDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdgToplevelHandleConfigure</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xdg_toplevel</name></name><modifier>*</modifier></type> <name>toplevel</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_array</name></name><modifier>*</modifier></type> <name>states</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>aspectRatio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>targetRatio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>maximized</name> <init>= <expr><name>GLFW_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>fullscreen</name> <init>= <expr><name>GLFW_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>activated</name> <init>= <expr><name>GLFW_FALSE</name></expr></init></decl>;</decl_stmt>

<macro><name>wl_array_for_each</name><argument_list>(<argument>state</argument>, <argument>states</argument>)</argument_list></macro>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XDG_TOPLEVEL_STATE_MAXIMIZED</name></expr>:</case>
<expr_stmt><expr><name>maximized</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XDG_TOPLEVEL_STATE_FULLSCREEN</name></expr>:</case>
<expr_stmt><expr><name>fullscreen</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XDG_TOPLEVEL_STATE_RESIZING</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>XDG_TOPLEVEL_STATE_ACTIVATED</name></expr>:</case>
<expr_stmt><expr><name>activated</name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>maximized</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fullscreen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>numer</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>denom</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>aspectRatio</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>width</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>targetRatio</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>window</name><operator>-&gt;</operator><name>numer</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>window</name><operator>-&gt;</operator><name>denom</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aspectRatio</name> <operator>&lt;</operator> <name>targetRatio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>width</name> <operator>/</operator> <name>targetRatio</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>aspectRatio</name> <operator>&gt;</operator> <name>targetRatio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>height</name> <operator>*</operator> <name>targetRatio</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowDamage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>wasFullscreen</name></name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>autoIconify</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>activated</name> <operator>||</operator> <operator>!</operator><name>fullscreen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformIconifyWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>wasFullscreen</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fullscreen</name> <operator>&amp;&amp;</operator> <name>activated</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>wasFullscreen</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>activated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdgToplevelHandleClose</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xdg_toplevel</name></name><modifier>*</modifier></type> <name>toplevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowCloseRequest</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>xdg_toplevel_listener</name></name></type> <name>xdgToplevelListener</name> <init>= <expr><block>{
<expr><name>xdgToplevelHandleConfigure</name></expr>,
<expr><name>xdgToplevelHandleClose</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdgSurfaceHandleConfigure</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xdg_surface</name></name><modifier>*</modifier></type> <name>surface</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xdg_surface_ack_configure</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>xdg_surface_listener</name></name></type> <name>xdgSurfaceListener</name> <init>= <expr><block>{
<expr><name>xdgSurfaceHandleConfigure</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setXdgDecorations</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>decorationManager</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>decoration</name></name> <operator>=</operator>
<call><name>zxdg_decoration_manager_v1_get_toplevel_decoration</name><argument_list>(
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>decorationManager</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zxdg_toplevel_decoration_v1_add_listener</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>decoration</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xdgDecorationListener</name></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zxdg_toplevel_decoration_v1_set_mode</name><argument_list>(
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>decoration</name></name></expr></argument>,
<argument><expr><name>ZXDG_TOPLEVEL_DECORATION_V1_MODE_SERVER_SIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>serverSide</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>createDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>createXdgSurface</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>xdg_wm_base_get_xdg_surface</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>wmBase</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: xdg-surface creation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xdg_surface_add_listener</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xdgSurfaceListener</name></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name> <operator>=</operator> <call><name>xdg_surface_get_toplevel</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: xdg-toplevel creation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xdg_toplevel_add_listener</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xdgToplevelListener</name></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>title</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_title</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>minheight</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_min_size</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>minheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_max_size</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_fullscreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setIdleInhibitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>maximized</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_maximized</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setIdleInhibitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setXdgDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>setIdleInhibitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setXdgDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_roundtrip</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setCursorImage</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>_GLFWcursorWayland</name><modifier>*</modifier></type> <name>cursorWayland</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>itimerspec</name></name></type> <name>timer</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor</name></name><modifier>*</modifier></type> <name>wlCursor</name> <init>= <expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_image</name></name><modifier>*</modifier></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_buffer</name></name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>surface</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorSurface</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wlCursor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>cursorWayland</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>cursorWayland</name><operator>-&gt;</operator><name>cursorHiDPI</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wlCursor</name> <operator>=</operator> <name><name>cursorWayland</name><operator>-&gt;</operator><name>cursorHiDPI</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <name><name>wlCursor</name><operator>-&gt;</operator><name>images</name><index>[<expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>currentImage</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>wl_cursor_image_get_buffer</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>timer</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>delay</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>delay</name></name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timerfd_settime</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTimerfd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>xhot</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>hotspot_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>yhot</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>hotspot_y</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>wl_pointer_set_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name></expr></argument>,
<argument><expr><name>surface</name></expr></argument>,
<argument><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>xhot</name></name> <operator>/</operator> <name>scale</name></expr></argument>,
<argument><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>yhot</name></name> <operator>/</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_set_buffer_scale</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_attach</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_damage</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cursorWayland</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>incrementCursorImage</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name> <operator>||</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>focus</name></name> <operator>!=</operator> <name>mainWindow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentCursor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>&amp;&amp;</operator> <name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentImage</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentImage</name></name> <operator>%=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursor</name><operator>-&gt;</operator><name>image_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleEvents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name><modifier>*</modifier></type> <name>display</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>fds</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>wl_display_get_fd</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>, <expr><name>POLLIN</name></expr> }</block></expr>,
<expr><block>{ <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>timerfd</name></name></expr>, <expr><name>POLLIN</name></expr> }</block></expr>,
<expr><block>{ <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTimerfd</name></name></expr>, <expr><name>POLLIN</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>read_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>repeats</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>wl_display_prepare_read</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_display_dispatch_pending</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>




<if_stmt><if>if <condition>(<expr><call><name>wl_display_flush</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputWindowCloseRequest</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>wl_display_cancel_read</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_display_read_events</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_dispatch_pending</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>wl_display_cancel_read</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>read_ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>timerfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>repeats</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>repeats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_ret</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>repeats</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardLastKey</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardLastScancode</name></name></expr></argument>, <argument><expr><name>GLFW_REPEAT</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>xkb</name><operator>.</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>read_ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTimerfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>repeats</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>repeats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_ret</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>incrementCursorImage</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>wl_display_cancel_read</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>_glfwPlatformCreateWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>transparent</name></name> <operator>=</operator> <name><name>fbconfig</name><operator>-&gt;</operator><name>transparent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>createSurface</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>wndconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_EGL_CONTEXT_API</name> <operator>||</operator>
<name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_NATIVE_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitEGL</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextEGL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_OSMESA_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitOSMesa</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextOSMesa</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>title</name></name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>-&gt;</operator><name>visible</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>createXdgSurface</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentCursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_GLFWmonitor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitorsSize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputCursorEnter</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zwp_idle_inhibitor_v1_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>idleInhibitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>destroyDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>decoration</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zxdg_toplevel_decoration_v1_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>decoration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_buffer_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>native</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_egl_window_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>native</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_surface_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_surface_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>monitors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowTitle</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>title</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>title</name></name> <operator>=</operator> <call><name>_glfw_strdup</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_title</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowIcon</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>images</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Setting window icon not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Window position retrieval not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Window position setting not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resizeWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowSizeLimits</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>minwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minheight</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxheight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>minwidth</name> <operator>==</operator> <name>GLFW_DONT_CARE</name> <operator>||</operator> <name>minheight</name> <operator>==</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <name>minheight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>maxwidth</name> <operator>==</operator> <name>GLFW_DONT_CARE</name> <operator>||</operator> <name>maxheight</name> <operator>==</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name>maxheight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xdg_toplevel_set_min_size</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name>minwidth</name></expr></argument>, <argument><expr><name>minheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_toplevel_set_max_size</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name>maxwidth</name></expr></argument>, <argument><expr><name>maxheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>numer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>)</parameter_list>
<block>{<block_content>


</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetFramebufferSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>*=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>*=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowFrameSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>serverSide</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <name>_GLFW_DECORATION_TOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bottom</name> <operator>=</operator> <name>_GLFW_DECORATION_WIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xscale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yscale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>yscale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformIconifyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_minimized</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformRestoreWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_unset_fullscreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>maximized</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_unset_maximized</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>maximized</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformMaximizeWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_maximized</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>maximized</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformShowWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>visible</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>createXdgSurface</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformHideWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xdg_toplevel_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_surface_destroy</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformRequestWindowAttention</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Window attention request not implemented yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformFocusWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Focusing a window requires user interaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refreshRate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monitor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>setFullscreen</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>refreshRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_unset_fullscreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xdg</name><operator>.</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setIdleInhibitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>decorationManager</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>createDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowFocused</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>keyboardFocus</name></name> <operator>==</operator> <name>window</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowIconified</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowVisible</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>visible</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowMaximized</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>maximized</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowHovered</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>hovered</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformFramebufferTransparent</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>transparent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowResizable</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Window attribute setting not implemented yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowDecorated</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>createDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destroyDecorations</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowFloating</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Window attribute setting not implemented yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>_glfwPlatformGetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1.f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwPlatformRawMouseMotionSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformPollEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>handleEvents</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformWaitEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>handleEvents</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformWaitEventsTimeout</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>handleEvents</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>timeout</name> <operator>*</operator> <literal type="number">1e3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformPostEmptyEvent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_display_sync</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosX</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorPosY</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>isPointerLocked</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isPointerLocked</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>zwp_locked_pointer_v1_set_cursor_position_hint</name><argument_list>(
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>lockedPointer</name></name></expr></argument>,
<argument><expr><call><name>wl_fixed_from_double</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>wl_fixed_from_double</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursorMode</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentCursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetScancodeName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformGetKeyScancode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>scancodes</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformCreateCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <call><name>createShmBuffer</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>xhot</name></name> <operator>=</operator> <name>xhot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>yhot</name></name> <operator>=</operator> <name>yhot</name></expr>;</expr_stmt>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformCreateStandardCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_ARROW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_IBEAM_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_CROSSHAIR_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"crosshair"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_POINTING_HAND_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"pointer"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_EW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"ew-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NS_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"ns-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NWSE_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"nwse-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NESW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"nesw-resize"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_ALL_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"all-scroll"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_NOT_ALLOWED_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"not-allowed"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorHiDPI</name></name> <operator>=</operator>
<call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursor</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_ARROW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"left_ptr"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_IBEAM_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"xterm"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_CROSSHAIR_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"crosshair"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_POINTING_HAND_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"hand2"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_EW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"sb_h_double_arrow"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NS_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"sb_v_double_arrow"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_ALL_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"fleur"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_CURSOR_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Standard cursor shape unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Failed to create standard cursor \"%s\""</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorHiDPI</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursorHiDPI</name></name> <operator>=</operator>
<call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_buffer_destroy</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>relativePointerHandleRelativeMotion</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>zwp_relative_pointer_v1</name></name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>timeHi</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>timeLo</name></decl></parameter>,
<parameter><decl><type><name>wl_fixed_t</name></type> <name>dx</name></decl></parameter>,
<parameter><decl><type><name>wl_fixed_t</name></type> <name>dy</name></decl></parameter>,
<parameter><decl><type><name>wl_fixed_t</name></type> <name>dxUnaccel</name></decl></parameter>,
<parameter><decl><type><name>wl_fixed_t</name></type> <name>dyUnaccel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xpos</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ypos</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>!=</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xpos</name> <operator>+=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>dxUnaccel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ypos</name> <operator>+=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>dyUnaccel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>xpos</name> <operator>+=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ypos</name> <operator>+=</operator> <call><name>wl_fixed_to_double</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>zwp_relative_pointer_v1_listener</name></name></type> <name>relativePointerListener</name> <init>= <expr><block>{
<expr><name>relativePointerHandleRelativeMotion</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lockedPointerHandleLocked</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>zwp_locked_pointer_v1</name></name><modifier>*</modifier></type> <name>lockedPointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlockPointer</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_relative_pointer_v1</name></name><modifier>*</modifier></type> <name>relativePointer</name> <init>=
<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>relativePointer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_locked_pointer_v1</name></name><modifier>*</modifier></type> <name>lockedPointer</name> <init>=
<expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>lockedPointer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zwp_relative_pointer_v1_destroy</name><argument_list>(<argument><expr><name>relativePointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zwp_locked_pointer_v1_destroy</name><argument_list>(<argument><expr><name>lockedPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>relativePointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>lockedPointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lockPointer</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lockedPointerHandleUnlocked</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>zwp_locked_pointer_v1</name></name><modifier>*</modifier></type> <name>lockedPointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>zwp_locked_pointer_v1_listener</name></name></type> <name>lockedPointerListener</name> <init>= <expr><block>{
<expr><name>lockedPointerHandleLocked</name></expr>,
<expr><name>lockedPointerHandleUnlocked</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lockPointer</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_relative_pointer_v1</name></name><modifier>*</modifier></type> <name>relativePointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zwp_locked_pointer_v1</name></name><modifier>*</modifier></type> <name>lockedPointer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>relativePointerManager</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: no relative pointer manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>relativePointer</name> <operator>=</operator>
<call><name>zwp_relative_pointer_manager_v1_get_relative_pointer</name><argument_list>(
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>relativePointerManager</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zwp_relative_pointer_v1_add_listener</name><argument_list>(<argument><expr><name>relativePointer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>relativePointerListener</name></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lockedPointer</name> <operator>=</operator>
<call><name>zwp_pointer_constraints_v1_lock_pointer</name><argument_list>(
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerConstraints</name></name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_PERSISTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zwp_locked_pointer_v1_add_listener</name><argument_list>(<argument><expr><name>lockedPointer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lockedPointerListener</name></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>relativePointer</name></name> <operator>=</operator> <name>relativePointer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>lockedPointer</name></name> <operator>=</operator> <name>lockedPointer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_pointer_set_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>isPointerLocked</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>pointerLock</name><operator>.</operator><name>lockedPointer</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor</name></name><modifier>*</modifier></type> <name>defaultCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor</name></name><modifier>*</modifier></type> <name>defaultCursorHiDPI</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>currentCursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>window</name> <operator>!=</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointerFocus</name></name> <operator>||</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>decorations</name><operator>.</operator><name>focus</name></name> <operator>!=</operator> <name>mainWindow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>!=</operator> <name>GLFW_CURSOR_DISABLED</name> <operator>&amp;&amp;</operator> <call><name>isPointerLocked</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlockPointer</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_NORMAL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>defaultCursor</name> <operator>=</operator> <call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorTheme</name></name></expr></argument>,
<argument><expr><literal type="string">"left_ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>defaultCursor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Standard cursor not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defaultCursorHiDPI</name> <operator>=</operator>
<call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>cursorThemeHiDPI</name></name></expr></argument>,
<argument><expr><literal type="string">"left_ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>_GLFWcursorWayland</name></type> <name>cursorWayland</name> <init>= <expr><block>{
<expr><name>defaultCursor</name></expr>,
<expr><name>defaultCursorHiDPI</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursorWayland</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isPointerLocked</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lockPointer</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_HIDDEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_pointer_set_cursor</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataSourceHandleTarget</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_data_source</name></name><modifier>*</modifier></type> <name>dataSource</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mimeType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name> <operator>!=</operator> <name>dataSource</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Unknown clipboard data source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataSourceHandleSend</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_data_source</name></name><modifier>*</modifier></type> <name>dataSource</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mimeType</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name> <operator>!=</operator> <name>dataSource</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Unknown clipboard data source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Copy requested from an invalid string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>, <argument><expr><literal type="string">"text/plain;charset=utf-8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Wrong MIME type asked from clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Error while writing the clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dataSourceHandleCancelled</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_data_source</name></name><modifier>*</modifier></type> <name>dataSource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_data_source_destroy</name><argument_list>(<argument><expr><name>dataSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name> <operator>!=</operator> <name>dataSource</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Unknown clipboard data source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_data_source_listener</name></name></type> <name>dataSourceListener</name> <init>= <expr><block>{
<expr><name>dataSourceHandleTarget</name></expr>,
<expr><name>dataSourceHandleSend</name></expr>,
<expr><name>dataSourceHandleCancelled</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>_glfwPlatformSetClipboardString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_data_source_destroy</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Impossible to allocate clipboard string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendSize</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name> <operator>=</operator>
<call><name>wl_data_device_manager_create_data_source</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDeviceManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Impossible to create clipboard source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSendString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wl_data_source_add_listener</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dataSourceListener</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_data_source_offer</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr></argument>, <argument><expr><literal type="string">"text/plain;charset=utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_data_device_set_selection</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataDevice</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataSource</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>growClipboardString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>clipboard</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>clipboard</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>clipboard</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clipboard</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Impossible to grow clipboard string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name> <operator>=</operator> <name>clipboard</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSize</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetClipboardString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"No clipboard data has been sent yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pipe2</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Impossible to create clipboard pipe fds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wl_data_offer_receive</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>dataOffer</name></name></expr></argument>, <argument><expr><literal type="string">"text/plain;charset=utf-8"</literal></expr></argument>, <argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>handleEvents</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">4096</literal> <operator>&gt;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSize</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>growClipboardString</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Impossible to read from clipboard fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardSize</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>growClipboardString</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>clipboardString</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetRequiredInstanceExtensions</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>extensions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_surface</name></name> <operator>||</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_wayland_surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>extensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"VK_KHR_surface"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extensions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"VK_KHR_wayland_surface"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformGetPhysicalDevicePresentationSupport</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>queuefamily</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR</name></type>
<name>vkGetPhysicalDeviceWaylandPresentationSupportKHR</name> <init>=
<expr><operator>(</operator><name>PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkGetPhysicalDeviceWaylandPresentationSupportKHR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkGetPhysicalDeviceWaylandPresentationSupportKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Vulkan instance missing VK_KHR_wayland_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_NULL_HANDLE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vkGetPhysicalDeviceWaylandPresentationSupportKHR</name><argument_list>(<argument><expr><name>device</name></expr></argument>,
<argument><expr><name>queuefamily</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VkResult</name></type> <name>_glfwPlatformCreateWindowSurface</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type> <name>allocator</name></decl></parameter>,
<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VkResult</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkWaylandSurfaceCreateInfoKHR</name></type> <name>sci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateWaylandSurfaceKHR</name></type> <name>vkCreateWaylandSurfaceKHR</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vkCreateWaylandSurfaceKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateWaylandSurfaceKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkCreateWaylandSurfaceKHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkCreateWaylandSurfaceKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Vulkan instance missing VK_KHR_wayland_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vkCreateWaylandSurfaceKHR</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Wayland: Failed to create Vulkan surface: %s"</literal></expr></argument>,
<argument><expr><call><name>_glfwGetVulkanResultString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name><name>struct</name> <name>wl_display</name></name><modifier>*</modifier></type> <name>glfwGetWaylandDisplay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>wl</name><operator>.</operator><name>display</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name><name>struct</name> <name>wl_surface</name></name><modifier>*</modifier></type> <name>glfwGetWaylandWindow</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>wl</name><operator>.</operator><name>surface</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
