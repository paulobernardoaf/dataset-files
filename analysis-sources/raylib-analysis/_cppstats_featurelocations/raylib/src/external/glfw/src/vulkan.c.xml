<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\vulkan.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_FIND_LOADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_REQUIRE_LOADER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>






<function><type><name>GLFWbool</name></type> <name>_glfwInitVulkan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VkResult</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkExtensionProperties</name><modifier>*</modifier></type> <name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_VULKAN_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_VULKAN_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><name>_GLFW_VULKAN_LIBRARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"vulkan-1.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libvulkan.1.dylib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfwLoadLocalVulkanLoaderNS</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>_glfw_dlopen</name><argument_list>(<argument><expr><literal type="string">"libvulkan.so.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>_GLFW_REQUIRE_LOADER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>, <argument><expr><literal type="string">"Vulkan: Loader not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>GetInstanceProcAddr</name></name> <operator>=</operator> <operator>(</operator><name>PFN_vkGetInstanceProcAddr</name><operator>)</operator>
<call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"vkGetInstanceProcAddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>GetInstanceProcAddr</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Vulkan: Loader does not export vkGetInstanceProcAddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateVulkan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>EnumerateInstanceExtensionProperties</name></name> <operator>=</operator> <operator>(</operator><name>PFN_vkEnumerateInstanceExtensionProperties</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"vkEnumerateInstanceExtensionProperties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>EnumerateInstanceExtensionProperties</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Vulkan: Failed to retrieve vkEnumerateInstanceExtensionProperties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwTerminateVulkan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vkEnumerateInstanceExtensionProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>_GLFW_REQUIRE_LOADER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Vulkan: Failed to query instance extension count: %s"</literal></expr></argument>,
<argument><expr><call><name>_glfwGetVulkanResultString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwTerminateVulkan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkExtensionProperties</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vkEnumerateInstanceExtensionProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Vulkan: Failed to query instance extensions: %s"</literal></expr></argument>,
<argument><expr><call><name>_glfwGetVulkanResultString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwTerminateVulkan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>, <argument><expr><literal type="string">"VK_KHR_surface"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_surface</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>, <argument><expr><literal type="string">"VK_KHR_win32_surface"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_win32_surface</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>, <argument><expr><literal type="string">"VK_MVK_macos_surface"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>MVK_macos_surface</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>, <argument><expr><literal type="string">"VK_EXT_metal_surface"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>EXT_metal_surface</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_X11</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>, <argument><expr><literal type="string">"VK_KHR_xlib_surface"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_xlib_surface</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>, <argument><expr><literal type="string">"VK_KHR_xcb_surface"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_xcb_surface</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>, <argument><expr><literal type="string">"VK_KHR_wayland_surface"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_wayland_surface</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>available</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetRequiredInstanceExtensions</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwTerminateVulkan</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_VULKAN_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfw_dlclose</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwGetVulkanResultString</name><parameter_list>(<parameter><decl><type><name>VkResult</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>result</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VK_SUCCESS</name></expr>:</case>
<return>return <expr><literal type="string">"Success"</literal></expr>;</return>
<case>case <expr><name>VK_NOT_READY</name></expr>:</case>
<return>return <expr><literal type="string">"A fence or query has not yet completed"</literal></expr>;</return>
<case>case <expr><name>VK_TIMEOUT</name></expr>:</case>
<return>return <expr><literal type="string">"A wait operation has not completed in the specified time"</literal></expr>;</return>
<case>case <expr><name>VK_EVENT_SET</name></expr>:</case>
<return>return <expr><literal type="string">"An event is signaled"</literal></expr>;</return>
<case>case <expr><name>VK_EVENT_RESET</name></expr>:</case>
<return>return <expr><literal type="string">"An event is unsignaled"</literal></expr>;</return>
<case>case <expr><name>VK_INCOMPLETE</name></expr>:</case>
<return>return <expr><literal type="string">"A return array was too small for the result"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_OUT_OF_HOST_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"A host memory allocation has failed"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_OUT_OF_DEVICE_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"A device memory allocation has failed"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_INITIALIZATION_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Initialization of an object could not be completed for implementation-specific reasons"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_DEVICE_LOST</name></expr>:</case>
<return>return <expr><literal type="string">"The logical or physical device has been lost"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_MEMORY_MAP_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Mapping of a memory object has failed"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_LAYER_NOT_PRESENT</name></expr>:</case>
<return>return <expr><literal type="string">"A requested layer is not present or could not be loaded"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr>:</case>
<return>return <expr><literal type="string">"A requested extension is not supported"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_FEATURE_NOT_PRESENT</name></expr>:</case>
<return>return <expr><literal type="string">"A requested feature is not supported"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_INCOMPATIBLE_DRIVER</name></expr>:</case>
<return>return <expr><literal type="string">"The requested version of Vulkan is not supported by the driver or is otherwise incompatible"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_TOO_MANY_OBJECTS</name></expr>:</case>
<return>return <expr><literal type="string">"Too many objects of the type have already been created"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_FORMAT_NOT_SUPPORTED</name></expr>:</case>
<return>return <expr><literal type="string">"A requested format is not supported on this device"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_SURFACE_LOST_KHR</name></expr>:</case>
<return>return <expr><literal type="string">"A surface is no longer available"</literal></expr>;</return>
<case>case <expr><name>VK_SUBOPTIMAL_KHR</name></expr>:</case>
<return>return <expr><literal type="string">"A swapchain no longer matches the surface properties exactly, but can still be used"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_OUT_OF_DATE_KHR</name></expr>:</case>
<return>return <expr><literal type="string">"A surface has changed in such a way that it is no longer compatible with the swapchain"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_INCOMPATIBLE_DISPLAY_KHR</name></expr>:</case>
<return>return <expr><literal type="string">"The display used by a swapchain does not use the same presentable image layout"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</name></expr>:</case>
<return>return <expr><literal type="string">"The requested window is already connected to a VkSurfaceKHR, or to some other non-Vulkan API"</literal></expr>;</return>
<case>case <expr><name>VK_ERROR_VALIDATION_FAILED_EXT</name></expr>:</case>
<return>return <expr><literal type="string">"A validation layer found an error"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"ERROR: UNKNOWN VULKAN ERROR"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwVulkanSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_glfwInitVulkan</name><argument_list>(<argument><expr><name>_GLFW_FIND_LOADER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>glfwGetRequiredInstanceExtensions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitVulkan</name><argument_list>(<argument><expr><name>_GLFW_REQUIRE_LOADER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>extensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>extensions</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>GLFWvkproc</name></type> <name>glfwGetInstanceProcAddress</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLFWvkproc</name></type> <name>proc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>procname</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitVulkan</name><argument_list>(<argument><expr><name>_GLFW_REQUIRE_LOADER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>proc</name> <operator>=</operator> <operator>(</operator><name>GLFWvkproc</name><operator>)</operator> <call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLFW_VULKAN_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>procname</name></expr></argument>, <argument><expr><literal type="string">"vkGetInstanceProcAddr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>GLFWvkproc</name><operator>)</operator> <name>vkGetInstanceProcAddr</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <operator>(</operator><name>GLFWvkproc</name><operator>)</operator> <call><name>_glfw_dlsym</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>proc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>int</name></type> <name>glfwGetPhysicalDevicePresentationSupport</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>queuefamily</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>instance</name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>device</name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitVulkan</name><argument_list>(<argument><expr><name>_GLFW_REQUIRE_LOADER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>extensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Vulkan: Window surface creation extensions not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_glfwPlatformGetPhysicalDevicePresentationSupport</name><argument_list>(<argument><expr><name>instance</name></expr></argument>,
<argument><expr><name>device</name></expr></argument>,
<argument><expr><name>queuefamily</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GLFWAPI</name> <name>VkResult</name></type> <name>glfwCreateWindowSurface</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type> <name>allocator</name></decl></parameter>,
<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>instance</name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>surface</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>surface</name> <operator>=</operator> <name>VK_NULL_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>VK_ERROR_INITIALIZATION_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitVulkan</name><argument_list>(<argument><expr><name>_GLFW_REQUIRE_LOADER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VK_ERROR_INITIALIZATION_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>extensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Vulkan: Window surface creation extensions not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>,
<argument><expr><literal type="string">"Vulkan: Window surface creation requires the window to have the client API set to GLFW_NO_API"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_glfwPlatformCreateWindowSurface</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
