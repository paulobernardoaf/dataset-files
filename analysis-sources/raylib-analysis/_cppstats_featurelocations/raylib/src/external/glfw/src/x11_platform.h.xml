<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\x11_platform.h">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/keysym.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xcursor/Xcursor.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/Xrandr.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XKBlib.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/Xinerama.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/XInput2.h&gt;</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>XRRCrtcGamma</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XRRAllocGamma</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_XRRFreeCrtcInfo</name>)<parameter_list>(<parameter><decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_XRRFreeGamma</name>)<parameter_list>(<parameter><decl><type><name>XRRCrtcGamma</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_XRRFreeOutputInfo</name>)<parameter_list>(<parameter><decl><type><name>XRROutputInfo</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_XRRFreeScreenResources</name>)<parameter_list>(<parameter><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>XRRCrtcGamma</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XRRGetCrtcGamma</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RRCrtc</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>PFN_XRRGetCrtcGammaSize</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RRCrtc</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>XRRCrtcInfo</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XRRGetCrtcInfo</name>) <parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RRCrtc</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>XRROutputInfo</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XRRGetOutputInfo</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RROutput</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>RROutput</name></type> (<modifier>*</modifier> <name>PFN_XRRGetOutputPrimary</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Window</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>XRRScreenResources</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XRRGetScreenResourcesCurrent</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Window</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XRRQueryExtension</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Status</name></type> (<modifier>*</modifier> <name>PFN_XRRQueryVersion</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_XRRSelectInput</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Window</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Status</name></type> (<modifier>*</modifier> <name>PFN_XRRSetCrtcConfig</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>XRRScreenResources</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RRCrtc</name></type></decl></parameter>,<parameter><decl><type><name>Time</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>RRMode</name></type></decl></parameter>,<parameter><decl><type><name>Rotation</name></type></decl></parameter>,<parameter><decl><type><name>RROutput</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_XRRSetCrtcGamma</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RRCrtc</name></type></decl></parameter>,<parameter><decl><type><name>XRRCrtcGamma</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>PFN_XRRUpdateConfiguration</name>)<parameter_list>(<parameter><decl><type><name>XEvent</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRAllocGamma</name></cpp:macro> <cpp:value>_glfw.x11.randr.AllocGamma</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRFreeCrtcInfo</name></cpp:macro> <cpp:value>_glfw.x11.randr.FreeCrtcInfo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRFreeGamma</name></cpp:macro> <cpp:value>_glfw.x11.randr.FreeGamma</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRFreeOutputInfo</name></cpp:macro> <cpp:value>_glfw.x11.randr.FreeOutputInfo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRFreeScreenResources</name></cpp:macro> <cpp:value>_glfw.x11.randr.FreeScreenResources</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRGetCrtcGamma</name></cpp:macro> <cpp:value>_glfw.x11.randr.GetCrtcGamma</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRGetCrtcGammaSize</name></cpp:macro> <cpp:value>_glfw.x11.randr.GetCrtcGammaSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRGetCrtcInfo</name></cpp:macro> <cpp:value>_glfw.x11.randr.GetCrtcInfo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRGetOutputInfo</name></cpp:macro> <cpp:value>_glfw.x11.randr.GetOutputInfo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRGetOutputPrimary</name></cpp:macro> <cpp:value>_glfw.x11.randr.GetOutputPrimary</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRGetScreenResourcesCurrent</name></cpp:macro> <cpp:value>_glfw.x11.randr.GetScreenResourcesCurrent</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRQueryExtension</name></cpp:macro> <cpp:value>_glfw.x11.randr.QueryExtension</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRQueryVersion</name></cpp:macro> <cpp:value>_glfw.x11.randr.QueryVersion</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRSelectInput</name></cpp:macro> <cpp:value>_glfw.x11.randr.SelectInput</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRSetCrtcConfig</name></cpp:macro> <cpp:value>_glfw.x11.randr.SetCrtcConfig</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRSetCrtcGamma</name></cpp:macro> <cpp:value>_glfw.x11.randr.SetCrtcGamma</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRRUpdateConfiguration</name></cpp:macro> <cpp:value>_glfw.x11.randr.UpdateConfiguration</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>XcursorImage</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XcursorImageCreate</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PFN_XcursorImageDestroy</name>)<parameter_list>(<parameter><decl><type><name>XcursorImage</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Cursor</name></type> (<modifier>*</modifier> <name>PFN_XcursorImageLoadCursor</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>XcursorImage</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XcursorGetTheme</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>PFN_XcursorGetDefaultSize</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>XcursorImage</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XcursorLibraryLoadImage</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XcursorImageCreate</name></cpp:macro> <cpp:value>_glfw.x11.xcursor.ImageCreate</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XcursorImageDestroy</name></cpp:macro> <cpp:value>_glfw.x11.xcursor.ImageDestroy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XcursorImageLoadCursor</name></cpp:macro> <cpp:value>_glfw.x11.xcursor.ImageLoadCursor</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XcursorGetTheme</name></cpp:macro> <cpp:value>_glfw.x11.xcursor.GetTheme</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XcursorGetDefaultSize</name></cpp:macro> <cpp:value>_glfw.x11.xcursor.GetDefaultSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XcursorLibraryLoadImage</name></cpp:macro> <cpp:value>_glfw.x11.xcursor.LibraryLoadImage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XineramaIsActive</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XineramaQueryExtension</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>XineramaScreenInfo</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XineramaQueryScreens</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XineramaIsActive</name></cpp:macro> <cpp:value>_glfw.x11.xinerama.IsActive</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XineramaQueryExtension</name></cpp:macro> <cpp:value>_glfw.x11.xinerama.QueryExtension</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XineramaQueryScreens</name></cpp:macro> <cpp:value>_glfw.x11.xinerama.QueryScreens</cpp:value></cpp:define>

<typedef>typedef <type><name>XID</name></type> <name>xcb_window_t</name>;</typedef>
<typedef>typedef <type><name>XID</name></type> <name>xcb_visualid_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>xcb_connection_t</name></name></type> <name>xcb_connection_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>xcb_connection_t</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XGetXCBConnection</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XGetXCBConnection</name></cpp:macro> <cpp:value>_glfw.x11.x11xcb.GetXCBConnection</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XF86VidModeQueryExtension</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XF86VidModeGetGammaRamp</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XF86VidModeSetGammaRamp</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XF86VidModeGetGammaRampSize</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF86VidModeQueryExtension</name></cpp:macro> <cpp:value>_glfw.x11.vidmode.QueryExtension</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF86VidModeGetGammaRamp</name></cpp:macro> <cpp:value>_glfw.x11.vidmode.GetGammaRamp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF86VidModeSetGammaRamp</name></cpp:macro> <cpp:value>_glfw.x11.vidmode.SetGammaRamp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XF86VidModeGetGammaRampSize</name></cpp:macro> <cpp:value>_glfw.x11.vidmode.GetGammaRampSize</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Status</name></type> (<modifier>*</modifier> <name>PFN_XIQueryVersion</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>PFN_XISelectEvents</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Window</name></type></decl></parameter>,<parameter><decl><type><name>XIEventMask</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIQueryVersion</name></cpp:macro> <cpp:value>_glfw.x11.xi.QueryVersion</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XISelectEvents</name></cpp:macro> <cpp:value>_glfw.x11.xi.SelectEvents</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<modifier>*</modifier> <name>PFN_XRenderQueryExtension</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Status</name></type> (<modifier>*</modifier> <name>PFN_XRenderQueryVersion</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type><name>dpy</name></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>XRenderPictFormat</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>PFN_XRenderFindVisualFormat</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Visual</name> <specifier>const</specifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRenderQueryExtension</name></cpp:macro> <cpp:value>_glfw.x11.xrender.QueryExtension</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRenderQueryVersion</name></cpp:macro> <cpp:value>_glfw.x11.xrender.QueryVersion</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRenderFindVisualFormat</name></cpp:macro> <cpp:value>_glfw.x11.xrender.FindVisualFormat</cpp:value></cpp:define>

<typedef>typedef <type><name>VkFlags</name></type> <name>VkXlibSurfaceCreateFlagsKHR</name>;</typedef>
<typedef>typedef <type><name>VkFlags</name></type> <name>VkXcbSurfaceCreateFlagsKHR</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VkXlibSurfaceCreateInfoKHR</name>
<block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkXlibSurfaceCreateFlagsKHR</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name><modifier>*</modifier></type> <name>dpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>window</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkXlibSurfaceCreateInfoKHR</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VkXcbSurfaceCreateInfoKHR</name>
<block>{
<decl_stmt><decl><type><name>VkStructureType</name></type> <name>sType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkXcbSurfaceCreateFlagsKHR</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name><modifier>*</modifier></type> <name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name></decl>;</decl_stmt>
}</block></struct></type> <name>VkXcbSurfaceCreateInfoKHR</name>;</typedef>

<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkCreateXlibSurfaceKHR</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkXlibSurfaceCreateInfoKHR</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkBool32</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type></decl></parameter>,<parameter><decl><type><name>uint32_t</name></type></decl></parameter>,<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VisualID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkResult</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkCreateXcbSurfaceKHR</name>)<parameter_list>(<parameter><decl><type><name>VkInstance</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkXcbSurfaceCreateInfoKHR</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VkBool32</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR</name>)<parameter_list>(<parameter><decl><type><name>VkPhysicalDevice</name></type></decl></parameter>,<parameter><decl><type><name>uint32_t</name></type></decl></parameter>,<parameter><decl><type><name>xcb_connection_t</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>xcb_visualid_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"posix_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"posix_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xkb_unicode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glx_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"egl_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osmesa_context.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linux_joystick.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"null_joystick.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlopen</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlopen(name, RTLD_LAZY | RTLD_LOCAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlclose</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlclose(handle)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_glfw_dlsym</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlsym(handle, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_WINDOW</name></cpp:macro> <cpp:value>((EGLNativeWindowType) window-&gt;x11.handle)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_EGL_NATIVE_DISPLAY</name></cpp:macro> <cpp:value>((EGLNativeDisplayType) _glfw.x11.display)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWwindowX11 x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_LIBRARY_WINDOW_STATE</name></cpp:macro> <cpp:value>_GLFWlibraryX11 x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_MONITOR_STATE</name></cpp:macro> <cpp:value>_GLFWmonitorX11 x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLFW_PLATFORM_CURSOR_STATE</name></cpp:macro> <cpp:value>_GLFWcursorX11 x11</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>_GLFWwindowX11</name>
<block>{
<decl_stmt><decl><type><name>Colormap</name></type> <name>colormap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XIC</name></type> <name>ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLFWbool</name></type> <name>overrideRedirect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>iconified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>maximized</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GLFWbool</name></type> <name>transparent</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>, <name>ypos</name>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>lastCursorPosX</name></decl>, <name>lastCursorPosY</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>warpCursorPosX</name></decl>, <name>warpCursorPosY</name>;</decl_stmt>


<decl_stmt><decl><type><name>Time</name></type> <name>lastKeyTime</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWwindowX11</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_GLFWlibraryX11</name>
<block>{
<decl_stmt><decl><type><name>Display</name><modifier>*</modifier></type> <name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>contentScaleX</name></decl>, <name>contentScaleY</name>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>helperWindowHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cursor</name></type> <name>hiddenCursorHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XContext</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XIM</name></type> <name>im</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errorCode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>primarySelectionString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>clipboardString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>keynames</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>keycodes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name><name>scancodes</name><index>[<expr><name>GLFW_KEY_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>restoreCursorPosX</name></decl>, <name>restoreCursorPosY</name>;</decl_stmt>

<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>disabledCursorWindow</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Atom</name></type> <name>NET_SUPPORTED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_SUPPORTING_WM_CHECK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>WM_PROTOCOLS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>WM_STATE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>WM_DELETE_WINDOW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_NAME</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_ICON_NAME</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_ICON</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_PID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_PING</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_WINDOW_TYPE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_WINDOW_TYPE_NORMAL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_STATE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_STATE_ABOVE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_STATE_FULLSCREEN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_STATE_MAXIMIZED_VERT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_STATE_MAXIMIZED_HORZ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_STATE_DEMANDS_ATTENTION</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_BYPASS_COMPOSITOR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_FULLSCREEN_MONITORS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_WINDOW_OPACITY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WM_CM_Sx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_WORKAREA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_CURRENT_DESKTOP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_ACTIVE_WINDOW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_FRAME_EXTENTS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NET_REQUEST_FRAME_EXTENTS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>MOTIF_WM_HINTS</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Atom</name></type> <name>XdndAware</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndEnter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndPosition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndActionCopy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndDrop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndFinished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndSelection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XdndTypeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>text_uri_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Atom</name></type> <name>TARGETS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>MULTIPLE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>INCR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>CLIPBOARD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>PRIMARY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>CLIPBOARD_MANAGER</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>SAVE_TARGETS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>NULL_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>UTF8_STRING</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>COMPOUND_STRING</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>ATOM_PAIR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>GLFW_SELECTION</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eventBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errorBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>gammaBroken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>monitorBroken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRAllocGamma</name></type> <name>AllocGamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRFreeCrtcInfo</name></type> <name>FreeCrtcInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRFreeGamma</name></type> <name>FreeGamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRFreeOutputInfo</name></type> <name>FreeOutputInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRFreeScreenResources</name></type> <name>FreeScreenResources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRGetCrtcGamma</name></type> <name>GetCrtcGamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRGetCrtcGammaSize</name></type> <name>GetCrtcGammaSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRGetCrtcInfo</name></type> <name>GetCrtcInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRGetOutputInfo</name></type> <name>GetOutputInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRGetOutputPrimary</name></type> <name>GetOutputPrimary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRGetScreenResourcesCurrent</name></type> <name>GetScreenResourcesCurrent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRQueryExtension</name></type> <name>QueryExtension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRQueryVersion</name></type> <name>QueryVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRSelectInput</name></type> <name>SelectInput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRSetCrtcConfig</name></type> <name>SetCrtcConfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRSetCrtcGamma</name></type> <name>SetCrtcGamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRRUpdateConfiguration</name></type> <name>UpdateConfiguration</name></decl>;</decl_stmt>
}</block> <decl><name>randr</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>detectable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>majorOpcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eventBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errorBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>group</name></decl>;</decl_stmt>
}</block> <decl><name>xkb</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blanking</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exposure</name></decl>;</decl_stmt>
}</block> <decl><name>saver</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>format</name></decl>;</decl_stmt>
}</block> <decl><name>xdnd</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XcursorImageCreate</name></type> <name>ImageCreate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XcursorImageDestroy</name></type> <name>ImageDestroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XcursorImageLoadCursor</name></type> <name>ImageLoadCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XcursorGetTheme</name></type> <name>GetTheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XcursorGetDefaultSize</name></type> <name>GetDefaultSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XcursorLibraryLoadImage</name></type> <name>LibraryLoadImage</name></decl>;</decl_stmt>
}</block> <decl><name>xcursor</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XineramaIsActive</name></type> <name>IsActive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XineramaQueryExtension</name></type> <name>QueryExtension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XineramaQueryScreens</name></type> <name>QueryScreens</name></decl>;</decl_stmt>
}</block> <decl><name>xinerama</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XGetXCBConnection</name></type> <name>GetXCBConnection</name></decl>;</decl_stmt>
}</block> <decl><name>x11xcb</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eventBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errorBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XF86VidModeQueryExtension</name></type> <name>QueryExtension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XF86VidModeGetGammaRamp</name></type> <name>GetGammaRamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XF86VidModeSetGammaRamp</name></type> <name>SetGammaRamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XF86VidModeGetGammaRampSize</name></type> <name>GetGammaRampSize</name></decl>;</decl_stmt>
}</block> <decl><name>vidmode</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>majorOpcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eventBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errorBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XIQueryVersion</name></type> <name>QueryVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XISelectEvents</name></type> <name>SelectEvents</name></decl>;</decl_stmt>
}</block> <decl><name>xi</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>GLFWbool</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eventBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errorBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRenderQueryExtension</name></type> <name>QueryExtension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRenderQueryVersion</name></type> <name>QueryVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_XRenderFindVisualFormat</name></type> <name>FindVisualFormat</name></decl>;</decl_stmt>
}</block> <decl><name>xrender</name></decl>;</struct>

}</block></struct></type> <name>_GLFWlibraryX11</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_GLFWmonitorX11</name>
<block>{
<decl_stmt><decl><type><name>RROutput</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRCrtc</name></type> <name>crtc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRMode</name></type> <name>oldMode</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWmonitorX11</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_GLFWcursorX11</name>
<block>{
<decl_stmt><decl><type><name>Cursor</name></type> <name>handle</name></decl>;</decl_stmt>

}</block></struct></type> <name>_GLFWcursorX11</name>;</typedef>


<function_decl><type><name>void</name></type> <name>_glfwPollMonitorsX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwSetVideoModeX11</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWvidmode</name><modifier>*</modifier></type> <name>desired</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwRestoreVideoModeX11</name><parameter_list>(<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Cursor</name></type> <name>_glfwCreateCursorX11</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>_glfwGetWindowPropertyX11</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>Atom</name></type> <name>property</name></decl></parameter>,
<parameter><decl><type><name>Atom</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GLFWbool</name></type> <name>_glfwIsVisualTransparentX11</name><parameter_list>(<parameter><decl><type><name>Visual</name><modifier>*</modifier></type> <name>visual</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwGrabErrorHandlerX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwReleaseErrorHandlerX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_glfwInputErrorX11</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_glfwPushSelectionToManagerX11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
