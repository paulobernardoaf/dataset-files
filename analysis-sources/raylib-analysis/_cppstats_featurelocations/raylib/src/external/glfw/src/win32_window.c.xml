<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glfw\src\win32_window.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windowsx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>DWORD</name></type> <name>getWindowStyle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><name>WS_CLIPSIBLINGS</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_POPUP</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_SYSMENU</name> <operator>|</operator> <name>WS_MINIMIZEBOX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_CAPTION</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>resizable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_MAXIMIZEBOX</name> <operator>|</operator> <name>WS_THICKFRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_POPUP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>DWORD</name></type> <name>getWindowExStyle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><name>WS_EX_APPWINDOW</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>||</operator> <name><name>window</name><operator>-&gt;</operator><name>floating</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_EX_TOPMOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>chooseImage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>images</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>leastDiff</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>closest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>currDiff</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>*</operator> <name><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>-</operator>
<name>width</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>currDiff</name> <operator>&lt;</operator> <name>leastDiff</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <name>images</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leastDiff</name> <operator>=</operator> <name>currDiff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>closest</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>HICON</name></type> <name>createIcon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>icon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HICON</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>color</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPV5HEADER</name></type> <name>bi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICONINFO</name></type> <name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>source</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>pixels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5Size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5Width</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5Height</name></name> <operator>=</operator> <operator>-</operator><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5Planes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5BitCount</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5Compression</name></name> <operator>=</operator> <name>BI_BITFIELDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5RedMask</name></name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5GreenMask</name></name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5BlueMask</name></name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bV5AlphaMask</name></name> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>CreateDIBSection</name><argument_list>(<argument><expr><name>dc</name></expr></argument>,
<argument><expr><operator>(</operator><name>BITMAPINFO</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>bi</name></expr></argument>,
<argument><expr><name>DIB_RGB_COLORS</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>color</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to create RGBA bitmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>CreateBitmap</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to create mask bitmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>target</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>source</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>source</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ii</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ii</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>.</operator><name>fIcon</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>.</operator><name>xHotspot</name></name> <operator>=</operator> <name>xhot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>.</operator><name>yHotspot</name></name> <operator>=</operator> <name>yhot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>.</operator><name>hbmMask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>.</operator><name>hbmColor</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>CreateIconIndirect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>icon</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to create icon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to create cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>getFullWindowSize</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>exStyle</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>contentWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>contentHeight</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>fullWidth</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>fullHeight</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>dpi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>contentWidth</name></expr>, <expr><name>contentHeight</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>, <argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fullWidth</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fullHeight</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>applyAspectRatio</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>edge</name></decl></parameter>, <parameter><decl><type><name>RECT</name><modifier>*</modifier></type> <name>area</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>dpi</name> <init>= <expr><name>USER_DEFAULT_SCREEN_DPI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>ratio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>window</name><operator>-&gt;</operator><name>numer</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>window</name><operator>-&gt;</operator><name>denom</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dpi</name> <operator>=</operator> <call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>getFullWindowSize</name><argument_list>(<argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yoff</name></expr></argument>, <argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edge</name> <operator>==</operator> <name>WMSZ_LEFT</name> <operator>||</operator> <name>edge</name> <operator>==</operator> <name>WMSZ_BOTTOMLEFT</name> <operator>||</operator>
<name>edge</name> <operator>==</operator> <name>WMSZ_RIGHT</name> <operator>||</operator> <name>edge</name> <operator>==</operator> <name>WMSZ_BOTTOMRIGHT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>bottom</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>yoff</name> <operator>+</operator>
<operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>area</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>area</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name>xoff</name><operator>)</operator> <operator>/</operator> <name>ratio</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>edge</name> <operator>==</operator> <name>WMSZ_TOPLEFT</name> <operator>||</operator> <name>edge</name> <operator>==</operator> <name>WMSZ_TOPRIGHT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>yoff</name> <operator>-</operator>
<operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>area</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>area</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name>xoff</name><operator>)</operator> <operator>/</operator> <name>ratio</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>edge</name> <operator>==</operator> <name>WMSZ_TOP</name> <operator>||</operator> <name>edge</name> <operator>==</operator> <name>WMSZ_BOTTOM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name>xoff</name> <operator>+</operator>
<operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>area</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name><name>area</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name>yoff</name><operator>)</operator> <operator>*</operator> <name>ratio</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>updateCursorImage</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_NORMAL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><call><name>LoadCursorW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>updateClipRect</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>clipRect</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clipRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>clipRect</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>clipRect</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClipCursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clipRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ClipCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>enableRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RAWINPUTDEVICE</name></type> <name>rid</name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterRawInputDevices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to register raw input device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>disableRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RAWINPUTDEVICE</name></type> <name>rid</name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><name>RIDEV_REMOVE</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterRawInputDevices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to remove raw input device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>disableCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>restoreCursorPosX</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>restoreCursorPosY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwCenterCursorInContentArea</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateClipRect</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>enableCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateClipRect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformSetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>restoreCursorPosX</name></name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>restoreCursorPosY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>GLFWbool</name></type> <name>cursorInContentArea</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WindowFromPoint</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>area</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>area</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>PtInRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>updateWindowStyles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_POPUP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>SWP_FRAMECHANGED</name> <operator>|</operator> <name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>updateFramebufferTransparency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>enabled</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindowsVistaOrGreater</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>DwmIsCompositionEnabled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>enabled</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HRGN</name></type> <name>region</name> <init>= <expr><call><name>CreateRectRgn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWM_BLURBEHIND</name></type> <name>bb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bb</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>DWM_BB_ENABLE</name> <operator>|</operator> <name>DWM_BB_BLURREGION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>.</operator><name>hRgnBlur</name></name> <operator>=</operator> <name>region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>.</operator><name>fEnable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>DwmEnableBlurBehindWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>









<decl_stmt><decl><type><name>LONG</name></type> <name>exStyle</name> <init>= <expr><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>exStyle</name> <operator>|=</operator> <name>WS_EX_LAYERED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>SetLayeredWindowAttributes</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><call><name>RGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>LWA_COLORKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>LONG</name></type> <name>exStyle</name> <init>= <expr><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>exStyle</name> <operator>&amp;=</operator> <operator>~</operator><name>WS_EX_LAYERED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RedrawWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RDW_ERASE</name> <operator>|</operator> <name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>getKeyMods</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mods</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_SHIFT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_CONTROL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_LWIN</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_RWIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_SUPER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CAPITAL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_CAPS_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_NUMLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>GLFW_MOD_NUM_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>mods</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fitToMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name> <init>= <expr><block>{ <expr>sizeof<operator>(</operator><name>mi</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOCOPYBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>acquireMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>acquiredMonitorCount</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetThreadExecutionState</name><argument_list>(<argument><expr><name>ES_CONTINUOUS</name> <operator>|</operator> <name>ES_DISPLAY_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>IsWindowsXPOrGreater</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_GETMOUSETRAILS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>mouseTrailSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_SETMOUSETRAILS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>acquiredMonitorCount</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwSetVideoModeWin32</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>videoMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputMonitorWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>releaseMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>acquiredMonitorCount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>acquiredMonitorCount</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetThreadExecutionState</name><argument_list>(<argument><expr><name>ES_CONTINUOUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IsWindowsXPOrGreater</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_SETMOUSETRAILS</name></expr></argument>, <argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>mouseTrailSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputMonitorWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwRestoreVideoModeWin32</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>windowProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,
<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><call><name>GetPropW</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><literal type="string">L"GLFW"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition>
<block>{<block_content>



<switch>switch <condition>(<expr><name>uMsg</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WM_NCCREATE</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EnableNonClientDpiScaling</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_DISPLAYCHANGE</name></expr>:</case>
<expr_stmt><expr><call><name>_glfwPollMonitorsWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>WM_DEVICECHANGE</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>DBT_DEVICEARRIVAL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DEV_BROADCAST_HDR</name><modifier>*</modifier></type> <name>dbh</name> <init>= <expr><operator>(</operator><name>DEV_BROADCAST_HDR</name><operator>*</operator><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbh</name> <operator>&amp;&amp;</operator> <name><name>dbh</name><operator>-&gt;</operator><name>dbch_devicetype</name></name> <operator>==</operator> <name>DBT_DEVTYP_DEVICEINTERFACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwDetectJoystickConnectionWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>DBT_DEVICEREMOVECOMPLETE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DEV_BROADCAST_HDR</name><modifier>*</modifier></type> <name>dbh</name> <init>= <expr><operator>(</operator><name>DEV_BROADCAST_HDR</name><operator>*</operator><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbh</name> <operator>&amp;&amp;</operator> <name><name>dbh</name><operator>-&gt;</operator><name>dbch_devicetype</name></name> <operator>==</operator> <name>DBT_DEVTYP_DEVICEINTERFACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwDetectJoystickDisconnectionWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProcW</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>uMsg</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WM_MOUSEACTIVATE</name></expr>:</case>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WM_LBUTTONDOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTCLIENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>frameAction</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_CAPTURECHANGED</name></expr>:</case>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>lParam</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>frameAction</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>frameAction</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_SETFOCUS</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>frameAction</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_KILLFOCUS</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>autoIconify</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwPlatformIconifyWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowFocus</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_SYSCOMMAND</name></expr>:</case>
<block>{<block_content>
<switch>switch <condition>(<expr><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SC_SCREENSAVE</name></expr>:</case>
<case>case <expr><name>SC_MONITORPOWER</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block>


<case>case <expr><name>SC_KEYMENU</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>keymenu</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_CLOSE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputWindowCloseRequest</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_INPUTLANGCHANGE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwUpdateKeyNamesWin32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_CHAR</name></expr>:</case>
<case>case <expr><name>WM_SYSCHAR</name></expr>:</case>
<case>case <expr><name>WM_UNICHAR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWbool</name></type> <name>plain</name> <init>= <expr><operator>(</operator><name>uMsg</name> <operator>!=</operator> <name>WM_SYSCHAR</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_UNICHAR</name> <operator>&amp;&amp;</operator> <name>wParam</name> <operator>==</operator> <name>UNICODE_NOCHAR</name></expr>)</condition>
<block>{<block_content>



<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputChar</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>wParam</name></expr></argument>, <argument><expr><call><name>getKeyMods</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_SYSCHAR</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>keymenu</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_KEYDOWN</name></expr>:</case>
<case>case <expr><name>WM_SYSKEYDOWN</name></expr>:</case>
<case>case <expr><name>WM_KEYUP</name></expr>:</case>
<case>case <expr><name>WM_SYSKEYUP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>scancode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>action</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>KF_UP</name><operator>)</operator></expr> ?</condition><then> <expr><name>GLFW_RELEASE</name></expr> </then><else>: <expr><name>GLFW_PRESS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mods</name> <init>= <expr><call><name>getKeyMods</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>scancode</name> <operator>=</operator> <operator>(</operator><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>KF_EXTENDED</name> <operator>|</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scancode</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>scancode</name> <operator>=</operator> <call><name>MapVirtualKeyW</name><argument_list>(<argument><expr><operator>(</operator><name>UINT</name><operator>)</operator> <name>wParam</name></expr></argument>, <argument><expr><name>MAPVK_VK_TO_VSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>VK_CONTROL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>KF_EXTENDED</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_RIGHT_CONTROL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<decl_stmt><decl><type><name>MSG</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>time</name> <init>= <expr><call><name>GetMessageTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PeekMessageW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_NOREMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_KEYDOWN</name> <operator>||</operator>
<name><name>next</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_SYSKEYDOWN</name> <operator>||</operator>
<name><name>next</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_KEYUP</name> <operator>||</operator>
<name><name>next</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_SYSKEYUP</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>.</operator><name>wParam</name></name> <operator>==</operator> <name>VK_MENU</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>HIWORD</name><argument_list>(<argument><expr><name><name>next</name><operator>.</operator><name>lParam</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>KF_EXTENDED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>next</name><operator>.</operator><name>time</name></name> <operator>==</operator> <name>time</name></expr>)</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>key</name> <operator>=</operator> <name>GLFW_KEY_LEFT_CONTROL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>VK_PROCESSKEY</name></expr>)</condition>
<block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>GLFW_RELEASE</name> <operator>&amp;&amp;</operator> <name>wParam</name> <operator>==</operator> <name>VK_SHIFT</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_KEY_LEFT_SHIFT</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_KEY_RIGHT_SHIFT</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>VK_SNAPSHOT</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>GLFW_PRESS</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>GLFW_RELEASE</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_LBUTTONDOWN</name></expr>:</case>
<case>case <expr><name>WM_RBUTTONDOWN</name></expr>:</case>
<case>case <expr><name>WM_MBUTTONDOWN</name></expr>:</case>
<case>case <expr><name>WM_XBUTTONDOWN</name></expr>:</case>
<case>case <expr><name>WM_LBUTTONUP</name></expr>:</case>
<case>case <expr><name>WM_RBUTTONUP</name></expr>:</case>
<case>case <expr><name>WM_MBUTTONUP</name></expr>:</case>
<case>case <expr><name>WM_XBUTTONUP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>button</name></decl>, <decl><type ref="prev"/><name>action</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_LBUTTONDOWN</name> <operator>||</operator> <name>uMsg</name> <operator>==</operator> <name>WM_LBUTTONUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>GLFW_MOUSE_BUTTON_LEFT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_RBUTTONDOWN</name> <operator>||</operator> <name>uMsg</name> <operator>==</operator> <name>WM_RBUTTONUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>GLFW_MOUSE_BUTTON_RIGHT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_MBUTTONDOWN</name> <operator>||</operator> <name>uMsg</name> <operator>==</operator> <name>WM_MBUTTONUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>GLFW_MOUSE_BUTTON_MIDDLE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>GET_XBUTTON_WPARAM</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XBUTTON1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>GLFW_MOUSE_BUTTON_4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>GLFW_MOUSE_BUTTON_5</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_LBUTTONDOWN</name> <operator>||</operator> <name>uMsg</name> <operator>==</operator> <name>WM_RBUTTONDOWN</name> <operator>||</operator>
<name>uMsg</name> <operator>==</operator> <name>WM_MBUTTONDOWN</name> <operator>||</operator> <name>uMsg</name> <operator>==</operator> <name>WM_XBUTTONDOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>GLFW_PRESS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>GLFW_RELEASE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetCapture</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputMouseClick</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><call><name>getKeyMods</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>mouseButtons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>GLFW_MOUSE_BUTTON_LAST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseCapture</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_XBUTTONDOWN</name> <operator>||</operator> <name>uMsg</name> <operator>==</operator> <name>WM_XBUTTONUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_MOUSEMOVE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>cursorTracked</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>TRACKMOUSEEVENT</name></type> <name>tme</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tme</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tme</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tme</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>TME_LEAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>hwndTrack</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TrackMouseEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>cursorTracked</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputCursorEnter</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dx</name> <init>= <expr><name>x</name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosX</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dy</name> <init>= <expr><name>y</name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosY</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name> <operator>+</operator> <name>dx</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name> <operator>+</operator> <name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosY</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_INPUT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRAWINPUT</name></type> <name>ri</name> <init>= <expr><operator>(</operator><name>HRAWINPUT</name><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAWINPUT</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>rawMouseMotion</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetRawInputData</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>RID_INPUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAWINPUTHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>UINT</name><operator>)</operator> <name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInputSize</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInput</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInputSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInputSize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetRawInputData</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>RID_INPUT</name></expr></argument>,
<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInput</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAWINPUTHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>UINT</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to retrieve raw input data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>rawInput</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name><operator>.</operator><name>usFlags</name></name> <operator>&amp;</operator> <name>MOUSE_MOVE_ABSOLUTE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name><operator>.</operator><name>lLastX</name></name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name><operator>.</operator><name>lLastY</name></name> <operator>-</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosY</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name><operator>.</operator><name>lLastX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name><operator>.</operator><name>lLastY</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosX</name></name> <operator>+</operator> <name>dx</name></expr></argument>,
<argument><expr><name><name>window</name><operator>-&gt;</operator><name>virtualCursorPosY</name></name> <operator>+</operator> <name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosX</name></name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosY</name></name> <operator>+=</operator> <name>dy</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_MOUSELEAVE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>cursorTracked</name></name> <operator>=</operator> <name>GLFW_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputCursorEnter</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_MOUSEWHEEL</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputScroll</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>SHORT</name><operator>)</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>WHEEL_DELTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_MOUSEHWHEEL</name></expr>:</case>
<block>{<block_content>


<expr_stmt><expr><call><name>_glfwInputScroll</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><operator>(</operator><name>SHORT</name><operator>)</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>WHEEL_DELTA</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_ENTERSIZEMOVE</name></expr>:</case>
<case>case <expr><name>WM_ENTERMENULOOP</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>frameAction</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_EXITSIZEMOVE</name></expr>:</case>
<case>case <expr><name>WM_EXITMENULOOP</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>frameAction</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>cursorMode</name></name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_SIZE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWbool</name></type> <name>iconified</name> <init>= <expr><name>wParam</name> <operator>==</operator> <name>SIZE_MINIMIZED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWbool</name></type> <name>maximized</name> <init>= <expr><name>wParam</name> <operator>==</operator> <name>SIZE_MAXIMIZED</name> <operator>||</operator>
<operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>maximized</name></name> <operator>&amp;&amp;</operator>
<name>wParam</name> <operator>!=</operator> <name>SIZE_RESTORED</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateClipRect</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>iconified</name></name> <operator>!=</operator> <name>iconified</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputWindowIconify</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>iconified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>maximized</name></name> <operator>!=</operator> <name>maximized</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_glfwInputWindowMaximize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>maximized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputFramebufferSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>iconified</name></name> <operator>!=</operator> <name>iconified</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iconified</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fitToMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>iconified</name></name> <operator>=</operator> <name>iconified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>maximized</name></name> <operator>=</operator> <name>maximized</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_MOVE</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateClipRect</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>_glfwInputWindowPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>,
<argument><expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_SIZING</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>numer</name></name> <operator>==</operator> <name>GLFW_DONT_CARE</name> <operator>||</operator>
<name><name>window</name><operator>-&gt;</operator><name>denom</name></name> <operator>==</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>applyAspectRatio</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>wParam</name></expr></argument>, <argument><expr><operator>(</operator><name>RECT</name><operator>*</operator><operator>)</operator> <name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_GETMINMAXINFO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>dpi</name> <init>= <expr><name>USER_DEFAULT_SCREEN_DPI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MINMAXINFO</name><modifier>*</modifier></type> <name>mmi</name> <init>= <expr><operator>(</operator><name>MINMAXINFO</name><operator>*</operator><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dpi</name> <operator>=</operator> <call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>getFullWindowSize</name><argument_list>(<argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yoff</name></expr></argument>, <argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator>
<name><name>window</name><operator>-&gt;</operator><name>minheight</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMinTrackSize</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>minwidth</name></name> <operator>+</operator> <name>xoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMinTrackSize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>minheight</name></name> <operator>+</operator> <name>yoff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name> <operator>&amp;&amp;</operator>
<name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name> <operator>!=</operator> <name>GLFW_DONT_CARE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMaxTrackSize</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>maxwidth</name></name> <operator>+</operator> <name>xoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMaxTrackSize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>maxheight</name></name> <operator>+</operator> <name>yoff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>HMONITOR</name></type> <name>mh</name> <init>= <expr><call><name>MonitorFromWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>MONITOR_DEFAULTTONEAREST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMaxPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMaxPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMaxSize</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mmi</name><operator>-&gt;</operator><name>ptMaxSize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcWork</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_PAINT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputWindowDamage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_ERASEBKGND</name></expr>:</case>
<block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_NCACTIVATE</name></expr>:</case>
<case>case <expr><name>WM_NCPAINT</name></expr>:</case>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_DWMCOMPOSITIONCHANGED</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>transparent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateFramebufferTransparency</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<case>case <expr><name>WM_GETDPISCALEDSIZE</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>scaleToMonitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10CreatorsUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>source</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>target</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIZE</name><modifier>*</modifier></type> <name>size</name> <init>= <expr><operator>(</operator><name>SIZE</name><operator>*</operator><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>size</name><operator>-&gt;</operator><name>cx</name></name> <operator>+=</operator> <operator>(</operator><name><name>target</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>target</name><operator>.</operator><name>left</name></name><operator>)</operator> <operator>-</operator>
<operator>(</operator><name><name>source</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>source</name><operator>.</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>-&gt;</operator><name>cy</name></name> <operator>+=</operator> <operator>(</operator><name><name>target</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>target</name><operator>.</operator><name>top</name></name><operator>)</operator> <operator>-</operator>
<operator>(</operator><name><name>source</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>source</name><operator>.</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_DPICHANGED</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>xscale</name> <init>= <expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>USER_DEFAULT_SCREEN_DPI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>yscale</name> <init>= <expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>USER_DEFAULT_SCREEN_DPI</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10CreatorsUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name><modifier>*</modifier></type> <name>suggested</name> <init>= <expr><operator>(</operator><name>RECT</name><operator>*</operator><operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,
<argument><expr><name><name>suggested</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>suggested</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>suggested</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>suggested</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>suggested</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name><name>suggested</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,
<argument><expr><name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowContentScale</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>xscale</name></expr></argument>, <argument><expr><name>yscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_SETCURSOR</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTCLIENT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_DROPFILES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>HDROP</name></type> <name>drop</name> <init>= <expr><operator>(</operator><name>HDROP</name><operator>)</operator> <name>wParam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name> <init>= <expr><call><name>DragQueryFileW</name><argument_list>(<argument><expr><name>drop</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>paths</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>DragQueryPoint</name><argument_list>(<argument><expr><name>drop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwInputCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UINT</name></type> <name>length</name> <init>= <expr><call><name>DragQueryFileW</name><argument_list>(<argument><expr><name>drop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DragQueryFileW</name><argument_list>(<argument><expr><name>drop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_glfwCreateUTF8FromWideStringWin32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>_glfwInputDrop</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DragFinish</name><argument_list>(<argument><expr><name>drop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProcW</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>createNativeWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>, <decl><type ref="prev"/><name>ypos</name></decl>, <decl><type ref="prev"/><name>fullWidth</name></decl>, <decl><type ref="prev"/><name>fullHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name><modifier>*</modifier></type> <name>wideTitle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>exStyle</name> <init>= <expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLFWvidmode</name></type> <name>mode</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>_glfwPlatformGetMonitorPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetVideoMode</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fullWidth</name> <operator>=</operator> <name><name>mode</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fullHeight</name> <operator>=</operator> <name><name>mode</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>xpos</name> <operator>=</operator> <name>CW_USEDEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ypos</name> <operator>=</operator> <name>CW_USEDEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>maximized</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>maximized</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>-&gt;</operator><name>maximized</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_MAXIMIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>getFullWindowSize</name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>,
<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fullWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fullHeight</name></expr></argument>,
<argument><expr><name>USER_DEFAULT_SCREEN_DPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>wideTitle</name> <operator>=</operator> <call><name>_glfwCreateWideStringFromUTF8Win32</name><argument_list>(<argument><expr><name><name>wndconfig</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wideTitle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>CreateWindowExW</name><argument_list>(<argument><expr><name>exStyle</name></expr></argument>,
<argument><expr><name>_GLFW_WNDCLASSNAME</name></expr></argument>,
<argument><expr><name>wideTitle</name></expr></argument>,
<argument><expr><name>style</name></expr></argument>,
<argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>,
<argument><expr><name>fullWidth</name></expr></argument>, <argument><expr><name>fullHeight</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wideTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to create window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetPropW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">L"GLFW"</literal></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsWindows7OrGreater</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ChangeWindowMessageFilterEx</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>WM_DROPFILES</name></expr></argument>, <argument><expr><name>MSGFLT_ALLOW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ChangeWindowMessageFilterEx</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>WM_COPYDATA</name></expr></argument>, <argument><expr><name>MSGFLT_ALLOW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ChangeWindowMessageFilterEx</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>WM_COPYGLOBALDATA</name></expr></argument>, <argument><expr><name>MSGFLT_ALLOW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>scaleToMonitor</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>scaleToMonitor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>keymenu</name></name> <operator>=</operator> <name><name>wndconfig</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>keymenu</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>wndconfig</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><name><name>wndconfig</name><operator>-&gt;</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOWPLACEMENT</name></type> <name>wp</name> <init>= <expr><block>{ <expr>sizeof<operator>(</operator><name>wp</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wndconfig</name><operator>-&gt;</operator><name>scaleToMonitor</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>xscale</name></decl>, <decl><type ref="prev"/><name>yscale</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowContentScale</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xscale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>*</operator> <name>xscale</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>*</operator> <name>yscale</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>POINT</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>GetWindowPlacement</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>.</operator><name>rcNormalPosition</name></name> <operator>=</operator> <name>rect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>.</operator><name>showCmd</name></name> <operator>=</operator> <name>SW_HIDE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPlacement</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DragAcceptFiles</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fbconfig</name><operator>-&gt;</operator><name>transparent</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>updateFramebufferTransparency</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>transparent</name></name> <operator>=</operator> <name>GLFW_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>GLFWbool</name></type> <name>_glfwRegisterWindowClassWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WNDCLASSEXW</name></type> <name>wc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_HREDRAW</name> <operator>|</operator> <name>CS_VREDRAW</name> <operator>|</operator> <name>CS_OWNDC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <operator>(</operator><name>WNDPROC</name><operator>)</operator> <name>windowProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <call><name>GetModuleHandleW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <call><name>LoadCursorW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>_GLFW_WNDCLASSNAME</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <call><name>LoadImageW</name><argument_list>(<argument><expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">L"GLFW_ICON"</literal></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LR_DEFAULTSIZE</name> <operator>|</operator> <name>LR_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>.</operator><name>hIcon</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <call><name>LoadImageW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>IDI_APPLICATION</name></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LR_DEFAULTSIZE</name> <operator>|</operator> <name>LR_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterClassExW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to register window class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_glfwUnregisterWindowClassWin32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UnregisterClassW</name><argument_list>(<argument><expr><name>_GLFW_WNDCLASSNAME</name></expr></argument>, <argument><expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>_glfwPlatformCreateWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWwndconfig</name><modifier>*</modifier></type> <name>wndconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWctxconfig</name><modifier>*</modifier></type> <name>ctxconfig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>_GLFWfbconfig</name><modifier>*</modifier></type> <name>fbconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>createNativeWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>wndconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>GLFW_NO_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_NATIVE_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitWGL</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextWGL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_EGL_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitEGL</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextEGL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctxconfig</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>GLFW_OSMESA_CONTEXT_API</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwInitOSMesa</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_glfwCreateContextOSMesa</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctxconfig</name></expr></argument>, <argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformShowWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_glfwPlatformFocusWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fitToMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RemovePropW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">L"GLFW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>bigIcon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>bigIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>smallIcon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>smallIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowTitle</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name><modifier>*</modifier></type> <name>wideTitle</name> <init>= <expr><call><name>_glfwCreateWideStringFromUTF8Win32</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wideTitle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetWindowTextW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>wideTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wideTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowIcon</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>images</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HICON</name></type> <name>bigIcon</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>smallIcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>bigImage</name> <init>= <expr><call><name>chooseImage</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>images</name></expr></argument>,
<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXICON</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYICON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>smallImage</name> <init>= <expr><call><name>chooseImage</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>images</name></expr></argument>,
<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXSMICON</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSMICON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bigIcon</name> <operator>=</operator> <call><name>createIcon</name><argument_list>(<argument><expr><name>bigImage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>smallIcon</name> <operator>=</operator> <call><name>createIcon</name><argument_list>(<argument><expr><name>smallImage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GLFW_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>bigIcon</name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator> <call><name>GetClassLongPtrW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GCLP_HICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>smallIcon</name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator> <call><name>GetClassLongPtrW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GCLP_HICONSM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>, <argument><expr><name>ICON_BIG</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>bigIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>, <argument><expr><name>ICON_SMALL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>smallIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>bigIcon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>bigIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>smallIcon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>smallIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>bigIcon</name></name> <operator>=</operator> <name>bigIcon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>smallIcon</name></name> <operator>=</operator> <name>smallIcon</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name> <init>= <expr><block>{ <expr><name>xpos</name></expr>, <expr><name>ypos</name></expr>, <expr><name>xpos</name></expr>, <expr><name>ypos</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>area</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>area</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>area</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fitToMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>width</name></expr>, <expr><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOOWNERZORDER</name> <operator>|</operator> <name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowSizeLimits</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>minwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minheight</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxheight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>area</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>minwidth</name> <operator>==</operator> <name>GLFW_DONT_CARE</name> <operator>||</operator> <name>minheight</name> <operator>==</operator> <name>GLFW_DONT_CARE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>maxwidth</name> <operator>==</operator> <name>GLFW_DONT_CARE</name> <operator>||</operator> <name>maxheight</name> <operator>==</operator> <name>GLFW_DONT_CARE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MoveWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>area</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>area</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>area</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>area</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>area</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>area</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>numer</name> <operator>==</operator> <name>GLFW_DONT_CARE</name> <operator>||</operator> <name>denom</name> <operator>==</operator> <name>GLFW_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>applyAspectRatio</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>WMSZ_BOTTOMRIGHT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MoveWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>area</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>area</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>area</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>area</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>area</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetFramebufferSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowFrameSize</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <operator>-</operator><name><name>rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <operator>-</operator><name><name>rect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bottom</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetWindowContentScale</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xscale</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>yscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HANDLE</name></type> <name>handle</name> <init>= <expr><call><name>MonitorFromWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>MONITOR_DEFAULTTONEAREST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwGetMonitorContentScaleWin32</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>xscale</name></expr></argument>, <argument><expr><name>yscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformIconifyWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SW_MINIMIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformRestoreWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SW_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformMaximizeWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SW_MAXIMIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformShowWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SW_SHOWNA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformHideWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformRequestWindowAttention</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FlashWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformFocusWindow</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BringWindowToTop</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>_GLFWmonitor</name><modifier>*</modifier></type> <name>monitor</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refreshRate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name> <operator>==</operator> <name>monitor</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>monitor</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fitToMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name> <init>= <expr><block>{ <expr><name>xpos</name></expr>, <expr><name>ypos</name></expr>, <expr><name>xpos</name> <operator>+</operator> <name>width</name></expr>, <expr><name>ypos</name> <operator>+</operator> <name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>SWP_NOCOPYBITS</name> <operator>|</operator> <name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputWindowMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name> <init>= <expr><block>{ <expr>sizeof<operator>(</operator><name>mi</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>flags</name> <init>= <expr><name>SWP_SHOWWINDOW</name> <operator>|</operator> <name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOCOPYBITS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><name>WS_OVERLAPPEDWINDOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWP_FRAMECHANGED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>acquireMonitor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>monitor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name> <init>= <expr><block>{ <expr><name>xpos</name></expr>, <expr><name>ypos</name></expr>, <expr><name>xpos</name> <operator>+</operator> <name>width</name></expr>, <expr><name>ypos</name> <operator>+</operator> <name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>flags</name> <init>= <expr><name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOCOPYBITS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>decorated</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><name>WS_POPUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWP_FRAMECHANGED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>floating</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>after</name> <operator>=</operator> <name>HWND_TOPMOST</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>after</name> <operator>=</operator> <name>HWND_NOTOPMOST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_glfwIsWindows10AnniversaryUpdateOrGreaterWin32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectExForDpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetDpiForWindow</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>getWindowStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>getWindowExStyle</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>after</name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowFocused</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <call><name>GetActiveWindow</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowIconified</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>IsIconic</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowVisible</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>IsWindowVisible</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowMaximized</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>IsZoomed</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformWindowHovered</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cursorInContentArea</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformFramebufferTransparent</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>enabled</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>transparent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindowsVistaOrGreater</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>DwmIsCompositionEnabled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>enabled</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowResizable</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>updateWindowStyles</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowDecorated</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>updateWindowStyles</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowFloating</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HWND</name></type> <name>after</name> <init>= <expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><name>HWND_TOPMOST</name></expr> </then><else>: <expr><name>HWND_NOTOPMOST</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>after</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>_glfwPlatformGetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BYTE</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>WS_EX_LAYERED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>GetLayeredWindowAttributes</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LWA_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>alpha</name> <operator>/</operator> <literal type="number">255.f</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1.f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetWindowOpacity</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opacity</name> <operator>&lt;</operator> <literal type="number">1.f</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name></type> <name>alpha</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>)</operator> <operator>(</operator><literal type="number">255</literal> <operator>*</operator> <name>opacity</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_EX_LAYERED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetLayeredWindowAttributes</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>LWA_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><call><name>GetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><name>WS_EX_LAYERED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongW</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetRawMouseMotion</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>GLFWbool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>!=</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableRawMouseMotion</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GLFWbool</name></type> <name>_glfwPlatformRawMouseMotionSupported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformPollEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>PeekMessageW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_QUIT</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>windowListHead</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputWindowCloseRequest</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessageW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>








<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetActiveWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>GetPropW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">L"GLFW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>keys</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>VK_LSHIFT</name></expr>, <expr><name>GLFW_KEY_LEFT_SHIFT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_RSHIFT</name></expr>, <expr><name>GLFW_KEY_RIGHT_SHIFT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_LWIN</name></expr>, <expr><name>GLFW_KEY_LEFT_SUPER</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_RWIN</name></expr>, <expr><name>GLFW_KEY_RIGHT_SUPER</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vk</name> <init>= <expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name> <init>= <expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scancode</name> <init>= <expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>scancodes</name><index>[<expr><name>key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>key</name></expr>]</index></name> <operator>!=</operator> <name>GLFW_PRESS</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_glfwInputKey</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>, <argument><expr><name>GLFW_RELEASE</name></expr></argument>, <argument><expr><call><name>getKeyMods</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_glfwPlatformGetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosX</name></name> <operator>!=</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosY</name></name> <operator>!=</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwPlatformSetCursorPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformWaitEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>WaitMessage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformPollEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformWaitEventsTimeout</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MsgWaitForMultipleObjects</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><name>timeout</name> <operator>*</operator> <literal type="number">1e3</literal><operator>)</operator></expr></argument>, <argument><expr><name>QS_ALLEVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_glfwPlatformPollEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformPostEmptyEvent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>, <argument><expr><name>WM_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ScreenToClient</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursorPos</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name> <init>= <expr><block>{ <expr><operator>(</operator><name>int</name><operator>)</operator> <name>xpos</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator> <name>ypos</name></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosX</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>lastCursorPosY</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetCursorPos</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursorMode</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GLFW_CURSOR_DISABLED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_glfwPlatformWindowFocused</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>disableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>disabledCursorWindow</name></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enableCursor</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>cursorInContentArea</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetScancodeName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>scancode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>scancode</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>KF_EXTENDED</name> <operator>|</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name> <operator>==</operator> <name>GLFW_KEY_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Invalid scancode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keynames</name><index>[<expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>keycodes</name><index>[<expr><name>scancode</name></expr>]</index></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformGetKeyScancode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>scancodes</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformCreateCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLFWimage</name><modifier>*</modifier></type> <name>image</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xhot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yhot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>HCURSOR</name><operator>)</operator> <call><name>createIcon</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>xhot</name></expr></argument>, <argument><expr><name>yhot</name></expr></argument>, <argument><expr><name>GLFW_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformCreateStandardCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_ARROW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_NORMAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_IBEAM_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_IBEAM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_CROSSHAIR_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_CROSS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_POINTING_HAND_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_HAND</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_EW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_SIZEWE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NS_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_SIZENS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NWSE_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_SIZENWSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_NESW_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_SIZENESW</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_RESIZE_ALL_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_SIZEALL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>==</operator> <name>GLFW_NOT_ALLOWED_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>OCR_NO</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Win32: Unknown standard cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>LoadImageW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>MAKEINTRESOURCEW</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_CURSOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>LR_DEFAULTSIZE</name> <operator>|</operator> <name>LR_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to create standard cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>GLFW_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformDestroyCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><operator>(</operator><name>HICON</name><operator>)</operator> <name><name>cursor</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetCursor</name><parameter_list>(<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>_GLFWcursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cursorInContentArea</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateCursorImage</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformSetClipboardString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>characterCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>characterCount</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>characterCount</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GMEM_MOVEABLE</name></expr></argument>, <argument><expr><name>characterCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to allocate global handle for clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>GlobalLock</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to lock global handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>characterCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenClipboard</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to open clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EmptyClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetClipboardData</name><argument_list>(<argument><expr><name>CF_UNICODETEXT</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_glfwPlatformGetClipboardString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenClipboard</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>helperWindowHandle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to open clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>GetClipboardData</name><argument_list>(<argument><expr><name>CF_UNICODETEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_FORMAT_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to convert clipboard to string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>GlobalLock</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputErrorWin32</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to lock global handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>clipboardString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>clipboardString</name></name> <operator>=</operator> <call><name>_glfwCreateUTF8FromWideStringWin32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>_glfw</name><operator>.</operator><name>win32</name><operator>.</operator><name>clipboardString</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_glfwPlatformGetRequiredInstanceExtensions</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>extensions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_surface</name></name> <operator>||</operator> <operator>!</operator><name><name>_glfw</name><operator>.</operator><name>vk</name><operator>.</operator><name>KHR_win32_surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>extensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"VK_KHR_surface"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extensions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"VK_KHR_win32_surface"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_glfwPlatformGetPhysicalDevicePresentationSupport</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>VkPhysicalDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>queuefamily</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR</name></type>
<name>vkGetPhysicalDeviceWin32PresentationSupportKHR</name> <init>=
<expr><operator>(</operator><name>PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkGetPhysicalDeviceWin32PresentationSupportKHR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkGetPhysicalDeviceWin32PresentationSupportKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Vulkan instance missing VK_KHR_win32_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GLFW_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vkGetPhysicalDeviceWin32PresentationSupportKHR</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>queuefamily</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VkResult</name></type> <name>_glfwPlatformCreateWindowSurface</name><parameter_list>(<parameter><decl><type><name>VkInstance</name></type> <name>instance</name></decl></parameter>,
<parameter><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name><modifier>*</modifier></type> <name>allocator</name></decl></parameter>,
<parameter><decl><type><name>VkSurfaceKHR</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VkResult</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkWin32SurfaceCreateInfoKHR</name></type> <name>sci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_vkCreateWin32SurfaceKHR</name></type> <name>vkCreateWin32SurfaceKHR</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vkCreateWin32SurfaceKHR</name> <operator>=</operator> <operator>(</operator><name>PFN_vkCreateWin32SurfaceKHR</name><operator>)</operator>
<call><name>vkGetInstanceProcAddr</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="string">"vkCreateWin32SurfaceKHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vkCreateWin32SurfaceKHR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_API_UNAVAILABLE</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Vulkan instance missing VK_KHR_win32_surface extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>hinstance</name></name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sci</name><operator>.</operator><name>hwnd</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vkCreateWin32SurfaceKHR</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sci</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_glfwInputError</name><argument_list>(<argument><expr><name>GLFW_PLATFORM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Win32: Failed to create Vulkan surface: %s"</literal></expr></argument>,
<argument><expr><call><name>_glfwGetVulkanResultString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>GLFWAPI</name> <name>HWND</name></type> <name>glfwGetWin32Window</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_GLFWwindow</name><modifier>*</modifier></type> <name>window</name> <init>= <expr><operator>(</operator><name>_GLFWwindow</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_GLFW_REQUIRE_INIT_OR_RETURN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>window</name><operator>-&gt;</operator><name>win32</name><operator>.</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
